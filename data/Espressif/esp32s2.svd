<?xml version="1.0" encoding="UTF-8"?>
<device xmlns:xs="http://www.w3.org/2001/XMLSchema-instance" schemaVersion="1.1" xs:noNamespaceSchemaLocation="CMSIS-SVD_Schema_1_1.xsd"><addressUnitBits>0x20</addressUnitBits>
<cpu>
  <dcachePresent>
    <dcachePresen></dcachePresen>
  </dcachePresent>
  <deviceNumInterrupts>0x0</deviceNumInterrupts>
  <dtcmPresent>
    <dtcmPresen></dtcmPresen>
  </dtcmPresent>
  <endian>little</endian>
  <fpuPresent>0x0</fpuPresent>
  <icachePresent>
    <icachePresen></icachePresen>
  </icachePresent>
  <itcmPresent>
    <itcmPresen></itcmPresen>
  </itcmPresent>
  <mpuPresent>0x0</mpuPresent>
  <name>Xtensa LX7</name>
  <nvicPrioBits>0x3</nvicPrioBits>
  <revision>r0p0</revision>
  <sauNumRegions>0x0</sauNumRegions>
  <vendorSystickConfig>0x0</vendorSystickConfig>
</cpu>
<description>32-bit MCU &amp; 2.4 GHz Wi-Fi</description>
<name>ESP32-S2</name>
<peripherals>
  <peripheral>
    <addressBlock>
      <offset>0x0</offset>
      <size>0xBC</size>
      <usage>registers</usage>
    </addressBlock>
    <baseAddress>0x6003A000</baseAddress>
    <description>AES (Advanced Encryption Standard) Accelerator</description>
    <groupName>AES</groupName>
    <interrupts>
      <interrupt>
        <name>AES</name>
        <value>0x38</value>
      </interrupt>
    </interrupts>
    <name>AES</name>
    <registers>
      <register>
        <addressOffset>0x40</addressOffset>
        <description>AES working mode configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Defines the operation type of the AES Accelerator operating under the Typical AES working mode.
            &amp;
            0x0(AES_EN_128): AES-EN-128 #
            0x1(AES_EN_192): AES-EN-192 #
            0x2(AES_EN_256): AES-EN-256 #
            0x4(AES_DE_128): AES-DE-128 #
            0x5(AES_DE_192): AES-DE-192 #
            0x6(AES_DE_256): AES-DE-256 
            &amp;</description>
            <name>MODE</name>
          </field>
        </fields>
        <name>MODE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x44</addressOffset>
        <description>Endian configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Defines the endianness of input and output texts.
            &amp;
            [1:0] key endian #
            [3:2] text_in endian or in_stream endian #
            [5:4] text_out endian or out_stream endian #
            &amp;</description>
            <name>ENDIAN</name>
          </field>
        </fields>
        <name>ENDIAN</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x48</addressOffset>
        <description>Operation start controlling register</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to 1 to start AES operation.</description>
            <name>TRIGGER</name>
          </field>
        </fields>
        <name>TRIGGER</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4C</addressOffset>
        <description>Operation status register</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Stores the working status of the AES Accelerator. For details, see Table 3 for Typical AES working mode and Table 9 for DMA AES working mode.
            For typical AES; 0 = idle; 1 = busy.
            For DMA-AES; 0 = idle; 1 = busy; 2 = calculation_done.</description>
            <name>STATE</name>
          </field>
        </fields>
        <name>STATE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x90</addressOffset>
        <description>DMA enable register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Defines the working mode of the AES Accelerator. For details, see Table 1.
            1'h0: typical AES operation
            1'h1: DMA-AES operation</description>
            <name>DMA_ENABLE</name>
          </field>
        </fields>
        <name>DMA_ENABLE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x94</addressOffset>
        <description>Block operation type register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Defines the operation type of the AES Accelerator operating under the DMA-AES working mode. For details, see Table 8.
            &amp;
            3'h0(BLOCK_MODE_ECB): ECB #
            3'h1(BLOCK_MODE_CBC): CBC #
            3'h2(BLOCK_MODE_OFB): OFB #
            3'h3(BLOCK_MODE_CTR): CTR #
            3'h4(BLOCK_MODE_CFB8): CFB-8 #
            3'h5(BLOCK_MODE_CFB128): CFB-128 #
            3'h6(BLOCK_MODE_GCM): GCM
            &amp;</description>
            <name>BLOCK_MODE</name>
          </field>
        </fields>
        <name>BLOCK_MODE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x98</addressOffset>
        <description>Block number configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the Block Number of plaintext or cipertext when the AES Accelerator operates under the DMA-AES working mode. For details, see Section 1.5.4.</description>
            <name>BLOCK_NUM</name>
          </field>
        </fields>
        <name>BLOCK_NUM</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9C</addressOffset>
        <description>Standard incrementing function register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Defines the Standard Incrementing Function for CTR block operation. Set this bit to 0 or 1 to choose INC 32 or INC 128 .</description>
            <name>INC_SEL</name>
          </field>
        </fields>
        <name>INC_SEL</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA0</addressOffset>
        <description>AAD block number configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the ADD Block Number for the GCM operation.</description>
            <name>AAD_BLOCK_NUM</name>
          </field>
        </fields>
        <name>AAD_BLOCK_NUM</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA4</addressOffset>
        <description>Remainder bit number of plaintext/ciphertext</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x7</bitWidth>
            <description>Stores the Remainder Bit Number for the GCM operation.</description>
            <name>REMAINDER_BIT_NUM</name>
          </field>
        </fields>
        <name>REMAINDER_BIT_NUM</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA8</addressOffset>
        <description>Operation continue controlling register</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to 1 to continue AES operation.</description>
            <name>CONTINUE_OP</name>
          </field>
        </fields>
        <name>CONTINUE_OP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAC</addressOffset>
        <description>DMA-AES interrupt clear register</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to 1 to clear AES interrupt.</description>
            <name>INT_CLR</name>
          </field>
        </fields>
        <name>INT_CLR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB0</addressOffset>
        <description>DMA-AES interrupt enable register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to 1 to enable AES interrupt and 0 to disable interrupt.</description>
            <name>INT_ENA</name>
          </field>
        </fields>
        <name>INT_ENA</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB4</addressOffset>
        <description>Version control register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1E</bitWidth>
            <description>Version control register</description>
            <name>DATE</name>
          </field>
        </fields>
        <name>DATE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x20190514</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB8</addressOffset>
        <description>Operation exit controlling register</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to 1 to exit AES operation. This register is only effective for DMA-AES operation.</description>
            <name>DMA_EXIT</name>
          </field>
        </fields>
        <name>DMA_EXIT</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x0</addressOffset>
        <description>AES key register %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores AES keys.</description>
            <name>KEY_0</name>
          </field>
        </fields>
        <name>KEY_0</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4</addressOffset>
        <description>AES key register %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores AES keys.</description>
            <name>KEY_0</name>
          </field>
        </fields>
        <name>KEY_1</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8</addressOffset>
        <description>AES key register %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores AES keys.</description>
            <name>KEY_0</name>
          </field>
        </fields>
        <name>KEY_2</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xC</addressOffset>
        <description>AES key register %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores AES keys.</description>
            <name>KEY_0</name>
          </field>
        </fields>
        <name>KEY_3</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x10</addressOffset>
        <description>AES key register %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores AES keys.</description>
            <name>KEY_0</name>
          </field>
        </fields>
        <name>KEY_4</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x14</addressOffset>
        <description>AES key register %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores AES keys.</description>
            <name>KEY_0</name>
          </field>
        </fields>
        <name>KEY_5</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x18</addressOffset>
        <description>AES key register %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores AES keys.</description>
            <name>KEY_0</name>
          </field>
        </fields>
        <name>KEY_6</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1C</addressOffset>
        <description>AES key register %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores AES keys.</description>
            <name>KEY_0</name>
          </field>
        </fields>
        <name>KEY_7</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x20</addressOffset>
        <description>Source data register %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the source data when the AES Accelerator operates in the Typical AES working mode.</description>
            <name>TEXT_IN_0</name>
          </field>
        </fields>
        <name>TEXT_IN_0</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x24</addressOffset>
        <description>Source data register %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the source data when the AES Accelerator operates in the Typical AES working mode.</description>
            <name>TEXT_IN_0</name>
          </field>
        </fields>
        <name>TEXT_IN_1</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x28</addressOffset>
        <description>Source data register %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the source data when the AES Accelerator operates in the Typical AES working mode.</description>
            <name>TEXT_IN_0</name>
          </field>
        </fields>
        <name>TEXT_IN_2</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2C</addressOffset>
        <description>Source data register %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the source data when the AES Accelerator operates in the Typical AES working mode.</description>
            <name>TEXT_IN_0</name>
          </field>
        </fields>
        <name>TEXT_IN_3</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x30</addressOffset>
        <description>Result data register %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the result data when the AES Accelerator operates in the Typical AES working mode.</description>
            <name>TEXT_OUT_0</name>
          </field>
        </fields>
        <name>TEXT_OUT_0</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x34</addressOffset>
        <description>Result data register %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the result data when the AES Accelerator operates in the Typical AES working mode.</description>
            <name>TEXT_OUT_0</name>
          </field>
        </fields>
        <name>TEXT_OUT_1</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x38</addressOffset>
        <description>Result data register %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the result data when the AES Accelerator operates in the Typical AES working mode.</description>
            <name>TEXT_OUT_0</name>
          </field>
        </fields>
        <name>TEXT_OUT_2</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3C</addressOffset>
        <description>Result data register %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the result data when the AES Accelerator operates in the Typical AES working mode.</description>
            <name>TEXT_OUT_0</name>
          </field>
        </fields>
        <name>TEXT_OUT_3</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x50</addressOffset>
        <description>initialization vector</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>This register stores the %sth 32-bit piece of 128-bit initialization vector</description>
            <name>IV_0</name>
          </field>
        </fields>
        <name>IV_0</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x54</addressOffset>
        <description>initialization vector</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>This register stores the %sth 32-bit piece of 128-bit initialization vector</description>
            <name>IV_0</name>
          </field>
        </fields>
        <name>IV_1</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x58</addressOffset>
        <description>initialization vector</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>This register stores the %sth 32-bit piece of 128-bit initialization vector</description>
            <name>IV_0</name>
          </field>
        </fields>
        <name>IV_2</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5C</addressOffset>
        <description>initialization vector</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>This register stores the %sth 32-bit piece of 128-bit initialization vector</description>
            <name>IV_0</name>
          </field>
        </fields>
        <name>IV_3</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x60</addressOffset>
        <description>GCM hash subkey</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>GCM hash subkey</description>
            <name>H_0</name>
          </field>
        </fields>
        <name>H_0</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x64</addressOffset>
        <description>GCM hash subkey</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>GCM hash subkey</description>
            <name>H_0</name>
          </field>
        </fields>
        <name>H_1</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x68</addressOffset>
        <description>GCM hash subkey</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>GCM hash subkey</description>
            <name>H_0</name>
          </field>
        </fields>
        <name>H_2</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x6C</addressOffset>
        <description>GCM hash subkey</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>GCM hash subkey</description>
            <name>H_0</name>
          </field>
        </fields>
        <name>H_3</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x70</addressOffset>
        <description>J0</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>This register stores the %sth 32-bit piece of 128-bit J0</description>
            <name>J0_0</name>
          </field>
        </fields>
        <name>J0_0</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x74</addressOffset>
        <description>J0</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>This register stores the %sth 32-bit piece of 128-bit J0</description>
            <name>J0_0</name>
          </field>
        </fields>
        <name>J0_1</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x78</addressOffset>
        <description>J0</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>This register stores the %sth 32-bit piece of 128-bit J0</description>
            <name>J0_0</name>
          </field>
        </fields>
        <name>J0_2</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x7C</addressOffset>
        <description>J0</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>This register stores the %sth 32-bit piece of 128-bit J0</description>
            <name>J0_0</name>
          </field>
        </fields>
        <name>J0_3</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x80</addressOffset>
        <description>T0</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>This register stores the %sth 32-bit piece of 128-bit T0</description>
            <name>T0_0</name>
          </field>
        </fields>
        <name>T0_0</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x84</addressOffset>
        <description>T0</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>This register stores the %sth 32-bit piece of 128-bit T0</description>
            <name>T0_0</name>
          </field>
        </fields>
        <name>T0_1</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x88</addressOffset>
        <description>T0</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>This register stores the %sth 32-bit piece of 128-bit T0</description>
            <name>T0_0</name>
          </field>
        </fields>
        <name>T0_2</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8C</addressOffset>
        <description>T0</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>This register stores the %sth 32-bit piece of 128-bit T0</description>
            <name>T0_0</name>
          </field>
        </fields>
        <name>T0_3</name>
        <size>0x20</size>
      </register>
    </registers>
    <resetMask>0xFFFFFFFF</resetMask>
    <resetValue>0x0</resetValue>
  </peripheral>
</peripherals>
<peripherals>
  <peripheral>
    <addressBlock>
      <offset>0x0</offset>
      <size>0x68</size>
      <usage>registers</usage>
    </addressBlock>
    <baseAddress>0x3F440000</baseAddress>
    <description>Successive Approximation Register Analog to Digital Converter</description>
    <groupName>APB_SARADC</groupName>
    <interrupts>
      <interrupt>
        <name>APB_ADC</name>
        <value>0x59</value>
      </interrupt>
    </interrupts>
    <name>APB_SARADC</name>
    <registers>
      <register>
        <addressOffset>0x0</addressOffset>
        <description>DIG ADC common configuration</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: select FSM to start SAR ADC. 1: select software to start SAR ADC.</description>
            <name>START_FORCE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Start SAR ADC by software.</description>
            <name>START</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>0: single-channel scan mode. 1: double-channel scan mode. 2:
            alternate-channel scan mode.</description>
            <name>WORK_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: select SAR ADC1. 1: select SAR ADC2, only work for single-channel scan mode.</description>
            <name>SAR_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SAR clock gate enable bit.</description>
            <name>SAR_CLK_GATED</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>SAR clock divider</description>
            <name>SAR_CLK_DIV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>0 ~ 15 means length 1 ~ 16</description>
            <name>SAR1_PATT_LEN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>0 ~ 15 means length 1 ~ 16</description>
            <name>SAR2_PATT_LEN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Clear the pointer of pattern table for DIG ADC1 CTRL.</description>
            <name>SAR1_PATT_P_CLEAR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Clear the pointer of pattern table for DIG ADC2 CTRL.</description>
            <name>SAR2_PATT_P_CLEAR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: sar_sel will be coded to the MSB of the 16-bit output data, in this case the resolution should not be larger than 11 bits.</description>
            <name>DATA_SAR_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: I2S input data is from SAR ADC (for DMA), 0: I2S input data is from GPIO matrix</description>
            <name>DATA_TO_I2S</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Force option to xpd sar blocks.</description>
            <name>XPD_SAR_FORCE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Wait arbit signal stable after sar_done.</description>
            <name>WAIT_ARB_CYCLE</name>
          </field>
        </fields>
        <name>CTRL</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x407F8240</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4</addressOffset>
        <description>DIG ADC common configuration</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enable limit times of SAR ADC sample.</description>
            <name>MEAS_NUM_LIMIT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>Set maximum conversion number.</description>
            <name>MAX_MEAS_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: data to DIG ADC1 CTRL is inverted, otherwise not.</description>
            <name>SAR1_INV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: data to DIG ADC2 CTRL is inverted, otherwise not.</description>
            <name>SAR2_INV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: select saradc timer 0: i2s_ws trigger</description>
            <name>TIMER_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0xC</bitWidth>
            <description>Set SAR ADC timer target.</description>
            <name>TIMER_TARGET</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enable SAR ADC timer trigger.</description>
            <name>TIMER_EN</name>
          </field>
        </fields>
        <name>CTRL2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xA1FE</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8</addressOffset>
        <description>digital adc control register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>sample number</description>
            <name>SAMPLE_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>sample cycles</description>
            <name>SAMPLE_CYCLE</name>
          </field>
        </fields>
        <name>FSM</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x2000000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xC</addressOffset>
        <description>configure saradc fsm internal parameter base on test</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>xpd wait</description>
            <name>XPD_WAIT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>reset time</description>
            <name>RSTB_WAIT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>standby wait</description>
            <name>STANDBY_WAIT</name>
          </field>
        </fields>
        <name>FSM_WAIT</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xFF0808</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x10</addressOffset>
        <description>digital adc1 status</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>digital adc1 status</description>
            <name>SAR1_STATUS</name>
          </field>
        </fields>
        <name>SAR1_STATUS</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x14</addressOffset>
        <description>digital adc2 status</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>digital adc2 status</description>
            <name>SAR2_STATUS</name>
          </field>
        </fields>
        <name>SAR2_STATUS</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x18</addressOffset>
        <description>item 0 ~ 3 for pattern table 1 (each item one byte)</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>item 0 ~ 3 for pattern table 1 (each item one byte)</description>
            <name>SAR1_PATT_TAB1</name>
          </field>
        </fields>
        <name>SAR1_PATT_TAB1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xF0F0F0F</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1C</addressOffset>
        <description>Item 4 ~ 7 for pattern table 1 (each item one byte)</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Item 4 ~ 7 for pattern table 1 (each item one byte)</description>
            <name>SAR1_PATT_TAB2</name>
          </field>
        </fields>
        <name>SAR1_PATT_TAB2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xF0F0F0F</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x20</addressOffset>
        <description>Item 8 ~ 11 for pattern table 1 (each item one byte)</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Item 8 ~ 11 for pattern table 1 (each item one byte)</description>
            <name>SAR1_PATT_TAB3</name>
          </field>
        </fields>
        <name>SAR1_PATT_TAB3</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xF0F0F0F</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x24</addressOffset>
        <description>Item 12 ~ 15 for pattern table 1 (each item one byte)</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Item 12 ~ 15 for pattern table 1 (each item one byte)</description>
            <name>SAR1_PATT_TAB4</name>
          </field>
        </fields>
        <name>SAR1_PATT_TAB4</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xF0F0F0F</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x28</addressOffset>
        <description>item 0 ~ 3 for pattern table 2 (each item one byte)</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>item 0 ~ 3 for pattern table 2 (each item one byte)</description>
            <name>SAR2_PATT_TAB1</name>
          </field>
        </fields>
        <name>SAR2_PATT_TAB1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xF0F0F0F</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2C</addressOffset>
        <description>Item 4 ~ 7 for pattern table 2 (each item one byte)</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Item 4 ~ 7 for pattern table 2 (each item one byte)</description>
            <name>SAR2_PATT_TAB2</name>
          </field>
        </fields>
        <name>SAR2_PATT_TAB2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xF0F0F0F</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x30</addressOffset>
        <description>Item 8 ~ 11 for pattern table 2 (each item one byte)</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Item 8 ~ 11 for pattern table 2 (each item one byte)</description>
            <name>SAR2_PATT_TAB3</name>
          </field>
        </fields>
        <name>SAR2_PATT_TAB3</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xF0F0F0F</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x34</addressOffset>
        <description>Item 12 ~ 15 for pattern table 2 (each item one byte)</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Item 12 ~ 15 for pattern table 2 (each item one byte)</description>
            <name>SAR2_PATT_TAB4</name>
          </field>
        </fields>
        <name>SAR2_PATT_TAB4</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xF0F0F0F</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x38</addressOffset>
        <description>Configure the settings of DIG ADC2 arbiter</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>ADC2 arbiter forces to enable DIG ADC2 CTRL.</description>
            <name>ADC_ARB_APB_FORCE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>ADC2 arbiter forces to enable RTC ADC2 CTRL.</description>
            <name>ADC_ARB_RTC_FORCE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>ADC2 arbiter forces to enable PWDET/PKDET CTRL.</description>
            <name>ADC_ARB_WIFI_FORCE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>ADC2 arbiter force grant.</description>
            <name>ADC_ARB_GRANT_FORCE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Set DIG ADC2 CTRL priority.</description>
            <name>ADC_ARB_APB_PRIORITY</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Set RTC ADC2 CTRL priority.</description>
            <name>ADC_ARB_RTC_PRIORITY</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Set PWDET/PKDET CTRL priority.</description>
            <name>ADC_ARB_WIFI_PRIORITY</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>ADC2 arbiter uses fixed priority.</description>
            <name>ADC_ARB_FIX_PRIORITY</name>
          </field>
        </fields>
        <name>ARB_CTRL</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x900</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3C</addressOffset>
        <description>Configure the settings of DIG ADC2 filter</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Reset ADC2 filter.</description>
            <name>ADC2_FILTER_RESET</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Reset ADC1 filter.</description>
            <name>ADC1_FILTER_RESET</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x7</bitWidth>
            <description>Set filter factor for DIG ADC2 CRTL.</description>
            <name>ADC2_FILTER_FACTOR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x7</bitWidth>
            <description>Set filter factor for DIG ADC1 CRTL.</description>
            <name>ADC1_FILTER_FACTOR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enable DIG ADC2 CRTL filter.</description>
            <name>ADC2_FILTER_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enable DIG ADC1 CRTL filter.</description>
            <name>ADC1_FILTER_EN</name>
          </field>
        </fields>
        <name>FILTER_CTRL</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x20400000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x40</addressOffset>
        <description>Data status of DIG ADC2 filter</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>ADC2 filter data.</description>
            <name>ADC2_FILTER_DATA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>ADC1 filter data.</description>
            <name>ADC1_FILTER_DATA</name>
          </field>
        </fields>
        <name>FILTER_STATUS</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x44</addressOffset>
        <description>Configure monitor threshold for DIG ADC2</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Clock gate enable.</description>
            <name>CLK_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: ADC_DATA &gt; = threshold, generate interrupt. 0: ADC_DATA &lt; threshold, generate interrupt.</description>
            <name>ADC2_THRES_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: ADC_DATA &gt; = threshold, generate interrupt. 0: ADC_DATA &lt; threshold, generate interrupt.</description>
            <name>ADC1_THRES_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0xD</bitWidth>
            <description>ADC2 threshold.</description>
            <name>ADC2_THRES</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0xD</bitWidth>
            <description>ADC1 threshold.</description>
            <name>ADC1_THRES</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enable ADC2 threshold monitor.</description>
            <name>ADC2_THRES_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enable ADC1 threshold monitor.</description>
            <name>ADC1_THRES_EN</name>
          </field>
        </fields>
        <name>THRES_CTRL</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x48</addressOffset>
        <description>Enable DIG ADC interrupts</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enable bit of APB_SARADC_ADC2_THRES_INT interrupt.</description>
            <name>ADC2_THRES_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enable bit of APB_SARADC_ADC1_THRES_INT interrupt.</description>
            <name>ADC1_THRES_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enable bit of APB_SARADC_ADC2_DONE_INT interrupt.</description>
            <name>ADC2_DONE_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enable bit of APB_SARADC_ADC1_DONE_INT interrupt.</description>
            <name>ADC1_DONE_INT_ENA</name>
          </field>
        </fields>
        <name>INT_ENA</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4C</addressOffset>
        <description>DIG ADC interrupt raw bits</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Raw bit of APB_SARADC_ADC2_THRES_INT interrupt.</description>
            <name>ADC2_THRES_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Raw bit of APB_SARADC_ADC1_THRES_INT interrupt.</description>
            <name>ADC1_THRES_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Raw bit of APB_SARADC_ADC2_DONE_INT interrupt.</description>
            <name>ADC2_DONE_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Raw bit of APB_SARADC_ADC1_DONE_INT interrupt.</description>
            <name>ADC1_DONE_INT_RAW</name>
          </field>
        </fields>
        <name>INT_RAW</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x50</addressOffset>
        <description>DIG ADC interrupt status</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Status of APB_SARADC_ADC2_THRES_INT interrupt.</description>
            <name>ADC2_THRES_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Status of APB_SARADC_ADC1_THRES_INT interrupt.</description>
            <name>ADC1_THRES_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Status of APB_SARADC_ADC2_DONE_INT interrupt.</description>
            <name>ADC2_DONE_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Status of APB_SARADC_ADC1_DONE_INT interrupt.</description>
            <name>ADC1_DONE_INT_ST</name>
          </field>
        </fields>
        <name>INT_ST</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x54</addressOffset>
        <description>Clear DIG ADC interrupts</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Clear bit of APB_SARADC_ADC2_THRES_INT interrupt.</description>
            <name>ADC2_THRES_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Clear bit of APB_SARADC_ADC1_THRES_INT interrupt.</description>
            <name>ADC1_THRES_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Clear bit of APB_SARADC_ADC2_DONE_INT interrupt.</description>
            <name>ADC2_DONE_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Clear bit of APB_SARADC_ADC1_DONE_INT interrupt.</description>
            <name>ADC1_DONE_INT_CLR</name>
          </field>
        </fields>
        <name>INT_CLR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x58</addressOffset>
        <description>Configure digital ADC DMA path</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>Generate dma_in_suc_eof when sample cnt = spi_eof_num.</description>
            <name>APB_ADC_EOF_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Reset DIG ADC CTRL status.</description>
            <name>APB_ADC_RESET_FSM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit, DIG ADC CTRL uses SPI DMA.</description>
            <name>APB_ADC_TRANS</name>
          </field>
        </fields>
        <name>DMA_CONF</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xFF</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5C</addressOffset>
        <description>Configure DIG ADC clock</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>Integral DIG_ADC clock divider value</description>
            <name>CLKM_DIV_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Fractional clock divider numerator value</description>
            <name>CLKM_DIV_B</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Fractional clock divider denominator value</description>
            <name>CLKM_DIV_A</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>1: select APLL. 2: select APB_CLK. Other values: disable clock.</description>
            <name>CLK_SEL</name>
          </field>
        </fields>
        <name>CLKM_CONF</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x4</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x60</addressOffset>
        <description>Configure DAC settings</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xC</bitWidth>
            <description>Set DAC timer target.</description>
            <name>DAC_TIMER_TARGET</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enable read dac data.</description>
            <name>DAC_TIMER_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enable DAC alter mode.</description>
            <name>APB_DAC_ALTER_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enable DMA_DAC.</description>
            <name>APB_DAC_TRANS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Reset DIG DAC FIFO.</description>
            <name>DAC_RESET_FIFO</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Reset DIG DAC by software.</description>
            <name>APB_DAC_RST</name>
          </field>
        </fields>
        <name>APB_DAC_CTRL</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x2064</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3FC</addressOffset>
        <description>Version control register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Version control register</description>
            <name>APB_CTRL_DATE</name>
          </field>
        </fields>
        <name>APB_CTRL_DATE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x1907162</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <resetMask>0xFFFFFFFF</resetMask>
    <resetValue>0x0</resetValue>
  </peripheral>
</peripherals>
<peripherals>
  <peripheral>
    <addressBlock>
      <offset>0x0</offset>
      <size>0x30</size>
      <usage>registers</usage>
    </addressBlock>
    <baseAddress>0x3F4CF000</baseAddress>
    <description>Dedicated GPIO</description>
    <groupName>DEDIC_GPIO</groupName>
    <interrupts></interrupts>
    <name>DEDICATED_GPIO</name>
    <registers>
      <register>
        <addressOffset>0x0</addressOffset>
        <description>Dedicated GPIO Directive Output register</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>This register is used to configure directive output value of 8-channel dedicated gpio.</description>
            <name>VLAUE</name>
          </field>
        </fields>
        <name>OUT_DRT</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4</addressOffset>
        <description>Dedicated GPIO Mask Output register</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>This register is used to configure masked output value of 8-channel dedicated gpio.</description>
            <name>OUT_VALUE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>This register is used to configure channels which would be masked. 1: corresponding channel's output would be masked.</description>
            <name>OUT_MSK</name>
          </field>
        </fields>
        <name>OUT_MSK</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8</addressOffset>
        <description>Dedicated GPIO Individual Output register</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Configure channel 0 output value. 0: hold output value; 1: set output value; 2: clear output value; 3: inverse output value.</description>
            <name>CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Configure channel 1 output value. 0: hold output value; 1: set output value; 2: clear output value; 3: inverse output value.</description>
            <name>CH1</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Configure channel 2 output value. 0: hold output value; 1: set output value; 2: clear output value; 3: inverse output value.</description>
            <name>CH2</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Configure channel 3 output value. 0: hold output value; 1: set output value; 2: clear output value; 3: inverse output value.</description>
            <name>CH3</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Configure channel 4 output value. 0: hold output value; 1: set output value; 2: clear output value; 3: inverse output value.</description>
            <name>CH4</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Configure channel 5 output value. 0: hold output value; 1: set output value; 2: clear output value; 3: inverse output value.</description>
            <name>CH5</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Configure channel 6 output value. 0: hold output value; 1: set output value; 2: clear output value; 3: inverse output value.</description>
            <name>CH6</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Configure channel 7 output value. 0: hold output value; 1: set output value; 2: clear output value; 3: inverse output value.</description>
            <name>CH7</name>
          </field>
        </fields>
        <name>OUT_IDV</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xC</addressOffset>
        <description>Dedicated GPIO Output Status register</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>gpio out value configured by DEDIC_GPIO_OUT_DRT_REG, DEDIC_GPIO_OUT_MSK_REG, DEDIC_GPIO_OUT_IDV_REG.</description>
            <name>OUT_STATUS</name>
          </field>
        </fields>
        <name>OUT_SCAN</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x10</addressOffset>
        <description>Dedicated GPIO Output Mode Select register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Select gpio out value configured by registers or CPU instructors for channel 0. 1: select CPU instructors.</description>
            <name>SEL0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Select gpio out value configured by registers or CPU instructors for channel 1. 1: select CPU instructors.</description>
            <name>SEL1</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Select gpio out value configured by registers or CPU instructors for channel 2. 1: select CPU instructors.</description>
            <name>SEL2</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Select gpio out value configured by registers or CPU instructors for channel 3. 1: select CPU instructors.</description>
            <name>SEL3</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Select gpio out value configured by registers or CPU instructors for channel 4. 1: select CPU instructors.</description>
            <name>SEL4</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Select gpio out value configured by registers or CPU instructors for channel 5. 1: select CPU instructors.</description>
            <name>SEL5</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Select gpio out value configured by registers or CPU instructors for channel 6. 1: select CPU instructors.</description>
            <name>SEL6</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Select gpio out value configured by registers or CPU instructors for channel 7. 1: select CPU instructors.</description>
            <name>SEL7</name>
          </field>
        </fields>
        <name>OUT_CPU</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x14</addressOffset>
        <description>Dedicated GPIO Input Delay Configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Configure gpio 0 input delay. 0: No delay; 1: one clock delay; 2: two clock delay; 3: three clock delay.</description>
            <name>CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Configure gpio 1 input delay. 0: No delay; 1: one clock delay; 2: two clock delay; 3: three clock delay.</description>
            <name>CH1</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Configure gpio 2 input delay. 0: No delay; 1: one clock delay; 2: two clock delay; 3: three clock delay.</description>
            <name>CH2</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Configure gpio 3 input delay. 0: No delay; 1: one clock delay; 2: two clock delay; 3: three clock delay.</description>
            <name>CH3</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Configure gpio 4 input delay. 0: No delay; 1: one clock delay; 2: two clock delay; 3: three clock delay.</description>
            <name>CH4</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Configure gpio 5 input delay. 0: No delay; 1: one clock delay; 2: two clock delay; 3: three clock delay.</description>
            <name>CH5</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Configure gpio 6 input delay. 0: No delay; 1: one clock delay; 2: two clock delay; 3: three clock delay.</description>
            <name>CH6</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Configure gpio 7 input delay. 0: No delay; 1: one clock delay; 2: two clock delay; 3: three clock delay.</description>
            <name>CH7</name>
          </field>
        </fields>
        <name>IN_DLY</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x18</addressOffset>
        <description>Dedicated GPIO Input Status register</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>gpio in value after configured by DEDIC_GPIO_IN_DLY_REG.</description>
            <name>IN_STATUS</name>
          </field>
        </fields>
        <name>IN_SCAN</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1C</addressOffset>
        <description>Dedicated GPIO Interrupts Generate Mode register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Configure channel 0 interrupt generate mode. 
            0/1: do not generate interrupt; 
            2: low level trigger; 
            3: high level trigger; 
            4: falling edge trigger; 
            5: raising edge trigger; 
            6/7: falling and raising edge trigger.</description>
            <name>INTR_MODE_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Configure channel 1 interrupt generate mode. 
            0/1: do not generate interrupt; 
            2: low level trigger; 
            3: high level trigger; 
            4: falling edge trigger; 
            5: raising edge trigger; 
            6/7: falling and raising edge trigger.</description>
            <name>INTR_MODE_CH1</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Configure channel 2 interrupt generate mode. 
            0/1: do not generate interrupt; 
            2: low level trigger; 
            3: high level trigger; 
            4: falling edge trigger; 
            5: raising edge trigger; 
            6/7: falling and raising edge trigger.</description>
            <name>INTR_MODE_CH2</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Configure channel 3 interrupt generate mode. 
            0/1: do not generate interrupt; 
            2: low level trigger; 
            3: high level trigger; 
            4: falling edge trigger; 
            5: raising edge trigger; 
            6/7: falling and raising edge trigger.</description>
            <name>INTR_MODE_CH3</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Configure channel 4 interrupt generate mode. 
            0/1: do not generate interrupt; 
            2: low level trigger; 
            3: high level trigger; 
            4: falling edge trigger; 
            5: raising edge trigger; 
            6/7: falling and raising edge trigger.</description>
            <name>INTR_MODE_CH4</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Configure channel 5 interrupt generate mode. 
            0/1: do not generate interrupt; 
            2: low level trigger; 
            3: high level trigger; 
            4: falling edge trigger; 
            5: raising edge trigger; 
            6/7: falling and raising edge trigger.</description>
            <name>INTR_MODE_CH5</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Configure channel 6 interrupt generate mode. 
            0/1: do not generate interrupt; 
            2: low level trigger; 
            3: high level trigger; 
            4: falling edge trigger; 
            5: raising edge trigger; 
            6/7: falling and raising edge trigger.</description>
            <name>INTR_MODE_CH6</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Configure channel 7 interrupt generate mode. 
            0/1: do not generate interrupt; 
            2: low level trigger; 
            3: high level trigger; 
            4: falling edge trigger; 
            5: raising edge trigger; 
            6/7: falling and raising edge trigger.</description>
            <name>INTR_MODE_CH7</name>
          </field>
        </fields>
        <name>INTR_RCGN</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x20</addressOffset>
        <description>Raw interrupt status</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This interrupt raw bit turns to high level when dedicated GPIO 0 has level/edge change configured by DEDIC_GPIO_INTR_RCGN_REG.</description>
            <name>GPIO0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This interrupt raw bit turns to high level when dedicated GPIO 1 has level/edge change configured by DEDIC_GPIO_INTR_RCGN_REG.</description>
            <name>GPIO1</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This interrupt raw bit turns to high level when dedicated GPIO 2 has level/edge change configured by DEDIC_GPIO_INTR_RCGN_REG.</description>
            <name>GPIO2</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This interrupt raw bit turns to high level when dedicated GPIO 3 has level/edge change configured by DEDIC_GPIO_INTR_RCGN_REG.</description>
            <name>GPIO3</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This interrupt raw bit turns to high level when dedicated GPIO 4 has level/edge change configured by DEDIC_GPIO_INTR_RCGN_REG.</description>
            <name>GPIO4</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This interrupt raw bit turns to high level when dedicated GPIO 5 has level/edge change configured by DEDIC_GPIO_INTR_RCGN_REG.</description>
            <name>GPIO5</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This interrupt raw bit turns to high level when dedicated GPIO 6 has level/edge change configured by DEDIC_GPIO_INTR_RCGN_REG.</description>
            <name>GPIO6</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This interrupt raw bit turns to high level when dedicated GPIO 7 has level/edge change configured by DEDIC_GPIO_INTR_RCGN_REG.</description>
            <name>GPIO7</name>
          </field>
        </fields>
        <name>INTR_RAW</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x24</addressOffset>
        <description>Interrupt enable bits</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This enable bit for reg_gpio0_int_st register.</description>
            <name>GPIO0_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This enable bit for reg_gpio1_int_st register.</description>
            <name>GPIO1_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This enable bit for reg_gpio2_int_st register.</description>
            <name>GPIO2_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This enable bit for reg_gpio3_int_st register.</description>
            <name>GPIO3_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This enable bit for reg_gpio4_int_st register.</description>
            <name>GPIO4_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This enable bit for reg_gpio5_int_st register.</description>
            <name>GPIO5_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This enable bit for reg_gpio6_int_st register.</description>
            <name>GPIO6_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This enable bit for reg_gpio7_int_st register.</description>
            <name>GPIO7_INT_ENA</name>
          </field>
        </fields>
        <name>INTR_RLS</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x28</addressOffset>
        <description>Masked interrupt status</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the status bit for reg_gpio0_int_raw when reg_gpio0_int_ena is set to 1.</description>
            <name>GPIO0_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the status bit for reg_gpio1_int_raw when reg_gpio1_int_ena is set to 1.</description>
            <name>GPIO1_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the status bit for reg_gpio2_int_raw when reg_gpio2_int_ena is set to 1.</description>
            <name>GPIO2_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the status bit for reg_gpio3_int_raw when reg_gpio3_int_ena is set to 1.</description>
            <name>GPIO3_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the status bit for reg_gpio4_int_raw when reg_gpio4_int_ena is set to 1.</description>
            <name>GPIO4_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the status bit for reg_gpio5_int_raw when reg_gpio5_int_ena is set to 1.</description>
            <name>GPIO5_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the status bit for reg_gpio6_int_raw when reg_gpio6_int_ena is set to 1.</description>
            <name>GPIO6_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the status bit for reg_gpio7_int_raw when reg_gpio7_int_ena is set to 1.</description>
            <name>GPIO7_INT_ST</name>
          </field>
        </fields>
        <name>INTR_ST</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2C</addressOffset>
        <description>Interrupt clear bits</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear the reg_gpio0_int_raw interrupt.</description>
            <name>GPIO0_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear the reg_gpio1_int_raw interrupt.</description>
            <name>GPIO1_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear the reg_gpio2_int_raw interrupt.</description>
            <name>GPIO2_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear the reg_gpio3_int_raw interrupt.</description>
            <name>GPIO3_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear the reg_gpio4_int_raw interrupt.</description>
            <name>GPIO4_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear the reg_gpio5_int_raw interrupt.</description>
            <name>GPIO5_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear the reg_gpio6_int_raw interrupt.</description>
            <name>GPIO6_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear the reg_gpio7_int_raw interrupt.</description>
            <name>GPIO7_INT_CLR</name>
          </field>
        </fields>
        <name>INTR_CLR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <resetMask>0xFFFFFFFF</resetMask>
    <resetValue>0x0</resetValue>
  </peripheral>
</peripherals>
<peripherals>
  <peripheral>
    <addressBlock>
      <offset>0x0</offset>
      <size>0xA5C</size>
      <usage>registers</usage>
    </addressBlock>
    <baseAddress>0x6003D000</baseAddress>
    <description>Digital Signature</description>
    <groupName>DS</groupName>
    <interrupts></interrupts>
    <name>DS</name>
    <registers>
      <register>
        <addressOffset>0xE00</addressOffset>
        <description>Activates the DS peripheral</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Write 1 to this register to activate the DS peripheral.</description>
            <name>SET_START</name>
          </field>
        </fields>
        <name>SET_START</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xE04</addressOffset>
        <description>Starts DS operation</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Write 1 to this register to start DS operation.</description>
            <name>SET_ME</name>
          </field>
        </fields>
        <name>SET_ME</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xE08</addressOffset>
        <description>Ends DS operation</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Write 1 to this register to end DS operation.</description>
            <name>SET_FINISH</name>
          </field>
        </fields>
        <name>SET_FINISH</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xE0C</addressOffset>
        <description>Status of the DS</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: The DS peripheral is busy. 0: The DS peripheral is idle.</description>
            <name>QUERY_BUSY</name>
          </field>
        </fields>
        <name>QUERY_BUSY</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xE10</addressOffset>
        <description>Checks the reason why DS_KEY is not ready.</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>1-15: HMAC was activated, but the DS peripheral did not successfully receive the DS_KEY value from the HMAC peripheral. The biggest value is 15. 0: HMAC is not activated.</description>
            <name>QUERY_KEY_WRONG</name>
          </field>
        </fields>
        <name>QUERY_KEY_WRONG</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xE14</addressOffset>
        <description>Queries DS check result</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: MD check fails. 0: MD check passes.</description>
            <name>MD_ERROR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: The padding check fails. 0: The padding check passes.</description>
            <name>PADDING_BAD</name>
          </field>
        </fields>
        <name>QUERY_CHECK</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xE20</addressOffset>
        <description>Version control register</description>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1E</bitWidth>
            <description>Version control register.</description>
            <name>DATE</name>
          </field>
        </fields>
        <name>DATE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x20190418</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x0</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[0]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[2]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[3]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[4]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[5]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x6</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[6]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x7</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[7]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[8]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[9]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[10]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[11]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xC</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[12]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xD</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[13]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xE</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[14]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xF</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[15]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x10</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[16]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x11</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[17]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x12</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[18]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x13</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[19]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x14</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[20]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x15</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[21]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x16</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[22]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x17</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[23]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x18</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[24]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x19</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[25]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1A</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[26]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1B</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[27]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1C</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[28]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1D</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[29]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1E</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[30]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1F</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[31]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x20</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[32]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x21</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[33]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x22</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[34]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x23</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[35]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x24</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[36]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x25</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[37]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x26</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[38]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x27</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[39]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x28</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[40]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x29</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[41]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2A</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[42]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2B</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[43]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2C</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[44]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2D</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[45]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2E</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[46]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2F</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[47]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x30</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[48]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x31</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[49]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x32</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[50]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x33</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[51]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x34</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[52]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x35</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[53]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x36</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[54]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x37</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[55]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x38</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[56]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x39</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[57]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3A</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[58]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3B</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[59]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3C</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[60]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3D</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[61]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3E</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[62]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3F</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[63]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x40</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[64]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x41</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[65]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x42</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[66]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x43</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[67]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x44</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[68]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x45</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[69]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x46</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[70]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x47</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[71]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x48</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[72]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x49</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[73]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4A</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[74]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4B</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[75]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4C</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[76]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4D</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[77]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4E</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[78]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4F</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[79]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x50</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[80]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x51</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[81]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x52</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[82]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x53</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[83]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x54</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[84]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x55</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[85]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x56</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[86]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x57</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[87]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x58</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[88]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x59</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[89]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5A</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[90]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5B</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[91]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5C</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[92]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5D</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[93]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5E</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[94]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5F</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[95]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x60</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[96]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x61</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[97]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x62</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[98]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x63</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[99]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x64</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[100]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x65</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[101]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x66</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[102]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x67</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[103]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x68</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[104]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x69</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[105]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x6A</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[106]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x6B</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[107]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x6C</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[108]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x6D</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[109]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x6E</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[110]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x6F</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[111]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x70</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[112]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x71</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[113]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x72</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[114]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x73</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[115]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x74</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[116]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x75</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[117]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x76</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[118]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x77</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[119]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x78</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[120]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x79</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[121]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x7A</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[122]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x7B</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[123]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x7C</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[124]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x7D</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[125]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x7E</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[126]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x7F</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[127]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x80</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[128]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x81</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[129]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x82</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[130]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x83</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[131]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x84</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[132]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x85</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[133]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x86</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[134]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x87</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[135]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x88</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[136]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x89</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[137]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8A</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[138]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8B</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[139]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8C</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[140]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8D</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[141]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8E</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[142]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8F</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[143]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x90</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[144]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x91</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[145]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x92</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[146]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x93</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[147]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x94</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[148]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x95</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[149]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x96</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[150]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x97</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[151]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x98</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[152]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x99</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[153]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9A</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[154]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9B</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[155]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9C</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[156]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9D</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[157]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9E</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[158]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9F</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[159]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA0</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[160]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA1</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[161]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA2</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[162]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA3</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[163]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA4</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[164]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA5</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[165]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA6</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[166]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA7</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[167]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA8</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[168]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA9</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[169]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAA</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[170]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAB</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[171]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAC</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[172]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAD</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[173]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAE</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[174]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAF</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[175]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB0</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[176]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB1</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[177]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB2</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[178]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB3</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[179]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB4</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[180]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB5</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[181]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB6</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[182]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB7</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[183]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB8</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[184]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB9</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[185]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBA</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[186]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBB</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[187]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBC</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[188]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBD</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[189]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBE</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[190]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBF</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[191]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xC0</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[192]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xC1</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[193]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xC2</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[194]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xC3</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[195]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xC4</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[196]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xC5</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[197]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xC6</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[198]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xC7</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[199]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xC8</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[200]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xC9</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[201]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xCA</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[202]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xCB</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[203]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xCC</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[204]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xCD</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[205]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xCE</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[206]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xCF</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[207]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xD0</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[208]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xD1</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[209]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xD2</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[210]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xD3</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[211]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xD4</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[212]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xD5</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[213]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xD6</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[214]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xD7</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[215]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xD8</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[216]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xD9</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[217]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xDA</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[218]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xDB</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[219]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xDC</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[220]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xDD</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[221]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xDE</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[222]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xDF</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[223]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xE0</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[224]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xE1</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[225]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xE2</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[226]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xE3</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[227]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xE4</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[228]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xE5</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[229]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xE6</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[230]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xE7</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[231]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xE8</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[232]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xE9</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[233]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xEA</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[234]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xEB</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[235]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xEC</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[236]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xED</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[237]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xEE</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[238]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xEF</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[239]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xF0</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[240]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xF1</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[241]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xF2</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[242]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xF3</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[243]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xF4</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[244]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xF5</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[245]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xF6</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[246]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xF7</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[247]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xF8</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[248]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xF9</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[249]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xFA</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[250]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xFB</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[251]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xFC</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[252]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xFD</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[253]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xFE</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[254]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xFF</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[255]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x100</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[256]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x101</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[257]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x102</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[258]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x103</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[259]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x104</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[260]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x105</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[261]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x106</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[262]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x107</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[263]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x108</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[264]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x109</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[265]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x10A</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[266]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x10B</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[267]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x10C</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[268]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x10D</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[269]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x10E</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[270]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x10F</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[271]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x110</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[272]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x111</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[273]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x112</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[274]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x113</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[275]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x114</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[276]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x115</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[277]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x116</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[278]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x117</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[279]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x118</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[280]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x119</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[281]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x11A</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[282]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x11B</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[283]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x11C</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[284]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x11D</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[285]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x11E</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[286]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x11F</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[287]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x120</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[288]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x121</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[289]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x122</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[290]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x123</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[291]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x124</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[292]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x125</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[293]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x126</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[294]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x127</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[295]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x128</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[296]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x129</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[297]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x12A</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[298]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x12B</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[299]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x12C</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[300]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x12D</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[301]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x12E</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[302]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x12F</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[303]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x130</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[304]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x131</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[305]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x132</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[306]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x133</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[307]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x134</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[308]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x135</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[309]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x136</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[310]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x137</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[311]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x138</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[312]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x139</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[313]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x13A</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[314]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x13B</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[315]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x13C</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[316]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x13D</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[317]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x13E</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[318]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x13F</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[319]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x140</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[320]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x141</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[321]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x142</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[322]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x143</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[323]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x144</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[324]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x145</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[325]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x146</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[326]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x147</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[327]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x148</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[328]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x149</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[329]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x14A</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[330]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x14B</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[331]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x14C</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[332]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x14D</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[333]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x14E</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[334]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x14F</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[335]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x150</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[336]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x151</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[337]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x152</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[338]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x153</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[339]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x154</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[340]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x155</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[341]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x156</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[342]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x157</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[343]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x158</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[344]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x159</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[345]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x15A</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[346]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x15B</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[347]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x15C</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[348]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x15D</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[349]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x15E</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[350]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x15F</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[351]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x160</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[352]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x161</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[353]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x162</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[354]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x163</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[355]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x164</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[356]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x165</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[357]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x166</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[358]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x167</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[359]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x168</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[360]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x169</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[361]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x16A</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[362]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x16B</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[363]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x16C</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[364]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x16D</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[365]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x16E</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[366]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x16F</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[367]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x170</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[368]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x171</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[369]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x172</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[370]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x173</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[371]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x174</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[372]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x175</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[373]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x176</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[374]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x177</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[375]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x178</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[376]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x179</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[377]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x17A</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[378]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x17B</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[379]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x17C</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[380]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x17D</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[381]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x17E</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[382]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x17F</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[383]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x180</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[384]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x181</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[385]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x182</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[386]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x183</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[387]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x184</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[388]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x185</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[389]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x186</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[390]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x187</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[391]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x188</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[392]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x189</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[393]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x18A</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[394]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x18B</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[395]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x18C</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[396]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x18D</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[397]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x18E</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[398]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x18F</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[399]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x190</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[400]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x191</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[401]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x192</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[402]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x193</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[403]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x194</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[404]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x195</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[405]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x196</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[406]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x197</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[407]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x198</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[408]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x199</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[409]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x19A</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[410]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x19B</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[411]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x19C</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[412]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x19D</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[413]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x19E</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[414]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x19F</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[415]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1A0</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[416]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1A1</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[417]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1A2</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[418]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1A3</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[419]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1A4</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[420]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1A5</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[421]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1A6</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[422]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1A7</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[423]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1A8</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[424]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1A9</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[425]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1AA</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[426]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1AB</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[427]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1AC</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[428]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1AD</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[429]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1AE</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[430]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1AF</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[431]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1B0</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[432]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1B1</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[433]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1B2</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[434]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1B3</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[435]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1B4</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[436]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1B5</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[437]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1B6</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[438]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1B7</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[439]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1B8</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[440]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1B9</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[441]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1BA</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[442]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1BB</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[443]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1BC</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[444]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1BD</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[445]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1BE</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[446]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1BF</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[447]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1C0</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[448]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1C1</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[449]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1C2</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[450]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1C3</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[451]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1C4</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[452]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1C5</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[453]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1C6</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[454]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1C7</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[455]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1C8</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[456]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1C9</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[457]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1CA</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[458]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1CB</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[459]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1CC</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[460]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1CD</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[461]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1CE</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[462]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1CF</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[463]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1D0</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[464]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1D1</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[465]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1D2</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[466]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1D3</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[467]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1D4</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[468]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1D5</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[469]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1D6</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[470]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1D7</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[471]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1D8</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[472]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1D9</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[473]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1DA</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[474]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1DB</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[475]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1DC</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[476]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1DD</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[477]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1DE</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[478]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1DF</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[479]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1E0</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[480]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1E1</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[481]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1E2</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[482]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1E3</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[483]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1E4</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[484]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1E5</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[485]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1E6</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[486]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1E7</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[487]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1E8</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[488]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1E9</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[489]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1EA</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[490]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1EB</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[491]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1EC</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[492]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1ED</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[493]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1EE</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[494]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1EF</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[495]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1F0</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[496]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1F1</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[497]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1F2</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[498]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1F3</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[499]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1F4</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[500]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1F5</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[501]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1F6</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[502]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1F7</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[503]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1F8</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[504]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1F9</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[505]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1FA</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[506]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1FB</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[507]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1FC</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[508]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1FD</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[509]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1FE</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[510]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1FF</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[511]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x200</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[512]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x201</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[513]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x202</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[514]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x203</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[515]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x204</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[516]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x205</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[517]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x206</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[518]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x207</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[519]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x208</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[520]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x209</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[521]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x20A</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[522]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x20B</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[523]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x20C</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[524]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x20D</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[525]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x20E</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[526]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x20F</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[527]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x210</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[528]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x211</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[529]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x212</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[530]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x213</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[531]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x214</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[532]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x215</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[533]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x216</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[534]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x217</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[535]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x218</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[536]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x219</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[537]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x21A</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[538]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x21B</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[539]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x21C</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[540]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x21D</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[541]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x21E</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[542]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x21F</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[543]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x220</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[544]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x221</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[545]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x222</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[546]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x223</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[547]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x224</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[548]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x225</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[549]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x226</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[550]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x227</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[551]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x228</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[552]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x229</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[553]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x22A</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[554]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x22B</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[555]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x22C</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[556]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x22D</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[557]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x22E</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[558]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x22F</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[559]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x230</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[560]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x231</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[561]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x232</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[562]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x233</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[563]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x234</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[564]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x235</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[565]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x236</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[566]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x237</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[567]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x238</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[568]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x239</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[569]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x23A</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[570]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x23B</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[571]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x23C</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[572]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x23D</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[573]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x23E</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[574]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x23F</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[575]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x240</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[576]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x241</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[577]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x242</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[578]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x243</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[579]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x244</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[580]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x245</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[581]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x246</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[582]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x247</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[583]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x248</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[584]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x249</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[585]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x24A</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[586]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x24B</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[587]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x24C</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[588]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x24D</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[589]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x24E</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[590]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x24F</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[591]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x250</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[592]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x251</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[593]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x252</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[594]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x253</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[595]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x254</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[596]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x255</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[597]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x256</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[598]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x257</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[599]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x258</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[600]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x259</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[601]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x25A</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[602]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x25B</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[603]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x25C</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[604]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x25D</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[605]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x25E</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[606]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x25F</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[607]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x260</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[608]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x261</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[609]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x262</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[610]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x263</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[611]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x264</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[612]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x265</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[613]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x266</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[614]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x267</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[615]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x268</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[616]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x269</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[617]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x26A</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[618]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x26B</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[619]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x26C</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[620]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x26D</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[621]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x26E</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[622]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x26F</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[623]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x270</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[624]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x271</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[625]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x272</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[626]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x273</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[627]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x274</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[628]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x275</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[629]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x276</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[630]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x277</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[631]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x278</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[632]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x279</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[633]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x27A</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[634]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x27B</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[635]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x27C</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[636]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x27D</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[637]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x27E</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[638]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x27F</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[639]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x280</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[640]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x281</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[641]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x282</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[642]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x283</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[643]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x284</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[644]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x285</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[645]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x286</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[646]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x287</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[647]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x288</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[648]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x289</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[649]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x28A</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[650]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x28B</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[651]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x28C</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[652]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x28D</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[653]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x28E</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[654]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x28F</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[655]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x290</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[656]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x291</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[657]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x292</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[658]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x293</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[659]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x294</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[660]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x295</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[661]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x296</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[662]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x297</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[663]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x298</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[664]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x299</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[665]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x29A</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[666]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x29B</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[667]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x29C</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[668]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x29D</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[669]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x29E</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[670]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x29F</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[671]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2A0</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[672]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2A1</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[673]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2A2</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[674]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2A3</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[675]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2A4</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[676]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2A5</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[677]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2A6</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[678]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2A7</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[679]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2A8</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[680]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2A9</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[681]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2AA</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[682]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2AB</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[683]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2AC</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[684]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2AD</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[685]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2AE</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[686]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2AF</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[687]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2B0</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[688]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2B1</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[689]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2B2</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[690]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2B3</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[691]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2B4</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[692]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2B5</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[693]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2B6</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[694]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2B7</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[695]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2B8</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[696]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2B9</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[697]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2BA</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[698]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2BB</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[699]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2BC</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[700]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2BD</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[701]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2BE</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[702]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2BF</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[703]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2C0</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[704]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2C1</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[705]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2C2</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[706]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2C3</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[707]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2C4</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[708]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2C5</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[709]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2C6</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[710]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2C7</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[711]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2C8</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[712]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2C9</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[713]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2CA</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[714]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2CB</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[715]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2CC</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[716]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2CD</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[717]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2CE</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[718]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2CF</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[719]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2D0</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[720]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2D1</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[721]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2D2</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[722]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2D3</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[723]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2D4</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[724]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2D5</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[725]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2D6</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[726]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2D7</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[727]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2D8</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[728]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2D9</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[729]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2DA</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[730]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2DB</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[731]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2DC</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[732]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2DD</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[733]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2DE</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[734]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2DF</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[735]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2E0</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[736]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2E1</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[737]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2E2</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[738]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2E3</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[739]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2E4</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[740]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2E5</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[741]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2E6</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[742]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2E7</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[743]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2E8</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[744]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2E9</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[745]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2EA</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[746]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2EB</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[747]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2EC</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[748]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2ED</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[749]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2EE</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[750]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2EF</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[751]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2F0</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[752]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2F1</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[753]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2F2</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[754]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2F3</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[755]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2F4</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[756]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2F5</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[757]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2F6</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[758]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2F7</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[759]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2F8</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[760]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2F9</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[761]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2FA</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[762]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2FB</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[763]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2FC</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[764]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2FD</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[765]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2FE</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[766]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2FF</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[767]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x300</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[768]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x301</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[769]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x302</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[770]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x303</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[771]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x304</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[772]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x305</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[773]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x306</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[774]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x307</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[775]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x308</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[776]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x309</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[777]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x30A</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[778]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x30B</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[779]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x30C</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[780]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x30D</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[781]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x30E</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[782]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x30F</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[783]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x310</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[784]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x311</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[785]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x312</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[786]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x313</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[787]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x314</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[788]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x315</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[789]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x316</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[790]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x317</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[791]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x318</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[792]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x319</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[793]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x31A</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[794]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x31B</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[795]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x31C</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[796]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x31D</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[797]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x31E</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[798]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x31F</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[799]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x320</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[800]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x321</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[801]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x322</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[802]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x323</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[803]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x324</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[804]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x325</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[805]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x326</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[806]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x327</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[807]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x328</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[808]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x329</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[809]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x32A</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[810]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x32B</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[811]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x32C</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[812]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x32D</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[813]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x32E</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[814]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x32F</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[815]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x330</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[816]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x331</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[817]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x332</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[818]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x333</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[819]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x334</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[820]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x335</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[821]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x336</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[822]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x337</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[823]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x338</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[824]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x339</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[825]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x33A</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[826]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x33B</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[827]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x33C</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[828]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x33D</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[829]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x33E</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[830]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x33F</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[831]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x340</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[832]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x341</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[833]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x342</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[834]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x343</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[835]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x344</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[836]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x345</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[837]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x346</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[838]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x347</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[839]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x348</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[840]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x349</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[841]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x34A</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[842]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x34B</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[843]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x34C</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[844]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x34D</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[845]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x34E</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[846]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x34F</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[847]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x350</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[848]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x351</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[849]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x352</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[850]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x353</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[851]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x354</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[852]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x355</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[853]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x356</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[854]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x357</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[855]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x358</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[856]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x359</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[857]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x35A</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[858]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x35B</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[859]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x35C</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[860]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x35D</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[861]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x35E</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[862]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x35F</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[863]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x360</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[864]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x361</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[865]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x362</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[866]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x363</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[867]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x364</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[868]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x365</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[869]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x366</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[870]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x367</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[871]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x368</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[872]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x369</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[873]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x36A</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[874]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x36B</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[875]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x36C</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[876]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x36D</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[877]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x36E</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[878]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x36F</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[879]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x370</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[880]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x371</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[881]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x372</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[882]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x373</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[883]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x374</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[884]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x375</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[885]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x376</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[886]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x377</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[887]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x378</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[888]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x379</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[889]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x37A</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[890]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x37B</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[891]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x37C</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[892]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x37D</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[893]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x37E</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[894]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x37F</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[895]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x380</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[896]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x381</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[897]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x382</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[898]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x383</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[899]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x384</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[900]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x385</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[901]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x386</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[902]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x387</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[903]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x388</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[904]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x389</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[905]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x38A</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[906]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x38B</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[907]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x38C</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[908]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x38D</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[909]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x38E</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[910]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x38F</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[911]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x390</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[912]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x391</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[913]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x392</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[914]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x393</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[915]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x394</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[916]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x395</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[917]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x396</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[918]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x397</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[919]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x398</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[920]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x399</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[921]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x39A</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[922]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x39B</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[923]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x39C</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[924]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x39D</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[925]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x39E</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[926]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x39F</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[927]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3A0</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[928]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3A1</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[929]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3A2</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[930]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3A3</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[931]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3A4</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[932]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3A5</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[933]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3A6</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[934]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3A7</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[935]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3A8</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[936]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3A9</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[937]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3AA</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[938]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3AB</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[939]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3AC</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[940]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3AD</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[941]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3AE</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[942]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3AF</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[943]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3B0</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[944]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3B1</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[945]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3B2</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[946]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3B3</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[947]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3B4</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[948]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3B5</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[949]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3B6</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[950]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3B7</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[951]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3B8</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[952]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3B9</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[953]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3BA</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[954]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3BB</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[955]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3BC</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[956]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3BD</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[957]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3BE</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[958]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3BF</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[959]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3C0</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[960]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3C1</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[961]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3C2</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[962]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3C3</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[963]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3C4</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[964]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3C5</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[965]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3C6</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[966]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3C7</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[967]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3C8</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[968]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3C9</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[969]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3CA</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[970]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3CB</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[971]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3CC</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[972]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3CD</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[973]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3CE</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[974]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3CF</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[975]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3D0</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[976]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3D1</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[977]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3D2</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[978]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3D3</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[979]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3D4</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[980]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3D5</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[981]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3D6</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[982]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3D7</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[983]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3D8</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[984]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3D9</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[985]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3DA</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[986]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3DB</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[987]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3DC</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[988]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3DD</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[989]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3DE</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[990]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3DF</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[991]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3E0</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[992]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3E1</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[993]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3E2</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[994]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3E3</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[995]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3E4</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[996]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3E5</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[997]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3E6</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[998]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3E7</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[999]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3E8</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1000]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3E9</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1001]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3EA</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1002]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3EB</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1003]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3EC</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1004]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3ED</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1005]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3EE</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1006]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3EF</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1007]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3F0</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1008]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3F1</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1009]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3F2</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1010]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3F3</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1011]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3F4</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1012]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3F5</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1013]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3F6</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1014]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3F7</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1015]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3F8</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1016]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3F9</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1017]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3FA</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1018]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3FB</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1019]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3FC</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1020]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3FD</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1021]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3FE</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1022]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3FF</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1023]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x400</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1024]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x401</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1025]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x402</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1026]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x403</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1027]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x404</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1028]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x405</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1029]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x406</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1030]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x407</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1031]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x408</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1032]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x409</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1033]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x40A</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1034]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x40B</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1035]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x40C</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1036]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x40D</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1037]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x40E</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1038]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x40F</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1039]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x410</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1040]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x411</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1041]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x412</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1042]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x413</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1043]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x414</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1044]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x415</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1045]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x416</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1046]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x417</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1047]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x418</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1048]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x419</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1049]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x41A</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1050]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x41B</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1051]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x41C</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1052]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x41D</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1053]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x41E</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1054]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x41F</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1055]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x420</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1056]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x421</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1057]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x422</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1058]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x423</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1059]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x424</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1060]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x425</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1061]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x426</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1062]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x427</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1063]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x428</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1064]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x429</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1065]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x42A</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1066]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x42B</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1067]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x42C</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1068]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x42D</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1069]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x42E</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1070]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x42F</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1071]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x430</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1072]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x431</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1073]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x432</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1074]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x433</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1075]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x434</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1076]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x435</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1077]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x436</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1078]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x437</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1079]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x438</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1080]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x439</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1081]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x43A</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1082]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x43B</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1083]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x43C</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1084]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x43D</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1085]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x43E</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1086]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x43F</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1087]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x440</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1088]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x441</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1089]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x442</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1090]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x443</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1091]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x444</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1092]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x445</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1093]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x446</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1094]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x447</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1095]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x448</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1096]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x449</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1097]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x44A</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1098]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x44B</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1099]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x44C</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1100]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x44D</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1101]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x44E</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1102]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x44F</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1103]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x450</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1104]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x451</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1105]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x452</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1106]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x453</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1107]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x454</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1108]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x455</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1109]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x456</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1110]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x457</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1111]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x458</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1112]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x459</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1113]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x45A</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1114]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x45B</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1115]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x45C</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1116]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x45D</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1117]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x45E</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1118]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x45F</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1119]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x460</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1120]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x461</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1121]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x462</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1122]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x463</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1123]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x464</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1124]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x465</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1125]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x466</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1126]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x467</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1127]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x468</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1128]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x469</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1129]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x46A</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1130]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x46B</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1131]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x46C</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1132]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x46D</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1133]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x46E</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1134]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x46F</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1135]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x470</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1136]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x471</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1137]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x472</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1138]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x473</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1139]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x474</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1140]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x475</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1141]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x476</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1142]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x477</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1143]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x478</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1144]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x479</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1145]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x47A</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1146]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x47B</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1147]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x47C</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1148]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x47D</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1149]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x47E</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1150]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x47F</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1151]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x480</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1152]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x481</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1153]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x482</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1154]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x483</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1155]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x484</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1156]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x485</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1157]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x486</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1158]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x487</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1159]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x488</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1160]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x489</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1161]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x48A</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1162]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x48B</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1163]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x48C</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1164]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x48D</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1165]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x48E</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1166]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x48F</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1167]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x490</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1168]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x491</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1169]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x492</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1170]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x493</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1171]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x494</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1172]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x495</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1173]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x496</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1174]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x497</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1175]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x498</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1176]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x499</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1177]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x49A</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1178]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x49B</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1179]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x49C</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1180]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x49D</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1181]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x49E</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1182]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x49F</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1183]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4A0</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1184]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4A1</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1185]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4A2</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1186]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4A3</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1187]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4A4</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1188]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4A5</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1189]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4A6</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1190]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4A7</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1191]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4A8</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1192]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4A9</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1193]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4AA</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1194]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4AB</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1195]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4AC</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1196]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4AD</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1197]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4AE</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1198]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4AF</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1199]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4B0</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1200]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4B1</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1201]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4B2</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1202]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4B3</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1203]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4B4</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1204]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4B5</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1205]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4B6</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1206]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4B7</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1207]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4B8</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1208]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4B9</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1209]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4BA</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1210]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4BB</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1211]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4BC</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1212]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4BD</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1213]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4BE</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1214]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4BF</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1215]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4C0</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1216]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4C1</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1217]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4C2</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1218]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4C3</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1219]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4C4</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1220]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4C5</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1221]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4C6</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1222]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4C7</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1223]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4C8</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1224]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4C9</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1225]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4CA</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1226]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4CB</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1227]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4CC</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1228]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4CD</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1229]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4CE</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1230]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4CF</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1231]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4D0</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1232]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4D1</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1233]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4D2</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1234]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4D3</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1235]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4D4</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1236]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4D5</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1237]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4D6</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1238]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4D7</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1239]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4D8</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1240]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4D9</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1241]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4DA</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1242]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4DB</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1243]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4DC</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1244]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4DD</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1245]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4DE</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1246]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4DF</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1247]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4E0</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1248]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4E1</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1249]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4E2</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1250]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4E3</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1251]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4E4</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1252]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4E5</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1253]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4E6</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1254]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4E7</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1255]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4E8</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1256]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4E9</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1257]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4EA</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1258]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4EB</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1259]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4EC</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1260]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4ED</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1261]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4EE</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1262]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4EF</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1263]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4F0</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1264]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4F1</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1265]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4F2</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1266]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4F3</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1267]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4F4</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1268]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4F5</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1269]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4F6</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1270]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4F7</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1271]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4F8</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1272]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4F9</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1273]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4FA</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1274]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4FB</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1275]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4FC</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1276]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4FD</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1277]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4FE</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1278]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4FF</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1279]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x500</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1280]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x501</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1281]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x502</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1282]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x503</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1283]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x504</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1284]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x505</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1285]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x506</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1286]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x507</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1287]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x508</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1288]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x509</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1289]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x50A</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1290]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x50B</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1291]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x50C</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1292]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x50D</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1293]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x50E</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1294]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x50F</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1295]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x510</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1296]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x511</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1297]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x512</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1298]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x513</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1299]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x514</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1300]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x515</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1301]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x516</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1302]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x517</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1303]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x518</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1304]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x519</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1305]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x51A</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1306]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x51B</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1307]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x51C</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1308]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x51D</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1309]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x51E</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1310]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x51F</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1311]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x520</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1312]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x521</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1313]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x522</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1314]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x523</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1315]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x524</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1316]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x525</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1317]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x526</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1318]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x527</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1319]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x528</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1320]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x529</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1321]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x52A</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1322]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x52B</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1323]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x52C</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1324]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x52D</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1325]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x52E</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1326]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x52F</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1327]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x530</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1328]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x531</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1329]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x532</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1330]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x533</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1331]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x534</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1332]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x535</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1333]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x536</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1334]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x537</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1335]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x538</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1336]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x539</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1337]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x53A</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1338]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x53B</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1339]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x53C</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1340]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x53D</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1341]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x53E</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1342]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x53F</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1343]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x540</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1344]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x541</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1345]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x542</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1346]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x543</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1347]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x544</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1348]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x545</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1349]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x546</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1350]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x547</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1351]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x548</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1352]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x549</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1353]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x54A</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1354]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x54B</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1355]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x54C</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1356]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x54D</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1357]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x54E</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1358]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x54F</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1359]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x550</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1360]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x551</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1361]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x552</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1362]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x553</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1363]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x554</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1364]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x555</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1365]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x556</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1366]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x557</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1367]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x558</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1368]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x559</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1369]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x55A</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1370]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x55B</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1371]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x55C</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1372]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x55D</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1373]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x55E</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1374]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x55F</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1375]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x560</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1376]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x561</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1377]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x562</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1378]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x563</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1379]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x564</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1380]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x565</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1381]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x566</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1382]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x567</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1383]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x568</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1384]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x569</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1385]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x56A</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1386]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x56B</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1387]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x56C</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1388]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x56D</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1389]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x56E</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1390]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x56F</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1391]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x570</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1392]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x571</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1393]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x572</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1394]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x573</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1395]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x574</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1396]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x575</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1397]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x576</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1398]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x577</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1399]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x578</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1400]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x579</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1401]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x57A</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1402]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x57B</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1403]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x57C</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1404]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x57D</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1405]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x57E</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1406]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x57F</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1407]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x580</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1408]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x581</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1409]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x582</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1410]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x583</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1411]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x584</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1412]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x585</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1413]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x586</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1414]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x587</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1415]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x588</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1416]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x589</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1417]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x58A</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1418]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x58B</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1419]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x58C</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1420]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x58D</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1421]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x58E</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1422]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x58F</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1423]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x590</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1424]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x591</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1425]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x592</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1426]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x593</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1427]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x594</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1428]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x595</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1429]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x596</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1430]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x597</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1431]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x598</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1432]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x599</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1433]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x59A</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1434]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x59B</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1435]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x59C</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1436]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x59D</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1437]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x59E</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1438]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x59F</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1439]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5A0</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1440]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5A1</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1441]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5A2</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1442]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5A3</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1443]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5A4</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1444]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5A5</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1445]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5A6</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1446]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5A7</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1447]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5A8</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1448]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5A9</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1449]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5AA</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1450]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5AB</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1451]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5AC</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1452]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5AD</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1453]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5AE</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1454]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5AF</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1455]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5B0</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1456]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5B1</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1457]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5B2</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1458]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5B3</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1459]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5B4</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1460]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5B5</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1461]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5B6</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1462]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5B7</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1463]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5B8</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1464]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5B9</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1465]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5BA</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1466]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5BB</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1467]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5BC</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1468]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5BD</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1469]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5BE</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1470]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5BF</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1471]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5C0</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1472]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5C1</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1473]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5C2</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1474]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5C3</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1475]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5C4</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1476]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5C5</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1477]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5C6</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1478]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5C7</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1479]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5C8</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1480]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5C9</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1481]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5CA</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1482]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5CB</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1483]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5CC</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1484]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5CD</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1485]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5CE</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1486]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5CF</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1487]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5D0</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1488]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5D1</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1489]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5D2</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1490]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5D3</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1491]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5D4</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1492]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5D5</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1493]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5D6</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1494]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5D7</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1495]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5D8</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1496]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5D9</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1497]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5DA</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1498]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5DB</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1499]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5DC</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1500]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5DD</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1501]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5DE</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1502]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5DF</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1503]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5E0</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1504]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5E1</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1505]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5E2</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1506]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5E3</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1507]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5E4</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1508]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5E5</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1509]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5E6</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1510]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5E7</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1511]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5E8</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1512]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5E9</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1513]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5EA</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1514]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5EB</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1515]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5EC</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1516]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5ED</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1517]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5EE</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1518]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5EF</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1519]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5F0</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1520]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5F1</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1521]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5F2</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1522]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5F3</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1523]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5F4</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1524]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5F5</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1525]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5F6</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1526]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5F7</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1527]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5F8</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1528]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5F9</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1529]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5FA</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1530]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5FB</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1531]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5FC</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1532]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5FD</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1533]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5FE</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1534]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5FF</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1535]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x600</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1536]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x601</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1537]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x602</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1538]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x603</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1539]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x604</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1540]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x605</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1541]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x606</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1542]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x607</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1543]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x608</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1544]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x609</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1545]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x60A</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1546]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x60B</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1547]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x60C</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1548]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x60D</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1549]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x60E</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1550]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x60F</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1551]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x610</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1552]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x611</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1553]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x612</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1554]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x613</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1555]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x614</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1556]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x615</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1557]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x616</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1558]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x617</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1559]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x618</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1560]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x619</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1561]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x61A</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1562]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x61B</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1563]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x61C</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1564]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x61D</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1565]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x61E</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1566]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x61F</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1567]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x620</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1568]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x621</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1569]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x622</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1570]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x623</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1571]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x624</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1572]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x625</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1573]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x626</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1574]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x627</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1575]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x628</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1576]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x629</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1577]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x62A</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1578]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x62B</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1579]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x62C</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1580]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x62D</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1581]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x62E</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1582]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x62F</addressOffset>
        <description>memory C</description>
        <fields></fields>
        <name>C_MEM[1583]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x630</addressOffset>
        <description>IV block data.</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>IV block data.</description>
            <name>IV_0</name>
          </field>
        </fields>
        <name>IV_0</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x634</addressOffset>
        <description>IV block data.</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>IV block data.</description>
            <name>IV_0</name>
          </field>
        </fields>
        <name>IV_1</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x638</addressOffset>
        <description>IV block data.</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>IV block data.</description>
            <name>IV_0</name>
          </field>
        </fields>
        <name>IV_2</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x63C</addressOffset>
        <description>IV block data.</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>IV block data.</description>
            <name>IV_0</name>
          </field>
        </fields>
        <name>IV_3</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x800</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[0]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x801</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[1]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x802</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[2]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x803</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[3]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x804</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[4]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x805</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[5]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x806</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[6]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x807</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[7]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x808</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[8]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x809</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[9]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x80A</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[10]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x80B</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[11]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x80C</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[12]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x80D</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[13]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x80E</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[14]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x80F</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[15]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x810</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[16]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x811</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[17]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x812</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[18]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x813</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[19]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x814</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[20]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x815</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[21]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x816</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[22]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x817</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[23]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x818</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[24]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x819</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[25]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x81A</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[26]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x81B</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[27]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x81C</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[28]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x81D</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[29]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x81E</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[30]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x81F</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[31]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x820</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[32]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x821</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[33]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x822</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[34]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x823</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[35]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x824</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[36]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x825</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[37]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x826</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[38]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x827</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[39]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x828</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[40]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x829</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[41]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x82A</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[42]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x82B</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[43]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x82C</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[44]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x82D</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[45]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x82E</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[46]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x82F</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[47]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x830</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[48]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x831</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[49]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x832</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[50]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x833</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[51]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x834</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[52]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x835</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[53]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x836</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[54]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x837</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[55]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x838</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[56]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x839</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[57]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x83A</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[58]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x83B</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[59]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x83C</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[60]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x83D</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[61]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x83E</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[62]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x83F</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[63]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x840</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[64]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x841</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[65]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x842</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[66]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x843</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[67]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x844</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[68]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x845</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[69]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x846</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[70]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x847</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[71]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x848</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[72]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x849</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[73]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x84A</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[74]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x84B</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[75]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x84C</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[76]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x84D</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[77]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x84E</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[78]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x84F</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[79]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x850</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[80]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x851</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[81]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x852</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[82]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x853</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[83]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x854</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[84]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x855</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[85]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x856</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[86]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x857</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[87]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x858</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[88]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x859</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[89]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x85A</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[90]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x85B</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[91]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x85C</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[92]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x85D</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[93]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x85E</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[94]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x85F</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[95]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x860</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[96]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x861</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[97]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x862</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[98]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x863</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[99]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x864</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[100]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x865</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[101]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x866</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[102]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x867</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[103]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x868</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[104]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x869</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[105]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x86A</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[106]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x86B</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[107]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x86C</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[108]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x86D</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[109]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x86E</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[110]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x86F</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[111]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x870</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[112]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x871</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[113]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x872</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[114]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x873</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[115]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x874</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[116]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x875</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[117]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x876</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[118]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x877</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[119]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x878</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[120]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x879</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[121]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x87A</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[122]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x87B</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[123]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x87C</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[124]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x87D</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[125]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x87E</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[126]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x87F</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[127]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x880</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[128]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x881</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[129]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x882</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[130]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x883</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[131]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x884</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[132]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x885</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[133]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x886</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[134]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x887</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[135]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x888</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[136]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x889</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[137]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x88A</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[138]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x88B</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[139]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x88C</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[140]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x88D</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[141]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x88E</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[142]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x88F</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[143]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x890</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[144]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x891</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[145]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x892</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[146]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x893</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[147]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x894</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[148]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x895</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[149]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x896</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[150]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x897</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[151]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x898</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[152]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x899</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[153]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x89A</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[154]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x89B</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[155]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x89C</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[156]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x89D</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[157]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x89E</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[158]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x89F</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[159]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8A0</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[160]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8A1</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[161]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8A2</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[162]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8A3</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[163]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8A4</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[164]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8A5</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[165]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8A6</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[166]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8A7</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[167]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8A8</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[168]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8A9</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[169]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8AA</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[170]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8AB</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[171]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8AC</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[172]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8AD</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[173]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8AE</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[174]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8AF</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[175]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8B0</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[176]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8B1</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[177]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8B2</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[178]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8B3</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[179]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8B4</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[180]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8B5</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[181]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8B6</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[182]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8B7</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[183]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8B8</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[184]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8B9</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[185]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8BA</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[186]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8BB</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[187]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8BC</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[188]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8BD</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[189]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8BE</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[190]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8BF</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[191]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8C0</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[192]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8C1</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[193]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8C2</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[194]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8C3</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[195]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8C4</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[196]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8C5</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[197]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8C6</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[198]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8C7</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[199]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8C8</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[200]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8C9</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[201]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8CA</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[202]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8CB</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[203]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8CC</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[204]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8CD</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[205]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8CE</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[206]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8CF</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[207]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8D0</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[208]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8D1</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[209]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8D2</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[210]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8D3</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[211]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8D4</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[212]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8D5</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[213]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8D6</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[214]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8D7</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[215]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8D8</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[216]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8D9</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[217]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8DA</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[218]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8DB</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[219]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8DC</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[220]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8DD</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[221]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8DE</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[222]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8DF</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[223]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8E0</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[224]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8E1</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[225]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8E2</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[226]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8E3</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[227]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8E4</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[228]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8E5</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[229]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8E6</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[230]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8E7</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[231]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8E8</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[232]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8E9</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[233]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8EA</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[234]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8EB</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[235]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8EC</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[236]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8ED</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[237]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8EE</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[238]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8EF</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[239]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8F0</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[240]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8F1</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[241]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8F2</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[242]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8F3</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[243]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8F4</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[244]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8F5</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[245]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8F6</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[246]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8F7</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[247]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8F8</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[248]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8F9</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[249]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8FA</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[250]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8FB</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[251]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8FC</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[252]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8FD</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[253]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8FE</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[254]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8FF</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[255]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x900</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[256]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x901</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[257]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x902</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[258]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x903</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[259]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x904</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[260]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x905</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[261]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x906</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[262]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x907</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[263]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x908</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[264]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x909</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[265]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x90A</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[266]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x90B</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[267]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x90C</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[268]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x90D</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[269]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x90E</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[270]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x90F</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[271]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x910</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[272]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x911</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[273]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x912</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[274]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x913</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[275]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x914</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[276]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x915</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[277]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x916</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[278]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x917</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[279]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x918</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[280]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x919</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[281]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x91A</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[282]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x91B</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[283]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x91C</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[284]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x91D</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[285]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x91E</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[286]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x91F</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[287]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x920</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[288]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x921</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[289]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x922</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[290]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x923</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[291]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x924</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[292]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x925</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[293]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x926</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[294]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x927</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[295]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x928</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[296]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x929</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[297]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x92A</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[298]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x92B</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[299]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x92C</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[300]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x92D</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[301]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x92E</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[302]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x92F</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[303]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x930</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[304]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x931</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[305]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x932</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[306]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x933</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[307]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x934</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[308]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x935</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[309]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x936</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[310]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x937</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[311]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x938</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[312]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x939</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[313]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x93A</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[314]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x93B</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[315]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x93C</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[316]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x93D</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[317]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x93E</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[318]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x93F</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[319]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x940</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[320]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x941</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[321]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x942</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[322]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x943</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[323]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x944</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[324]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x945</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[325]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x946</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[326]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x947</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[327]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x948</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[328]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x949</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[329]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x94A</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[330]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x94B</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[331]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x94C</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[332]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x94D</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[333]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x94E</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[334]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x94F</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[335]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x950</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[336]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x951</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[337]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x952</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[338]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x953</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[339]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x954</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[340]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x955</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[341]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x956</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[342]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x957</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[343]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x958</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[344]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x959</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[345]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x95A</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[346]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x95B</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[347]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x95C</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[348]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x95D</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[349]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x95E</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[350]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x95F</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[351]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x960</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[352]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x961</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[353]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x962</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[354]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x963</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[355]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x964</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[356]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x965</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[357]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x966</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[358]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x967</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[359]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x968</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[360]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x969</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[361]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x96A</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[362]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x96B</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[363]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x96C</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[364]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x96D</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[365]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x96E</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[366]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x96F</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[367]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x970</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[368]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x971</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[369]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x972</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[370]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x973</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[371]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x974</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[372]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x975</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[373]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x976</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[374]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x977</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[375]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x978</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[376]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x979</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[377]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x97A</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[378]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x97B</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[379]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x97C</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[380]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x97D</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[381]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x97E</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[382]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x97F</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[383]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x980</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[384]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x981</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[385]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x982</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[386]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x983</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[387]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x984</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[388]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x985</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[389]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x986</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[390]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x987</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[391]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x988</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[392]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x989</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[393]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x98A</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[394]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x98B</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[395]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x98C</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[396]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x98D</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[397]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x98E</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[398]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x98F</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[399]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x990</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[400]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x991</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[401]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x992</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[402]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x993</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[403]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x994</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[404]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x995</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[405]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x996</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[406]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x997</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[407]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x998</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[408]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x999</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[409]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x99A</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[410]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x99B</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[411]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x99C</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[412]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x99D</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[413]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x99E</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[414]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x99F</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[415]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9A0</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[416]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9A1</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[417]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9A2</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[418]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9A3</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[419]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9A4</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[420]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9A5</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[421]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9A6</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[422]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9A7</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[423]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9A8</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[424]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9A9</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[425]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9AA</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[426]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9AB</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[427]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9AC</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[428]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9AD</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[429]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9AE</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[430]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9AF</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[431]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9B0</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[432]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9B1</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[433]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9B2</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[434]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9B3</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[435]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9B4</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[436]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9B5</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[437]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9B6</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[438]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9B7</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[439]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9B8</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[440]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9B9</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[441]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9BA</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[442]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9BB</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[443]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9BC</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[444]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9BD</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[445]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9BE</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[446]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9BF</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[447]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9C0</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[448]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9C1</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[449]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9C2</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[450]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9C3</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[451]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9C4</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[452]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9C5</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[453]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9C6</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[454]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9C7</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[455]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9C8</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[456]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9C9</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[457]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9CA</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[458]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9CB</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[459]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9CC</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[460]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9CD</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[461]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9CE</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[462]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9CF</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[463]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9D0</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[464]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9D1</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[465]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9D2</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[466]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9D3</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[467]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9D4</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[468]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9D5</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[469]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9D6</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[470]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9D7</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[471]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9D8</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[472]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9D9</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[473]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9DA</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[474]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9DB</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[475]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9DC</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[476]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9DD</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[477]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9DE</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[478]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9DF</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[479]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9E0</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[480]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9E1</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[481]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9E2</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[482]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9E3</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[483]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9E4</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[484]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9E5</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[485]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9E6</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[486]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9E7</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[487]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9E8</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[488]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9E9</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[489]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9EA</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[490]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9EB</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[491]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9EC</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[492]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9ED</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[493]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9EE</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[494]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9EF</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[495]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9F0</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[496]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9F1</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[497]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9F2</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[498]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9F3</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[499]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9F4</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[500]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9F5</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[501]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9F6</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[502]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9F7</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[503]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9F8</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[504]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9F9</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[505]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9FA</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[506]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9FB</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[507]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9FC</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[508]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9FD</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[509]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9FE</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[510]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9FF</addressOffset>
        <description>memory X</description>
        <fields></fields>
        <name>X_MEM[511]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA00</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[0]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA01</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[1]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA02</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[2]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA03</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[3]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA04</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[4]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA05</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[5]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA06</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[6]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA07</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[7]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA08</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[8]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA09</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[9]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA0A</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[10]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA0B</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[11]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA0C</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[12]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA0D</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[13]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA0E</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[14]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA0F</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[15]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA10</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[16]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA11</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[17]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA12</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[18]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA13</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[19]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA14</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[20]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA15</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[21]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA16</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[22]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA17</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[23]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA18</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[24]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA19</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[25]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA1A</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[26]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA1B</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[27]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA1C</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[28]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA1D</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[29]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA1E</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[30]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA1F</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[31]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA20</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[32]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA21</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[33]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA22</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[34]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA23</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[35]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA24</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[36]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA25</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[37]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA26</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[38]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA27</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[39]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA28</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[40]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA29</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[41]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA2A</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[42]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA2B</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[43]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA2C</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[44]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA2D</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[45]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA2E</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[46]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA2F</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[47]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA30</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[48]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA31</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[49]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA32</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[50]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA33</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[51]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA34</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[52]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA35</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[53]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA36</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[54]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA37</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[55]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA38</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[56]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA39</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[57]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA3A</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[58]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA3B</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[59]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA3C</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[60]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA3D</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[61]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA3E</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[62]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA3F</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[63]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA40</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[64]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA41</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[65]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA42</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[66]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA43</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[67]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA44</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[68]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA45</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[69]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA46</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[70]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA47</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[71]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA48</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[72]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA49</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[73]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA4A</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[74]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA4B</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[75]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA4C</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[76]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA4D</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[77]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA4E</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[78]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA4F</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[79]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA50</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[80]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA51</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[81]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA52</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[82]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA53</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[83]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA54</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[84]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA55</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[85]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA56</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[86]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA57</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[87]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA58</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[88]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA59</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[89]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA5A</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[90]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA5B</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[91]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA5C</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[92]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA5D</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[93]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA5E</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[94]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA5F</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[95]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA60</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[96]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA61</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[97]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA62</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[98]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA63</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[99]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA64</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[100]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA65</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[101]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA66</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[102]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA67</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[103]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA68</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[104]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA69</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[105]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA6A</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[106]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA6B</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[107]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA6C</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[108]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA6D</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[109]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA6E</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[110]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA6F</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[111]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA70</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[112]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA71</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[113]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA72</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[114]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA73</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[115]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA74</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[116]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA75</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[117]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA76</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[118]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA77</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[119]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA78</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[120]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA79</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[121]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA7A</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[122]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA7B</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[123]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA7C</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[124]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA7D</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[125]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA7E</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[126]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA7F</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[127]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA80</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[128]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA81</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[129]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA82</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[130]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA83</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[131]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA84</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[132]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA85</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[133]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA86</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[134]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA87</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[135]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA88</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[136]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA89</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[137]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA8A</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[138]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA8B</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[139]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA8C</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[140]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA8D</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[141]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA8E</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[142]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA8F</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[143]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA90</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[144]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA91</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[145]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA92</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[146]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA93</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[147]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA94</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[148]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA95</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[149]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA96</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[150]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA97</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[151]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA98</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[152]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA99</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[153]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA9A</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[154]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA9B</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[155]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA9C</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[156]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA9D</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[157]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA9E</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[158]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA9F</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[159]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAA0</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[160]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAA1</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[161]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAA2</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[162]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAA3</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[163]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAA4</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[164]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAA5</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[165]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAA6</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[166]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAA7</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[167]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAA8</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[168]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAA9</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[169]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAAA</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[170]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAAB</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[171]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAAC</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[172]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAAD</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[173]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAAE</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[174]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAAF</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[175]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAB0</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[176]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAB1</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[177]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAB2</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[178]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAB3</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[179]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAB4</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[180]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAB5</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[181]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAB6</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[182]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAB7</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[183]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAB8</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[184]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAB9</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[185]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xABA</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[186]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xABB</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[187]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xABC</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[188]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xABD</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[189]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xABE</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[190]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xABF</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[191]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAC0</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[192]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAC1</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[193]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAC2</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[194]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAC3</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[195]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAC4</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[196]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAC5</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[197]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAC6</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[198]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAC7</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[199]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAC8</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[200]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAC9</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[201]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xACA</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[202]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xACB</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[203]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xACC</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[204]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xACD</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[205]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xACE</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[206]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xACF</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[207]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAD0</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[208]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAD1</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[209]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAD2</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[210]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAD3</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[211]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAD4</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[212]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAD5</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[213]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAD6</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[214]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAD7</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[215]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAD8</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[216]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAD9</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[217]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xADA</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[218]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xADB</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[219]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xADC</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[220]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xADD</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[221]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xADE</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[222]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xADF</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[223]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAE0</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[224]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAE1</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[225]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAE2</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[226]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAE3</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[227]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAE4</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[228]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAE5</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[229]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAE6</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[230]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAE7</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[231]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAE8</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[232]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAE9</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[233]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAEA</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[234]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAEB</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[235]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAEC</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[236]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAED</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[237]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAEE</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[238]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAEF</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[239]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAF0</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[240]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAF1</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[241]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAF2</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[242]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAF3</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[243]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAF4</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[244]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAF5</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[245]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAF6</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[246]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAF7</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[247]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAF8</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[248]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAF9</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[249]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAFA</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[250]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAFB</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[251]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAFC</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[252]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAFD</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[253]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAFE</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[254]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAFF</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[255]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB00</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[256]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB01</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[257]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB02</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[258]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB03</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[259]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB04</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[260]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB05</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[261]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB06</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[262]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB07</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[263]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB08</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[264]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB09</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[265]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB0A</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[266]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB0B</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[267]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB0C</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[268]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB0D</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[269]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB0E</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[270]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB0F</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[271]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB10</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[272]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB11</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[273]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB12</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[274]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB13</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[275]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB14</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[276]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB15</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[277]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB16</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[278]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB17</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[279]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB18</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[280]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB19</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[281]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB1A</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[282]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB1B</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[283]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB1C</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[284]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB1D</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[285]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB1E</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[286]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB1F</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[287]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB20</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[288]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB21</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[289]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB22</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[290]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB23</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[291]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB24</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[292]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB25</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[293]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB26</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[294]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB27</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[295]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB28</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[296]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB29</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[297]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB2A</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[298]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB2B</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[299]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB2C</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[300]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB2D</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[301]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB2E</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[302]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB2F</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[303]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB30</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[304]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB31</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[305]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB32</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[306]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB33</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[307]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB34</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[308]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB35</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[309]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB36</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[310]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB37</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[311]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB38</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[312]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB39</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[313]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB3A</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[314]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB3B</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[315]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB3C</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[316]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB3D</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[317]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB3E</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[318]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB3F</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[319]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB40</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[320]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB41</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[321]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB42</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[322]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB43</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[323]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB44</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[324]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB45</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[325]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB46</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[326]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB47</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[327]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB48</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[328]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB49</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[329]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB4A</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[330]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB4B</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[331]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB4C</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[332]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB4D</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[333]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB4E</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[334]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB4F</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[335]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB50</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[336]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB51</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[337]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB52</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[338]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB53</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[339]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB54</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[340]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB55</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[341]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB56</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[342]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB57</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[343]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB58</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[344]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB59</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[345]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB5A</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[346]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB5B</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[347]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB5C</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[348]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB5D</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[349]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB5E</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[350]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB5F</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[351]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB60</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[352]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB61</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[353]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB62</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[354]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB63</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[355]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB64</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[356]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB65</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[357]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB66</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[358]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB67</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[359]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB68</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[360]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB69</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[361]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB6A</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[362]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB6B</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[363]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB6C</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[364]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB6D</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[365]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB6E</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[366]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB6F</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[367]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB70</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[368]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB71</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[369]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB72</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[370]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB73</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[371]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB74</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[372]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB75</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[373]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB76</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[374]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB77</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[375]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB78</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[376]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB79</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[377]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB7A</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[378]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB7B</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[379]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB7C</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[380]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB7D</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[381]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB7E</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[382]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB7F</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[383]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB80</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[384]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB81</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[385]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB82</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[386]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB83</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[387]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB84</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[388]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB85</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[389]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB86</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[390]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB87</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[391]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB88</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[392]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB89</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[393]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB8A</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[394]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB8B</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[395]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB8C</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[396]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB8D</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[397]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB8E</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[398]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB8F</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[399]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB90</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[400]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB91</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[401]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB92</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[402]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB93</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[403]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB94</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[404]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB95</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[405]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB96</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[406]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB97</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[407]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB98</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[408]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB99</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[409]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB9A</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[410]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB9B</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[411]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB9C</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[412]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB9D</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[413]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB9E</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[414]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB9F</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[415]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBA0</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[416]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBA1</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[417]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBA2</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[418]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBA3</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[419]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBA4</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[420]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBA5</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[421]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBA6</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[422]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBA7</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[423]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBA8</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[424]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBA9</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[425]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBAA</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[426]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBAB</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[427]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBAC</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[428]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBAD</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[429]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBAE</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[430]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBAF</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[431]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBB0</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[432]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBB1</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[433]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBB2</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[434]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBB3</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[435]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBB4</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[436]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBB5</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[437]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBB6</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[438]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBB7</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[439]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBB8</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[440]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBB9</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[441]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBBA</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[442]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBBB</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[443]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBBC</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[444]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBBD</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[445]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBBE</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[446]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBBF</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[447]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBC0</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[448]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBC1</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[449]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBC2</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[450]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBC3</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[451]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBC4</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[452]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBC5</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[453]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBC6</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[454]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBC7</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[455]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBC8</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[456]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBC9</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[457]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBCA</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[458]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBCB</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[459]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBCC</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[460]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBCD</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[461]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBCE</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[462]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBCF</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[463]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBD0</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[464]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBD1</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[465]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBD2</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[466]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBD3</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[467]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBD4</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[468]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBD5</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[469]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBD6</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[470]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBD7</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[471]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBD8</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[472]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBD9</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[473]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBDA</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[474]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBDB</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[475]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBDC</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[476]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBDD</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[477]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBDE</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[478]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBDF</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[479]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBE0</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[480]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBE1</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[481]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBE2</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[482]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBE3</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[483]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBE4</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[484]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBE5</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[485]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBE6</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[486]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBE7</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[487]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBE8</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[488]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBE9</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[489]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBEA</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[490]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBEB</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[491]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBEC</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[492]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBED</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[493]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBEE</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[494]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBEF</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[495]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBF0</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[496]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBF1</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[497]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBF2</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[498]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBF3</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[499]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBF4</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[500]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBF5</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[501]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBF6</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[502]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBF7</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[503]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBF8</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[504]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBF9</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[505]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBFA</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[506]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBFB</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[507]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBFC</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[508]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBFD</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[509]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBFE</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[510]</name>
        <size>0x8</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBFF</addressOffset>
        <description>memory Z</description>
        <fields></fields>
        <name>Z_MEM[511]</name>
        <size>0x8</size>
      </register>
    </registers>
    <resetMask>0xFFFFFFFF</resetMask>
    <resetValue>0x0</resetValue>
  </peripheral>
</peripherals>
<peripherals>
  <peripheral>
    <addressBlock>
      <offset>0x0</offset>
      <size>0x1D0</size>
      <usage>registers</usage>
    </addressBlock>
    <baseAddress>0x3F41A000</baseAddress>
    <description>eFuse Controller</description>
    <groupName>EFUSE</groupName>
    <interrupts>
      <interrupt>
        <name>EFUSE</name>
        <value>0x2E</value>
      </interrupt>
    </interrupts>
    <name>EFUSE</name>
    <registers>
      <register>
        <addressOffset>0x2C</addressOffset>
        <description>Register 0 of BLOCK0.</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Disables programming of individual eFuses.</description>
            <name>WR_DIS</name>
          </field>
        </fields>
        <name>RD_WR_DIS</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x30</addressOffset>
        <description>Register 1 of BLOCK0.</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x7</bitWidth>
            <description>Disables software reading from individual eFuse blocks (BLOCK4-10).</description>
            <name>RD_DIS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Reserved.</description>
            <name>DIS_RTC_RAM_BOOT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to disable Icache.</description>
            <name>DIS_ICACHE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to disable Dcache.</description>
            <name>DIS_DCACHE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Disables Icache when SoC is in Download mode.</description>
            <name>DIS_DOWNLOAD_ICACHE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Disables Dcache when SoC is in Download mode.</description>
            <name>DIS_DOWNLOAD_DCACHE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to disable the function that forces chip into download mode.</description>
            <name>DIS_FORCE_DOWNLOAD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to disable USB OTG function.</description>
            <name>DIS_USB</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to disable the TWAI Controller function.</description>
            <name>DIS_CAN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Disables capability to Remap RAM to ROM address space.</description>
            <name>DIS_BOOT_REMAP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Software disables JTAG. When software disabled, JTAG can be activated temporarily by HMAC peripheral.</description>
            <name>SOFT_DIS_JTAG</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Hardware disables JTAG permanently.</description>
            <name>HARD_DIS_JTAG</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Disables flash encryption when in download boot modes.</description>
            <name>DIS_DOWNLOAD_MANUAL_ENCRYPT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Controls single-end input threshold vrefh, 1.76 V to 2 V with step of 80 mV, stored in eFuse.</description>
            <name>USB_DREFH</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Controls single-end input threshold vrefl, 0.8 V to 1.04 V with step of 80 mV, stored in eFuse.</description>
            <name>USB_DREFL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to exchange USB D+ and D- pins.</description>
            <name>USB_EXCHG_PINS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable external USB PHY.</description>
            <name>EXT_PHY_ENABLE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>If set, forces USB BVALID to 1.</description>
            <name>USB_FORCE_NOPERSIST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI regulator switches current limit mode.</description>
            <name>VDD_SPI_MODECURLIM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>SPI regulator high voltage reference.</description>
            <name>VDD_SPI_DREFH</name>
          </field>
        </fields>
        <name>RD_REPEAT_DATA0</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x34</addressOffset>
        <description>Register 2 of BLOCK0.</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>SPI regulator medium voltage reference.</description>
            <name>VDD_SPI_DREFM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>SPI regulator low voltage reference.</description>
            <name>VDD_SPI_DREFL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>If VDD_SPI_FORCE is 1, this value determines if the VDD_SPI regulator is powered on.</description>
            <name>VDD_SPI_XPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>If VDD_SPI_FORCE is 1, determines VDD_SPI voltage. 0: VDD_SPI connects to 1.8 V LDO. 1: VDD_SPI connects to VDD_RTC_IO.</description>
            <name>VDD_SPI_TIEH</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to use XPD_VDD_PSI_REG and VDD_SPI_TIEH to configure VDD_SPI LDO.</description>
            <name>VDD_SPI_FORCE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set SPI regulator to 0 to configure init[1:0]=0.</description>
            <name>VDD_SPI_EN_INIT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set SPI regulator to 1 to enable output current limit.</description>
            <name>VDD_SPI_ENCURLIM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Tunes the current limit threshold of SPI regulator when tieh=0, about 800 mA/(8+d).</description>
            <name>VDD_SPI_DCURLIM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Adds resistor from LDO output to ground. 0: no resistance. 1: 6 K. 2: 4 K. 3: 2 K.</description>
            <name>VDD_SPI_INIT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Prevents SPI regulator from overshoot.</description>
            <name>VDD_SPI_DCAP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Selects RTC watchdog timeout threshold at startup. 0: 40,000 slow clock cycles. 1: 80,000 slow clock cycles. 2: 160,000 slow clock cycles. 3: 320,000 slow clock cycles.</description>
            <name>WDT_DELAY_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Enables encryption and decryption, when an SPI boot mode is set. Feature is enabled 1 or 3 bits are set in the eFuse, disabled otherwise.</description>
            <name>SPI_BOOT_CRYPT_CNT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>If set, revokes use of secure boot key digest 0.</description>
            <name>SECURE_BOOT_KEY_REVOKE0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>If set, revokes use of secure boot key digest 1.</description>
            <name>SECURE_BOOT_KEY_REVOKE1</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>If set, revokes use of secure boot key digest 2.</description>
            <name>SECURE_BOOT_KEY_REVOKE2</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Purpose of KEY0. Refer to Table Key Purpose Values.</description>
            <name>KEY_PURPOSE_0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Purpose of KEY1. Refer to Table Key Purpose Values.</description>
            <name>KEY_PURPOSE_1</name>
          </field>
        </fields>
        <name>RD_REPEAT_DATA1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x38</addressOffset>
        <description>Register 3 of BLOCK0.</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Purpose of KEY2. Refer to Table Key Purpose Values.</description>
            <name>KEY_PURPOSE_2</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Purpose of KEY3. Refer to Table Key Purpose Values.</description>
            <name>KEY_PURPOSE_3</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Purpose of KEY4. Refer to Table Key Purpose Values.</description>
            <name>KEY_PURPOSE_4</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Purpose of KEY5. Refer to Table Key Purpose Values.</description>
            <name>KEY_PURPOSE_5</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Purpose of KEY6. Refer to Table Key Purpose Values.</description>
            <name>KEY_PURPOSE_6</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable secure boot.</description>
            <name>SECURE_BOOT_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable aggressive secure boot key revocation mode.</description>
            <name>SECURE_BOOT_AGGRESSIVE_REVOKE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Configures flash startup delay after SoC power-up, in unit of (ms/2). When the value is 15, delay is 7.5 ms.</description>
            <name>FLASH_TPUW</name>
          </field>
        </fields>
        <name>RD_REPEAT_DATA2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3C</addressOffset>
        <description>Register 4 of BLOCK0.</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to disable all download boot modes.</description>
            <name>DIS_DOWNLOAD_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to disable Legacy SPI boot mode.</description>
            <name>DIS_LEGACY_SPI_BOOT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Selects the default UART for printing boot messages. 0: UART0. 1: UART1.</description>
            <name>UART_PRINT_CHANNEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to disable use of USB OTG in UART download boot mode.</description>
            <name>DIS_USB_DOWNLOAD_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable secure UART download mode (read/write flash only).</description>
            <name>ENABLE_SECURITY_DOWNLOAD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Set the default UART boot message output mode. 00: Enabled. 01: Enable when GPIO46 is low at reset. 10: Enable when GPIO46 is high at reset. 11: Disabled.</description>
            <name>UART_PRINT_CONTROL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set default power supply for GPIO33-GPIO37, set when SPI flash is initialized. 0: VDD3P3_CPU. 1: VDD_SPI.</description>
            <name>PIN_POWER_SELECTION</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI flash type. 0: maximum four data lines, 1: eight data lines.</description>
            <name>FLASH_TYPE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>If set, forces ROM code to send an SPI flash resume command during SPI boot.</description>
            <name>FORCE_SEND_RESUME</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>Secure version (used by ESP-IDF anti-rollback feature).</description>
            <name>SECURE_VERSION</name>
          </field>
        </fields>
        <name>RD_REPEAT_DATA3</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x40</addressOffset>
        <description>Register 5 of BLOCK0.</description>
        <fields></fields>
        <name>RD_REPEAT_DATA4</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x44</addressOffset>
        <description>Register 0 of BLOCK1.</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the low 32 bits of MAC address.</description>
            <name>MAC_0</name>
          </field>
        </fields>
        <name>RD_MAC_SPI_SYS_0</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x48</addressOffset>
        <description>Register 1 of BLOCK1.</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>Stores the high 16 bits of MAC address.</description>
            <name>MAC_1</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>Stores the zeroth part of SPI_PAD_CONF.</description>
            <name>SPI_PAD_CONF_0</name>
          </field>
        </fields>
        <name>RD_MAC_SPI_SYS_1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4C</addressOffset>
        <description>Register 2 of BLOCK1.</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the first part of SPI_PAD_CONF.</description>
            <name>SPI_PAD_CONF_1</name>
          </field>
        </fields>
        <name>RD_MAC_SPI_SYS_2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x50</addressOffset>
        <description>Register 3 of BLOCK1.</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x12</bitWidth>
            <description>Stores the second part of SPI_PAD_CONF.</description>
            <name>SPI_PAD_CONF_2</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0xE</bitWidth>
            <description>Stores the zeroth part  of the zeroth part of system data.</description>
            <name>SYS_DATA_PART0_0</name>
          </field>
        </fields>
        <name>RD_MAC_SPI_SYS_3</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x54</addressOffset>
        <description>Register 4 of BLOCK1.</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the fist part of the zeroth part of system data.</description>
            <name>SYS_DATA_PART0_1</name>
          </field>
        </fields>
        <name>RD_MAC_SPI_SYS_4</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x58</addressOffset>
        <description>Register 5 of BLOCK1.</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the second part of the zeroth part of system data.</description>
            <name>SYS_DATA_PART0_2</name>
          </field>
        </fields>
        <name>RD_MAC_SPI_SYS_5</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x17C</addressOffset>
        <description>Programming error record register 0 of BLOCK0.</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x7</bitWidth>
            <description>Any bit equal to 1 denotes a programming error in EFUSE_RD_DIS.</description>
            <name>RD_DIS_ERR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Any bit equal to 1 denotes a programming error in EFUSE_DIS_RTC_RAM_BOOT.</description>
            <name>DIS_RTC_RAM_BOOT_ERR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Any bit equal to 1 denotes a programming error in EFUSE_DIS_ICACHE.</description>
            <name>DIS_ICACHE_ERR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Any bit equal to 1 denotes a programming error in EFUSE_DIS_DCACHE.</description>
            <name>DIS_DCACHE_ERR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Any bit equal to 1 denotes a programming error in EFUSE_DIS_DOWNLOAD_ICACHE.</description>
            <name>DIS_DOWNLOAD_ICACHE_ERR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Any bit equal to 1 denotes a programming error in EFUSE_DIS_DOWNLOAD_DCACHE.</description>
            <name>DIS_DOWNLOAD_DCACHE_ERR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Any bit equal to 1 denotes a programming error in EFUSE_DIS_FORCE_DOWNLOAD.</description>
            <name>DIS_FORCE_DOWNLOAD_ERR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Any bit equal to 1 denotes a programming error in EFUSE_DIS_USB.</description>
            <name>DIS_USB_ERR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Any bit equal to 1 denotes a programming error in EFUSE_DIS_CAN.</description>
            <name>DIS_CAN_ERR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Any bit equal to 1 denotes a programming error in EFUSE_DIS_BOOT_REMAP.</description>
            <name>DIS_BOOT_REMAP_ERR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Any bit equal to 1 denotes a programming error in EFUSE_SOFT_DIS_JTAG.</description>
            <name>SOFT_DIS_JTAG_ERR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Any bit equal to 1 denotes a programming error in EFUSE_HARD_DIS_JTAG.</description>
            <name>HARD_DIS_JTAG_ERR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Any bit equal to 1 denotes a programming error in EFUSE_DIS_DOWNLOAD_MANUAL_ENCRYPT.</description>
            <name>DIS_DOWNLOAD_MANUAL_ENCRYPT_ERR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Any bit equal to 1 denotes a programming error in EFUSE_USB_DREFH.</description>
            <name>USB_DREFH_ERR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Any bit equal to 1 denotes a programming error in EFUSE_USB_DREFL.</description>
            <name>USB_DREFL_ERR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Any bit equal to 1 denotes a programming error in EFUSE_USB_EXCHG_PINS.</description>
            <name>USB_EXCHG_PINS_ERR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Any bit equal to 1 denotes a programming error in EFUSE_EXT_PHY_ENABLE.</description>
            <name>EXT_PHY_ENABLE_ERR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Any bit equal to 1 denotes a programming error in EFUSE_USB_FORCE_NOPERSIST.</description>
            <name>USB_FORCE_NOPERSIST_ERR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Any bit equal to 1 denotes a programming error in EFUSE_VDD_SPI_MODECURLIM.</description>
            <name>VDD_SPI_MODECURLIM_ERR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Any bit equal to 1 denotes a programming error in EFUSE_VDD_SPI_DREFH.</description>
            <name>VDD_SPI_DREFH_ERR</name>
          </field>
        </fields>
        <name>RD_REPEAT_ERR0</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x180</addressOffset>
        <description>Programming error record register 1 of BLOCK0.</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Any bit equal to 1 denotes a programming error in EFUSE_VDD_SPI_DREFM.</description>
            <name>VDD_SPI_DREFM_ERR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Any bit equal to 1 denotes a programming error in EFUSE_VDD_SPI_DREFL.</description>
            <name>VDD_SPI_DREFL_ERR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Any bit equal to 1 denotes a programming error in EFUSE_VDD_SPI_XPD.</description>
            <name>VDD_SPI_XPD_ERR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Any bit equal to 1 denotes a programming error in EFUSE_VDD_SPI_TIEH.</description>
            <name>VDD_SPI_TIEH_ERR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Any bit equal to 1 denotes a programming error in EFUSE_VDD_SPI_FORCE.</description>
            <name>VDD_SPI_FORCE_ERR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Any bit equal to 1 denotes a programming error in EFUSE_VDD_SPI_EN_INIT.</description>
            <name>VDD_SPI_EN_INIT_ERR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Any bit equal to 1 denotes a programming error in EFUSE_VDD_SPI_ENCURLIM.</description>
            <name>VDD_SPI_ENCURLIM_ERR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Any bit equal to 1 denotes a programming error in EFUSE_VDD_SPI_DCURLIM.</description>
            <name>VDD_SPI_DCURLIM_ERR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Any bit equal to 1 denotes a programming error in EFUSE_VDD_SPI_INIT.</description>
            <name>VDD_SPI_INIT_ERR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Any bit equal to 1 denotes a programming error in EFUSE_VDD_SPI_DCAP.</description>
            <name>VDD_SPI_DCAP_ERR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Any bit equal to 1 denotes a programming error in EFUSE_WDT_DELAY_SEL.</description>
            <name>WDT_DELAY_SEL_ERR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Any bit equal to 1 denotes a programming error in EFUSE_SPI_BOOT_CRYPT_CNT.</description>
            <name>SPI_BOOT_CRYPT_CNT_ERR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Any bit equal to 1 denotes a programming error in EFUSE_SECURE_BOOT_KEY_REVOKE0.</description>
            <name>SECURE_BOOT_KEY_REVOKE0_ERR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Any bit equal to 1 denotes a programming error in EFUSE_SECURE_BOOT_KEY_REVOKE1.</description>
            <name>SECURE_BOOT_KEY_REVOKE1_ERR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Any bit equal to 1 denotes a programming error in EFUSE_SECURE_BOOT_KEY_REVOKE2.</description>
            <name>SECURE_BOOT_KEY_REVOKE2_ERR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Any bit equal to 1 denotes a programming error in EFUSE_KEY_PURPOSE_0.</description>
            <name>KEY_PURPOSE_0_ERR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Any bit equal to 1 denotes a programming error in EFUSE_KEY_PURPOSE_1.</description>
            <name>KEY_PURPOSE_1_ERR</name>
          </field>
        </fields>
        <name>RD_REPEAT_ERR1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x184</addressOffset>
        <description>Programming error record register 2 of BLOCK0.</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Any bit equal to 1 denotes a programming error in EFUSE_KEY_PURPOSE_2.</description>
            <name>KEY_PURPOSE_2_ERR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Any bit equal to 1 denotes a programming error in EFUSE_KEY_PURPOSE_3.</description>
            <name>KEY_PURPOSE_3_ERR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Any bit equal to 1 denotes a programming error in EFUSE_KEY_PURPOSE_4.</description>
            <name>KEY_PURPOSE_4_ERR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Any bit equal to 1 denotes a programming error in EFUSE_KEY_PURPOSE_5.</description>
            <name>KEY_PURPOSE_5_ERR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Any bit equal to 1 denotes a programming error in EFUSE_KEY_PURPOSE_6.</description>
            <name>KEY_PURPOSE_6_ERR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Any bit equal to 1 denotes a programming error in EFUSE_SECURE_BOOT_EN.</description>
            <name>SECURE_BOOT_EN_ERR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Any bit equal to 1 denotes a programming error in EFUSE_SECURE_BOOT_AGGRESSIVE_REVOKE.</description>
            <name>SECURE_BOOT_AGGRESSIVE_REVOKE_ERR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Any bit equal to 1 denotes a programming error in EFUSE_FLASH_TPUW.</description>
            <name>FLASH_TPUW_ERR</name>
          </field>
        </fields>
        <name>RD_REPEAT_ERR2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x188</addressOffset>
        <description>Programming error record register 3 of BLOCK0.</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Any bit equal to 1 denotes a programming error in EFUSE_DIS_DOWNLOAD_MODE.</description>
            <name>DIS_DOWNLOAD_MODE_ERR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Any bit equal to 1 denotes a programming error in EFUSE_DIS_LEGACY_SPI_BOOT.</description>
            <name>DIS_LEGACY_SPI_BOOT_ERR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Any bit equal to 1 denotes a programming error in EFUSE_UART_PRINT_CHANNEL.</description>
            <name>UART_PRINT_CHANNEL_ERR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Any bit equal to 1 denotes a programming error in EFUSE_DIS_USB_DOWNLOAD_MODE.</description>
            <name>DIS_USB_DOWNLOAD_MODE_ERR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Any bit equal to 1 denotes a programming error in EFUSE_ENABLE_SECURITY_DOWNLOAD.</description>
            <name>ENABLE_SECURITY_DOWNLOAD_ERR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Any bit equal to 1 denotes a programming error in EFUSE_UART_PRINT_CONTROL.</description>
            <name>UART_PRINT_CONTROL_ERR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Any bit equal to 1 denotes a programming error in EFUSE_PIN_POWER_SELECTION.</description>
            <name>PIN_POWER_SELECTION_ERR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Any bit equal to 1 denotes a programming error in EFUSE_FLASH_TYPE.</description>
            <name>FLASH_TYPE_ERR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Any bit equal to 1 denotes a programming error in EFUSE_FORCE_SEND_RESUME.</description>
            <name>FORCE_SEND_RESUME_ERR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>Any bit equal to 1 denotes a programming error in EFUSE_SECURE_VERSION.</description>
            <name>SECURE_VERSION_ERR</name>
          </field>
        </fields>
        <name>RD_REPEAT_ERR3</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x190</addressOffset>
        <description>Programming error record register 4 of BLOCK0.</description>
        <fields></fields>
        <name>RD_REPEAT_ERR4</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1C0</addressOffset>
        <description>Programming error record register 0 of BLOCK1-10.</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>The value of this signal means the number of error bytes in BLOCK1.</description>
            <name>MAC_SPI_8M_ERR_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Means no failure and that the data of BLOCK1 is reliable. 1: Means that programming BLOCK1 data failed and the number of error bytes is over 5.</description>
            <name>MAC_SPI_8M_FAIL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>The value of this signal means the number of error bytes in BLOCK2.</description>
            <name>SYS_PART1_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Means no failure and that the data of BLOCK2 is reliable. 1: Means that programming BLOCK2 data failed and the number of error bytes is over 5.</description>
            <name>SYS_PART1_FAIL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>The value of this signal means the number of error bytes in BLOCK3.</description>
            <name>USR_DATA_ERR_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Means no failure and that the data of BLOCK3 is reliable. 1: Means that programming BLOCK3 data failed and the number of error bytes is over 5.</description>
            <name>USR_DATA_FAIL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>The value of this signal means the number of error bytes in KEY0.</description>
            <name>KEY0_ERR_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Means no failure and that the data of KEY0 is reliable. 1: Means that programming KEY0 failed and the number of error bytes is over 5.</description>
            <name>KEY0_FAIL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>The value of this signal means the number of error bytes in KEY1.</description>
            <name>KEY1_ERR_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Means no failure and that the data of KEY1 is reliable. 1: Means that programming KEY1 failed and the number of error bytes is over 5.</description>
            <name>KEY1_FAIL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>The value of this signal means the number of error bytes in KEY2.</description>
            <name>KEY2_ERR_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Means no failure and that the data of KEY2 is reliable. 1: Means that programming KEY2 failed and the number of error bytes is over 5.</description>
            <name>KEY2_FAIL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>The value of this signal means the number of error bytes in KEY3.</description>
            <name>KEY3_ERR_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Means no failure and that the data of KEY3 is reliable. 1: Means that programming KEY3 failed and the number of error bytes is over 5.</description>
            <name>KEY3_FAIL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>The value of this signal means the number of error bytes in KEY4.</description>
            <name>KEY4_ERR_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Means no failure and that the data of KEY4 is reliable. 1: Means that programming KEY4 failed and the number of error bytes is over 5.</description>
            <name>KEY4_FAIL</name>
          </field>
        </fields>
        <name>RD_RS_ERR0</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1C4</addressOffset>
        <description>Programming error record register 1 of BLOCK1-10.</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>The value of this signal means the number of error bytes in KEY5.</description>
            <name>KEY5_ERR_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Means no failure and that the data of KEY5 is reliable. 1: Means that programming user data failed and the number of error bytes is over 5.</description>
            <name>KEY5_FAIL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>The value of this signal means the number of error bytes in BLOCK10.</description>
            <name>SYS_PART2_ERR_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Means no failure and that the data of BLOCK10 is reliable. 1: Means that programming BLOCK10 data failed and the number of error bytes is over 5.</description>
            <name>SYS_PART2_FAIL</name>
          </field>
        </fields>
        <name>RD_RS_ERR1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1C8</addressOffset>
        <description>eFuse clock configuration register.</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>If set, forces eFuse SRAM into power-saving mode.</description>
            <name>EFUSE_MEM_FORCE_PD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>If set, forces to activate clock signal of eFuse SRAM.</description>
            <name>MEM_CLK_FORCE_ON</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>If set, forces eFuse SRAM into working mode.</description>
            <name>EFUSE_MEM_FORCE_PU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>If set, forces to enable clock signal of eFuse memory.</description>
            <name>EN</name>
          </field>
        </fields>
        <name>CLK</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x2</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1CC</addressOffset>
        <description>eFuse operation mode configuration register.</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>0x5A5A: Operate programming command. 0x5AA5: Operate read command.</description>
            <name>OP_CODE</name>
          </field>
        </fields>
        <name>CONF</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1D0</addressOffset>
        <description>eFuse status register.</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Indicates the state of the eFuse state machine.</description>
            <name>STATE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The value of OTP_LOAD_SW.</description>
            <name>OTP_LOAD_SW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The value of OTP_VDDQ_C_SYNC2.</description>
            <name>OTP_VDDQ_C_SYNC2</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The value of OTP_STROBE_SW.</description>
            <name>OTP_STROBE_SW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The value of OTP_CSB_SW.</description>
            <name>OTP_CSB_SW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The value of OTP_PGENB_SW.</description>
            <name>OTP_PGENB_SW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The value of OTP_VDDQ_IS_SW.</description>
            <name>OTP_VDDQ_IS_SW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>Indicates the number of error bits during programming BLOCK0.</description>
            <name>REPEAT_ERR_CNT</name>
          </field>
        </fields>
        <name>STATUS</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1D4</addressOffset>
        <description>eFuse command register.</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to send read command.</description>
            <name>READ_CMD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to send programming command.</description>
            <name>PGM_CMD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>The serial number of the block to be programmed. Value 0-10 corresponds to block number 0-10, respectively.</description>
            <name>BLK_NUM</name>
          </field>
        </fields>
        <name>CMD</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1D8</addressOffset>
        <description>eFuse raw interrupt register.</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw bit signal for read_done interrupt.</description>
            <name>READ_DONE_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw bit signal for pgm_done interrupt.</description>
            <name>PGM_DONE_INT_RAW</name>
          </field>
        </fields>
        <name>INT_RAW</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1DC</addressOffset>
        <description>eFuse interrupt status register.</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The status signal for read_done interrupt.</description>
            <name>READ_DONE_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The status signal for pgm_done interrupt.</description>
            <name>PGM_DONE_INT_ST</name>
          </field>
        </fields>
        <name>INT_ST</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1E0</addressOffset>
        <description>eFuse interrupt enable register.</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The enable signal for read_done interrupt.</description>
            <name>READ_DONE_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The enable signal for pgm_done interrupt.</description>
            <name>PGM_DONE_INT_ENA</name>
          </field>
        </fields>
        <name>INT_ENA</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1E4</addressOffset>
        <description>eFuse interrupt clear register.</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The clear signal for read_done interrupt.</description>
            <name>READ_DONE_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The clear signal for pgm_done interrupt.</description>
            <name>PGM_DONE_INT_CLR</name>
          </field>
        </fields>
        <name>INT_CLR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1E8</addressOffset>
        <description>Controls the eFuse programming voltage.</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>Controls the division factor of the rising clock of the programming voltage.</description>
            <name>DAC_CLK_DIV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Don't care.</description>
            <name>DAC_CLK_PAD_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>Controls the rising period of the programming voltage.</description>
            <name>DAC_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Reduces the power supply of the programming voltage.</description>
            <name>OE_CLR</name>
          </field>
        </fields>
        <name>DAC_CONF</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x1FE1C</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1EC</addressOffset>
        <description>Configures read timing parameters.</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>Configures the hold time of read operation.</description>
            <name>THR_A</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>Configures the length of pulse of read operation.</description>
            <name>TRD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>Configures the setup time of read operation.</description>
            <name>TSUR_A</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>Configures the initial read time of eFuse.</description>
            <name>READ_INIT_NUM</name>
          </field>
        </fields>
        <name>RD_TIM_CONF</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x12010101</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1F0</addressOffset>
        <description>Configuration register 0 of eFuse programming timing parameters.</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>Configures the hold time of programming operation.</description>
            <name>THP_A</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>Configures the length of pulse during programming 0 to eFuse.</description>
            <name>TPGM_INACTIVE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>Configures the length of pulse during programming 1 to eFuse.</description>
            <name>TPGM</name>
          </field>
        </fields>
        <name>WR_TIM_CONF0</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xC80101</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1F4</addressOffset>
        <description>Configuration register 1 of eFuse programming timing parameters.</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>Configures the setup time of programming operation.</description>
            <name>TSUP_A</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>Configures the power up time for VDDQ.</description>
            <name>PWR_ON_NUM</name>
          </field>
        </fields>
        <name>WR_TIM_CONF1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x288001</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1F8</addressOffset>
        <description>Configuration register 2 of eFuse programming timing parameters.</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>Configures the power outage time for VDDQ.</description>
            <name>PWR_OFF_NUM</name>
          </field>
        </fields>
        <name>WR_TIM_CONF2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x190</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1FC</addressOffset>
        <description>Version control register.</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Version control register.</description>
            <name>DATE</name>
          </field>
        </fields>
        <name>DATE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x19081100</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x0</addressOffset>
        <description>Register %s that stores data to be programmed.</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The content of the %sth 32-bit data to be programmed.</description>
            <name>PGM_DATA_0</name>
          </field>
        </fields>
        <name>PGM_DATA0</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4</addressOffset>
        <description>Register %s that stores data to be programmed.</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The content of the %sth 32-bit data to be programmed.</description>
            <name>PGM_DATA_0</name>
          </field>
        </fields>
        <name>PGM_DATA1</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8</addressOffset>
        <description>Register %s that stores data to be programmed.</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The content of the %sth 32-bit data to be programmed.</description>
            <name>PGM_DATA_0</name>
          </field>
        </fields>
        <name>PGM_DATA2</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xC</addressOffset>
        <description>Register %s that stores data to be programmed.</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The content of the %sth 32-bit data to be programmed.</description>
            <name>PGM_DATA_0</name>
          </field>
        </fields>
        <name>PGM_DATA3</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x10</addressOffset>
        <description>Register %s that stores data to be programmed.</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The content of the %sth 32-bit data to be programmed.</description>
            <name>PGM_DATA_0</name>
          </field>
        </fields>
        <name>PGM_DATA4</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x14</addressOffset>
        <description>Register %s that stores data to be programmed.</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The content of the %sth 32-bit data to be programmed.</description>
            <name>PGM_DATA_0</name>
          </field>
        </fields>
        <name>PGM_DATA5</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x18</addressOffset>
        <description>Register %s that stores data to be programmed.</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The content of the %sth 32-bit data to be programmed.</description>
            <name>PGM_DATA_0</name>
          </field>
        </fields>
        <name>PGM_DATA6</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1C</addressOffset>
        <description>Register %s that stores data to be programmed.</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The content of the %sth 32-bit data to be programmed.</description>
            <name>PGM_DATA_0</name>
          </field>
        </fields>
        <name>PGM_DATA7</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x20</addressOffset>
        <description>Register %s that stores the RS code to be programmed.</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The content of the %sth 32-bit RS code to be programmed.</description>
            <name>PGM_RS_DATA_0</name>
          </field>
        </fields>
        <name>PGM_CHECK_VALUE0</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x24</addressOffset>
        <description>Register %s that stores the RS code to be programmed.</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The content of the %sth 32-bit RS code to be programmed.</description>
            <name>PGM_RS_DATA_0</name>
          </field>
        </fields>
        <name>PGM_CHECK_VALUE1</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x28</addressOffset>
        <description>Register %s that stores the RS code to be programmed.</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The content of the %sth 32-bit RS code to be programmed.</description>
            <name>PGM_RS_DATA_0</name>
          </field>
        </fields>
        <name>PGM_CHECK_VALUE2</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5C</addressOffset>
        <description>Register %s of BLOCK2 (system).</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32 bits of the first part of system data.</description>
            <name>SYS_DATA_PART1_0</name>
          </field>
        </fields>
        <name>RD_SYS_DATA_PART1_0</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x60</addressOffset>
        <description>Register %s of BLOCK2 (system).</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32 bits of the first part of system data.</description>
            <name>SYS_DATA_PART1_0</name>
          </field>
        </fields>
        <name>RD_SYS_DATA_PART1_1</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x64</addressOffset>
        <description>Register %s of BLOCK2 (system).</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32 bits of the first part of system data.</description>
            <name>SYS_DATA_PART1_0</name>
          </field>
        </fields>
        <name>RD_SYS_DATA_PART1_2</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x68</addressOffset>
        <description>Register %s of BLOCK2 (system).</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32 bits of the first part of system data.</description>
            <name>SYS_DATA_PART1_0</name>
          </field>
        </fields>
        <name>RD_SYS_DATA_PART1_3</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x6C</addressOffset>
        <description>Register %s of BLOCK2 (system).</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32 bits of the first part of system data.</description>
            <name>SYS_DATA_PART1_0</name>
          </field>
        </fields>
        <name>RD_SYS_DATA_PART1_4</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x70</addressOffset>
        <description>Register %s of BLOCK2 (system).</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32 bits of the first part of system data.</description>
            <name>SYS_DATA_PART1_0</name>
          </field>
        </fields>
        <name>RD_SYS_DATA_PART1_5</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x74</addressOffset>
        <description>Register %s of BLOCK2 (system).</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32 bits of the first part of system data.</description>
            <name>SYS_DATA_PART1_0</name>
          </field>
        </fields>
        <name>RD_SYS_DATA_PART1_6</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x78</addressOffset>
        <description>Register %s of BLOCK2 (system).</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32 bits of the first part of system data.</description>
            <name>SYS_DATA_PART1_0</name>
          </field>
        </fields>
        <name>RD_SYS_DATA_PART1_7</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x7C</addressOffset>
        <description>Register %s of BLOCK3 (user).</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32 bits of BLOCK3 (user).</description>
            <name>USR_DATA0</name>
          </field>
        </fields>
        <name>RD_USR_DATA0</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x80</addressOffset>
        <description>Register %s of BLOCK3 (user).</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32 bits of BLOCK3 (user).</description>
            <name>USR_DATA0</name>
          </field>
        </fields>
        <name>RD_USR_DATA1</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x84</addressOffset>
        <description>Register %s of BLOCK3 (user).</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32 bits of BLOCK3 (user).</description>
            <name>USR_DATA0</name>
          </field>
        </fields>
        <name>RD_USR_DATA2</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x88</addressOffset>
        <description>Register %s of BLOCK3 (user).</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32 bits of BLOCK3 (user).</description>
            <name>USR_DATA0</name>
          </field>
        </fields>
        <name>RD_USR_DATA3</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8C</addressOffset>
        <description>Register %s of BLOCK3 (user).</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32 bits of BLOCK3 (user).</description>
            <name>USR_DATA0</name>
          </field>
        </fields>
        <name>RD_USR_DATA4</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x90</addressOffset>
        <description>Register %s of BLOCK3 (user).</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32 bits of BLOCK3 (user).</description>
            <name>USR_DATA0</name>
          </field>
        </fields>
        <name>RD_USR_DATA5</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x94</addressOffset>
        <description>Register %s of BLOCK3 (user).</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32 bits of BLOCK3 (user).</description>
            <name>USR_DATA0</name>
          </field>
        </fields>
        <name>RD_USR_DATA6</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x98</addressOffset>
        <description>Register %s of BLOCK3 (user).</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32 bits of BLOCK3 (user).</description>
            <name>USR_DATA0</name>
          </field>
        </fields>
        <name>RD_USR_DATA7</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9C</addressOffset>
        <description>Register %s of BLOCK4 (KEY0).</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32 bits of KEY0.</description>
            <name>KEY0_DATA0</name>
          </field>
        </fields>
        <name>RD_KEY0_DATA0</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA0</addressOffset>
        <description>Register %s of BLOCK4 (KEY0).</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32 bits of KEY0.</description>
            <name>KEY0_DATA0</name>
          </field>
        </fields>
        <name>RD_KEY0_DATA1</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA4</addressOffset>
        <description>Register %s of BLOCK4 (KEY0).</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32 bits of KEY0.</description>
            <name>KEY0_DATA0</name>
          </field>
        </fields>
        <name>RD_KEY0_DATA2</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA8</addressOffset>
        <description>Register %s of BLOCK4 (KEY0).</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32 bits of KEY0.</description>
            <name>KEY0_DATA0</name>
          </field>
        </fields>
        <name>RD_KEY0_DATA3</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAC</addressOffset>
        <description>Register %s of BLOCK4 (KEY0).</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32 bits of KEY0.</description>
            <name>KEY0_DATA0</name>
          </field>
        </fields>
        <name>RD_KEY0_DATA4</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB0</addressOffset>
        <description>Register %s of BLOCK4 (KEY0).</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32 bits of KEY0.</description>
            <name>KEY0_DATA0</name>
          </field>
        </fields>
        <name>RD_KEY0_DATA5</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB4</addressOffset>
        <description>Register %s of BLOCK4 (KEY0).</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32 bits of KEY0.</description>
            <name>KEY0_DATA0</name>
          </field>
        </fields>
        <name>RD_KEY0_DATA6</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB8</addressOffset>
        <description>Register %s of BLOCK4 (KEY0).</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32 bits of KEY0.</description>
            <name>KEY0_DATA0</name>
          </field>
        </fields>
        <name>RD_KEY0_DATA7</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBC</addressOffset>
        <description>Register %s of BLOCK5 (KEY1).</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32 bits of KEY1.</description>
            <name>KEY1_DATA0</name>
          </field>
        </fields>
        <name>RD_KEY1_DATA0</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xC0</addressOffset>
        <description>Register %s of BLOCK5 (KEY1).</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32 bits of KEY1.</description>
            <name>KEY1_DATA0</name>
          </field>
        </fields>
        <name>RD_KEY1_DATA1</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xC4</addressOffset>
        <description>Register %s of BLOCK5 (KEY1).</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32 bits of KEY1.</description>
            <name>KEY1_DATA0</name>
          </field>
        </fields>
        <name>RD_KEY1_DATA2</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xC8</addressOffset>
        <description>Register %s of BLOCK5 (KEY1).</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32 bits of KEY1.</description>
            <name>KEY1_DATA0</name>
          </field>
        </fields>
        <name>RD_KEY1_DATA3</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xCC</addressOffset>
        <description>Register %s of BLOCK5 (KEY1).</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32 bits of KEY1.</description>
            <name>KEY1_DATA0</name>
          </field>
        </fields>
        <name>RD_KEY1_DATA4</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xD0</addressOffset>
        <description>Register %s of BLOCK5 (KEY1).</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32 bits of KEY1.</description>
            <name>KEY1_DATA0</name>
          </field>
        </fields>
        <name>RD_KEY1_DATA5</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xD4</addressOffset>
        <description>Register %s of BLOCK5 (KEY1).</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32 bits of KEY1.</description>
            <name>KEY1_DATA0</name>
          </field>
        </fields>
        <name>RD_KEY1_DATA6</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xD8</addressOffset>
        <description>Register %s of BLOCK5 (KEY1).</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32 bits of KEY1.</description>
            <name>KEY1_DATA0</name>
          </field>
        </fields>
        <name>RD_KEY1_DATA7</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xDC</addressOffset>
        <description>Register %s of BLOCK6 (KEY2).</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32 bits of KEY2.</description>
            <name>KEY2_DATA0</name>
          </field>
        </fields>
        <name>RD_KEY2_DATA0</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xE0</addressOffset>
        <description>Register %s of BLOCK6 (KEY2).</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32 bits of KEY2.</description>
            <name>KEY2_DATA0</name>
          </field>
        </fields>
        <name>RD_KEY2_DATA1</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xE4</addressOffset>
        <description>Register %s of BLOCK6 (KEY2).</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32 bits of KEY2.</description>
            <name>KEY2_DATA0</name>
          </field>
        </fields>
        <name>RD_KEY2_DATA2</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xE8</addressOffset>
        <description>Register %s of BLOCK6 (KEY2).</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32 bits of KEY2.</description>
            <name>KEY2_DATA0</name>
          </field>
        </fields>
        <name>RD_KEY2_DATA3</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xEC</addressOffset>
        <description>Register %s of BLOCK6 (KEY2).</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32 bits of KEY2.</description>
            <name>KEY2_DATA0</name>
          </field>
        </fields>
        <name>RD_KEY2_DATA4</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xF0</addressOffset>
        <description>Register %s of BLOCK6 (KEY2).</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32 bits of KEY2.</description>
            <name>KEY2_DATA0</name>
          </field>
        </fields>
        <name>RD_KEY2_DATA5</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xF4</addressOffset>
        <description>Register %s of BLOCK6 (KEY2).</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32 bits of KEY2.</description>
            <name>KEY2_DATA0</name>
          </field>
        </fields>
        <name>RD_KEY2_DATA6</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xF8</addressOffset>
        <description>Register %s of BLOCK6 (KEY2).</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32 bits of KEY2.</description>
            <name>KEY2_DATA0</name>
          </field>
        </fields>
        <name>RD_KEY2_DATA7</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xFC</addressOffset>
        <description>Register %s of BLOCK7 (KEY3).</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32 bits of KEY3.</description>
            <name>KEY3_DATA0</name>
          </field>
        </fields>
        <name>RD_KEY3_DATA0</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x100</addressOffset>
        <description>Register %s of BLOCK7 (KEY3).</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32 bits of KEY3.</description>
            <name>KEY3_DATA0</name>
          </field>
        </fields>
        <name>RD_KEY3_DATA1</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x104</addressOffset>
        <description>Register %s of BLOCK7 (KEY3).</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32 bits of KEY3.</description>
            <name>KEY3_DATA0</name>
          </field>
        </fields>
        <name>RD_KEY3_DATA2</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x108</addressOffset>
        <description>Register %s of BLOCK7 (KEY3).</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32 bits of KEY3.</description>
            <name>KEY3_DATA0</name>
          </field>
        </fields>
        <name>RD_KEY3_DATA3</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x10C</addressOffset>
        <description>Register %s of BLOCK7 (KEY3).</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32 bits of KEY3.</description>
            <name>KEY3_DATA0</name>
          </field>
        </fields>
        <name>RD_KEY3_DATA4</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x110</addressOffset>
        <description>Register %s of BLOCK7 (KEY3).</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32 bits of KEY3.</description>
            <name>KEY3_DATA0</name>
          </field>
        </fields>
        <name>RD_KEY3_DATA5</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x114</addressOffset>
        <description>Register %s of BLOCK7 (KEY3).</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32 bits of KEY3.</description>
            <name>KEY3_DATA0</name>
          </field>
        </fields>
        <name>RD_KEY3_DATA6</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x118</addressOffset>
        <description>Register %s of BLOCK7 (KEY3).</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32 bits of KEY3.</description>
            <name>KEY3_DATA0</name>
          </field>
        </fields>
        <name>RD_KEY3_DATA7</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x11C</addressOffset>
        <description>Register %s of BLOCK8 (KEY4).</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32 bits of KEY4.</description>
            <name>KEY4_DATA0</name>
          </field>
        </fields>
        <name>RD_KEY4_DATA0</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x120</addressOffset>
        <description>Register %s of BLOCK8 (KEY4).</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32 bits of KEY4.</description>
            <name>KEY4_DATA0</name>
          </field>
        </fields>
        <name>RD_KEY4_DATA1</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x124</addressOffset>
        <description>Register %s of BLOCK8 (KEY4).</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32 bits of KEY4.</description>
            <name>KEY4_DATA0</name>
          </field>
        </fields>
        <name>RD_KEY4_DATA2</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x128</addressOffset>
        <description>Register %s of BLOCK8 (KEY4).</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32 bits of KEY4.</description>
            <name>KEY4_DATA0</name>
          </field>
        </fields>
        <name>RD_KEY4_DATA3</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x12C</addressOffset>
        <description>Register %s of BLOCK8 (KEY4).</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32 bits of KEY4.</description>
            <name>KEY4_DATA0</name>
          </field>
        </fields>
        <name>RD_KEY4_DATA4</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x130</addressOffset>
        <description>Register %s of BLOCK8 (KEY4).</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32 bits of KEY4.</description>
            <name>KEY4_DATA0</name>
          </field>
        </fields>
        <name>RD_KEY4_DATA5</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x134</addressOffset>
        <description>Register %s of BLOCK8 (KEY4).</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32 bits of KEY4.</description>
            <name>KEY4_DATA0</name>
          </field>
        </fields>
        <name>RD_KEY4_DATA6</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x138</addressOffset>
        <description>Register %s of BLOCK8 (KEY4).</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32 bits of KEY4.</description>
            <name>KEY4_DATA0</name>
          </field>
        </fields>
        <name>RD_KEY4_DATA7</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x13C</addressOffset>
        <description>Register %s of BLOCK9 (KEY5).</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32 bits of KEY5.</description>
            <name>KEY5_DATA0</name>
          </field>
        </fields>
        <name>RD_KEY5_DATA0</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x140</addressOffset>
        <description>Register %s of BLOCK9 (KEY5).</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32 bits of KEY5.</description>
            <name>KEY5_DATA0</name>
          </field>
        </fields>
        <name>RD_KEY5_DATA1</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x144</addressOffset>
        <description>Register %s of BLOCK9 (KEY5).</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32 bits of KEY5.</description>
            <name>KEY5_DATA0</name>
          </field>
        </fields>
        <name>RD_KEY5_DATA2</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x148</addressOffset>
        <description>Register %s of BLOCK9 (KEY5).</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32 bits of KEY5.</description>
            <name>KEY5_DATA0</name>
          </field>
        </fields>
        <name>RD_KEY5_DATA3</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x14C</addressOffset>
        <description>Register %s of BLOCK9 (KEY5).</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32 bits of KEY5.</description>
            <name>KEY5_DATA0</name>
          </field>
        </fields>
        <name>RD_KEY5_DATA4</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x150</addressOffset>
        <description>Register %s of BLOCK9 (KEY5).</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32 bits of KEY5.</description>
            <name>KEY5_DATA0</name>
          </field>
        </fields>
        <name>RD_KEY5_DATA5</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x154</addressOffset>
        <description>Register %s of BLOCK9 (KEY5).</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32 bits of KEY5.</description>
            <name>KEY5_DATA0</name>
          </field>
        </fields>
        <name>RD_KEY5_DATA6</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x158</addressOffset>
        <description>Register %s of BLOCK9 (KEY5).</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32 bits of KEY5.</description>
            <name>KEY5_DATA0</name>
          </field>
        </fields>
        <name>RD_KEY5_DATA7</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x15C</addressOffset>
        <description>Register %s of BLOCK10 (system).</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32 bits of the 2nd part of system data.</description>
            <name>SYS_DATA_PART2_0</name>
          </field>
        </fields>
        <name>RD_SYS_DATA_PART2_0</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x160</addressOffset>
        <description>Register %s of BLOCK10 (system).</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32 bits of the 2nd part of system data.</description>
            <name>SYS_DATA_PART2_0</name>
          </field>
        </fields>
        <name>RD_SYS_DATA_PART2_1</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x164</addressOffset>
        <description>Register %s of BLOCK10 (system).</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32 bits of the 2nd part of system data.</description>
            <name>SYS_DATA_PART2_0</name>
          </field>
        </fields>
        <name>RD_SYS_DATA_PART2_2</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x168</addressOffset>
        <description>Register %s of BLOCK10 (system).</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32 bits of the 2nd part of system data.</description>
            <name>SYS_DATA_PART2_0</name>
          </field>
        </fields>
        <name>RD_SYS_DATA_PART2_3</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x16C</addressOffset>
        <description>Register %s of BLOCK10 (system).</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32 bits of the 2nd part of system data.</description>
            <name>SYS_DATA_PART2_0</name>
          </field>
        </fields>
        <name>RD_SYS_DATA_PART2_4</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x170</addressOffset>
        <description>Register %s of BLOCK10 (system).</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32 bits of the 2nd part of system data.</description>
            <name>SYS_DATA_PART2_0</name>
          </field>
        </fields>
        <name>RD_SYS_DATA_PART2_5</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x174</addressOffset>
        <description>Register %s of BLOCK10 (system).</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32 bits of the 2nd part of system data.</description>
            <name>SYS_DATA_PART2_0</name>
          </field>
        </fields>
        <name>RD_SYS_DATA_PART2_6</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x178</addressOffset>
        <description>Register %s of BLOCK10 (system).</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32 bits of the 2nd part of system data.</description>
            <name>SYS_DATA_PART2_0</name>
          </field>
        </fields>
        <name>RD_SYS_DATA_PART2_7</name>
        <size>0x20</size>
      </register>
    </registers>
    <resetMask>0xFFFFFFFF</resetMask>
    <resetValue>0x0</resetValue>
  </peripheral>
</peripherals>
<peripherals>
  <peripheral>
    <addressBlock>
      <offset>0x0</offset>
      <size>0x140</size>
      <usage>registers</usage>
    </addressBlock>
    <baseAddress>0x61800000</baseAddress>
    <description>External Memory</description>
    <groupName>EXTMEM</groupName>
    <interrupts></interrupts>
    <name>EXTMEM</name>
    <registers>
      <register>
        <addressOffset>0x0</addressOffset>
        <description>register description</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to activate the data cache. 0: disable, 1: enable</description>
            <name>PRO_DCACHE_ENABLE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to configure cache memory size.0: 8KB, 1: 16KB</description>
            <name>PRO_DCACHE_SETSIZE_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to configure cache block size.0: 16 bytes, 1: 32 bytes</description>
            <name>PRO_DCACHE_BLOCKSIZE_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to enable invalidate operation. It will be cleared by hardware after invalidate operation done.</description>
            <name>PRO_DCACHE_INVALIDATE_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to indicate invalidate operation is finished.</description>
            <name>PRO_DCACHE_INVALIDATE_DONE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to enable flush operation. It will be cleared by hardware after flush operation done.</description>
            <name>PRO_DCACHE_FLUSH_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to indicate flush operation is finished.</description>
            <name>PRO_DCACHE_FLUSH_DONE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to enable clean operation. It will be cleared by hardware after clean operation done.</description>
            <name>PRO_DCACHE_CLEAN_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to indicate clean operation is finished.</description>
            <name>PRO_DCACHE_CLEAN_DONE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to enable pre-lock operation which is combined with PRO_DCACHE_LOCK0_ADDR_REG and PRO_DCACHE_LOCK0_SIZE_REG.</description>
            <name>PRO_DCACHE_LOCK0_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to enable pre-lock operation which is combined with PRO_DCACHE_LOCK1_ADDR_REG and PRO_DCACHE_LOCK1_SIZE_REG.</description>
            <name>PRO_DCACHE_LOCK1_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to enable and disable conditional-preload operation. It is combined with pre_dcache_autoload_done. 1: enable, 0: disable.</description>
            <name>PRO_DCACHE_AUTOLOAD_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to indicate conditional-preload operation is finished.</description>
            <name>PRO_DCACHE_AUTOLOAD_DONE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to enable preload operation. It will be cleared by hardware after preload operation done.</description>
            <name>PRO_DCACHE_PRELOAD_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to indicate preload operation is finished.</description>
            <name>PRO_DCACHE_PRELOAD_DONE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to enable unlock operation. It will be cleared by hardware after unlock operation done.</description>
            <name>PRO_DCACHE_UNLOCK_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to indicate unlock operation is finished.</description>
            <name>PRO_DCACHE_UNLOCK_DONE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to enable lock operation. It will be cleared by hardware after lock operation done.</description>
            <name>PRO_DCACHE_LOCK_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to indicate lock operation is finished.</description>
            <name>PRO_DCACHE_LOCK_DONE</name>
          </field>
        </fields>
        <name>PRO_DCACHE_CTRL</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x100</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4</addressOffset>
        <description>register description</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to disable dbus0, 0: enable, 1: disable</description>
            <name>PRO_DCACHE_MASK_BUS0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to disable dbus1, 0: enable, 1: disable</description>
            <name>PRO_DCACHE_MASK_BUS1</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to disable dbus2, 0: enable, 1: disable</description>
            <name>PRO_DCACHE_MASK_BUS2</name>
          </field>
        </fields>
        <name>PRO_DCACHE_CTRL1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x7</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8</addressOffset>
        <description>register description</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to close clock gating of dcache tag memory. 1: close gating, 0: open clock gating.</description>
            <name>PRO_DCACHE_TAG_MEM_FORCE_ON</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to power dcache tag memory down, 0: follow  rtc_lslp_pd, 1: power down</description>
            <name>PRO_DCACHE_TAG_MEM_FORCE_PD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to power dcache tag memory down, 0: follow  rtc_lslp_pd, 1: power up</description>
            <name>PRO_DCACHE_TAG_MEM_FORCE_PU</name>
          </field>
        </fields>
        <name>PRO_DCACHE_TAG_POWER_CTRL</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x5</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xC</addressOffset>
        <description>register description</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The bits are used to configure the first start virtual address of data locking, which is combined with PRO_DCACHE_LOCK0_SIZE_REG</description>
            <name>PRO_DCACHE_LOCK0_ADDR</name>
          </field>
        </fields>
        <name>PRO_DCACHE_LOCK0_ADDR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x10</addressOffset>
        <description>register description</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>The bits are used to configure the first length of data locking, which is combined with PRO_DCACHE_LOCK0_ADDR_REG</description>
            <name>PRO_DCACHE_LOCK0_SIZE</name>
          </field>
        </fields>
        <name>PRO_DCACHE_LOCK0_SIZE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x14</addressOffset>
        <description>register description</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The bits are used to configure the second start virtual address of data locking, which is combined with PRO_DCACHE_LOCK1_SIZE_REG</description>
            <name>PRO_DCACHE_LOCK1_ADDR</name>
          </field>
        </fields>
        <name>PRO_DCACHE_LOCK1_ADDR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x18</addressOffset>
        <description>register description</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>The bits are used to configure the second length of data locking, which is combined with PRO_DCACHE_LOCK1_ADDR_REG</description>
            <name>PRO_DCACHE_LOCK1_SIZE</name>
          </field>
        </fields>
        <name>PRO_DCACHE_LOCK1_SIZE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1C</addressOffset>
        <description>register description</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The bits are used to configure the start virtual address for invalidate, flush, clean, lock and unlock operations. The manual operations will be issued if the address is validate. The auto operations will be issued if the address is invalidate. It should be combined with PRO_DCACHE_MEM_SYNC1.</description>
            <name>PRO_DCACHE_MEMSYNC_ADDR</name>
          </field>
        </fields>
        <name>PRO_DCACHE_MEM_SYNC0</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x20</addressOffset>
        <description>register description</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x13</bitWidth>
            <description>The bits are used to configure the length for invalidate, flush, clean, lock and unlock operations. The manual operations will be issued if it is validate. The auto operations will be issued if it is invalidate. It should be combined with PRO_DCACHE_MEM_SYNC0.</description>
            <name>PRO_DCACHE_MEMSYNC_SIZE</name>
          </field>
        </fields>
        <name>PRO_DCACHE_MEM_SYNC1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x24</addressOffset>
        <description>register description</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The bits are used to configure the start virtual address for manual pre-load operation. It should be combined with PRO_DCACHE_PRELOAD_SIZE_REG.</description>
            <name>PRO_DCACHE_PRELOAD_ADDR</name>
          </field>
        </fields>
        <name>PRO_DCACHE_PRELOAD_ADDR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x28</addressOffset>
        <description>register description</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>The bits are used to configure the length for manual pre-load operation.  It should be combined with PRO_DCACHE_PRELOAD_ADDR_REG..</description>
            <name>PRO_DCACHE_PRELOAD_SIZE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bits are used to configure the direction of manual pre-load operation. 1: descending, 0: ascending.</description>
            <name>PRO_DCACHE_PRELOAD_ORDER</name>
          </field>
        </fields>
        <name>PRO_DCACHE_PRELOAD_SIZE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x200</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2C</addressOffset>
        <description>register description</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Reserved.</description>
            <name>PRO_DCACHE_AUTOLOAD_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Reserved.</description>
            <name>PRO_DCACHE_AUTOLOAD_STEP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bits are used to configure the direction of conditional pre-load operation. 1: descending, 0: ascending.</description>
            <name>PRO_DCACHE_AUTOLOAD_ORDER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>The bits are used to configure trigger conditions for conditional pre-load. 0/3: cache miss, 1: cache hit, 2: both cache miss and hit.</description>
            <name>PRO_DCACHE_AUTOLOAD_RQST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>The bits are used to configure the numbers of the cache block for the issuing conditional pre-load operation.</description>
            <name>PRO_DCACHE_AUTOLOAD_SIZE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bits are used to enable the second section for conditional pre-load operation.</description>
            <name>PRO_DCACHE_AUTOLOAD_SCT0_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bits are used to enable the first section for conditional pre-load operation.</description>
            <name>PRO_DCACHE_AUTOLOAD_SCT1_ENA</name>
          </field>
        </fields>
        <name>PRO_DCACHE_AUTOLOAD_CFG</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x30</addressOffset>
        <description>register description</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The bits are used to configure the start virtual address of the first section for conditional pre-load operation. It should be combined with pro_dcache_autoload_sct0_ena.</description>
            <name>PRO_DCACHE_AUTOLOAD_SCT0_ADDR</name>
          </field>
        </fields>
        <name>PRO_DCACHE_AUTOLOAD_SECTION0_ADDR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x34</addressOffset>
        <description>register description</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x18</bitWidth>
            <description>The bits are used to configure the length of the first section for conditional pre-load operation. It should be combined with pro_dcache_autoload_sct0_ena.</description>
            <name>PRO_DCACHE_AUTOLOAD_SCT0_SIZE</name>
          </field>
        </fields>
        <name>PRO_DCACHE_AUTOLOAD_SECTION0_SIZE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x8000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x38</addressOffset>
        <description>register description</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The bits are used to configure the start virtual address of the second section for conditional pre-load operation. It should be combined with pro_dcache_autoload_sct1_ena.</description>
            <name>PRO_DCACHE_AUTOLOAD_SCT1_ADDR</name>
          </field>
        </fields>
        <name>PRO_DCACHE_AUTOLOAD_SECTION1_ADDR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3C</addressOffset>
        <description>register description</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x18</bitWidth>
            <description>The bits are used to configure the length of the second section for conditional pre-load operation. It should be combined with pro_dcache_autoload_sct1_ena.</description>
            <name>PRO_DCACHE_AUTOLOAD_SCT1_SIZE</name>
          </field>
        </fields>
        <name>PRO_DCACHE_AUTOLOAD_SECTION1_SIZE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x8000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x40</addressOffset>
        <description>register description</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to activate the data cache. 0: disable, 1: enable</description>
            <name>PRO_ICACHE_ENABLE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to configure cache memory size.0: 8KB, 1: 16KB</description>
            <name>PRO_ICACHE_SETSIZE_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to configure cache block size.0: 16 bytes, 1: 32 bytes</description>
            <name>PRO_ICACHE_BLOCKSIZE_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to enable invalidate operation. It will be cleared by hardware after invalidate operation done.</description>
            <name>PRO_ICACHE_INVALIDATE_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to indicate invalidate operation is finished.</description>
            <name>PRO_ICACHE_INVALIDATE_DONE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to enable pre-lock operation which is combined with PRO_ICACHE_LOCK0_ADDR_REG and PRO_ICACHE_LOCK0_SIZE_REG.</description>
            <name>PRO_ICACHE_LOCK0_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to enable pre-lock operation which is combined with PRO_ICACHE_LOCK1_ADDR_REG and PRO_ICACHE_LOCK1_SIZE_REG.</description>
            <name>PRO_ICACHE_LOCK1_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to enable and disable conditional-preload operation. It is combined with pre_dcache_autoload_done. 1: enable, 0: disable.</description>
            <name>PRO_ICACHE_AUTOLOAD_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to indicate conditional-preload operation is finished.</description>
            <name>PRO_ICACHE_AUTOLOAD_DONE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to enable preload operation. It will be cleared by hardware after preload operation done.</description>
            <name>PRO_ICACHE_PRELOAD_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to indicate preload operation is finished.</description>
            <name>PRO_ICACHE_PRELOAD_DONE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to enable unlock operation. It will be cleared by hardware after unlock operation done.</description>
            <name>PRO_ICACHE_UNLOCK_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to indicate unlock operation is finished.</description>
            <name>PRO_ICACHE_UNLOCK_DONE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to enable lock operation. It will be cleared by hardware after lock operation done.</description>
            <name>PRO_ICACHE_LOCK_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to indicate lock operation is finished.</description>
            <name>PRO_ICACHE_LOCK_DONE</name>
          </field>
        </fields>
        <name>PRO_ICACHE_CTRL</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x100</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x44</addressOffset>
        <description>register description</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to disable ibus0, 0: enable, 1: disable</description>
            <name>PRO_ICACHE_MASK_BUS0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to disable ibus1, 0: enable, 1: disable</description>
            <name>PRO_ICACHE_MASK_BUS1</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to disable ibus2, 0: enable, 1: disable</description>
            <name>PRO_ICACHE_MASK_BUS2</name>
          </field>
        </fields>
        <name>PRO_ICACHE_CTRL1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x7</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x48</addressOffset>
        <description>register description</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to close clock gating of icache tag memory. 1: close gating, 0: open clock gating.</description>
            <name>PRO_ICACHE_TAG_MEM_FORCE_ON</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to power icache tag memory down, 0: follow rtc_lslp, 1: power down</description>
            <name>PRO_ICACHE_TAG_MEM_FORCE_PD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to power icache tag memory down, 0: follow rtc_lslp, 1: power up</description>
            <name>PRO_ICACHE_TAG_MEM_FORCE_PU</name>
          </field>
        </fields>
        <name>PRO_ICACHE_TAG_POWER_CTRL</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x5</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4C</addressOffset>
        <description>register description</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The bits are used to configure the first start virtual address of data locking, which is combined with PRO_ICACHE_LOCK0_SIZE_REG</description>
            <name>PRO_ICACHE_LOCK0_ADDR</name>
          </field>
        </fields>
        <name>PRO_ICACHE_LOCK0_ADDR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x50</addressOffset>
        <description>register description</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>The bits are used to configure the first length of data locking, which is combined with PRO_ICACHE_LOCK0_ADDR_REG</description>
            <name>PRO_ICACHE_LOCK0_SIZE</name>
          </field>
        </fields>
        <name>PRO_ICACHE_LOCK0_SIZE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x54</addressOffset>
        <description>register description</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The bits are used to configure the second start virtual address of data locking, which is combined with PRO_ICACHE_LOCK1_SIZE_REG</description>
            <name>PRO_ICACHE_LOCK1_ADDR</name>
          </field>
        </fields>
        <name>PRO_ICACHE_LOCK1_ADDR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x58</addressOffset>
        <description>register description</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>The bits are used to configure the second length of data locking, which is combined with PRO_ICACHE_LOCK1_ADDR_REG</description>
            <name>PRO_ICACHE_LOCK1_SIZE</name>
          </field>
        </fields>
        <name>PRO_ICACHE_LOCK1_SIZE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5C</addressOffset>
        <description>register description</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The bits are used to configure the start virtual address for invalidate, flush, clean, lock and unlock operations. The manual operations will be issued if the address is validate. The auto operations will be issued if the address is invalidate. It should be combined with PRO_ICACHE_MEM_SYNC1.</description>
            <name>PRO_ICACHE_MEMSYNC_ADDR</name>
          </field>
        </fields>
        <name>PRO_ICACHE_MEM_SYNC0</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x60</addressOffset>
        <description>register description</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x13</bitWidth>
            <description>The bits are used to configure the length for invalidate, flush, clean, lock and unlock operations. The manual operations will be issued if it is validate. The auto operations will be issued if it is invalidate. It should be combined with PRO_ICACHE_MEM_SYNC0.</description>
            <name>PRO_ICACHE_MEMSYNC_SIZE</name>
          </field>
        </fields>
        <name>PRO_ICACHE_MEM_SYNC1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x64</addressOffset>
        <description>register description</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The bits are used to configure the start virtual address for manual pre-load operation. It should be combined with PRO_ICACHE_PRELOAD_SIZE_REG.</description>
            <name>PRO_ICACHE_PRELOAD_ADDR</name>
          </field>
        </fields>
        <name>PRO_ICACHE_PRELOAD_ADDR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x68</addressOffset>
        <description>register description</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>The bits are used to configure the length for manual pre-load operation.  It should be combined with PRO_ICACHE_PRELOAD_ADDR_REG..</description>
            <name>PRO_ICACHE_PRELOAD_SIZE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bits are used to configure the direction of manual pre-load operation. 1: descending, 0: ascending.</description>
            <name>PRO_ICACHE_PRELOAD_ORDER</name>
          </field>
        </fields>
        <name>PRO_ICACHE_PRELOAD_SIZE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x200</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x6C</addressOffset>
        <description>register description</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Reserved.</description>
            <name>PRO_ICACHE_AUTOLOAD_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Reserved.</description>
            <name>PRO_ICACHE_AUTOLOAD_STEP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bits are used to configure the direction of conditional pre-load operation. 1: descending, 0: ascending.</description>
            <name>PRO_ICACHE_AUTOLOAD_ORDER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>The bits are used to configure trigger conditions for conditional pre-load. 0/3: cache miss, 1: cache hit, 2: both cache miss and hit.</description>
            <name>PRO_ICACHE_AUTOLOAD_RQST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>The bits are used to configure the numbers of the cache block for the issuing conditional pre-load operation.</description>
            <name>PRO_ICACHE_AUTOLOAD_SIZE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bits are used to enable the second section for conditional pre-load operation.</description>
            <name>PRO_ICACHE_AUTOLOAD_SCT0_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bits are used to enable the first section for conditional pre-load operation.</description>
            <name>PRO_ICACHE_AUTOLOAD_SCT1_ENA</name>
          </field>
        </fields>
        <name>PRO_ICACHE_AUTOLOAD_CFG</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x70</addressOffset>
        <description>register description</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The bits are used to configure the start virtual address of the first section for conditional pre-load operation. It should be combined with pro_icache_autoload_sct0_ena.</description>
            <name>PRO_ICACHE_AUTOLOAD_SCT0_ADDR</name>
          </field>
        </fields>
        <name>PRO_ICACHE_AUTOLOAD_SECTION0_ADDR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x74</addressOffset>
        <description>register description</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x18</bitWidth>
            <description>The bits are used to configure the length of the first section for conditional pre-load operation. It should be combined with pro_icache_autoload_sct0_ena.</description>
            <name>PRO_ICACHE_AUTOLOAD_SCT0_SIZE</name>
          </field>
        </fields>
        <name>PRO_ICACHE_AUTOLOAD_SECTION0_SIZE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x8000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x78</addressOffset>
        <description>register description</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The bits are used to configure the start virtual address of the second section for conditional pre-load operation. It should be combined with pro_icache_autoload_sct1_ena.</description>
            <name>PRO_ICACHE_AUTOLOAD_SCT1_ADDR</name>
          </field>
        </fields>
        <name>PRO_ICACHE_AUTOLOAD_SECTION1_ADDR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x7C</addressOffset>
        <description>register description</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x18</bitWidth>
            <description>The bits are used to configure the length of the second section for conditional pre-load operation. It should be combined with pro_icache_autoload_sct1_ena.</description>
            <name>PRO_ICACHE_AUTOLOAD_SCT1_SIZE</name>
          </field>
        </fields>
        <name>PRO_ICACHE_AUTOLOAD_SECTION1_SIZE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x8000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x80</addressOffset>
        <description>register description</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>The bits are used to count the number of issued pre-load which include manual pre-load and conditional pre-load.</description>
            <name>IC_PRELOAD_CNT</name>
          </field>
        </fields>
        <name>IC_PRELOAD_CNT</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x84</addressOffset>
        <description>register description</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>The bits are used to count the number of missed pre-load which include manual pre-load and conditional pre-load.</description>
            <name>IC_PRELOAD_MISS_CNT</name>
          </field>
        </fields>
        <name>IC_PRELOAD_MISS_CNT</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x88</addressOffset>
        <description>register description</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>The bits are used to count the number of the abandoned ibus2 access.</description>
            <name>IBUS2_ABANDON_CNT</name>
          </field>
        </fields>
        <name>IBUS2_ABANDON_CNT</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8C</addressOffset>
        <description>register description</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>The bits are used to count the number of the abandoned ibus1 access.</description>
            <name>IBUS1_ABANDON_CNT</name>
          </field>
        </fields>
        <name>IBUS1_ABANDON_CNT</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x90</addressOffset>
        <description>register description</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>The bits are used to count the number of the abandoned ibus0 access.</description>
            <name>IBUS0_ABANDON_CNT</name>
          </field>
        </fields>
        <name>IBUS0_ABANDON_CNT</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x94</addressOffset>
        <description>register description</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The bits are used to count the number of the cache miss caused by ibus2 access.</description>
            <name>IBUS2_ACS_MISS_CNT</name>
          </field>
        </fields>
        <name>IBUS2_ACS_MISS_CNT</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x98</addressOffset>
        <description>register description</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The bits are used to count the number of the cache miss caused by ibus1 access.</description>
            <name>IBUS1_ACS_MISS_CNT</name>
          </field>
        </fields>
        <name>IBUS1_ACS_MISS_CNT</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9C</addressOffset>
        <description>register description</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The bits are used to count the number of the cache miss caused by ibus0 access.</description>
            <name>IBUS0_ACS_MISS_CNT</name>
          </field>
        </fields>
        <name>IBUS0_ACS_MISS_CNT</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA0</addressOffset>
        <description>register description</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The bits are used to count the number of ibus2 access icache.</description>
            <name>IBUS2_ACS_CNT</name>
          </field>
        </fields>
        <name>IBUS2_ACS_CNT</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA4</addressOffset>
        <description>register description</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The bits are used to count the number of ibus1 access icache.</description>
            <name>IBUS1_ACS_CNT</name>
          </field>
        </fields>
        <name>IBUS1_ACS_CNT</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA8</addressOffset>
        <description>register description</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The bits are used to count the number of ibus0 access icache.</description>
            <name>IBUS0_ACS_CNT</name>
          </field>
        </fields>
        <name>IBUS0_ACS_CNT</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAC</addressOffset>
        <description>register description</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>The bits are used to count the number of issued pre-load which include manual pre-load and conditional pre-load.</description>
            <name>DC_PRELOAD_CNT</name>
          </field>
        </fields>
        <name>DC_PRELOAD_CNT</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB0</addressOffset>
        <description>register description</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>The bits are used to count the number of cache evictions by pre-load which include manual pre-load and conditional pre-load.</description>
            <name>DC_PRELOAD_EVICT_CNT</name>
          </field>
        </fields>
        <name>DC_PRELOAD_EVICT_CNT</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB4</addressOffset>
        <description>register description</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>The bits are used to count the number of missed pre-load which include manual pre-load and conditional pre-load.</description>
            <name>DC_PRELOAD_MISS_CNT</name>
          </field>
        </fields>
        <name>DC_PRELOAD_MISS_CNT</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB8</addressOffset>
        <description>register description</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>The bits are used to count the number of the abandoned dbus2 access.</description>
            <name>DBUS2_ABANDON_CNT</name>
          </field>
        </fields>
        <name>DBUS2_ABANDON_CNT</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBC</addressOffset>
        <description>register description</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>The bits are used to count the number of the abandoned dbus1 access.</description>
            <name>DBUS1_ABANDON_CNT</name>
          </field>
        </fields>
        <name>DBUS1_ABANDON_CNT</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xC0</addressOffset>
        <description>register description</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>The bits are used to count the number of the abandoned dbus0 access.</description>
            <name>DBUS0_ABANDON_CNT</name>
          </field>
        </fields>
        <name>DBUS0_ABANDON_CNT</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xC4</addressOffset>
        <description>register description</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x14</bitWidth>
            <description>The bits are used to count the number of cache evictions by dbus2 access cache.</description>
            <name>DBUS2_ACS_WB_CNT</name>
          </field>
        </fields>
        <name>DBUS2_ACS_WB_CNT</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xC8</addressOffset>
        <description>register description</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x14</bitWidth>
            <description>The bits are used to count the number of cache evictions by dbus1 access cache.</description>
            <name>DBUS1_ACS_WB_CNT</name>
          </field>
        </fields>
        <name>DBUS1_ACS_WB_CNT</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xCC</addressOffset>
        <description>register description</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x14</bitWidth>
            <description>The bits are used to count the number of cache evictions by dbus0 access cache.</description>
            <name>DBUS0_ACS_WB_CNT</name>
          </field>
        </fields>
        <name>DBUS0_ACS_WB_CNT</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xD0</addressOffset>
        <description>register description</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The bits are used to count the number of the cache miss caused by dbus2 access.</description>
            <name>DBUS2_ACS_MISS_CNT</name>
          </field>
        </fields>
        <name>DBUS2_ACS_MISS_CNT</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xD4</addressOffset>
        <description>register description</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The bits are used to count the number of the cache miss caused by dbus1 access.</description>
            <name>DBUS1_ACS_MISS_CNT</name>
          </field>
        </fields>
        <name>DBUS1_ACS_MISS_CNT</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xD8</addressOffset>
        <description>register description</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The bits are used to count the number of the cache miss caused by dbus0 access.</description>
            <name>DBUS0_ACS_MISS_CNT</name>
          </field>
        </fields>
        <name>DBUS0_ACS_MISS_CNT</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xDC</addressOffset>
        <description>register description</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The bits are used to count the number of dbus2 access dcache.</description>
            <name>DBUS2_ACS_CNT</name>
          </field>
        </fields>
        <name>DBUS2_ACS_CNT</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xE0</addressOffset>
        <description>register description</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The bits are used to count the number of dbus1 access dcache.</description>
            <name>DBUS1_ACS_CNT</name>
          </field>
        </fields>
        <name>DBUS1_ACS_CNT</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xE4</addressOffset>
        <description>register description</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The bits are used to count the number of dbus0 access dcache.</description>
            <name>DBUS0_ACS_CNT</name>
          </field>
        </fields>
        <name>DBUS0_ACS_CNT</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xE8</addressOffset>
        <description>register description</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to activate the cache track function. 1: enable, 0: disable.</description>
            <name>CACHE_DBG_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to enable interrupt by cpu access icache while the corresponding ibus is disabled which include speculative access.</description>
            <name>IBUS_ACS_MSK_IC_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to enable interrupt by ibus counter overflow.</description>
            <name>IBUS_CNT_OVF_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to enable interrupt by manual sync configurations fault.</description>
            <name>IC_SYNC_SIZE_FAULT_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to enable interrupt by manual pre-load configurations fault.</description>
            <name>IC_PRELOAD_SIZE_FAULT_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to enable interrupt by authentication fail.</description>
            <name>ICACHE_REJECT_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to enable interrupt by illegal writing preload registers of icache while icache is busy to issue lock,sync and pre-load operations.</description>
            <name>ICACHE_SET_PRELOAD_ILG_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to enable interrupt by illegal writing sync registers of icache while icache is busy to issue lock,sync and pre-load operations.</description>
            <name>ICACHE_SET_SYNC_ILG_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to enable interrupt by illegal writing lock registers of icache while icache is busy to issue lock,sync or pre-load operations.</description>
            <name>ICACHE_SET_LOCK_ILG_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to enable interrupt by cpu access dcache while the corresponding dbus is disabled which include speculative access.</description>
            <name>DBUS_ACS_MSK_DC_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to enable interrupt by dbus counter overflow.</description>
            <name>DBUS_CNT_OVF_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to enable interrupt by manual sync configurations fault.</description>
            <name>DC_SYNC_SIZE_FAULT_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to enable interrupt by manual pre-load configurations fault.</description>
            <name>DC_PRELOAD_SIZE_FAULT_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to enable interrupt by dcache trying to write flash.</description>
            <name>DCACHE_WRITE_FLASH_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to enable interrupt by authentication fail.</description>
            <name>DCACHE_REJECT_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to enable interrupt by illegal writing preload registers of dcache while dcache is busy to issue lock,sync and pre-load operations.</description>
            <name>DCACHE_SET_PRELOAD_ILG_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to enable interrupt by illegal writing sync registers of dcache while dcache is busy to issue lock,sync and pre-load operations.</description>
            <name>DCACHE_SET_SYNC_ILG_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to enable interrupt by illegal writing lock registers of dcache while dcache is busy to issue lock,sync or pre-load operations.</description>
            <name>DCACHE_SET_LOCK_ILG_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to enable interrupt by mmu entry fault.</description>
            <name>MMU_ENTRY_FAULT_INT_ENA</name>
          </field>
        </fields>
        <name>CACHE_DBG_INT_ENA</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x1</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xEC</addressOffset>
        <description>register description</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to clear interrupt by cpu access icache while the corresponding ibus is disabled or icache is disabled which include speculative access.</description>
            <name>IBUS_ACS_MSK_IC_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to clear interrupt by ibus counter overflow.</description>
            <name>IBUS_CNT_OVF_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to clear interrupt by manual sync configurations fault.</description>
            <name>IC_SYNC_SIZE_FAULT_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to clear interrupt by manual pre-load configurations fault.</description>
            <name>IC_PRELOAD_SIZE_FAULT_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to clear interrupt by authentication fail.</description>
            <name>ICACHE_REJECT_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to clear interrupt by illegal writing lock registers of icache while icache is busy to issue lock,sync or pre-load operations.</description>
            <name>ICACHE_SET_ILG_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to clear interrupt by cpu access dcache while the corresponding dbus is disabled or dcache is disabled which include speculative access.</description>
            <name>DBUS_ACS_MSK_DC_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to clear interrupt by dbus counter overflow.</description>
            <name>DBUS_CNT_OVF_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to clear interrupt by manual sync configurations fault.</description>
            <name>DC_SYNC_SIZE_FAULT_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to clear interrupt by manual pre-load configurations fault.</description>
            <name>DC_PRELOAD_SIZE_FAULT_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to clear interrupt by dcache trying to write flash.</description>
            <name>DCACHE_WRITE_FLASH_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to clear interrupt by authentication fail.</description>
            <name>DCACHE_REJECT_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to clear interrupt by illegal writing lock registers of dcache while dcache is busy to issue lock,sync or pre-load operations.</description>
            <name>DCACHE_SET_ILG_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to clear interrupt by mmu entry fault.</description>
            <name>MMU_ENTRY_FAULT_INT_CLR</name>
          </field>
        </fields>
        <name>CACHE_DBG_INT_CLR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xF0</addressOffset>
        <description>register description</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to indicate interrupt by cpu access icache while the ibus0 is disabled or icache is disabled which include speculative access.</description>
            <name>IBUS0_ACS_MSK_ICACHE_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to indicate interrupt by cpu access icache while the ibus1 is disabled or icache is disabled which include speculative access.</description>
            <name>IBUS1_ACS_MSK_ICACHE_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to indicate interrupt by cpu access icache while the ibus2 is disabled or icache is disabled which include speculative access.</description>
            <name>IBUS2_ACS_MSK_ICACHE_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to indicate interrupt by ibus0 counter overflow.</description>
            <name>IBUS0_ACS_CNT_OVF_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to indicate interrupt by ibus1 counter overflow.</description>
            <name>IBUS1_ACS_CNT_OVF_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to indicate interrupt by ibus2 counter overflow.</description>
            <name>IBUS2_ACS_CNT_OVF_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to indicate interrupt by ibus0 miss counter overflow.</description>
            <name>IBUS0_ACS_MISS_CNT_OVF_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to indicate interrupt by ibus1 miss counter overflow.</description>
            <name>IBUS1_ACS_MISS_CNT_OVF_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to indicate interrupt by ibus2 miss counter overflow.</description>
            <name>IBUS2_ACS_MISS_CNT_OVF_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to indicate interrupt by ibus0 abandon counter overflow.</description>
            <name>IBUS0_ABANDON_CNT_OVF_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to indicate interrupt by ibus1 abandon counter overflow.</description>
            <name>IBUS1_ABANDON_CNT_OVF_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to indicate interrupt by ibus2 abandon counter overflow.</description>
            <name>IBUS2_ABANDON_CNT_OVF_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to indicate interrupt by pre-load miss counter overflow.</description>
            <name>IC_PRELOAD_MISS_CNT_OVF_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to indicate interrupt by pre-load counter overflow.</description>
            <name>IC_PRELOAD_CNT_OVF_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to indicate interrupt by manual sync configurations fault.</description>
            <name>IC_SYNC_SIZE_FAULT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to indicate interrupt by manual pre-load configurations fault.</description>
            <name>IC_PRELOAD_SIZE_FAULT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to indicate interrupt by authentication fail.</description>
            <name>ICACHE_REJECT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to indicate interrupt by illegal writing preload registers of icache while icache is busy to issue lock,sync and pre-load operations.</description>
            <name>ICACHE_SET_PRELOAD_ILG_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to indicate interrupt by illegal writing sync registers of icache while icache is busy to issue lock,sync and pre-load operations.</description>
            <name>ICACHE_SET_SYNC_ILG_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to indicate interrupt by illegal writing lock registers of icache while icache is busy to issue lock,sync or pre-load operations.</description>
            <name>ICACHE_SET_LOCK_ILG_ST</name>
          </field>
        </fields>
        <name>CACHE_DBG_STATUS0</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xF4</addressOffset>
        <description>register description</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to indicate interrupt by cpu access dcache while the dbus0 is disabled or dcache is disabled which include speculative access.</description>
            <name>DBUS0_ACS_MSK_DCACHE_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to indicate interrupt by cpu access dcache while the dbus1 is disabled or dcache is disabled which include speculative access.</description>
            <name>DBUS1_ACS_MSK_DCACHE_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to indicate interrupt by cpu access dcache while the dbus2 is disabled or dcache is disabled which include speculative access.</description>
            <name>DBUS2_ACS_MSK_DCACHE_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to indicate interrupt by dbus0 counter overflow.</description>
            <name>DBUS0_ACS_CNT_OVF_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to indicate interrupt by dbus1 counter overflow.</description>
            <name>DBUS1_ACS_CNT_OVF_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to indicate interrupt by dbus2 counter overflow.</description>
            <name>DBUS2_ACS_CNT_OVF_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to indicate interrupt by dbus0 miss counter overflow.</description>
            <name>DBUS0_ACS_MISS_CNT_OVF_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to indicate interrupt by dbus1 miss counter overflow.</description>
            <name>DBUS1_ACS_MISS_CNT_OVF_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to indicate interrupt by dbus2 miss counter overflow.</description>
            <name>DBUS2_ACS_MISS_CNT_OVF_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to indicate interrupt by dbus0 eviction counter overflow.</description>
            <name>DBUS0_ACS_WB_CNT_OVF_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to indicate interrupt by dbus1 eviction counter overflow.</description>
            <name>DBUS1_ACS_WB_CNT_OVF_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to indicate interrupt by dbus2 eviction counter overflow.</description>
            <name>DBUS2_ACS_WB_CNT_OVF_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to indicate interrupt by dbus0 abandon counter overflow.</description>
            <name>DBUS0_ABANDON_CNT_OVF_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to indicate interrupt by dbus1 abandon counter overflow.</description>
            <name>DBUS1_ABANDON_CNT_OVF_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to indicate interrupt by dbus2 abandon counter overflow.</description>
            <name>DBUS2_ABANDON_CNT_OVF_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to indicate interrupt by pre-load miss counter overflow.</description>
            <name>DC_PRELOAD_MISS_CNT_OVF_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to indicate interrupt by pre-load eviction counter overflow.</description>
            <name>DC_PRELOAD_EVICT_CNT_OVF_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to indicate interrupt by pre-load counter overflow.</description>
            <name>DC_PRELOAD_CNT_OVF_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to indicate interrupt by manual sync configurations fault.</description>
            <name>DC_SYNC_SIZE_FAULT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to indicate interrupt by manual pre-load configurations fault.</description>
            <name>DC_PRELOAD_SIZE_FAULT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to indicate interrupt by dcache trying to write flash.</description>
            <name>DCACHE_WRITE_FLASH_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to indicate interrupt by authentication fail.</description>
            <name>DCACHE_REJECT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to indicate interrupt by illegal writing preload registers of icache while icache is busy to issue lock,sync and pre-load operations.</description>
            <name>DCACHE_SET_PRELOAD_ILG_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to indicate interrupt by illegal writing sync registers of icache while icache is busy to issue lock,sync and pre-load operations.</description>
            <name>DCACHE_SET_SYNC_ILG_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to indicate interrupt by illegal writing lock registers of icache while icache is busy to issue lock,sync or pre-load operations.</description>
            <name>DCACHE_SET_LOCK_ILG_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to indicate interrupt by mmu entry fault.</description>
            <name>MMU_ENTRY_FAULT_ST</name>
          </field>
        </fields>
        <name>CACHE_DBG_STATUS1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xF8</addressOffset>
        <description>register description</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to clear dcache counter which include DC_PRELOAD_CNT_REG, DC_PRELOAD_EVICT_CNT_REG, DC_PRELOAD_MISS_CNT_REG, DBUS0-2_ABANDON_CNT_REG, DBUS0-2_ACS_WB_CNT_REG, DBUS0-2_ACS_MISS_CNT_REG and DBUS0-2_ACS_CNT_REG.</description>
            <name>PRO_DCACHE_ACS_CNT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to clear icache counter which include IC_PRELOAD_CNT_REG, IC_PRELOAD_MISS_CNT_REG, IBUS0-2_ABANDON_CNT_REG, IBUS0-2_ACS_MISS_CNT_REG and IBUS0-2_ACS_CNT_REG.</description>
            <name>PRO_ICACHE_ACS_CNT_CLR</name>
          </field>
        </fields>
        <name>PRO_CACHE_ACS_CNT_CLR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xFC</addressOffset>
        <description>register description</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>The bits are used to indicate the attribute of data from external memory when authentication fail. 0: invalidate, 1: execute-able, 2: read-able, 4: write-able.</description>
            <name>PRO_DCACHE_TAG_ATTR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>The bits are used to indicate the attribute of CPU access dcache when authentication fail. 0: invalidate, 1: execute-able, 2: read-able, 4: write-able.</description>
            <name>PRO_DCACHE_CPU_ATTR</name>
          </field>
        </fields>
        <name>PRO_DCACHE_REJECT_ST</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x100</addressOffset>
        <description>register description</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The bits are used to indicate the virtual address of CPU access dcache when authentication fail.</description>
            <name>PRO_DCACHE_CPU_VADDR</name>
          </field>
        </fields>
        <name>PRO_DCACHE_REJECT_VADDR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x104</addressOffset>
        <description>register description</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>The bits are used to indicate the attribute of data from external memory when authentication fail. 0: invalidate, 1: execute-able, 2: read-able, 4: write-able.</description>
            <name>PRO_ICACHE_TAG_ATTR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>The bits are used to indicate the attribute of CPU access icache when authentication fail. 0: invalidate, 1: execute-able, 2: read-able</description>
            <name>PRO_ICACHE_CPU_ATTR</name>
          </field>
        </fields>
        <name>PRO_ICACHE_REJECT_ST</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x108</addressOffset>
        <description>register description</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The bits are used to indicate the virtual address of CPU access icache when authentication fail.</description>
            <name>PRO_ICACHE_CPU_VADDR</name>
          </field>
        </fields>
        <name>PRO_ICACHE_REJECT_VADDR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x10C</addressOffset>
        <description>register description</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x11</bitWidth>
            <description>The bits are used to indicate the content of mmu entry which cause mmu fault..</description>
            <name>PRO_CACHE_MMU_FAULT_CONTENT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>The bits are used to indicate the operations which cause mmu fault occurrence. 0: default, 1: cpu miss, 2: preload miss, 3: flush, 4: cpu miss evict recovery address, 5: load miss evict recovery address, 6: external dma tx, 7: external dma rx</description>
            <name>PRO_CACHE_MMU_FAULT_CODE</name>
          </field>
        </fields>
        <name>PRO_CACHE_MMU_FAULT_CONTENT</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x110</addressOffset>
        <description>register description</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The bits are used to indicate the virtual address which cause mmu fault..</description>
            <name>PRO_CACHE_MMU_FAULT_VADDR</name>
          </field>
        </fields>
        <name>PRO_CACHE_MMU_FAULT_VADDR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x114</addressOffset>
        <description>register description</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to enable wrap around mode when read data from flash.</description>
            <name>PRO_CACHE_FLASH_WRAP_AROUND</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to enable wrap around mode when read data from spiram.</description>
            <name>PRO_CACHE_SRAM_RD_WRAP_AROUND</name>
          </field>
        </fields>
        <name>PRO_CACHE_WRAP_AROUND_CTRL</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x118</addressOffset>
        <description>register description</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to enable clock gating to save power when access mmu memory, 0: enable, 1: disable</description>
            <name>PRO_CACHE_MMU_MEM_FORCE_ON</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to power mmu memory down, 0: follow_rtc_lslp_pd, 1: power down</description>
            <name>PRO_CACHE_MMU_MEM_FORCE_PD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to power mmu memory down, 0: follow_rtc_lslp_pd, 1: power up</description>
            <name>PRO_CACHE_MMU_MEM_FORCE_PU</name>
          </field>
        </fields>
        <name>PRO_CACHE_MMU_POWER_CTRL</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x5</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x11C</addressOffset>
        <description>register description</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xC</bitWidth>
            <description>The bit is used to indicate icache main fsm is in idle state or not. 1: in idle state,  0: not in idle state</description>
            <name>PRO_ICACHE_STATE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0xC</bitWidth>
            <description>The bit is used to indicate dcache main fsm is in idle state or not. 1: in idle state,  0: not in idle state</description>
            <name>PRO_DCACHE_STATE</name>
          </field>
        </fields>
        <name>PRO_CACHE_STATE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x120</addressOffset>
        <description>register description</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Reserved.</description>
            <name>RECORD_DISABLE_DB_ENCRYPT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Reserved.</description>
            <name>RECORD_DISABLE_G0CB_DECRYPT</name>
          </field>
        </fields>
        <name>CACHE_ENCRYPT_DECRYPT_RECORD_DISABLE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x124</addressOffset>
        <description>register description</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to close clock gating of encrypt clock. 1: close gating, 0: open clock gating.</description>
            <name>CLK_FORCE_ON_DB_ENCRYPT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to close clock gating of decrypt clock. 1: close gating, 0: open clock gating.</description>
            <name>CLK_FORCE_ON_G0CB_DECRYPT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to close clock gating of encrypt and decrypt clock. 1: close gating, 0: open clock gating.</description>
            <name>CLK_FORCE_ON_AUTOMATIC_ENCRYPT_DECRYPT</name>
          </field>
        </fields>
        <name>CACHE_ENCRYPT_DECRYPT_CLK_FORCE_ON</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x7</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x128</addressOffset>
        <description>register description</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Reserved.</description>
            <name>ALLOC_WB_HOLD_ARBITER</name>
          </field>
        </fields>
        <name>CACHE_BRIDGE_ARBITER_CTRL</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x12C</addressOffset>
        <description>register description</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to indicate the interrupt by icache pre-load done.</description>
            <name>PRO_ICACHE_PRELOAD_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to enable the interrupt by icache pre-load done.</description>
            <name>PRO_ICACHE_PRELOAD_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to clear the interrupt by icache pre-load done.</description>
            <name>PRO_ICACHE_PRELOAD_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to indicate the interrupt by dcache pre-load done.</description>
            <name>PRO_DCACHE_PRELOAD_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to enable the interrupt by dcache pre-load done.</description>
            <name>PRO_DCACHE_PRELOAD_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to clear the interrupt by dcache pre-load done.</description>
            <name>PRO_DCACHE_PRELOAD_INT_CLR</name>
          </field>
        </fields>
        <name>CACHE_PRELOAD_INT_CTRL</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x130</addressOffset>
        <description>register description</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to indicate the interrupt by icache sync done.</description>
            <name>PRO_ICACHE_SYNC_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to enable the interrupt by icache sync done.</description>
            <name>PRO_ICACHE_SYNC_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to clear the interrupt by icache sync done.</description>
            <name>PRO_ICACHE_SYNC_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to indicate the interrupt by dcache sync done.</description>
            <name>PRO_DCACHE_SYNC_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to enable the interrupt by dcache sync done.</description>
            <name>PRO_DCACHE_SYNC_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to clear the interrupt by dcache sync done.</description>
            <name>PRO_DCACHE_SYNC_INT_CLR</name>
          </field>
        </fields>
        <name>CACHE_SYNC_INT_CTRL</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x134</addressOffset>
        <description>register description</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to disable checking mmu entry fault by preload operation.</description>
            <name>PRO_CACHE_IGNORE_PRELOAD_MMU_ENTRY_FAULT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to disable checking mmu entry fault by sync operation.</description>
            <name>PRO_CACHE_IGNORE_SYNC_MMU_ENTRY_FAULT</name>
          </field>
        </fields>
        <name>CACHE_CONF_MISC</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x3</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x138</addressOffset>
        <description>register description</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Reserved.</description>
            <name>CLK_EN</name>
          </field>
        </fields>
        <name>CLOCK_GATE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x1</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3FC</addressOffset>
        <description>register description</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1C</bitWidth>
            <description>Reserved.</description>
            <name>PRO_EXTMEM_REG_DATE</name>
          </field>
        </fields>
        <name>PRO_EXTMEM_REG_DATE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x1904180</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <resetMask>0xFFFFFFFF</resetMask>
    <resetValue>0x0</resetValue>
  </peripheral>
</peripherals>
<peripherals>
  <peripheral>
    <addressBlock>
      <offset>0x0</offset>
      <size>0x634</size>
      <usage>registers</usage>
    </addressBlock>
    <baseAddress>0x3F404000</baseAddress>
    <description>General Purpose Input/Output</description>
    <groupName>GPIO</groupName>
    <interrupts>
      <interrupt>
        <name>GPIO</name>
        <value>0x17</value>
      </interrupt>
    </interrupts>
    <interrupts>
      <interrupt>
        <name>GPIO_NMI</name>
        <value>0x18</value>
      </interrupt>
    </interrupts>
    <interrupts>
      <interrupt>
        <name>GPIO_INTR_2</name>
        <value>0x19</value>
      </interrupt>
    </interrupts>
    <interrupts>
      <interrupt>
        <name>GPIO_NMI_2</name>
        <value>0x1A</value>
      </interrupt>
    </interrupts>
    <name>GPIO</name>
    <registers>
      <register>
        <addressOffset>0x0</addressOffset>
        <description>GPIO bit select register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Reserved</description>
            <name>BT_SEL</name>
          </field>
        </fields>
        <name>BT_SELECT</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4</addressOffset>
        <description>GPIO0 ~ 31 output register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>GPIO0 ~ 31 output value in simple GPIO output mode. The values of bit0 ~ bit31 correspond to the output value of GPIO0 ~ GPIO31 respectively. Bit22 ~ bit25 are invalid.</description>
            <name>DATA_ORIG</name>
          </field>
        </fields>
        <name>OUT</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8</addressOffset>
        <description>GPIO0 ~ 31 output bit set register</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>GPIO0 ~ 31 output set register. If the value 1 is written to a bit here, the corre- sponding bit in GPIO_OUT_REG will be set to 1. Recommended operation: use this register to set GPIO_OUT_REG.</description>
            <name>OUT_W1TS</name>
          </field>
        </fields>
        <name>OUT_W1TS</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xC</addressOffset>
        <description>GPIO0 ~ 31 output bit clear register</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>GPIO0 ~ 31 output clear register. If the value 1 is written to a bit here, the cor- responding bit in GPIO_OUT_REG will be cleared. Recommended operation: use this register to clear GPIO_OUT_REG.</description>
            <name>OUT_W1TC</name>
          </field>
        </fields>
        <name>OUT_W1TC</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x10</addressOffset>
        <description>GPIO32 ~ 53 output register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x16</bitWidth>
            <description>GPIO32 ~ 53 output value in simple GPIO output mode. The values of bit0 ~ bit13 correspond to GPIO32 ~ GPIO45. Bit14 ~ bit21 are invalid.</description>
            <name>DATA_ORIG</name>
          </field>
        </fields>
        <name>OUT1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x14</addressOffset>
        <description>GPIO32 ~ 53 output bit set register</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x16</bitWidth>
            <description>GPIO32 ~ 53 output value set register. If the value 1 is written to a bit here, the corresponding bit in GPIO_OUT1_REG will be set to 1. Recommended operation: use this register to set GPIO_OUT1_REG.</description>
            <name>OUT1_W1TS</name>
          </field>
        </fields>
        <name>OUT1_W1TS</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x18</addressOffset>
        <description>GPIO32 ~ 53 output bit clear register</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x16</bitWidth>
            <description>GPIO32 ~ 53 output value clear register. If the value 1 is written to a bit here, the corresponding bit in GPIO_OUT1_REG will be cleared. Recommended operation: use this register to clear GPIO_OUT1_REG.</description>
            <name>OUT1_W1TC</name>
          </field>
        </fields>
        <name>OUT1_W1TC</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1C</addressOffset>
        <description>GPIO SDIO selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>Reserved</description>
            <name>SDIO_SEL</name>
          </field>
        </fields>
        <name>SDIO_SELECT</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x20</addressOffset>
        <description>GPIO0 ~ 31 output enable register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>GPIO0~31 output enable register.</description>
            <name>DATA</name>
          </field>
        </fields>
        <name>ENABLE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x24</addressOffset>
        <description>GPIO0 ~ 31 output enable bit set register</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>GPIO0 ~ 31 output enable set register. If the value 1 is written to a bit here, the corresponding bit in GPIO_ENABLE_REG will be set to 1. Recommended operation: use this register to set GPIO_ENABLE_REG.</description>
            <name>ENABLE_W1TS</name>
          </field>
        </fields>
        <name>ENABLE_W1TS</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x28</addressOffset>
        <description>GPIO0 ~ 31 output enable bit clear register</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>GPIO0 ~ 31 output enable clear register. If the value 1 is written to a bit here, the corresponding bit in GPIO_ENABLE_REG will be cleared. Recommended operation: use this register to clear GPIO_ENABLE_REG.</description>
            <name>ENABLE_W1TC</name>
          </field>
        </fields>
        <name>ENABLE_W1TC</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2C</addressOffset>
        <description>GPIO32 ~ 53 output enable register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x16</bitWidth>
            <description>GPIO32~53 output enable register.</description>
            <name>DATA</name>
          </field>
        </fields>
        <name>ENABLE1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x30</addressOffset>
        <description>GPIO32 ~ 53 output enable bit set register</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x16</bitWidth>
            <description>GPIO32 ~ 53 output enable set register. If the value 1 is written to a bit here, the corresponding bit in GPIO_ENABLE1_REG will be set to 1. Recommended operation: use this register to set GPIO_ENABLE1_REG.</description>
            <name>ENABLE1_W1TS</name>
          </field>
        </fields>
        <name>ENABLE1_W1TS</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x34</addressOffset>
        <description>GPIO32 ~ 53 output enable bit clear register</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x16</bitWidth>
            <description>GPIO32 ~ 53 output enable clear register. If the value 1 is written to a bit here, the corresponding bit in GPIO_ENABLE1_REG will be cleared. Recommended operation: use this register to clear GPIO_ENABLE1_REG.</description>
            <name>ENABLE1_W1TC</name>
          </field>
        </fields>
        <name>ENABLE1_W1TC</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x38</addressOffset>
        <description>Bootstrap pin value register</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>GPIO strapping values: bit4 ~ bit2 correspond to stripping pins GPIO45, GPIO0, and GPIO46 respectively.</description>
            <name>STRAPPING</name>
          </field>
        </fields>
        <name>STRAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3C</addressOffset>
        <description>GPIO0 ~ 31 input register</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>GPIO0 ~ 31 input value. Each bit represents a pad input value, 1 for high level and 0 for low level.</description>
            <name>DATA_NEXT</name>
          </field>
        </fields>
        <name>IN</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x40</addressOffset>
        <description>GPIO32 ~ 53 input register</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x16</bitWidth>
            <description>GPIO32 ~ 53 input value. Each bit represents a pad input value.</description>
            <name>IN_DATA1_NEXT</name>
          </field>
        </fields>
        <name>IN1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x44</addressOffset>
        <description>GPIO0 ~ 31 interrupt status register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>GPIO0 ~ 31 interrupt status register.</description>
            <name>INTERRUPT</name>
          </field>
        </fields>
        <name>STATUS</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x48</addressOffset>
        <description>GPIO0 ~ 31 interrupt status bit set register</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>GPIO0 ~ 31 interrupt status set register. If the value 1 is written to a bit here, the corresponding bit in GPIO_STATUS_INTERRUPT will be set to 1. Recommended operation: use this register to set GPIO_STATUS_INTERRUPT.</description>
            <name>STATUS_W1TS</name>
          </field>
        </fields>
        <name>STATUS_W1TS</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4C</addressOffset>
        <description>GPIO0 ~ 31 interrupt status bit clear register</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>GPIO0 ~ 31 interrupt status clear register. If the value 1 is written to a bit here, the corresponding bit in GPIO_STATUS_INTERRUPT will be cleared. Recommended operation: use this register to clear GPIO_STATUS_INTERRUPT.</description>
            <name>STATUS_W1TC</name>
          </field>
        </fields>
        <name>STATUS_W1TC</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x50</addressOffset>
        <description>GPIO32 ~ 53 interrupt status register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x16</bitWidth>
            <description>GPIO32 ~ 53 interrupt status register.</description>
            <name>INTERRUPT</name>
          </field>
        </fields>
        <name>STATUS1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x54</addressOffset>
        <description>GPIO32 ~ 53 interrupt status bit set register</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x16</bitWidth>
            <description>GPIO32 ~ 53 interrupt status set register. If the value 1 is written to a bit here, the corresponding bit in GPIO_STATUS1_REG will be set to 1. Recommended operation: use this register to set GPIO_STATUS1_REG.</description>
            <name>STATUS1_W1TS</name>
          </field>
        </fields>
        <name>STATUS1_W1TS</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x58</addressOffset>
        <description>GPIO32 ~ 53 interrupt status bit clear register</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x16</bitWidth>
            <description>GPIO32 ~ 53 interrupt status clear register. If the value 1 is written to a bit here, the corresponding bit in GPIO_STATUS1_REG will be cleared. Recommended operation: use this register to clear GPIO_STATUS1_REG.</description>
            <name>STATUS1_W1TC</name>
          </field>
        </fields>
        <name>STATUS1_W1TC</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5C</addressOffset>
        <description>GPIO0 ~ 31 PRO_CPU interrupt status register</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>GPIO0 ~ 31 PRO_CPU interrupt status. This interrupt status is corresponding to the bit in GPIO_STATUS_REG when assert (high) enable signal (bit13 of GPIO_PINn_REG).</description>
            <name>PROCPU_INT</name>
          </field>
        </fields>
        <name>PCPU_INT</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x60</addressOffset>
        <description>GPIO0 ~ 31 PRO_CPU non-maskable interrupt status register</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>GPIO0 ~ 31 PRO_CPU non-maskable interrupt status. This interrupt sta- tus is corresponding to the bit in GPIO_STATUS_REG when assert (high) enable signal (bit 14 of GPIO_PINn_REG).</description>
            <name>PROCPU_NMI_INT</name>
          </field>
        </fields>
        <name>PCPU_NMI_INT</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x64</addressOffset>
        <description>GPIO0 ~ 31 CPU SDIO interrupt status register</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>GPIO0~31 CPU SDIO interrupt status.</description>
            <name>SDIO_INT</name>
          </field>
        </fields>
        <name>CPUSDIO_INT</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x68</addressOffset>
        <description>GPIO32 ~ 53 PRO_CPU interrupt status register</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x16</bitWidth>
            <description>GPIO32 ~ 53 PRO_CPU interrupt status. This interrupt status is corresponding to the bit in GPIO_STATUS1_REG when assert (high) enable signal (bit 13 of GPIO_PINn_REG).</description>
            <name>PROCPU1_INT</name>
          </field>
        </fields>
        <name>PCPU_INT1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x6C</addressOffset>
        <description>GPIO32 ~ 53 PRO_CPU non-maskable interrupt status register</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x16</bitWidth>
            <description>GPIO32 ~ 53 PRO_CPU non-maskable interrupt status. This interrupt status is corresponding to bit in GPIO_STATUS1_REG when assert (high) enable signal (bit 14 of GPIO_PINn_REG).</description>
            <name>PROCPU_NMI1_INT</name>
          </field>
        </fields>
        <name>PCPU_NMI_INT1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x70</addressOffset>
        <description>GPIO32 ~ 53 CPU SDIO interrupt status register</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x16</bitWidth>
            <description>GPIO32~53 CPU SDIO interrupt status.</description>
            <name>SDIO1_INT</name>
          </field>
        </fields>
        <name>CPUSDIO_INT1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x14C</addressOffset>
        <description>GPIO0 ~ 31 interrupt source register</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Interrupt source signal of GPIO0 ~ 31, could be rising edge interrupt, falling edge interrupt, level sensitive interrupt and any edge interrupt.</description>
            <name>STATUS_INTERRUPT_NEXT</name>
          </field>
        </fields>
        <name>STATUS_NEXT</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x150</addressOffset>
        <description>GPIO32 ~ 53 interrupt source register</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x16</bitWidth>
            <description>Interrupt source signal of GPIO32 ~ 53.</description>
            <name>STATUS1_INTERRUPT_NEXT</name>
          </field>
        </fields>
        <name>STATUS_NEXT1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x62C</addressOffset>
        <description>GPIO clock gating register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Clock gating enable bit. If set to 1, the clock is free running.</description>
            <name>CLK_EN</name>
          </field>
        </fields>
        <name>CLOCK_GATE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x1</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x6FC</addressOffset>
        <description>Version control register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1C</bitWidth>
            <description>Version control register</description>
            <name>DATE</name>
          </field>
        </fields>
        <name>REG_DATE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x1905061</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x74</addressOffset>
        <description>Configuration for GPIO pin %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the second stage synchronization, GPIO input data can be syn- chronized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC2_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pad driver selection. 0: normal output; 1: open drain output..</description>
            <name>PIN0_PAD_DRIVER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the first stage synchronization, GPIO input data can be synchro- nized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC1_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Interrupt type selection. 0: GPIO interrupt disabled; 1: rising edge trigger; 2: falling edge trigger; 3: any edge trigger; 4: low level trigger; 5: high level trigger. (R/W)</description>
            <name>PIN0_INT_TYPE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>GPIO wake-up enable bit, only wakes up the CPU from Light-sleep.</description>
            <name>PIN0_WAKEUP_ENABLE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Reserved</description>
            <name>PIN0_CONFIG</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Interrupt enable bits. bit13: CPU interrupt enabled; bit14: CPU non-maskable interrupt enabled.</description>
            <name>PIN0_INT_ENA</name>
          </field>
        </fields>
        <name>PIN0</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x78</addressOffset>
        <description>Configuration for GPIO pin %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the second stage synchronization, GPIO input data can be syn- chronized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC2_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pad driver selection. 0: normal output; 1: open drain output..</description>
            <name>PIN0_PAD_DRIVER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the first stage synchronization, GPIO input data can be synchro- nized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC1_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Interrupt type selection. 0: GPIO interrupt disabled; 1: rising edge trigger; 2: falling edge trigger; 3: any edge trigger; 4: low level trigger; 5: high level trigger. (R/W)</description>
            <name>PIN0_INT_TYPE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>GPIO wake-up enable bit, only wakes up the CPU from Light-sleep.</description>
            <name>PIN0_WAKEUP_ENABLE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Reserved</description>
            <name>PIN0_CONFIG</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Interrupt enable bits. bit13: CPU interrupt enabled; bit14: CPU non-maskable interrupt enabled.</description>
            <name>PIN0_INT_ENA</name>
          </field>
        </fields>
        <name>PIN1</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x7C</addressOffset>
        <description>Configuration for GPIO pin %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the second stage synchronization, GPIO input data can be syn- chronized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC2_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pad driver selection. 0: normal output; 1: open drain output..</description>
            <name>PIN0_PAD_DRIVER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the first stage synchronization, GPIO input data can be synchro- nized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC1_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Interrupt type selection. 0: GPIO interrupt disabled; 1: rising edge trigger; 2: falling edge trigger; 3: any edge trigger; 4: low level trigger; 5: high level trigger. (R/W)</description>
            <name>PIN0_INT_TYPE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>GPIO wake-up enable bit, only wakes up the CPU from Light-sleep.</description>
            <name>PIN0_WAKEUP_ENABLE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Reserved</description>
            <name>PIN0_CONFIG</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Interrupt enable bits. bit13: CPU interrupt enabled; bit14: CPU non-maskable interrupt enabled.</description>
            <name>PIN0_INT_ENA</name>
          </field>
        </fields>
        <name>PIN2</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x80</addressOffset>
        <description>Configuration for GPIO pin %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the second stage synchronization, GPIO input data can be syn- chronized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC2_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pad driver selection. 0: normal output; 1: open drain output..</description>
            <name>PIN0_PAD_DRIVER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the first stage synchronization, GPIO input data can be synchro- nized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC1_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Interrupt type selection. 0: GPIO interrupt disabled; 1: rising edge trigger; 2: falling edge trigger; 3: any edge trigger; 4: low level trigger; 5: high level trigger. (R/W)</description>
            <name>PIN0_INT_TYPE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>GPIO wake-up enable bit, only wakes up the CPU from Light-sleep.</description>
            <name>PIN0_WAKEUP_ENABLE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Reserved</description>
            <name>PIN0_CONFIG</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Interrupt enable bits. bit13: CPU interrupt enabled; bit14: CPU non-maskable interrupt enabled.</description>
            <name>PIN0_INT_ENA</name>
          </field>
        </fields>
        <name>PIN3</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x84</addressOffset>
        <description>Configuration for GPIO pin %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the second stage synchronization, GPIO input data can be syn- chronized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC2_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pad driver selection. 0: normal output; 1: open drain output..</description>
            <name>PIN0_PAD_DRIVER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the first stage synchronization, GPIO input data can be synchro- nized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC1_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Interrupt type selection. 0: GPIO interrupt disabled; 1: rising edge trigger; 2: falling edge trigger; 3: any edge trigger; 4: low level trigger; 5: high level trigger. (R/W)</description>
            <name>PIN0_INT_TYPE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>GPIO wake-up enable bit, only wakes up the CPU from Light-sleep.</description>
            <name>PIN0_WAKEUP_ENABLE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Reserved</description>
            <name>PIN0_CONFIG</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Interrupt enable bits. bit13: CPU interrupt enabled; bit14: CPU non-maskable interrupt enabled.</description>
            <name>PIN0_INT_ENA</name>
          </field>
        </fields>
        <name>PIN4</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x88</addressOffset>
        <description>Configuration for GPIO pin %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the second stage synchronization, GPIO input data can be syn- chronized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC2_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pad driver selection. 0: normal output; 1: open drain output..</description>
            <name>PIN0_PAD_DRIVER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the first stage synchronization, GPIO input data can be synchro- nized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC1_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Interrupt type selection. 0: GPIO interrupt disabled; 1: rising edge trigger; 2: falling edge trigger; 3: any edge trigger; 4: low level trigger; 5: high level trigger. (R/W)</description>
            <name>PIN0_INT_TYPE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>GPIO wake-up enable bit, only wakes up the CPU from Light-sleep.</description>
            <name>PIN0_WAKEUP_ENABLE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Reserved</description>
            <name>PIN0_CONFIG</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Interrupt enable bits. bit13: CPU interrupt enabled; bit14: CPU non-maskable interrupt enabled.</description>
            <name>PIN0_INT_ENA</name>
          </field>
        </fields>
        <name>PIN5</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8C</addressOffset>
        <description>Configuration for GPIO pin %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the second stage synchronization, GPIO input data can be syn- chronized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC2_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pad driver selection. 0: normal output; 1: open drain output..</description>
            <name>PIN0_PAD_DRIVER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the first stage synchronization, GPIO input data can be synchro- nized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC1_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Interrupt type selection. 0: GPIO interrupt disabled; 1: rising edge trigger; 2: falling edge trigger; 3: any edge trigger; 4: low level trigger; 5: high level trigger. (R/W)</description>
            <name>PIN0_INT_TYPE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>GPIO wake-up enable bit, only wakes up the CPU from Light-sleep.</description>
            <name>PIN0_WAKEUP_ENABLE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Reserved</description>
            <name>PIN0_CONFIG</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Interrupt enable bits. bit13: CPU interrupt enabled; bit14: CPU non-maskable interrupt enabled.</description>
            <name>PIN0_INT_ENA</name>
          </field>
        </fields>
        <name>PIN6</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x90</addressOffset>
        <description>Configuration for GPIO pin %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the second stage synchronization, GPIO input data can be syn- chronized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC2_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pad driver selection. 0: normal output; 1: open drain output..</description>
            <name>PIN0_PAD_DRIVER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the first stage synchronization, GPIO input data can be synchro- nized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC1_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Interrupt type selection. 0: GPIO interrupt disabled; 1: rising edge trigger; 2: falling edge trigger; 3: any edge trigger; 4: low level trigger; 5: high level trigger. (R/W)</description>
            <name>PIN0_INT_TYPE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>GPIO wake-up enable bit, only wakes up the CPU from Light-sleep.</description>
            <name>PIN0_WAKEUP_ENABLE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Reserved</description>
            <name>PIN0_CONFIG</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Interrupt enable bits. bit13: CPU interrupt enabled; bit14: CPU non-maskable interrupt enabled.</description>
            <name>PIN0_INT_ENA</name>
          </field>
        </fields>
        <name>PIN7</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x94</addressOffset>
        <description>Configuration for GPIO pin %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the second stage synchronization, GPIO input data can be syn- chronized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC2_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pad driver selection. 0: normal output; 1: open drain output..</description>
            <name>PIN0_PAD_DRIVER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the first stage synchronization, GPIO input data can be synchro- nized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC1_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Interrupt type selection. 0: GPIO interrupt disabled; 1: rising edge trigger; 2: falling edge trigger; 3: any edge trigger; 4: low level trigger; 5: high level trigger. (R/W)</description>
            <name>PIN0_INT_TYPE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>GPIO wake-up enable bit, only wakes up the CPU from Light-sleep.</description>
            <name>PIN0_WAKEUP_ENABLE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Reserved</description>
            <name>PIN0_CONFIG</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Interrupt enable bits. bit13: CPU interrupt enabled; bit14: CPU non-maskable interrupt enabled.</description>
            <name>PIN0_INT_ENA</name>
          </field>
        </fields>
        <name>PIN8</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x98</addressOffset>
        <description>Configuration for GPIO pin %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the second stage synchronization, GPIO input data can be syn- chronized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC2_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pad driver selection. 0: normal output; 1: open drain output..</description>
            <name>PIN0_PAD_DRIVER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the first stage synchronization, GPIO input data can be synchro- nized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC1_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Interrupt type selection. 0: GPIO interrupt disabled; 1: rising edge trigger; 2: falling edge trigger; 3: any edge trigger; 4: low level trigger; 5: high level trigger. (R/W)</description>
            <name>PIN0_INT_TYPE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>GPIO wake-up enable bit, only wakes up the CPU from Light-sleep.</description>
            <name>PIN0_WAKEUP_ENABLE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Reserved</description>
            <name>PIN0_CONFIG</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Interrupt enable bits. bit13: CPU interrupt enabled; bit14: CPU non-maskable interrupt enabled.</description>
            <name>PIN0_INT_ENA</name>
          </field>
        </fields>
        <name>PIN9</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9C</addressOffset>
        <description>Configuration for GPIO pin %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the second stage synchronization, GPIO input data can be syn- chronized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC2_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pad driver selection. 0: normal output; 1: open drain output..</description>
            <name>PIN0_PAD_DRIVER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the first stage synchronization, GPIO input data can be synchro- nized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC1_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Interrupt type selection. 0: GPIO interrupt disabled; 1: rising edge trigger; 2: falling edge trigger; 3: any edge trigger; 4: low level trigger; 5: high level trigger. (R/W)</description>
            <name>PIN0_INT_TYPE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>GPIO wake-up enable bit, only wakes up the CPU from Light-sleep.</description>
            <name>PIN0_WAKEUP_ENABLE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Reserved</description>
            <name>PIN0_CONFIG</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Interrupt enable bits. bit13: CPU interrupt enabled; bit14: CPU non-maskable interrupt enabled.</description>
            <name>PIN0_INT_ENA</name>
          </field>
        </fields>
        <name>PIN10</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA0</addressOffset>
        <description>Configuration for GPIO pin %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the second stage synchronization, GPIO input data can be syn- chronized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC2_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pad driver selection. 0: normal output; 1: open drain output..</description>
            <name>PIN0_PAD_DRIVER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the first stage synchronization, GPIO input data can be synchro- nized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC1_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Interrupt type selection. 0: GPIO interrupt disabled; 1: rising edge trigger; 2: falling edge trigger; 3: any edge trigger; 4: low level trigger; 5: high level trigger. (R/W)</description>
            <name>PIN0_INT_TYPE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>GPIO wake-up enable bit, only wakes up the CPU from Light-sleep.</description>
            <name>PIN0_WAKEUP_ENABLE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Reserved</description>
            <name>PIN0_CONFIG</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Interrupt enable bits. bit13: CPU interrupt enabled; bit14: CPU non-maskable interrupt enabled.</description>
            <name>PIN0_INT_ENA</name>
          </field>
        </fields>
        <name>PIN11</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA4</addressOffset>
        <description>Configuration for GPIO pin %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the second stage synchronization, GPIO input data can be syn- chronized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC2_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pad driver selection. 0: normal output; 1: open drain output..</description>
            <name>PIN0_PAD_DRIVER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the first stage synchronization, GPIO input data can be synchro- nized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC1_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Interrupt type selection. 0: GPIO interrupt disabled; 1: rising edge trigger; 2: falling edge trigger; 3: any edge trigger; 4: low level trigger; 5: high level trigger. (R/W)</description>
            <name>PIN0_INT_TYPE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>GPIO wake-up enable bit, only wakes up the CPU from Light-sleep.</description>
            <name>PIN0_WAKEUP_ENABLE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Reserved</description>
            <name>PIN0_CONFIG</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Interrupt enable bits. bit13: CPU interrupt enabled; bit14: CPU non-maskable interrupt enabled.</description>
            <name>PIN0_INT_ENA</name>
          </field>
        </fields>
        <name>PIN12</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA8</addressOffset>
        <description>Configuration for GPIO pin %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the second stage synchronization, GPIO input data can be syn- chronized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC2_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pad driver selection. 0: normal output; 1: open drain output..</description>
            <name>PIN0_PAD_DRIVER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the first stage synchronization, GPIO input data can be synchro- nized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC1_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Interrupt type selection. 0: GPIO interrupt disabled; 1: rising edge trigger; 2: falling edge trigger; 3: any edge trigger; 4: low level trigger; 5: high level trigger. (R/W)</description>
            <name>PIN0_INT_TYPE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>GPIO wake-up enable bit, only wakes up the CPU from Light-sleep.</description>
            <name>PIN0_WAKEUP_ENABLE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Reserved</description>
            <name>PIN0_CONFIG</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Interrupt enable bits. bit13: CPU interrupt enabled; bit14: CPU non-maskable interrupt enabled.</description>
            <name>PIN0_INT_ENA</name>
          </field>
        </fields>
        <name>PIN13</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAC</addressOffset>
        <description>Configuration for GPIO pin %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the second stage synchronization, GPIO input data can be syn- chronized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC2_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pad driver selection. 0: normal output; 1: open drain output..</description>
            <name>PIN0_PAD_DRIVER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the first stage synchronization, GPIO input data can be synchro- nized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC1_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Interrupt type selection. 0: GPIO interrupt disabled; 1: rising edge trigger; 2: falling edge trigger; 3: any edge trigger; 4: low level trigger; 5: high level trigger. (R/W)</description>
            <name>PIN0_INT_TYPE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>GPIO wake-up enable bit, only wakes up the CPU from Light-sleep.</description>
            <name>PIN0_WAKEUP_ENABLE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Reserved</description>
            <name>PIN0_CONFIG</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Interrupt enable bits. bit13: CPU interrupt enabled; bit14: CPU non-maskable interrupt enabled.</description>
            <name>PIN0_INT_ENA</name>
          </field>
        </fields>
        <name>PIN14</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB0</addressOffset>
        <description>Configuration for GPIO pin %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the second stage synchronization, GPIO input data can be syn- chronized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC2_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pad driver selection. 0: normal output; 1: open drain output..</description>
            <name>PIN0_PAD_DRIVER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the first stage synchronization, GPIO input data can be synchro- nized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC1_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Interrupt type selection. 0: GPIO interrupt disabled; 1: rising edge trigger; 2: falling edge trigger; 3: any edge trigger; 4: low level trigger; 5: high level trigger. (R/W)</description>
            <name>PIN0_INT_TYPE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>GPIO wake-up enable bit, only wakes up the CPU from Light-sleep.</description>
            <name>PIN0_WAKEUP_ENABLE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Reserved</description>
            <name>PIN0_CONFIG</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Interrupt enable bits. bit13: CPU interrupt enabled; bit14: CPU non-maskable interrupt enabled.</description>
            <name>PIN0_INT_ENA</name>
          </field>
        </fields>
        <name>PIN15</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB4</addressOffset>
        <description>Configuration for GPIO pin %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the second stage synchronization, GPIO input data can be syn- chronized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC2_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pad driver selection. 0: normal output; 1: open drain output..</description>
            <name>PIN0_PAD_DRIVER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the first stage synchronization, GPIO input data can be synchro- nized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC1_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Interrupt type selection. 0: GPIO interrupt disabled; 1: rising edge trigger; 2: falling edge trigger; 3: any edge trigger; 4: low level trigger; 5: high level trigger. (R/W)</description>
            <name>PIN0_INT_TYPE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>GPIO wake-up enable bit, only wakes up the CPU from Light-sleep.</description>
            <name>PIN0_WAKEUP_ENABLE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Reserved</description>
            <name>PIN0_CONFIG</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Interrupt enable bits. bit13: CPU interrupt enabled; bit14: CPU non-maskable interrupt enabled.</description>
            <name>PIN0_INT_ENA</name>
          </field>
        </fields>
        <name>PIN16</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB8</addressOffset>
        <description>Configuration for GPIO pin %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the second stage synchronization, GPIO input data can be syn- chronized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC2_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pad driver selection. 0: normal output; 1: open drain output..</description>
            <name>PIN0_PAD_DRIVER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the first stage synchronization, GPIO input data can be synchro- nized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC1_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Interrupt type selection. 0: GPIO interrupt disabled; 1: rising edge trigger; 2: falling edge trigger; 3: any edge trigger; 4: low level trigger; 5: high level trigger. (R/W)</description>
            <name>PIN0_INT_TYPE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>GPIO wake-up enable bit, only wakes up the CPU from Light-sleep.</description>
            <name>PIN0_WAKEUP_ENABLE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Reserved</description>
            <name>PIN0_CONFIG</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Interrupt enable bits. bit13: CPU interrupt enabled; bit14: CPU non-maskable interrupt enabled.</description>
            <name>PIN0_INT_ENA</name>
          </field>
        </fields>
        <name>PIN17</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBC</addressOffset>
        <description>Configuration for GPIO pin %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the second stage synchronization, GPIO input data can be syn- chronized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC2_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pad driver selection. 0: normal output; 1: open drain output..</description>
            <name>PIN0_PAD_DRIVER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the first stage synchronization, GPIO input data can be synchro- nized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC1_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Interrupt type selection. 0: GPIO interrupt disabled; 1: rising edge trigger; 2: falling edge trigger; 3: any edge trigger; 4: low level trigger; 5: high level trigger. (R/W)</description>
            <name>PIN0_INT_TYPE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>GPIO wake-up enable bit, only wakes up the CPU from Light-sleep.</description>
            <name>PIN0_WAKEUP_ENABLE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Reserved</description>
            <name>PIN0_CONFIG</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Interrupt enable bits. bit13: CPU interrupt enabled; bit14: CPU non-maskable interrupt enabled.</description>
            <name>PIN0_INT_ENA</name>
          </field>
        </fields>
        <name>PIN18</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xC0</addressOffset>
        <description>Configuration for GPIO pin %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the second stage synchronization, GPIO input data can be syn- chronized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC2_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pad driver selection. 0: normal output; 1: open drain output..</description>
            <name>PIN0_PAD_DRIVER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the first stage synchronization, GPIO input data can be synchro- nized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC1_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Interrupt type selection. 0: GPIO interrupt disabled; 1: rising edge trigger; 2: falling edge trigger; 3: any edge trigger; 4: low level trigger; 5: high level trigger. (R/W)</description>
            <name>PIN0_INT_TYPE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>GPIO wake-up enable bit, only wakes up the CPU from Light-sleep.</description>
            <name>PIN0_WAKEUP_ENABLE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Reserved</description>
            <name>PIN0_CONFIG</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Interrupt enable bits. bit13: CPU interrupt enabled; bit14: CPU non-maskable interrupt enabled.</description>
            <name>PIN0_INT_ENA</name>
          </field>
        </fields>
        <name>PIN19</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xC4</addressOffset>
        <description>Configuration for GPIO pin %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the second stage synchronization, GPIO input data can be syn- chronized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC2_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pad driver selection. 0: normal output; 1: open drain output..</description>
            <name>PIN0_PAD_DRIVER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the first stage synchronization, GPIO input data can be synchro- nized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC1_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Interrupt type selection. 0: GPIO interrupt disabled; 1: rising edge trigger; 2: falling edge trigger; 3: any edge trigger; 4: low level trigger; 5: high level trigger. (R/W)</description>
            <name>PIN0_INT_TYPE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>GPIO wake-up enable bit, only wakes up the CPU from Light-sleep.</description>
            <name>PIN0_WAKEUP_ENABLE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Reserved</description>
            <name>PIN0_CONFIG</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Interrupt enable bits. bit13: CPU interrupt enabled; bit14: CPU non-maskable interrupt enabled.</description>
            <name>PIN0_INT_ENA</name>
          </field>
        </fields>
        <name>PIN20</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xC8</addressOffset>
        <description>Configuration for GPIO pin %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the second stage synchronization, GPIO input data can be syn- chronized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC2_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pad driver selection. 0: normal output; 1: open drain output..</description>
            <name>PIN0_PAD_DRIVER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the first stage synchronization, GPIO input data can be synchro- nized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC1_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Interrupt type selection. 0: GPIO interrupt disabled; 1: rising edge trigger; 2: falling edge trigger; 3: any edge trigger; 4: low level trigger; 5: high level trigger. (R/W)</description>
            <name>PIN0_INT_TYPE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>GPIO wake-up enable bit, only wakes up the CPU from Light-sleep.</description>
            <name>PIN0_WAKEUP_ENABLE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Reserved</description>
            <name>PIN0_CONFIG</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Interrupt enable bits. bit13: CPU interrupt enabled; bit14: CPU non-maskable interrupt enabled.</description>
            <name>PIN0_INT_ENA</name>
          </field>
        </fields>
        <name>PIN21</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xCC</addressOffset>
        <description>Configuration for GPIO pin %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the second stage synchronization, GPIO input data can be syn- chronized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC2_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pad driver selection. 0: normal output; 1: open drain output..</description>
            <name>PIN0_PAD_DRIVER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the first stage synchronization, GPIO input data can be synchro- nized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC1_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Interrupt type selection. 0: GPIO interrupt disabled; 1: rising edge trigger; 2: falling edge trigger; 3: any edge trigger; 4: low level trigger; 5: high level trigger. (R/W)</description>
            <name>PIN0_INT_TYPE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>GPIO wake-up enable bit, only wakes up the CPU from Light-sleep.</description>
            <name>PIN0_WAKEUP_ENABLE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Reserved</description>
            <name>PIN0_CONFIG</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Interrupt enable bits. bit13: CPU interrupt enabled; bit14: CPU non-maskable interrupt enabled.</description>
            <name>PIN0_INT_ENA</name>
          </field>
        </fields>
        <name>PIN22</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xD0</addressOffset>
        <description>Configuration for GPIO pin %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the second stage synchronization, GPIO input data can be syn- chronized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC2_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pad driver selection. 0: normal output; 1: open drain output..</description>
            <name>PIN0_PAD_DRIVER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the first stage synchronization, GPIO input data can be synchro- nized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC1_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Interrupt type selection. 0: GPIO interrupt disabled; 1: rising edge trigger; 2: falling edge trigger; 3: any edge trigger; 4: low level trigger; 5: high level trigger. (R/W)</description>
            <name>PIN0_INT_TYPE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>GPIO wake-up enable bit, only wakes up the CPU from Light-sleep.</description>
            <name>PIN0_WAKEUP_ENABLE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Reserved</description>
            <name>PIN0_CONFIG</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Interrupt enable bits. bit13: CPU interrupt enabled; bit14: CPU non-maskable interrupt enabled.</description>
            <name>PIN0_INT_ENA</name>
          </field>
        </fields>
        <name>PIN23</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xD4</addressOffset>
        <description>Configuration for GPIO pin %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the second stage synchronization, GPIO input data can be syn- chronized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC2_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pad driver selection. 0: normal output; 1: open drain output..</description>
            <name>PIN0_PAD_DRIVER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the first stage synchronization, GPIO input data can be synchro- nized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC1_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Interrupt type selection. 0: GPIO interrupt disabled; 1: rising edge trigger; 2: falling edge trigger; 3: any edge trigger; 4: low level trigger; 5: high level trigger. (R/W)</description>
            <name>PIN0_INT_TYPE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>GPIO wake-up enable bit, only wakes up the CPU from Light-sleep.</description>
            <name>PIN0_WAKEUP_ENABLE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Reserved</description>
            <name>PIN0_CONFIG</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Interrupt enable bits. bit13: CPU interrupt enabled; bit14: CPU non-maskable interrupt enabled.</description>
            <name>PIN0_INT_ENA</name>
          </field>
        </fields>
        <name>PIN24</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xD8</addressOffset>
        <description>Configuration for GPIO pin %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the second stage synchronization, GPIO input data can be syn- chronized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC2_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pad driver selection. 0: normal output; 1: open drain output..</description>
            <name>PIN0_PAD_DRIVER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the first stage synchronization, GPIO input data can be synchro- nized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC1_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Interrupt type selection. 0: GPIO interrupt disabled; 1: rising edge trigger; 2: falling edge trigger; 3: any edge trigger; 4: low level trigger; 5: high level trigger. (R/W)</description>
            <name>PIN0_INT_TYPE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>GPIO wake-up enable bit, only wakes up the CPU from Light-sleep.</description>
            <name>PIN0_WAKEUP_ENABLE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Reserved</description>
            <name>PIN0_CONFIG</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Interrupt enable bits. bit13: CPU interrupt enabled; bit14: CPU non-maskable interrupt enabled.</description>
            <name>PIN0_INT_ENA</name>
          </field>
        </fields>
        <name>PIN25</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xDC</addressOffset>
        <description>Configuration for GPIO pin %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the second stage synchronization, GPIO input data can be syn- chronized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC2_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pad driver selection. 0: normal output; 1: open drain output..</description>
            <name>PIN0_PAD_DRIVER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the first stage synchronization, GPIO input data can be synchro- nized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC1_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Interrupt type selection. 0: GPIO interrupt disabled; 1: rising edge trigger; 2: falling edge trigger; 3: any edge trigger; 4: low level trigger; 5: high level trigger. (R/W)</description>
            <name>PIN0_INT_TYPE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>GPIO wake-up enable bit, only wakes up the CPU from Light-sleep.</description>
            <name>PIN0_WAKEUP_ENABLE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Reserved</description>
            <name>PIN0_CONFIG</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Interrupt enable bits. bit13: CPU interrupt enabled; bit14: CPU non-maskable interrupt enabled.</description>
            <name>PIN0_INT_ENA</name>
          </field>
        </fields>
        <name>PIN26</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xE0</addressOffset>
        <description>Configuration for GPIO pin %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the second stage synchronization, GPIO input data can be syn- chronized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC2_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pad driver selection. 0: normal output; 1: open drain output..</description>
            <name>PIN0_PAD_DRIVER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the first stage synchronization, GPIO input data can be synchro- nized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC1_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Interrupt type selection. 0: GPIO interrupt disabled; 1: rising edge trigger; 2: falling edge trigger; 3: any edge trigger; 4: low level trigger; 5: high level trigger. (R/W)</description>
            <name>PIN0_INT_TYPE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>GPIO wake-up enable bit, only wakes up the CPU from Light-sleep.</description>
            <name>PIN0_WAKEUP_ENABLE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Reserved</description>
            <name>PIN0_CONFIG</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Interrupt enable bits. bit13: CPU interrupt enabled; bit14: CPU non-maskable interrupt enabled.</description>
            <name>PIN0_INT_ENA</name>
          </field>
        </fields>
        <name>PIN27</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xE4</addressOffset>
        <description>Configuration for GPIO pin %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the second stage synchronization, GPIO input data can be syn- chronized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC2_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pad driver selection. 0: normal output; 1: open drain output..</description>
            <name>PIN0_PAD_DRIVER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the first stage synchronization, GPIO input data can be synchro- nized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC1_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Interrupt type selection. 0: GPIO interrupt disabled; 1: rising edge trigger; 2: falling edge trigger; 3: any edge trigger; 4: low level trigger; 5: high level trigger. (R/W)</description>
            <name>PIN0_INT_TYPE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>GPIO wake-up enable bit, only wakes up the CPU from Light-sleep.</description>
            <name>PIN0_WAKEUP_ENABLE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Reserved</description>
            <name>PIN0_CONFIG</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Interrupt enable bits. bit13: CPU interrupt enabled; bit14: CPU non-maskable interrupt enabled.</description>
            <name>PIN0_INT_ENA</name>
          </field>
        </fields>
        <name>PIN28</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xE8</addressOffset>
        <description>Configuration for GPIO pin %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the second stage synchronization, GPIO input data can be syn- chronized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC2_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pad driver selection. 0: normal output; 1: open drain output..</description>
            <name>PIN0_PAD_DRIVER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the first stage synchronization, GPIO input data can be synchro- nized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC1_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Interrupt type selection. 0: GPIO interrupt disabled; 1: rising edge trigger; 2: falling edge trigger; 3: any edge trigger; 4: low level trigger; 5: high level trigger. (R/W)</description>
            <name>PIN0_INT_TYPE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>GPIO wake-up enable bit, only wakes up the CPU from Light-sleep.</description>
            <name>PIN0_WAKEUP_ENABLE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Reserved</description>
            <name>PIN0_CONFIG</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Interrupt enable bits. bit13: CPU interrupt enabled; bit14: CPU non-maskable interrupt enabled.</description>
            <name>PIN0_INT_ENA</name>
          </field>
        </fields>
        <name>PIN29</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xEC</addressOffset>
        <description>Configuration for GPIO pin %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the second stage synchronization, GPIO input data can be syn- chronized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC2_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pad driver selection. 0: normal output; 1: open drain output..</description>
            <name>PIN0_PAD_DRIVER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the first stage synchronization, GPIO input data can be synchro- nized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC1_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Interrupt type selection. 0: GPIO interrupt disabled; 1: rising edge trigger; 2: falling edge trigger; 3: any edge trigger; 4: low level trigger; 5: high level trigger. (R/W)</description>
            <name>PIN0_INT_TYPE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>GPIO wake-up enable bit, only wakes up the CPU from Light-sleep.</description>
            <name>PIN0_WAKEUP_ENABLE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Reserved</description>
            <name>PIN0_CONFIG</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Interrupt enable bits. bit13: CPU interrupt enabled; bit14: CPU non-maskable interrupt enabled.</description>
            <name>PIN0_INT_ENA</name>
          </field>
        </fields>
        <name>PIN30</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xF0</addressOffset>
        <description>Configuration for GPIO pin %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the second stage synchronization, GPIO input data can be syn- chronized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC2_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pad driver selection. 0: normal output; 1: open drain output..</description>
            <name>PIN0_PAD_DRIVER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the first stage synchronization, GPIO input data can be synchro- nized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC1_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Interrupt type selection. 0: GPIO interrupt disabled; 1: rising edge trigger; 2: falling edge trigger; 3: any edge trigger; 4: low level trigger; 5: high level trigger. (R/W)</description>
            <name>PIN0_INT_TYPE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>GPIO wake-up enable bit, only wakes up the CPU from Light-sleep.</description>
            <name>PIN0_WAKEUP_ENABLE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Reserved</description>
            <name>PIN0_CONFIG</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Interrupt enable bits. bit13: CPU interrupt enabled; bit14: CPU non-maskable interrupt enabled.</description>
            <name>PIN0_INT_ENA</name>
          </field>
        </fields>
        <name>PIN31</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xF4</addressOffset>
        <description>Configuration for GPIO pin %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the second stage synchronization, GPIO input data can be syn- chronized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC2_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pad driver selection. 0: normal output; 1: open drain output..</description>
            <name>PIN0_PAD_DRIVER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the first stage synchronization, GPIO input data can be synchro- nized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC1_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Interrupt type selection. 0: GPIO interrupt disabled; 1: rising edge trigger; 2: falling edge trigger; 3: any edge trigger; 4: low level trigger; 5: high level trigger. (R/W)</description>
            <name>PIN0_INT_TYPE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>GPIO wake-up enable bit, only wakes up the CPU from Light-sleep.</description>
            <name>PIN0_WAKEUP_ENABLE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Reserved</description>
            <name>PIN0_CONFIG</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Interrupt enable bits. bit13: CPU interrupt enabled; bit14: CPU non-maskable interrupt enabled.</description>
            <name>PIN0_INT_ENA</name>
          </field>
        </fields>
        <name>PIN32</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xF8</addressOffset>
        <description>Configuration for GPIO pin %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the second stage synchronization, GPIO input data can be syn- chronized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC2_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pad driver selection. 0: normal output; 1: open drain output..</description>
            <name>PIN0_PAD_DRIVER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the first stage synchronization, GPIO input data can be synchro- nized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC1_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Interrupt type selection. 0: GPIO interrupt disabled; 1: rising edge trigger; 2: falling edge trigger; 3: any edge trigger; 4: low level trigger; 5: high level trigger. (R/W)</description>
            <name>PIN0_INT_TYPE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>GPIO wake-up enable bit, only wakes up the CPU from Light-sleep.</description>
            <name>PIN0_WAKEUP_ENABLE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Reserved</description>
            <name>PIN0_CONFIG</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Interrupt enable bits. bit13: CPU interrupt enabled; bit14: CPU non-maskable interrupt enabled.</description>
            <name>PIN0_INT_ENA</name>
          </field>
        </fields>
        <name>PIN33</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xFC</addressOffset>
        <description>Configuration for GPIO pin %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the second stage synchronization, GPIO input data can be syn- chronized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC2_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pad driver selection. 0: normal output; 1: open drain output..</description>
            <name>PIN0_PAD_DRIVER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the first stage synchronization, GPIO input data can be synchro- nized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC1_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Interrupt type selection. 0: GPIO interrupt disabled; 1: rising edge trigger; 2: falling edge trigger; 3: any edge trigger; 4: low level trigger; 5: high level trigger. (R/W)</description>
            <name>PIN0_INT_TYPE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>GPIO wake-up enable bit, only wakes up the CPU from Light-sleep.</description>
            <name>PIN0_WAKEUP_ENABLE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Reserved</description>
            <name>PIN0_CONFIG</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Interrupt enable bits. bit13: CPU interrupt enabled; bit14: CPU non-maskable interrupt enabled.</description>
            <name>PIN0_INT_ENA</name>
          </field>
        </fields>
        <name>PIN34</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x100</addressOffset>
        <description>Configuration for GPIO pin %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the second stage synchronization, GPIO input data can be syn- chronized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC2_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pad driver selection. 0: normal output; 1: open drain output..</description>
            <name>PIN0_PAD_DRIVER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the first stage synchronization, GPIO input data can be synchro- nized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC1_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Interrupt type selection. 0: GPIO interrupt disabled; 1: rising edge trigger; 2: falling edge trigger; 3: any edge trigger; 4: low level trigger; 5: high level trigger. (R/W)</description>
            <name>PIN0_INT_TYPE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>GPIO wake-up enable bit, only wakes up the CPU from Light-sleep.</description>
            <name>PIN0_WAKEUP_ENABLE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Reserved</description>
            <name>PIN0_CONFIG</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Interrupt enable bits. bit13: CPU interrupt enabled; bit14: CPU non-maskable interrupt enabled.</description>
            <name>PIN0_INT_ENA</name>
          </field>
        </fields>
        <name>PIN35</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x104</addressOffset>
        <description>Configuration for GPIO pin %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the second stage synchronization, GPIO input data can be syn- chronized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC2_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pad driver selection. 0: normal output; 1: open drain output..</description>
            <name>PIN0_PAD_DRIVER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the first stage synchronization, GPIO input data can be synchro- nized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC1_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Interrupt type selection. 0: GPIO interrupt disabled; 1: rising edge trigger; 2: falling edge trigger; 3: any edge trigger; 4: low level trigger; 5: high level trigger. (R/W)</description>
            <name>PIN0_INT_TYPE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>GPIO wake-up enable bit, only wakes up the CPU from Light-sleep.</description>
            <name>PIN0_WAKEUP_ENABLE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Reserved</description>
            <name>PIN0_CONFIG</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Interrupt enable bits. bit13: CPU interrupt enabled; bit14: CPU non-maskable interrupt enabled.</description>
            <name>PIN0_INT_ENA</name>
          </field>
        </fields>
        <name>PIN36</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x108</addressOffset>
        <description>Configuration for GPIO pin %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the second stage synchronization, GPIO input data can be syn- chronized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC2_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pad driver selection. 0: normal output; 1: open drain output..</description>
            <name>PIN0_PAD_DRIVER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the first stage synchronization, GPIO input data can be synchro- nized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC1_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Interrupt type selection. 0: GPIO interrupt disabled; 1: rising edge trigger; 2: falling edge trigger; 3: any edge trigger; 4: low level trigger; 5: high level trigger. (R/W)</description>
            <name>PIN0_INT_TYPE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>GPIO wake-up enable bit, only wakes up the CPU from Light-sleep.</description>
            <name>PIN0_WAKEUP_ENABLE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Reserved</description>
            <name>PIN0_CONFIG</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Interrupt enable bits. bit13: CPU interrupt enabled; bit14: CPU non-maskable interrupt enabled.</description>
            <name>PIN0_INT_ENA</name>
          </field>
        </fields>
        <name>PIN37</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x10C</addressOffset>
        <description>Configuration for GPIO pin %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the second stage synchronization, GPIO input data can be syn- chronized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC2_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pad driver selection. 0: normal output; 1: open drain output..</description>
            <name>PIN0_PAD_DRIVER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the first stage synchronization, GPIO input data can be synchro- nized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC1_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Interrupt type selection. 0: GPIO interrupt disabled; 1: rising edge trigger; 2: falling edge trigger; 3: any edge trigger; 4: low level trigger; 5: high level trigger. (R/W)</description>
            <name>PIN0_INT_TYPE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>GPIO wake-up enable bit, only wakes up the CPU from Light-sleep.</description>
            <name>PIN0_WAKEUP_ENABLE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Reserved</description>
            <name>PIN0_CONFIG</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Interrupt enable bits. bit13: CPU interrupt enabled; bit14: CPU non-maskable interrupt enabled.</description>
            <name>PIN0_INT_ENA</name>
          </field>
        </fields>
        <name>PIN38</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x110</addressOffset>
        <description>Configuration for GPIO pin %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the second stage synchronization, GPIO input data can be syn- chronized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC2_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pad driver selection. 0: normal output; 1: open drain output..</description>
            <name>PIN0_PAD_DRIVER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the first stage synchronization, GPIO input data can be synchro- nized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC1_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Interrupt type selection. 0: GPIO interrupt disabled; 1: rising edge trigger; 2: falling edge trigger; 3: any edge trigger; 4: low level trigger; 5: high level trigger. (R/W)</description>
            <name>PIN0_INT_TYPE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>GPIO wake-up enable bit, only wakes up the CPU from Light-sleep.</description>
            <name>PIN0_WAKEUP_ENABLE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Reserved</description>
            <name>PIN0_CONFIG</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Interrupt enable bits. bit13: CPU interrupt enabled; bit14: CPU non-maskable interrupt enabled.</description>
            <name>PIN0_INT_ENA</name>
          </field>
        </fields>
        <name>PIN39</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x114</addressOffset>
        <description>Configuration for GPIO pin %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the second stage synchronization, GPIO input data can be syn- chronized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC2_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pad driver selection. 0: normal output; 1: open drain output..</description>
            <name>PIN0_PAD_DRIVER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the first stage synchronization, GPIO input data can be synchro- nized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC1_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Interrupt type selection. 0: GPIO interrupt disabled; 1: rising edge trigger; 2: falling edge trigger; 3: any edge trigger; 4: low level trigger; 5: high level trigger. (R/W)</description>
            <name>PIN0_INT_TYPE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>GPIO wake-up enable bit, only wakes up the CPU from Light-sleep.</description>
            <name>PIN0_WAKEUP_ENABLE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Reserved</description>
            <name>PIN0_CONFIG</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Interrupt enable bits. bit13: CPU interrupt enabled; bit14: CPU non-maskable interrupt enabled.</description>
            <name>PIN0_INT_ENA</name>
          </field>
        </fields>
        <name>PIN40</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x118</addressOffset>
        <description>Configuration for GPIO pin %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the second stage synchronization, GPIO input data can be syn- chronized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC2_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pad driver selection. 0: normal output; 1: open drain output..</description>
            <name>PIN0_PAD_DRIVER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the first stage synchronization, GPIO input data can be synchro- nized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC1_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Interrupt type selection. 0: GPIO interrupt disabled; 1: rising edge trigger; 2: falling edge trigger; 3: any edge trigger; 4: low level trigger; 5: high level trigger. (R/W)</description>
            <name>PIN0_INT_TYPE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>GPIO wake-up enable bit, only wakes up the CPU from Light-sleep.</description>
            <name>PIN0_WAKEUP_ENABLE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Reserved</description>
            <name>PIN0_CONFIG</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Interrupt enable bits. bit13: CPU interrupt enabled; bit14: CPU non-maskable interrupt enabled.</description>
            <name>PIN0_INT_ENA</name>
          </field>
        </fields>
        <name>PIN41</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x11C</addressOffset>
        <description>Configuration for GPIO pin %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the second stage synchronization, GPIO input data can be syn- chronized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC2_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pad driver selection. 0: normal output; 1: open drain output..</description>
            <name>PIN0_PAD_DRIVER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the first stage synchronization, GPIO input data can be synchro- nized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC1_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Interrupt type selection. 0: GPIO interrupt disabled; 1: rising edge trigger; 2: falling edge trigger; 3: any edge trigger; 4: low level trigger; 5: high level trigger. (R/W)</description>
            <name>PIN0_INT_TYPE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>GPIO wake-up enable bit, only wakes up the CPU from Light-sleep.</description>
            <name>PIN0_WAKEUP_ENABLE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Reserved</description>
            <name>PIN0_CONFIG</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Interrupt enable bits. bit13: CPU interrupt enabled; bit14: CPU non-maskable interrupt enabled.</description>
            <name>PIN0_INT_ENA</name>
          </field>
        </fields>
        <name>PIN42</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x120</addressOffset>
        <description>Configuration for GPIO pin %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the second stage synchronization, GPIO input data can be syn- chronized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC2_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pad driver selection. 0: normal output; 1: open drain output..</description>
            <name>PIN0_PAD_DRIVER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the first stage synchronization, GPIO input data can be synchro- nized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC1_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Interrupt type selection. 0: GPIO interrupt disabled; 1: rising edge trigger; 2: falling edge trigger; 3: any edge trigger; 4: low level trigger; 5: high level trigger. (R/W)</description>
            <name>PIN0_INT_TYPE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>GPIO wake-up enable bit, only wakes up the CPU from Light-sleep.</description>
            <name>PIN0_WAKEUP_ENABLE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Reserved</description>
            <name>PIN0_CONFIG</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Interrupt enable bits. bit13: CPU interrupt enabled; bit14: CPU non-maskable interrupt enabled.</description>
            <name>PIN0_INT_ENA</name>
          </field>
        </fields>
        <name>PIN43</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x124</addressOffset>
        <description>Configuration for GPIO pin %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the second stage synchronization, GPIO input data can be syn- chronized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC2_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pad driver selection. 0: normal output; 1: open drain output..</description>
            <name>PIN0_PAD_DRIVER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the first stage synchronization, GPIO input data can be synchro- nized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC1_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Interrupt type selection. 0: GPIO interrupt disabled; 1: rising edge trigger; 2: falling edge trigger; 3: any edge trigger; 4: low level trigger; 5: high level trigger. (R/W)</description>
            <name>PIN0_INT_TYPE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>GPIO wake-up enable bit, only wakes up the CPU from Light-sleep.</description>
            <name>PIN0_WAKEUP_ENABLE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Reserved</description>
            <name>PIN0_CONFIG</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Interrupt enable bits. bit13: CPU interrupt enabled; bit14: CPU non-maskable interrupt enabled.</description>
            <name>PIN0_INT_ENA</name>
          </field>
        </fields>
        <name>PIN44</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x128</addressOffset>
        <description>Configuration for GPIO pin %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the second stage synchronization, GPIO input data can be syn- chronized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC2_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pad driver selection. 0: normal output; 1: open drain output..</description>
            <name>PIN0_PAD_DRIVER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the first stage synchronization, GPIO input data can be synchro- nized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC1_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Interrupt type selection. 0: GPIO interrupt disabled; 1: rising edge trigger; 2: falling edge trigger; 3: any edge trigger; 4: low level trigger; 5: high level trigger. (R/W)</description>
            <name>PIN0_INT_TYPE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>GPIO wake-up enable bit, only wakes up the CPU from Light-sleep.</description>
            <name>PIN0_WAKEUP_ENABLE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Reserved</description>
            <name>PIN0_CONFIG</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Interrupt enable bits. bit13: CPU interrupt enabled; bit14: CPU non-maskable interrupt enabled.</description>
            <name>PIN0_INT_ENA</name>
          </field>
        </fields>
        <name>PIN45</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x12C</addressOffset>
        <description>Configuration for GPIO pin %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the second stage synchronization, GPIO input data can be syn- chronized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC2_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pad driver selection. 0: normal output; 1: open drain output..</description>
            <name>PIN0_PAD_DRIVER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the first stage synchronization, GPIO input data can be synchro- nized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC1_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Interrupt type selection. 0: GPIO interrupt disabled; 1: rising edge trigger; 2: falling edge trigger; 3: any edge trigger; 4: low level trigger; 5: high level trigger. (R/W)</description>
            <name>PIN0_INT_TYPE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>GPIO wake-up enable bit, only wakes up the CPU from Light-sleep.</description>
            <name>PIN0_WAKEUP_ENABLE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Reserved</description>
            <name>PIN0_CONFIG</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Interrupt enable bits. bit13: CPU interrupt enabled; bit14: CPU non-maskable interrupt enabled.</description>
            <name>PIN0_INT_ENA</name>
          </field>
        </fields>
        <name>PIN46</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x130</addressOffset>
        <description>Configuration for GPIO pin %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the second stage synchronization, GPIO input data can be syn- chronized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC2_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pad driver selection. 0: normal output; 1: open drain output..</description>
            <name>PIN0_PAD_DRIVER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the first stage synchronization, GPIO input data can be synchro- nized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC1_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Interrupt type selection. 0: GPIO interrupt disabled; 1: rising edge trigger; 2: falling edge trigger; 3: any edge trigger; 4: low level trigger; 5: high level trigger. (R/W)</description>
            <name>PIN0_INT_TYPE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>GPIO wake-up enable bit, only wakes up the CPU from Light-sleep.</description>
            <name>PIN0_WAKEUP_ENABLE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Reserved</description>
            <name>PIN0_CONFIG</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Interrupt enable bits. bit13: CPU interrupt enabled; bit14: CPU non-maskable interrupt enabled.</description>
            <name>PIN0_INT_ENA</name>
          </field>
        </fields>
        <name>PIN47</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x134</addressOffset>
        <description>Configuration for GPIO pin %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the second stage synchronization, GPIO input data can be syn- chronized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC2_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pad driver selection. 0: normal output; 1: open drain output..</description>
            <name>PIN0_PAD_DRIVER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the first stage synchronization, GPIO input data can be synchro- nized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC1_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Interrupt type selection. 0: GPIO interrupt disabled; 1: rising edge trigger; 2: falling edge trigger; 3: any edge trigger; 4: low level trigger; 5: high level trigger. (R/W)</description>
            <name>PIN0_INT_TYPE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>GPIO wake-up enable bit, only wakes up the CPU from Light-sleep.</description>
            <name>PIN0_WAKEUP_ENABLE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Reserved</description>
            <name>PIN0_CONFIG</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Interrupt enable bits. bit13: CPU interrupt enabled; bit14: CPU non-maskable interrupt enabled.</description>
            <name>PIN0_INT_ENA</name>
          </field>
        </fields>
        <name>PIN48</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x138</addressOffset>
        <description>Configuration for GPIO pin %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the second stage synchronization, GPIO input data can be syn- chronized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC2_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pad driver selection. 0: normal output; 1: open drain output..</description>
            <name>PIN0_PAD_DRIVER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the first stage synchronization, GPIO input data can be synchro- nized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC1_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Interrupt type selection. 0: GPIO interrupt disabled; 1: rising edge trigger; 2: falling edge trigger; 3: any edge trigger; 4: low level trigger; 5: high level trigger. (R/W)</description>
            <name>PIN0_INT_TYPE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>GPIO wake-up enable bit, only wakes up the CPU from Light-sleep.</description>
            <name>PIN0_WAKEUP_ENABLE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Reserved</description>
            <name>PIN0_CONFIG</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Interrupt enable bits. bit13: CPU interrupt enabled; bit14: CPU non-maskable interrupt enabled.</description>
            <name>PIN0_INT_ENA</name>
          </field>
        </fields>
        <name>PIN49</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x13C</addressOffset>
        <description>Configuration for GPIO pin %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the second stage synchronization, GPIO input data can be syn- chronized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC2_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pad driver selection. 0: normal output; 1: open drain output..</description>
            <name>PIN0_PAD_DRIVER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the first stage synchronization, GPIO input data can be synchro- nized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC1_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Interrupt type selection. 0: GPIO interrupt disabled; 1: rising edge trigger; 2: falling edge trigger; 3: any edge trigger; 4: low level trigger; 5: high level trigger. (R/W)</description>
            <name>PIN0_INT_TYPE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>GPIO wake-up enable bit, only wakes up the CPU from Light-sleep.</description>
            <name>PIN0_WAKEUP_ENABLE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Reserved</description>
            <name>PIN0_CONFIG</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Interrupt enable bits. bit13: CPU interrupt enabled; bit14: CPU non-maskable interrupt enabled.</description>
            <name>PIN0_INT_ENA</name>
          </field>
        </fields>
        <name>PIN50</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x140</addressOffset>
        <description>Configuration for GPIO pin %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the second stage synchronization, GPIO input data can be syn- chronized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC2_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pad driver selection. 0: normal output; 1: open drain output..</description>
            <name>PIN0_PAD_DRIVER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the first stage synchronization, GPIO input data can be synchro- nized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC1_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Interrupt type selection. 0: GPIO interrupt disabled; 1: rising edge trigger; 2: falling edge trigger; 3: any edge trigger; 4: low level trigger; 5: high level trigger. (R/W)</description>
            <name>PIN0_INT_TYPE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>GPIO wake-up enable bit, only wakes up the CPU from Light-sleep.</description>
            <name>PIN0_WAKEUP_ENABLE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Reserved</description>
            <name>PIN0_CONFIG</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Interrupt enable bits. bit13: CPU interrupt enabled; bit14: CPU non-maskable interrupt enabled.</description>
            <name>PIN0_INT_ENA</name>
          </field>
        </fields>
        <name>PIN51</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x144</addressOffset>
        <description>Configuration for GPIO pin %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the second stage synchronization, GPIO input data can be syn- chronized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC2_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pad driver selection. 0: normal output; 1: open drain output..</description>
            <name>PIN0_PAD_DRIVER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the first stage synchronization, GPIO input data can be synchro- nized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC1_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Interrupt type selection. 0: GPIO interrupt disabled; 1: rising edge trigger; 2: falling edge trigger; 3: any edge trigger; 4: low level trigger; 5: high level trigger. (R/W)</description>
            <name>PIN0_INT_TYPE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>GPIO wake-up enable bit, only wakes up the CPU from Light-sleep.</description>
            <name>PIN0_WAKEUP_ENABLE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Reserved</description>
            <name>PIN0_CONFIG</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Interrupt enable bits. bit13: CPU interrupt enabled; bit14: CPU non-maskable interrupt enabled.</description>
            <name>PIN0_INT_ENA</name>
          </field>
        </fields>
        <name>PIN52</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x148</addressOffset>
        <description>Configuration for GPIO pin %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the second stage synchronization, GPIO input data can be syn- chronized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC2_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pad driver selection. 0: normal output; 1: open drain output..</description>
            <name>PIN0_PAD_DRIVER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>For the first stage synchronization, GPIO input data can be synchro- nized on either edge of the APB clock. 0: no synchronization; 1: synchronized on falling edge; 2 and 3: synchronized on rising edge.</description>
            <name>PIN0_SYNC1_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Interrupt type selection. 0: GPIO interrupt disabled; 1: rising edge trigger; 2: falling edge trigger; 3: any edge trigger; 4: low level trigger; 5: high level trigger. (R/W)</description>
            <name>PIN0_INT_TYPE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>GPIO wake-up enable bit, only wakes up the CPU from Light-sleep.</description>
            <name>PIN0_WAKEUP_ENABLE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Reserved</description>
            <name>PIN0_CONFIG</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Interrupt enable bits. bit13: CPU interrupt enabled; bit14: CPU non-maskable interrupt enabled.</description>
            <name>PIN0_INT_ENA</name>
          </field>
        </fields>
        <name>PIN53</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x154</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC0_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x158</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC1_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x15C</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC2_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x160</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC3_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x164</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC4_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x168</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC5_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x16C</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC6_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x170</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC7_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x174</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC8_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x178</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC9_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x17C</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC10_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x180</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC11_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x184</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC12_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x188</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC13_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x18C</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC14_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x190</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC15_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x194</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC16_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x198</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC17_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x19C</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC18_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1A0</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC19_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1A4</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC20_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1A8</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC21_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1AC</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC22_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1B0</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC23_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1B4</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC24_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1B8</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC25_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1BC</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC26_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1C0</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC27_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1C4</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC28_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1C8</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC29_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1CC</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC30_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1D0</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC31_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1D4</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC32_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1D8</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC33_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1DC</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC34_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1E0</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC35_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1E4</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC36_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1E8</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC37_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1EC</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC38_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1F0</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC39_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1F4</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC40_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1F8</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC41_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1FC</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC42_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x200</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC43_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x204</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC44_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x208</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC45_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x20C</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC46_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x210</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC47_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x214</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC48_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x218</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC49_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x21C</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC50_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x220</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC51_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x224</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC52_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x228</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC53_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x22C</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC54_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x230</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC55_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x234</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC56_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x238</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC57_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x23C</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC58_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x240</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC59_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x244</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC60_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x248</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC61_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x24C</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC62_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x250</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC63_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x254</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC64_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x258</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC65_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x25C</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC66_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x260</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC67_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x264</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC68_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x268</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC69_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x26C</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC70_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x270</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC71_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x274</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC72_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x278</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC73_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x27C</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC74_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x280</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC75_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x284</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC76_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x288</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC77_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x28C</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC78_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x290</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC79_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x294</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC80_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x298</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC81_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x29C</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC82_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2A0</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC83_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2A4</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC84_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2A8</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC85_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2AC</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC86_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2B0</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC87_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2B4</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC88_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2B8</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC89_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2BC</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC90_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2C0</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC91_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2C4</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC92_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2C8</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC93_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2CC</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC94_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2D0</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC95_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2D4</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC96_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2D8</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC97_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2DC</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC98_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2E0</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC99_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2E4</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC100_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2E8</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC101_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2EC</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC102_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2F0</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC103_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2F4</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC104_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2F8</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC105_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2FC</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC106_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x300</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC107_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x304</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC108_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x308</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC109_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x30C</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC110_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x310</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC111_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x314</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC112_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x318</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC113_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x31C</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC114_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x320</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC115_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x324</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC116_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x328</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC117_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x32C</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC118_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x330</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC119_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x334</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC120_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x338</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC121_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x33C</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC122_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x340</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC123_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x344</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC124_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x348</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC125_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x34C</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC126_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x350</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC127_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x354</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC128_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x358</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC129_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x35C</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC130_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x360</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC131_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x364</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC132_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x368</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC133_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x36C</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC134_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x370</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC135_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x374</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC136_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x378</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC137_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x37C</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC138_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x380</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC139_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x384</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC140_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x388</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC141_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x38C</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC142_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x390</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC143_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x394</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC144_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x398</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC145_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x39C</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC146_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3A0</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC147_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3A4</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC148_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3A8</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC149_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3AC</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC150_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3B0</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC151_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3B4</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC152_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3B8</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC153_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3BC</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC154_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3C0</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC155_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3C4</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC156_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3C8</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC157_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3CC</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC158_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3D0</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC159_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3D4</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC160_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3D8</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC161_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3DC</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC162_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3E0</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC163_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3E4</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC164_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3E8</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC165_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3EC</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC166_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3F0</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC167_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3F4</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC168_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3F8</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC169_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3FC</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC170_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x400</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC171_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x404</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC172_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x408</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC173_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x40C</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC174_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x410</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC175_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x414</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC176_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x418</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC177_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x41C</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC178_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x420</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC179_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x424</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC180_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x428</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC181_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x42C</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC182_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x430</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC183_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x434</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC184_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x438</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC185_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x43C</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC186_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x440</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC187_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x444</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC188_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x448</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC189_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x44C</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC190_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x450</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC191_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x454</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC192_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x458</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC193_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x45C</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC194_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x460</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC195_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x464</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC196_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x468</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC197_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x46C</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC198_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x470</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC199_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x474</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC200_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x478</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC201_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x47C</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC202_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x480</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC203_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x484</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC204_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x488</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC205_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x48C</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC206_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x490</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC207_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x494</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC208_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x498</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC209_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x49C</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC210_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4A0</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC211_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4A4</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC212_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4A8</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC213_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4AC</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC214_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4B0</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC215_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4B4</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC216_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4B8</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC217_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4BC</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC218_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4C0</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC219_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4C4</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC220_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4C8</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC221_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4CC</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC222_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4D0</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC223_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4D4</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC224_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4D8</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC225_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4DC</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC226_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4E0</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC227_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4E4</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC228_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4E8</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC229_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4EC</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC230_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4F0</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC231_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4F4</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC232_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4F8</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC233_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4FC</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC234_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x500</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC235_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x504</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC236_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x508</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC237_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x50C</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC238_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x510</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC239_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x514</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC240_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x518</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC241_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x51C</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC242_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x520</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC243_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x524</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC244_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x528</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC245_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x52C</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC246_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x530</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC247_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x534</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC248_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x538</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC249_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x53C</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC250_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x540</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC251_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x544</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC252_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x548</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC253_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x54C</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC254_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x550</addressOffset>
        <description>Peripheral function %s input selection register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Selection control for peripheral input signal m, selects a pad from the 54 GPIO matrix pads to connect this input signal. Or selects 0x38 for a constantly high input or 0x3C for a constantly low input.</description>
            <name>FUNC0_IN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert the input value. 1: invert enabled; 0: invert disabled.</description>
            <name>FUNC0_IN_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bypass GPIO matrix. 1: route signals via GPIO matrix, 0: connect signals directly to peripheral configured in IO_MUX.</description>
            <name>SIG0_IN_SEL</name>
          </field>
        </fields>
        <name>FUNC255_IN_SEL_CFG</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x554</addressOffset>
        <description>Peripheral output selection for GPIO %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>Selection control for GPIO output n. If a value s (0&lt;=s&lt;256) is written to this field, the peripheral output signal s will be connected to GPIO output n. If a value 256 is written to this field, bit n of GPIO_OUT_REG/GPIO_OUT1_REG and GPIO_ENABLE_REG/GPIO_ENABLE1_REG will be selected as the output value and output enable.</description>
            <name>FUNC0_OUT_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output value; 1: Invert the output value.</description>
            <name>FUNC0_OUT_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Use output enable signal from peripheral; 1: Force the output enable signal to be sourced from bit n of GPIO_ENABLE_REG.</description>
            <name>FUNC0_OEN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output enable signal; 1: Invert the output enable signal.</description>
            <name>FUNC0_OEN_INV_SEL</name>
          </field>
        </fields>
        <name>FUNC0_OUT_SEL_CFG</name>
        <resetValue>0x100</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x558</addressOffset>
        <description>Peripheral output selection for GPIO %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>Selection control for GPIO output n. If a value s (0&lt;=s&lt;256) is written to this field, the peripheral output signal s will be connected to GPIO output n. If a value 256 is written to this field, bit n of GPIO_OUT_REG/GPIO_OUT1_REG and GPIO_ENABLE_REG/GPIO_ENABLE1_REG will be selected as the output value and output enable.</description>
            <name>FUNC0_OUT_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output value; 1: Invert the output value.</description>
            <name>FUNC0_OUT_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Use output enable signal from peripheral; 1: Force the output enable signal to be sourced from bit n of GPIO_ENABLE_REG.</description>
            <name>FUNC0_OEN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output enable signal; 1: Invert the output enable signal.</description>
            <name>FUNC0_OEN_INV_SEL</name>
          </field>
        </fields>
        <name>FUNC1_OUT_SEL_CFG</name>
        <resetValue>0x100</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x55C</addressOffset>
        <description>Peripheral output selection for GPIO %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>Selection control for GPIO output n. If a value s (0&lt;=s&lt;256) is written to this field, the peripheral output signal s will be connected to GPIO output n. If a value 256 is written to this field, bit n of GPIO_OUT_REG/GPIO_OUT1_REG and GPIO_ENABLE_REG/GPIO_ENABLE1_REG will be selected as the output value and output enable.</description>
            <name>FUNC0_OUT_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output value; 1: Invert the output value.</description>
            <name>FUNC0_OUT_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Use output enable signal from peripheral; 1: Force the output enable signal to be sourced from bit n of GPIO_ENABLE_REG.</description>
            <name>FUNC0_OEN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output enable signal; 1: Invert the output enable signal.</description>
            <name>FUNC0_OEN_INV_SEL</name>
          </field>
        </fields>
        <name>FUNC2_OUT_SEL_CFG</name>
        <resetValue>0x100</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x560</addressOffset>
        <description>Peripheral output selection for GPIO %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>Selection control for GPIO output n. If a value s (0&lt;=s&lt;256) is written to this field, the peripheral output signal s will be connected to GPIO output n. If a value 256 is written to this field, bit n of GPIO_OUT_REG/GPIO_OUT1_REG and GPIO_ENABLE_REG/GPIO_ENABLE1_REG will be selected as the output value and output enable.</description>
            <name>FUNC0_OUT_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output value; 1: Invert the output value.</description>
            <name>FUNC0_OUT_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Use output enable signal from peripheral; 1: Force the output enable signal to be sourced from bit n of GPIO_ENABLE_REG.</description>
            <name>FUNC0_OEN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output enable signal; 1: Invert the output enable signal.</description>
            <name>FUNC0_OEN_INV_SEL</name>
          </field>
        </fields>
        <name>FUNC3_OUT_SEL_CFG</name>
        <resetValue>0x100</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x564</addressOffset>
        <description>Peripheral output selection for GPIO %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>Selection control for GPIO output n. If a value s (0&lt;=s&lt;256) is written to this field, the peripheral output signal s will be connected to GPIO output n. If a value 256 is written to this field, bit n of GPIO_OUT_REG/GPIO_OUT1_REG and GPIO_ENABLE_REG/GPIO_ENABLE1_REG will be selected as the output value and output enable.</description>
            <name>FUNC0_OUT_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output value; 1: Invert the output value.</description>
            <name>FUNC0_OUT_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Use output enable signal from peripheral; 1: Force the output enable signal to be sourced from bit n of GPIO_ENABLE_REG.</description>
            <name>FUNC0_OEN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output enable signal; 1: Invert the output enable signal.</description>
            <name>FUNC0_OEN_INV_SEL</name>
          </field>
        </fields>
        <name>FUNC4_OUT_SEL_CFG</name>
        <resetValue>0x100</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x568</addressOffset>
        <description>Peripheral output selection for GPIO %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>Selection control for GPIO output n. If a value s (0&lt;=s&lt;256) is written to this field, the peripheral output signal s will be connected to GPIO output n. If a value 256 is written to this field, bit n of GPIO_OUT_REG/GPIO_OUT1_REG and GPIO_ENABLE_REG/GPIO_ENABLE1_REG will be selected as the output value and output enable.</description>
            <name>FUNC0_OUT_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output value; 1: Invert the output value.</description>
            <name>FUNC0_OUT_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Use output enable signal from peripheral; 1: Force the output enable signal to be sourced from bit n of GPIO_ENABLE_REG.</description>
            <name>FUNC0_OEN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output enable signal; 1: Invert the output enable signal.</description>
            <name>FUNC0_OEN_INV_SEL</name>
          </field>
        </fields>
        <name>FUNC5_OUT_SEL_CFG</name>
        <resetValue>0x100</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x56C</addressOffset>
        <description>Peripheral output selection for GPIO %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>Selection control for GPIO output n. If a value s (0&lt;=s&lt;256) is written to this field, the peripheral output signal s will be connected to GPIO output n. If a value 256 is written to this field, bit n of GPIO_OUT_REG/GPIO_OUT1_REG and GPIO_ENABLE_REG/GPIO_ENABLE1_REG will be selected as the output value and output enable.</description>
            <name>FUNC0_OUT_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output value; 1: Invert the output value.</description>
            <name>FUNC0_OUT_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Use output enable signal from peripheral; 1: Force the output enable signal to be sourced from bit n of GPIO_ENABLE_REG.</description>
            <name>FUNC0_OEN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output enable signal; 1: Invert the output enable signal.</description>
            <name>FUNC0_OEN_INV_SEL</name>
          </field>
        </fields>
        <name>FUNC6_OUT_SEL_CFG</name>
        <resetValue>0x100</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x570</addressOffset>
        <description>Peripheral output selection for GPIO %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>Selection control for GPIO output n. If a value s (0&lt;=s&lt;256) is written to this field, the peripheral output signal s will be connected to GPIO output n. If a value 256 is written to this field, bit n of GPIO_OUT_REG/GPIO_OUT1_REG and GPIO_ENABLE_REG/GPIO_ENABLE1_REG will be selected as the output value and output enable.</description>
            <name>FUNC0_OUT_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output value; 1: Invert the output value.</description>
            <name>FUNC0_OUT_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Use output enable signal from peripheral; 1: Force the output enable signal to be sourced from bit n of GPIO_ENABLE_REG.</description>
            <name>FUNC0_OEN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output enable signal; 1: Invert the output enable signal.</description>
            <name>FUNC0_OEN_INV_SEL</name>
          </field>
        </fields>
        <name>FUNC7_OUT_SEL_CFG</name>
        <resetValue>0x100</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x574</addressOffset>
        <description>Peripheral output selection for GPIO %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>Selection control for GPIO output n. If a value s (0&lt;=s&lt;256) is written to this field, the peripheral output signal s will be connected to GPIO output n. If a value 256 is written to this field, bit n of GPIO_OUT_REG/GPIO_OUT1_REG and GPIO_ENABLE_REG/GPIO_ENABLE1_REG will be selected as the output value and output enable.</description>
            <name>FUNC0_OUT_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output value; 1: Invert the output value.</description>
            <name>FUNC0_OUT_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Use output enable signal from peripheral; 1: Force the output enable signal to be sourced from bit n of GPIO_ENABLE_REG.</description>
            <name>FUNC0_OEN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output enable signal; 1: Invert the output enable signal.</description>
            <name>FUNC0_OEN_INV_SEL</name>
          </field>
        </fields>
        <name>FUNC8_OUT_SEL_CFG</name>
        <resetValue>0x100</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x578</addressOffset>
        <description>Peripheral output selection for GPIO %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>Selection control for GPIO output n. If a value s (0&lt;=s&lt;256) is written to this field, the peripheral output signal s will be connected to GPIO output n. If a value 256 is written to this field, bit n of GPIO_OUT_REG/GPIO_OUT1_REG and GPIO_ENABLE_REG/GPIO_ENABLE1_REG will be selected as the output value and output enable.</description>
            <name>FUNC0_OUT_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output value; 1: Invert the output value.</description>
            <name>FUNC0_OUT_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Use output enable signal from peripheral; 1: Force the output enable signal to be sourced from bit n of GPIO_ENABLE_REG.</description>
            <name>FUNC0_OEN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output enable signal; 1: Invert the output enable signal.</description>
            <name>FUNC0_OEN_INV_SEL</name>
          </field>
        </fields>
        <name>FUNC9_OUT_SEL_CFG</name>
        <resetValue>0x100</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x57C</addressOffset>
        <description>Peripheral output selection for GPIO %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>Selection control for GPIO output n. If a value s (0&lt;=s&lt;256) is written to this field, the peripheral output signal s will be connected to GPIO output n. If a value 256 is written to this field, bit n of GPIO_OUT_REG/GPIO_OUT1_REG and GPIO_ENABLE_REG/GPIO_ENABLE1_REG will be selected as the output value and output enable.</description>
            <name>FUNC0_OUT_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output value; 1: Invert the output value.</description>
            <name>FUNC0_OUT_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Use output enable signal from peripheral; 1: Force the output enable signal to be sourced from bit n of GPIO_ENABLE_REG.</description>
            <name>FUNC0_OEN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output enable signal; 1: Invert the output enable signal.</description>
            <name>FUNC0_OEN_INV_SEL</name>
          </field>
        </fields>
        <name>FUNC10_OUT_SEL_CFG</name>
        <resetValue>0x100</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x580</addressOffset>
        <description>Peripheral output selection for GPIO %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>Selection control for GPIO output n. If a value s (0&lt;=s&lt;256) is written to this field, the peripheral output signal s will be connected to GPIO output n. If a value 256 is written to this field, bit n of GPIO_OUT_REG/GPIO_OUT1_REG and GPIO_ENABLE_REG/GPIO_ENABLE1_REG will be selected as the output value and output enable.</description>
            <name>FUNC0_OUT_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output value; 1: Invert the output value.</description>
            <name>FUNC0_OUT_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Use output enable signal from peripheral; 1: Force the output enable signal to be sourced from bit n of GPIO_ENABLE_REG.</description>
            <name>FUNC0_OEN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output enable signal; 1: Invert the output enable signal.</description>
            <name>FUNC0_OEN_INV_SEL</name>
          </field>
        </fields>
        <name>FUNC11_OUT_SEL_CFG</name>
        <resetValue>0x100</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x584</addressOffset>
        <description>Peripheral output selection for GPIO %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>Selection control for GPIO output n. If a value s (0&lt;=s&lt;256) is written to this field, the peripheral output signal s will be connected to GPIO output n. If a value 256 is written to this field, bit n of GPIO_OUT_REG/GPIO_OUT1_REG and GPIO_ENABLE_REG/GPIO_ENABLE1_REG will be selected as the output value and output enable.</description>
            <name>FUNC0_OUT_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output value; 1: Invert the output value.</description>
            <name>FUNC0_OUT_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Use output enable signal from peripheral; 1: Force the output enable signal to be sourced from bit n of GPIO_ENABLE_REG.</description>
            <name>FUNC0_OEN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output enable signal; 1: Invert the output enable signal.</description>
            <name>FUNC0_OEN_INV_SEL</name>
          </field>
        </fields>
        <name>FUNC12_OUT_SEL_CFG</name>
        <resetValue>0x100</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x588</addressOffset>
        <description>Peripheral output selection for GPIO %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>Selection control for GPIO output n. If a value s (0&lt;=s&lt;256) is written to this field, the peripheral output signal s will be connected to GPIO output n. If a value 256 is written to this field, bit n of GPIO_OUT_REG/GPIO_OUT1_REG and GPIO_ENABLE_REG/GPIO_ENABLE1_REG will be selected as the output value and output enable.</description>
            <name>FUNC0_OUT_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output value; 1: Invert the output value.</description>
            <name>FUNC0_OUT_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Use output enable signal from peripheral; 1: Force the output enable signal to be sourced from bit n of GPIO_ENABLE_REG.</description>
            <name>FUNC0_OEN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output enable signal; 1: Invert the output enable signal.</description>
            <name>FUNC0_OEN_INV_SEL</name>
          </field>
        </fields>
        <name>FUNC13_OUT_SEL_CFG</name>
        <resetValue>0x100</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x58C</addressOffset>
        <description>Peripheral output selection for GPIO %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>Selection control for GPIO output n. If a value s (0&lt;=s&lt;256) is written to this field, the peripheral output signal s will be connected to GPIO output n. If a value 256 is written to this field, bit n of GPIO_OUT_REG/GPIO_OUT1_REG and GPIO_ENABLE_REG/GPIO_ENABLE1_REG will be selected as the output value and output enable.</description>
            <name>FUNC0_OUT_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output value; 1: Invert the output value.</description>
            <name>FUNC0_OUT_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Use output enable signal from peripheral; 1: Force the output enable signal to be sourced from bit n of GPIO_ENABLE_REG.</description>
            <name>FUNC0_OEN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output enable signal; 1: Invert the output enable signal.</description>
            <name>FUNC0_OEN_INV_SEL</name>
          </field>
        </fields>
        <name>FUNC14_OUT_SEL_CFG</name>
        <resetValue>0x100</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x590</addressOffset>
        <description>Peripheral output selection for GPIO %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>Selection control for GPIO output n. If a value s (0&lt;=s&lt;256) is written to this field, the peripheral output signal s will be connected to GPIO output n. If a value 256 is written to this field, bit n of GPIO_OUT_REG/GPIO_OUT1_REG and GPIO_ENABLE_REG/GPIO_ENABLE1_REG will be selected as the output value and output enable.</description>
            <name>FUNC0_OUT_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output value; 1: Invert the output value.</description>
            <name>FUNC0_OUT_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Use output enable signal from peripheral; 1: Force the output enable signal to be sourced from bit n of GPIO_ENABLE_REG.</description>
            <name>FUNC0_OEN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output enable signal; 1: Invert the output enable signal.</description>
            <name>FUNC0_OEN_INV_SEL</name>
          </field>
        </fields>
        <name>FUNC15_OUT_SEL_CFG</name>
        <resetValue>0x100</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x594</addressOffset>
        <description>Peripheral output selection for GPIO %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>Selection control for GPIO output n. If a value s (0&lt;=s&lt;256) is written to this field, the peripheral output signal s will be connected to GPIO output n. If a value 256 is written to this field, bit n of GPIO_OUT_REG/GPIO_OUT1_REG and GPIO_ENABLE_REG/GPIO_ENABLE1_REG will be selected as the output value and output enable.</description>
            <name>FUNC0_OUT_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output value; 1: Invert the output value.</description>
            <name>FUNC0_OUT_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Use output enable signal from peripheral; 1: Force the output enable signal to be sourced from bit n of GPIO_ENABLE_REG.</description>
            <name>FUNC0_OEN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output enable signal; 1: Invert the output enable signal.</description>
            <name>FUNC0_OEN_INV_SEL</name>
          </field>
        </fields>
        <name>FUNC16_OUT_SEL_CFG</name>
        <resetValue>0x100</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x598</addressOffset>
        <description>Peripheral output selection for GPIO %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>Selection control for GPIO output n. If a value s (0&lt;=s&lt;256) is written to this field, the peripheral output signal s will be connected to GPIO output n. If a value 256 is written to this field, bit n of GPIO_OUT_REG/GPIO_OUT1_REG and GPIO_ENABLE_REG/GPIO_ENABLE1_REG will be selected as the output value and output enable.</description>
            <name>FUNC0_OUT_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output value; 1: Invert the output value.</description>
            <name>FUNC0_OUT_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Use output enable signal from peripheral; 1: Force the output enable signal to be sourced from bit n of GPIO_ENABLE_REG.</description>
            <name>FUNC0_OEN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output enable signal; 1: Invert the output enable signal.</description>
            <name>FUNC0_OEN_INV_SEL</name>
          </field>
        </fields>
        <name>FUNC17_OUT_SEL_CFG</name>
        <resetValue>0x100</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x59C</addressOffset>
        <description>Peripheral output selection for GPIO %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>Selection control for GPIO output n. If a value s (0&lt;=s&lt;256) is written to this field, the peripheral output signal s will be connected to GPIO output n. If a value 256 is written to this field, bit n of GPIO_OUT_REG/GPIO_OUT1_REG and GPIO_ENABLE_REG/GPIO_ENABLE1_REG will be selected as the output value and output enable.</description>
            <name>FUNC0_OUT_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output value; 1: Invert the output value.</description>
            <name>FUNC0_OUT_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Use output enable signal from peripheral; 1: Force the output enable signal to be sourced from bit n of GPIO_ENABLE_REG.</description>
            <name>FUNC0_OEN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output enable signal; 1: Invert the output enable signal.</description>
            <name>FUNC0_OEN_INV_SEL</name>
          </field>
        </fields>
        <name>FUNC18_OUT_SEL_CFG</name>
        <resetValue>0x100</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5A0</addressOffset>
        <description>Peripheral output selection for GPIO %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>Selection control for GPIO output n. If a value s (0&lt;=s&lt;256) is written to this field, the peripheral output signal s will be connected to GPIO output n. If a value 256 is written to this field, bit n of GPIO_OUT_REG/GPIO_OUT1_REG and GPIO_ENABLE_REG/GPIO_ENABLE1_REG will be selected as the output value and output enable.</description>
            <name>FUNC0_OUT_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output value; 1: Invert the output value.</description>
            <name>FUNC0_OUT_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Use output enable signal from peripheral; 1: Force the output enable signal to be sourced from bit n of GPIO_ENABLE_REG.</description>
            <name>FUNC0_OEN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output enable signal; 1: Invert the output enable signal.</description>
            <name>FUNC0_OEN_INV_SEL</name>
          </field>
        </fields>
        <name>FUNC19_OUT_SEL_CFG</name>
        <resetValue>0x100</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5A4</addressOffset>
        <description>Peripheral output selection for GPIO %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>Selection control for GPIO output n. If a value s (0&lt;=s&lt;256) is written to this field, the peripheral output signal s will be connected to GPIO output n. If a value 256 is written to this field, bit n of GPIO_OUT_REG/GPIO_OUT1_REG and GPIO_ENABLE_REG/GPIO_ENABLE1_REG will be selected as the output value and output enable.</description>
            <name>FUNC0_OUT_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output value; 1: Invert the output value.</description>
            <name>FUNC0_OUT_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Use output enable signal from peripheral; 1: Force the output enable signal to be sourced from bit n of GPIO_ENABLE_REG.</description>
            <name>FUNC0_OEN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output enable signal; 1: Invert the output enable signal.</description>
            <name>FUNC0_OEN_INV_SEL</name>
          </field>
        </fields>
        <name>FUNC20_OUT_SEL_CFG</name>
        <resetValue>0x100</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5A8</addressOffset>
        <description>Peripheral output selection for GPIO %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>Selection control for GPIO output n. If a value s (0&lt;=s&lt;256) is written to this field, the peripheral output signal s will be connected to GPIO output n. If a value 256 is written to this field, bit n of GPIO_OUT_REG/GPIO_OUT1_REG and GPIO_ENABLE_REG/GPIO_ENABLE1_REG will be selected as the output value and output enable.</description>
            <name>FUNC0_OUT_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output value; 1: Invert the output value.</description>
            <name>FUNC0_OUT_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Use output enable signal from peripheral; 1: Force the output enable signal to be sourced from bit n of GPIO_ENABLE_REG.</description>
            <name>FUNC0_OEN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output enable signal; 1: Invert the output enable signal.</description>
            <name>FUNC0_OEN_INV_SEL</name>
          </field>
        </fields>
        <name>FUNC21_OUT_SEL_CFG</name>
        <resetValue>0x100</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5AC</addressOffset>
        <description>Peripheral output selection for GPIO %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>Selection control for GPIO output n. If a value s (0&lt;=s&lt;256) is written to this field, the peripheral output signal s will be connected to GPIO output n. If a value 256 is written to this field, bit n of GPIO_OUT_REG/GPIO_OUT1_REG and GPIO_ENABLE_REG/GPIO_ENABLE1_REG will be selected as the output value and output enable.</description>
            <name>FUNC0_OUT_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output value; 1: Invert the output value.</description>
            <name>FUNC0_OUT_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Use output enable signal from peripheral; 1: Force the output enable signal to be sourced from bit n of GPIO_ENABLE_REG.</description>
            <name>FUNC0_OEN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output enable signal; 1: Invert the output enable signal.</description>
            <name>FUNC0_OEN_INV_SEL</name>
          </field>
        </fields>
        <name>FUNC22_OUT_SEL_CFG</name>
        <resetValue>0x100</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5B0</addressOffset>
        <description>Peripheral output selection for GPIO %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>Selection control for GPIO output n. If a value s (0&lt;=s&lt;256) is written to this field, the peripheral output signal s will be connected to GPIO output n. If a value 256 is written to this field, bit n of GPIO_OUT_REG/GPIO_OUT1_REG and GPIO_ENABLE_REG/GPIO_ENABLE1_REG will be selected as the output value and output enable.</description>
            <name>FUNC0_OUT_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output value; 1: Invert the output value.</description>
            <name>FUNC0_OUT_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Use output enable signal from peripheral; 1: Force the output enable signal to be sourced from bit n of GPIO_ENABLE_REG.</description>
            <name>FUNC0_OEN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output enable signal; 1: Invert the output enable signal.</description>
            <name>FUNC0_OEN_INV_SEL</name>
          </field>
        </fields>
        <name>FUNC23_OUT_SEL_CFG</name>
        <resetValue>0x100</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5B4</addressOffset>
        <description>Peripheral output selection for GPIO %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>Selection control for GPIO output n. If a value s (0&lt;=s&lt;256) is written to this field, the peripheral output signal s will be connected to GPIO output n. If a value 256 is written to this field, bit n of GPIO_OUT_REG/GPIO_OUT1_REG and GPIO_ENABLE_REG/GPIO_ENABLE1_REG will be selected as the output value and output enable.</description>
            <name>FUNC0_OUT_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output value; 1: Invert the output value.</description>
            <name>FUNC0_OUT_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Use output enable signal from peripheral; 1: Force the output enable signal to be sourced from bit n of GPIO_ENABLE_REG.</description>
            <name>FUNC0_OEN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output enable signal; 1: Invert the output enable signal.</description>
            <name>FUNC0_OEN_INV_SEL</name>
          </field>
        </fields>
        <name>FUNC24_OUT_SEL_CFG</name>
        <resetValue>0x100</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5B8</addressOffset>
        <description>Peripheral output selection for GPIO %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>Selection control for GPIO output n. If a value s (0&lt;=s&lt;256) is written to this field, the peripheral output signal s will be connected to GPIO output n. If a value 256 is written to this field, bit n of GPIO_OUT_REG/GPIO_OUT1_REG and GPIO_ENABLE_REG/GPIO_ENABLE1_REG will be selected as the output value and output enable.</description>
            <name>FUNC0_OUT_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output value; 1: Invert the output value.</description>
            <name>FUNC0_OUT_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Use output enable signal from peripheral; 1: Force the output enable signal to be sourced from bit n of GPIO_ENABLE_REG.</description>
            <name>FUNC0_OEN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output enable signal; 1: Invert the output enable signal.</description>
            <name>FUNC0_OEN_INV_SEL</name>
          </field>
        </fields>
        <name>FUNC25_OUT_SEL_CFG</name>
        <resetValue>0x100</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5BC</addressOffset>
        <description>Peripheral output selection for GPIO %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>Selection control for GPIO output n. If a value s (0&lt;=s&lt;256) is written to this field, the peripheral output signal s will be connected to GPIO output n. If a value 256 is written to this field, bit n of GPIO_OUT_REG/GPIO_OUT1_REG and GPIO_ENABLE_REG/GPIO_ENABLE1_REG will be selected as the output value and output enable.</description>
            <name>FUNC0_OUT_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output value; 1: Invert the output value.</description>
            <name>FUNC0_OUT_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Use output enable signal from peripheral; 1: Force the output enable signal to be sourced from bit n of GPIO_ENABLE_REG.</description>
            <name>FUNC0_OEN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output enable signal; 1: Invert the output enable signal.</description>
            <name>FUNC0_OEN_INV_SEL</name>
          </field>
        </fields>
        <name>FUNC26_OUT_SEL_CFG</name>
        <resetValue>0x100</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5C0</addressOffset>
        <description>Peripheral output selection for GPIO %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>Selection control for GPIO output n. If a value s (0&lt;=s&lt;256) is written to this field, the peripheral output signal s will be connected to GPIO output n. If a value 256 is written to this field, bit n of GPIO_OUT_REG/GPIO_OUT1_REG and GPIO_ENABLE_REG/GPIO_ENABLE1_REG will be selected as the output value and output enable.</description>
            <name>FUNC0_OUT_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output value; 1: Invert the output value.</description>
            <name>FUNC0_OUT_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Use output enable signal from peripheral; 1: Force the output enable signal to be sourced from bit n of GPIO_ENABLE_REG.</description>
            <name>FUNC0_OEN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output enable signal; 1: Invert the output enable signal.</description>
            <name>FUNC0_OEN_INV_SEL</name>
          </field>
        </fields>
        <name>FUNC27_OUT_SEL_CFG</name>
        <resetValue>0x100</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5C4</addressOffset>
        <description>Peripheral output selection for GPIO %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>Selection control for GPIO output n. If a value s (0&lt;=s&lt;256) is written to this field, the peripheral output signal s will be connected to GPIO output n. If a value 256 is written to this field, bit n of GPIO_OUT_REG/GPIO_OUT1_REG and GPIO_ENABLE_REG/GPIO_ENABLE1_REG will be selected as the output value and output enable.</description>
            <name>FUNC0_OUT_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output value; 1: Invert the output value.</description>
            <name>FUNC0_OUT_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Use output enable signal from peripheral; 1: Force the output enable signal to be sourced from bit n of GPIO_ENABLE_REG.</description>
            <name>FUNC0_OEN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output enable signal; 1: Invert the output enable signal.</description>
            <name>FUNC0_OEN_INV_SEL</name>
          </field>
        </fields>
        <name>FUNC28_OUT_SEL_CFG</name>
        <resetValue>0x100</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5C8</addressOffset>
        <description>Peripheral output selection for GPIO %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>Selection control for GPIO output n. If a value s (0&lt;=s&lt;256) is written to this field, the peripheral output signal s will be connected to GPIO output n. If a value 256 is written to this field, bit n of GPIO_OUT_REG/GPIO_OUT1_REG and GPIO_ENABLE_REG/GPIO_ENABLE1_REG will be selected as the output value and output enable.</description>
            <name>FUNC0_OUT_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output value; 1: Invert the output value.</description>
            <name>FUNC0_OUT_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Use output enable signal from peripheral; 1: Force the output enable signal to be sourced from bit n of GPIO_ENABLE_REG.</description>
            <name>FUNC0_OEN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output enable signal; 1: Invert the output enable signal.</description>
            <name>FUNC0_OEN_INV_SEL</name>
          </field>
        </fields>
        <name>FUNC29_OUT_SEL_CFG</name>
        <resetValue>0x100</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5CC</addressOffset>
        <description>Peripheral output selection for GPIO %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>Selection control for GPIO output n. If a value s (0&lt;=s&lt;256) is written to this field, the peripheral output signal s will be connected to GPIO output n. If a value 256 is written to this field, bit n of GPIO_OUT_REG/GPIO_OUT1_REG and GPIO_ENABLE_REG/GPIO_ENABLE1_REG will be selected as the output value and output enable.</description>
            <name>FUNC0_OUT_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output value; 1: Invert the output value.</description>
            <name>FUNC0_OUT_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Use output enable signal from peripheral; 1: Force the output enable signal to be sourced from bit n of GPIO_ENABLE_REG.</description>
            <name>FUNC0_OEN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output enable signal; 1: Invert the output enable signal.</description>
            <name>FUNC0_OEN_INV_SEL</name>
          </field>
        </fields>
        <name>FUNC30_OUT_SEL_CFG</name>
        <resetValue>0x100</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5D0</addressOffset>
        <description>Peripheral output selection for GPIO %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>Selection control for GPIO output n. If a value s (0&lt;=s&lt;256) is written to this field, the peripheral output signal s will be connected to GPIO output n. If a value 256 is written to this field, bit n of GPIO_OUT_REG/GPIO_OUT1_REG and GPIO_ENABLE_REG/GPIO_ENABLE1_REG will be selected as the output value and output enable.</description>
            <name>FUNC0_OUT_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output value; 1: Invert the output value.</description>
            <name>FUNC0_OUT_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Use output enable signal from peripheral; 1: Force the output enable signal to be sourced from bit n of GPIO_ENABLE_REG.</description>
            <name>FUNC0_OEN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output enable signal; 1: Invert the output enable signal.</description>
            <name>FUNC0_OEN_INV_SEL</name>
          </field>
        </fields>
        <name>FUNC31_OUT_SEL_CFG</name>
        <resetValue>0x100</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5D4</addressOffset>
        <description>Peripheral output selection for GPIO %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>Selection control for GPIO output n. If a value s (0&lt;=s&lt;256) is written to this field, the peripheral output signal s will be connected to GPIO output n. If a value 256 is written to this field, bit n of GPIO_OUT_REG/GPIO_OUT1_REG and GPIO_ENABLE_REG/GPIO_ENABLE1_REG will be selected as the output value and output enable.</description>
            <name>FUNC0_OUT_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output value; 1: Invert the output value.</description>
            <name>FUNC0_OUT_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Use output enable signal from peripheral; 1: Force the output enable signal to be sourced from bit n of GPIO_ENABLE_REG.</description>
            <name>FUNC0_OEN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output enable signal; 1: Invert the output enable signal.</description>
            <name>FUNC0_OEN_INV_SEL</name>
          </field>
        </fields>
        <name>FUNC32_OUT_SEL_CFG</name>
        <resetValue>0x100</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5D8</addressOffset>
        <description>Peripheral output selection for GPIO %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>Selection control for GPIO output n. If a value s (0&lt;=s&lt;256) is written to this field, the peripheral output signal s will be connected to GPIO output n. If a value 256 is written to this field, bit n of GPIO_OUT_REG/GPIO_OUT1_REG and GPIO_ENABLE_REG/GPIO_ENABLE1_REG will be selected as the output value and output enable.</description>
            <name>FUNC0_OUT_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output value; 1: Invert the output value.</description>
            <name>FUNC0_OUT_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Use output enable signal from peripheral; 1: Force the output enable signal to be sourced from bit n of GPIO_ENABLE_REG.</description>
            <name>FUNC0_OEN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output enable signal; 1: Invert the output enable signal.</description>
            <name>FUNC0_OEN_INV_SEL</name>
          </field>
        </fields>
        <name>FUNC33_OUT_SEL_CFG</name>
        <resetValue>0x100</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5DC</addressOffset>
        <description>Peripheral output selection for GPIO %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>Selection control for GPIO output n. If a value s (0&lt;=s&lt;256) is written to this field, the peripheral output signal s will be connected to GPIO output n. If a value 256 is written to this field, bit n of GPIO_OUT_REG/GPIO_OUT1_REG and GPIO_ENABLE_REG/GPIO_ENABLE1_REG will be selected as the output value and output enable.</description>
            <name>FUNC0_OUT_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output value; 1: Invert the output value.</description>
            <name>FUNC0_OUT_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Use output enable signal from peripheral; 1: Force the output enable signal to be sourced from bit n of GPIO_ENABLE_REG.</description>
            <name>FUNC0_OEN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output enable signal; 1: Invert the output enable signal.</description>
            <name>FUNC0_OEN_INV_SEL</name>
          </field>
        </fields>
        <name>FUNC34_OUT_SEL_CFG</name>
        <resetValue>0x100</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5E0</addressOffset>
        <description>Peripheral output selection for GPIO %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>Selection control for GPIO output n. If a value s (0&lt;=s&lt;256) is written to this field, the peripheral output signal s will be connected to GPIO output n. If a value 256 is written to this field, bit n of GPIO_OUT_REG/GPIO_OUT1_REG and GPIO_ENABLE_REG/GPIO_ENABLE1_REG will be selected as the output value and output enable.</description>
            <name>FUNC0_OUT_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output value; 1: Invert the output value.</description>
            <name>FUNC0_OUT_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Use output enable signal from peripheral; 1: Force the output enable signal to be sourced from bit n of GPIO_ENABLE_REG.</description>
            <name>FUNC0_OEN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output enable signal; 1: Invert the output enable signal.</description>
            <name>FUNC0_OEN_INV_SEL</name>
          </field>
        </fields>
        <name>FUNC35_OUT_SEL_CFG</name>
        <resetValue>0x100</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5E4</addressOffset>
        <description>Peripheral output selection for GPIO %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>Selection control for GPIO output n. If a value s (0&lt;=s&lt;256) is written to this field, the peripheral output signal s will be connected to GPIO output n. If a value 256 is written to this field, bit n of GPIO_OUT_REG/GPIO_OUT1_REG and GPIO_ENABLE_REG/GPIO_ENABLE1_REG will be selected as the output value and output enable.</description>
            <name>FUNC0_OUT_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output value; 1: Invert the output value.</description>
            <name>FUNC0_OUT_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Use output enable signal from peripheral; 1: Force the output enable signal to be sourced from bit n of GPIO_ENABLE_REG.</description>
            <name>FUNC0_OEN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output enable signal; 1: Invert the output enable signal.</description>
            <name>FUNC0_OEN_INV_SEL</name>
          </field>
        </fields>
        <name>FUNC36_OUT_SEL_CFG</name>
        <resetValue>0x100</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5E8</addressOffset>
        <description>Peripheral output selection for GPIO %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>Selection control for GPIO output n. If a value s (0&lt;=s&lt;256) is written to this field, the peripheral output signal s will be connected to GPIO output n. If a value 256 is written to this field, bit n of GPIO_OUT_REG/GPIO_OUT1_REG and GPIO_ENABLE_REG/GPIO_ENABLE1_REG will be selected as the output value and output enable.</description>
            <name>FUNC0_OUT_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output value; 1: Invert the output value.</description>
            <name>FUNC0_OUT_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Use output enable signal from peripheral; 1: Force the output enable signal to be sourced from bit n of GPIO_ENABLE_REG.</description>
            <name>FUNC0_OEN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output enable signal; 1: Invert the output enable signal.</description>
            <name>FUNC0_OEN_INV_SEL</name>
          </field>
        </fields>
        <name>FUNC37_OUT_SEL_CFG</name>
        <resetValue>0x100</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5EC</addressOffset>
        <description>Peripheral output selection for GPIO %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>Selection control for GPIO output n. If a value s (0&lt;=s&lt;256) is written to this field, the peripheral output signal s will be connected to GPIO output n. If a value 256 is written to this field, bit n of GPIO_OUT_REG/GPIO_OUT1_REG and GPIO_ENABLE_REG/GPIO_ENABLE1_REG will be selected as the output value and output enable.</description>
            <name>FUNC0_OUT_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output value; 1: Invert the output value.</description>
            <name>FUNC0_OUT_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Use output enable signal from peripheral; 1: Force the output enable signal to be sourced from bit n of GPIO_ENABLE_REG.</description>
            <name>FUNC0_OEN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output enable signal; 1: Invert the output enable signal.</description>
            <name>FUNC0_OEN_INV_SEL</name>
          </field>
        </fields>
        <name>FUNC38_OUT_SEL_CFG</name>
        <resetValue>0x100</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5F0</addressOffset>
        <description>Peripheral output selection for GPIO %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>Selection control for GPIO output n. If a value s (0&lt;=s&lt;256) is written to this field, the peripheral output signal s will be connected to GPIO output n. If a value 256 is written to this field, bit n of GPIO_OUT_REG/GPIO_OUT1_REG and GPIO_ENABLE_REG/GPIO_ENABLE1_REG will be selected as the output value and output enable.</description>
            <name>FUNC0_OUT_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output value; 1: Invert the output value.</description>
            <name>FUNC0_OUT_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Use output enable signal from peripheral; 1: Force the output enable signal to be sourced from bit n of GPIO_ENABLE_REG.</description>
            <name>FUNC0_OEN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output enable signal; 1: Invert the output enable signal.</description>
            <name>FUNC0_OEN_INV_SEL</name>
          </field>
        </fields>
        <name>FUNC39_OUT_SEL_CFG</name>
        <resetValue>0x100</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5F4</addressOffset>
        <description>Peripheral output selection for GPIO %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>Selection control for GPIO output n. If a value s (0&lt;=s&lt;256) is written to this field, the peripheral output signal s will be connected to GPIO output n. If a value 256 is written to this field, bit n of GPIO_OUT_REG/GPIO_OUT1_REG and GPIO_ENABLE_REG/GPIO_ENABLE1_REG will be selected as the output value and output enable.</description>
            <name>FUNC0_OUT_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output value; 1: Invert the output value.</description>
            <name>FUNC0_OUT_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Use output enable signal from peripheral; 1: Force the output enable signal to be sourced from bit n of GPIO_ENABLE_REG.</description>
            <name>FUNC0_OEN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output enable signal; 1: Invert the output enable signal.</description>
            <name>FUNC0_OEN_INV_SEL</name>
          </field>
        </fields>
        <name>FUNC40_OUT_SEL_CFG</name>
        <resetValue>0x100</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5F8</addressOffset>
        <description>Peripheral output selection for GPIO %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>Selection control for GPIO output n. If a value s (0&lt;=s&lt;256) is written to this field, the peripheral output signal s will be connected to GPIO output n. If a value 256 is written to this field, bit n of GPIO_OUT_REG/GPIO_OUT1_REG and GPIO_ENABLE_REG/GPIO_ENABLE1_REG will be selected as the output value and output enable.</description>
            <name>FUNC0_OUT_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output value; 1: Invert the output value.</description>
            <name>FUNC0_OUT_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Use output enable signal from peripheral; 1: Force the output enable signal to be sourced from bit n of GPIO_ENABLE_REG.</description>
            <name>FUNC0_OEN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output enable signal; 1: Invert the output enable signal.</description>
            <name>FUNC0_OEN_INV_SEL</name>
          </field>
        </fields>
        <name>FUNC41_OUT_SEL_CFG</name>
        <resetValue>0x100</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5FC</addressOffset>
        <description>Peripheral output selection for GPIO %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>Selection control for GPIO output n. If a value s (0&lt;=s&lt;256) is written to this field, the peripheral output signal s will be connected to GPIO output n. If a value 256 is written to this field, bit n of GPIO_OUT_REG/GPIO_OUT1_REG and GPIO_ENABLE_REG/GPIO_ENABLE1_REG will be selected as the output value and output enable.</description>
            <name>FUNC0_OUT_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output value; 1: Invert the output value.</description>
            <name>FUNC0_OUT_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Use output enable signal from peripheral; 1: Force the output enable signal to be sourced from bit n of GPIO_ENABLE_REG.</description>
            <name>FUNC0_OEN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output enable signal; 1: Invert the output enable signal.</description>
            <name>FUNC0_OEN_INV_SEL</name>
          </field>
        </fields>
        <name>FUNC42_OUT_SEL_CFG</name>
        <resetValue>0x100</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x600</addressOffset>
        <description>Peripheral output selection for GPIO %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>Selection control for GPIO output n. If a value s (0&lt;=s&lt;256) is written to this field, the peripheral output signal s will be connected to GPIO output n. If a value 256 is written to this field, bit n of GPIO_OUT_REG/GPIO_OUT1_REG and GPIO_ENABLE_REG/GPIO_ENABLE1_REG will be selected as the output value and output enable.</description>
            <name>FUNC0_OUT_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output value; 1: Invert the output value.</description>
            <name>FUNC0_OUT_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Use output enable signal from peripheral; 1: Force the output enable signal to be sourced from bit n of GPIO_ENABLE_REG.</description>
            <name>FUNC0_OEN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output enable signal; 1: Invert the output enable signal.</description>
            <name>FUNC0_OEN_INV_SEL</name>
          </field>
        </fields>
        <name>FUNC43_OUT_SEL_CFG</name>
        <resetValue>0x100</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x604</addressOffset>
        <description>Peripheral output selection for GPIO %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>Selection control for GPIO output n. If a value s (0&lt;=s&lt;256) is written to this field, the peripheral output signal s will be connected to GPIO output n. If a value 256 is written to this field, bit n of GPIO_OUT_REG/GPIO_OUT1_REG and GPIO_ENABLE_REG/GPIO_ENABLE1_REG will be selected as the output value and output enable.</description>
            <name>FUNC0_OUT_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output value; 1: Invert the output value.</description>
            <name>FUNC0_OUT_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Use output enable signal from peripheral; 1: Force the output enable signal to be sourced from bit n of GPIO_ENABLE_REG.</description>
            <name>FUNC0_OEN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output enable signal; 1: Invert the output enable signal.</description>
            <name>FUNC0_OEN_INV_SEL</name>
          </field>
        </fields>
        <name>FUNC44_OUT_SEL_CFG</name>
        <resetValue>0x100</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x608</addressOffset>
        <description>Peripheral output selection for GPIO %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>Selection control for GPIO output n. If a value s (0&lt;=s&lt;256) is written to this field, the peripheral output signal s will be connected to GPIO output n. If a value 256 is written to this field, bit n of GPIO_OUT_REG/GPIO_OUT1_REG and GPIO_ENABLE_REG/GPIO_ENABLE1_REG will be selected as the output value and output enable.</description>
            <name>FUNC0_OUT_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output value; 1: Invert the output value.</description>
            <name>FUNC0_OUT_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Use output enable signal from peripheral; 1: Force the output enable signal to be sourced from bit n of GPIO_ENABLE_REG.</description>
            <name>FUNC0_OEN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output enable signal; 1: Invert the output enable signal.</description>
            <name>FUNC0_OEN_INV_SEL</name>
          </field>
        </fields>
        <name>FUNC45_OUT_SEL_CFG</name>
        <resetValue>0x100</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x60C</addressOffset>
        <description>Peripheral output selection for GPIO %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>Selection control for GPIO output n. If a value s (0&lt;=s&lt;256) is written to this field, the peripheral output signal s will be connected to GPIO output n. If a value 256 is written to this field, bit n of GPIO_OUT_REG/GPIO_OUT1_REG and GPIO_ENABLE_REG/GPIO_ENABLE1_REG will be selected as the output value and output enable.</description>
            <name>FUNC0_OUT_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output value; 1: Invert the output value.</description>
            <name>FUNC0_OUT_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Use output enable signal from peripheral; 1: Force the output enable signal to be sourced from bit n of GPIO_ENABLE_REG.</description>
            <name>FUNC0_OEN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output enable signal; 1: Invert the output enable signal.</description>
            <name>FUNC0_OEN_INV_SEL</name>
          </field>
        </fields>
        <name>FUNC46_OUT_SEL_CFG</name>
        <resetValue>0x100</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x610</addressOffset>
        <description>Peripheral output selection for GPIO %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>Selection control for GPIO output n. If a value s (0&lt;=s&lt;256) is written to this field, the peripheral output signal s will be connected to GPIO output n. If a value 256 is written to this field, bit n of GPIO_OUT_REG/GPIO_OUT1_REG and GPIO_ENABLE_REG/GPIO_ENABLE1_REG will be selected as the output value and output enable.</description>
            <name>FUNC0_OUT_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output value; 1: Invert the output value.</description>
            <name>FUNC0_OUT_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Use output enable signal from peripheral; 1: Force the output enable signal to be sourced from bit n of GPIO_ENABLE_REG.</description>
            <name>FUNC0_OEN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output enable signal; 1: Invert the output enable signal.</description>
            <name>FUNC0_OEN_INV_SEL</name>
          </field>
        </fields>
        <name>FUNC47_OUT_SEL_CFG</name>
        <resetValue>0x100</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x614</addressOffset>
        <description>Peripheral output selection for GPIO %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>Selection control for GPIO output n. If a value s (0&lt;=s&lt;256) is written to this field, the peripheral output signal s will be connected to GPIO output n. If a value 256 is written to this field, bit n of GPIO_OUT_REG/GPIO_OUT1_REG and GPIO_ENABLE_REG/GPIO_ENABLE1_REG will be selected as the output value and output enable.</description>
            <name>FUNC0_OUT_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output value; 1: Invert the output value.</description>
            <name>FUNC0_OUT_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Use output enable signal from peripheral; 1: Force the output enable signal to be sourced from bit n of GPIO_ENABLE_REG.</description>
            <name>FUNC0_OEN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output enable signal; 1: Invert the output enable signal.</description>
            <name>FUNC0_OEN_INV_SEL</name>
          </field>
        </fields>
        <name>FUNC48_OUT_SEL_CFG</name>
        <resetValue>0x100</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x618</addressOffset>
        <description>Peripheral output selection for GPIO %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>Selection control for GPIO output n. If a value s (0&lt;=s&lt;256) is written to this field, the peripheral output signal s will be connected to GPIO output n. If a value 256 is written to this field, bit n of GPIO_OUT_REG/GPIO_OUT1_REG and GPIO_ENABLE_REG/GPIO_ENABLE1_REG will be selected as the output value and output enable.</description>
            <name>FUNC0_OUT_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output value; 1: Invert the output value.</description>
            <name>FUNC0_OUT_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Use output enable signal from peripheral; 1: Force the output enable signal to be sourced from bit n of GPIO_ENABLE_REG.</description>
            <name>FUNC0_OEN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output enable signal; 1: Invert the output enable signal.</description>
            <name>FUNC0_OEN_INV_SEL</name>
          </field>
        </fields>
        <name>FUNC49_OUT_SEL_CFG</name>
        <resetValue>0x100</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x61C</addressOffset>
        <description>Peripheral output selection for GPIO %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>Selection control for GPIO output n. If a value s (0&lt;=s&lt;256) is written to this field, the peripheral output signal s will be connected to GPIO output n. If a value 256 is written to this field, bit n of GPIO_OUT_REG/GPIO_OUT1_REG and GPIO_ENABLE_REG/GPIO_ENABLE1_REG will be selected as the output value and output enable.</description>
            <name>FUNC0_OUT_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output value; 1: Invert the output value.</description>
            <name>FUNC0_OUT_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Use output enable signal from peripheral; 1: Force the output enable signal to be sourced from bit n of GPIO_ENABLE_REG.</description>
            <name>FUNC0_OEN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output enable signal; 1: Invert the output enable signal.</description>
            <name>FUNC0_OEN_INV_SEL</name>
          </field>
        </fields>
        <name>FUNC50_OUT_SEL_CFG</name>
        <resetValue>0x100</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x620</addressOffset>
        <description>Peripheral output selection for GPIO %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>Selection control for GPIO output n. If a value s (0&lt;=s&lt;256) is written to this field, the peripheral output signal s will be connected to GPIO output n. If a value 256 is written to this field, bit n of GPIO_OUT_REG/GPIO_OUT1_REG and GPIO_ENABLE_REG/GPIO_ENABLE1_REG will be selected as the output value and output enable.</description>
            <name>FUNC0_OUT_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output value; 1: Invert the output value.</description>
            <name>FUNC0_OUT_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Use output enable signal from peripheral; 1: Force the output enable signal to be sourced from bit n of GPIO_ENABLE_REG.</description>
            <name>FUNC0_OEN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output enable signal; 1: Invert the output enable signal.</description>
            <name>FUNC0_OEN_INV_SEL</name>
          </field>
        </fields>
        <name>FUNC51_OUT_SEL_CFG</name>
        <resetValue>0x100</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x624</addressOffset>
        <description>Peripheral output selection for GPIO %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>Selection control for GPIO output n. If a value s (0&lt;=s&lt;256) is written to this field, the peripheral output signal s will be connected to GPIO output n. If a value 256 is written to this field, bit n of GPIO_OUT_REG/GPIO_OUT1_REG and GPIO_ENABLE_REG/GPIO_ENABLE1_REG will be selected as the output value and output enable.</description>
            <name>FUNC0_OUT_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output value; 1: Invert the output value.</description>
            <name>FUNC0_OUT_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Use output enable signal from peripheral; 1: Force the output enable signal to be sourced from bit n of GPIO_ENABLE_REG.</description>
            <name>FUNC0_OEN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output enable signal; 1: Invert the output enable signal.</description>
            <name>FUNC0_OEN_INV_SEL</name>
          </field>
        </fields>
        <name>FUNC52_OUT_SEL_CFG</name>
        <resetValue>0x100</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x628</addressOffset>
        <description>Peripheral output selection for GPIO %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>Selection control for GPIO output n. If a value s (0&lt;=s&lt;256) is written to this field, the peripheral output signal s will be connected to GPIO output n. If a value 256 is written to this field, bit n of GPIO_OUT_REG/GPIO_OUT1_REG and GPIO_ENABLE_REG/GPIO_ENABLE1_REG will be selected as the output value and output enable.</description>
            <name>FUNC0_OUT_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output value; 1: Invert the output value.</description>
            <name>FUNC0_OUT_INV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Use output enable signal from peripheral; 1: Force the output enable signal to be sourced from bit n of GPIO_ENABLE_REG.</description>
            <name>FUNC0_OEN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Do not invert the output enable signal; 1: Invert the output enable signal.</description>
            <name>FUNC0_OEN_INV_SEL</name>
          </field>
        </fields>
        <name>FUNC53_OUT_SEL_CFG</name>
        <resetValue>0x100</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <resetMask>0xFFFFFFFF</resetMask>
    <resetValue>0x0</resetValue>
  </peripheral>
</peripherals>
<peripherals>
  <peripheral>
    <addressBlock>
      <offset>0x0</offset>
      <size>0x2C</size>
      <usage>registers</usage>
    </addressBlock>
    <baseAddress>0x3F404F00</baseAddress>
    <description>Sigma-Delta Modulation</description>
    <groupName>GPIOSD</groupName>
    <interrupts></interrupts>
    <name>GPIO_SD</name>
    <registers>
      <register>
        <addressOffset>0x20</addressOffset>
        <description>Clock Gating Configure Register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Clock enable bit of configuration registers for sigma delta modulation.</description>
            <name>CLK_EN</name>
          </field>
        </fields>
        <name>SIGMADELTA_CG</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x24</addressOffset>
        <description>MISC Register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Clock enable bit of sigma delta modulation.</description>
            <name>FUNCTION_CLK_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Reserved.</description>
            <name>SPI_SWAP</name>
          </field>
        </fields>
        <name>SIGMADELTA_MISC</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x28</addressOffset>
        <description>Version Control Register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1C</bitWidth>
            <description>Version control register.</description>
            <name>GPIO_SD_DATE</name>
          </field>
        </fields>
        <name>SIGMADELTA_VERSION</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x1802260</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x0</addressOffset>
        <description>Duty Cycle Configure Register of SDM%s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>This field is used to configure the duty cycle of sigma delta modulation output.</description>
            <name>SD0_IN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>This field is used to set a divider value to divide APB clock.</description>
            <name>SD0_PRESCALE</name>
          </field>
        </fields>
        <name>SIGMADELTA0</name>
        <resetValue>0xFF00</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4</addressOffset>
        <description>Duty Cycle Configure Register of SDM%s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>This field is used to configure the duty cycle of sigma delta modulation output.</description>
            <name>SD0_IN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>This field is used to set a divider value to divide APB clock.</description>
            <name>SD0_PRESCALE</name>
          </field>
        </fields>
        <name>SIGMADELTA1</name>
        <resetValue>0xFF00</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8</addressOffset>
        <description>Duty Cycle Configure Register of SDM%s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>This field is used to configure the duty cycle of sigma delta modulation output.</description>
            <name>SD0_IN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>This field is used to set a divider value to divide APB clock.</description>
            <name>SD0_PRESCALE</name>
          </field>
        </fields>
        <name>SIGMADELTA2</name>
        <resetValue>0xFF00</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xC</addressOffset>
        <description>Duty Cycle Configure Register of SDM%s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>This field is used to configure the duty cycle of sigma delta modulation output.</description>
            <name>SD0_IN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>This field is used to set a divider value to divide APB clock.</description>
            <name>SD0_PRESCALE</name>
          </field>
        </fields>
        <name>SIGMADELTA3</name>
        <resetValue>0xFF00</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x10</addressOffset>
        <description>Duty Cycle Configure Register of SDM%s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>This field is used to configure the duty cycle of sigma delta modulation output.</description>
            <name>SD0_IN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>This field is used to set a divider value to divide APB clock.</description>
            <name>SD0_PRESCALE</name>
          </field>
        </fields>
        <name>SIGMADELTA4</name>
        <resetValue>0xFF00</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x14</addressOffset>
        <description>Duty Cycle Configure Register of SDM%s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>This field is used to configure the duty cycle of sigma delta modulation output.</description>
            <name>SD0_IN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>This field is used to set a divider value to divide APB clock.</description>
            <name>SD0_PRESCALE</name>
          </field>
        </fields>
        <name>SIGMADELTA5</name>
        <resetValue>0xFF00</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x18</addressOffset>
        <description>Duty Cycle Configure Register of SDM%s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>This field is used to configure the duty cycle of sigma delta modulation output.</description>
            <name>SD0_IN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>This field is used to set a divider value to divide APB clock.</description>
            <name>SD0_PRESCALE</name>
          </field>
        </fields>
        <name>SIGMADELTA6</name>
        <resetValue>0xFF00</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1C</addressOffset>
        <description>Duty Cycle Configure Register of SDM%s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>This field is used to configure the duty cycle of sigma delta modulation output.</description>
            <name>SD0_IN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>This field is used to set a divider value to divide APB clock.</description>
            <name>SD0_PRESCALE</name>
          </field>
        </fields>
        <name>SIGMADELTA7</name>
        <resetValue>0xFF00</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <resetMask>0xFFFFFFFF</resetMask>
    <resetValue>0x0</resetValue>
  </peripheral>
</peripherals>
<peripherals>
  <peripheral>
    <addressBlock>
      <offset>0x0</offset>
      <size>0x9C</size>
      <usage>registers</usage>
    </addressBlock>
    <baseAddress>0x6003E000</baseAddress>
    <description>HMAC (Hash-based Message Authentication Code) Accelerator</description>
    <groupName>HMAC</groupName>
    <interrupts></interrupts>
    <name>HMAC</name>
    <registers>
      <register>
        <addressOffset>0x40</addressOffset>
        <description>HMAC start control register</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable HMAC.</description>
            <name>SET_START</name>
          </field>
        </fields>
        <name>SET_START</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x44</addressOffset>
        <description>HMAC parameter configuration register</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Set hmac purpose.</description>
            <name>PURPOSE_SET</name>
          </field>
        </fields>
        <name>SET_PARA_PURPOSE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x48</addressOffset>
        <description>HMAC key configuration register</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Select hmac key.</description>
            <name>KEY_SET</name>
          </field>
        </fields>
        <name>SET_PARA_KEY</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4C</addressOffset>
        <description>HMAC configuration completion register</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to finish HMAC configuration.</description>
            <name>SET_PARA_END</name>
          </field>
        </fields>
        <name>SET_PARA_FINISH</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x50</addressOffset>
        <description>HMAC one message control register</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Call SHA to calculate one message block.</description>
            <name>SET_TEXT_ONE</name>
          </field>
        </fields>
        <name>SET_MESSAGE_ONE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x54</addressOffset>
        <description>HMAC message continue register</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to show there are still some message blocks to be processed.</description>
            <name>SET_TEXT_ING</name>
          </field>
        </fields>
        <name>SET_MESSAGE_ING</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x58</addressOffset>
        <description>HMAC message end register</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to start hardware padding.</description>
            <name>SET_TEXT_END</name>
          </field>
        </fields>
        <name>SET_MESSAGE_END</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5C</addressOffset>
        <description>HMAC read result completion register</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to end upstream and clear the calculation result.</description>
            <name>SET_RESULT_END</name>
          </field>
        </fields>
        <name>SET_RESULT_FINISH</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x60</addressOffset>
        <description>Invalidate JTAG result register</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear calculation results in JTAG re-enable function under downstream mode.</description>
            <name>SET_INVALIDATE_JTAG</name>
          </field>
        </fields>
        <name>SET_INVALIDATE_JTAG</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x64</addressOffset>
        <description>Invalidate digital signature result register</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear calculation results in DS function under downstream mode.</description>
            <name>SET_INVALIDATE_DS</name>
          </field>
        </fields>
        <name>SET_INVALIDATE_DS</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x68</addressOffset>
        <description>The matching result between key and purpose user configured</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Hmac error status.
            
            0: hmac key and purpose match.
            
            1: error.
            
            </description>
            <name>QUREY_CHECK</name>
          </field>
        </fields>
        <name>QUERY_ERROR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x6C</addressOffset>
        <description>The busy state of HMAC module</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The state of Hmac.
            
            1'b0: idle.
            
            1'b1: busy.
            
            </description>
            <name>BUSY_STATE</name>
          </field>
        </fields>
        <name>QUERY_BUSY</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xF0</addressOffset>
        <description>Software padding register</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to let software do padding job.</description>
            <name>SET_TEXT_PAD</name>
          </field>
        </fields>
        <name>SET_MESSAGE_PAD</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xF4</addressOffset>
        <description>One block message register.</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to show no padding is required.</description>
            <name>SET_ONE_BLOCK</name>
          </field>
        </fields>
        <name>ONE_BLOCK</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xF8</addressOffset>
        <description>Version control register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1E</bitWidth>
            <description>Version control register.</description>
            <name>DATE</name>
          </field>
        </fields>
        <name>DATE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x20190402</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x80</addressOffset>
        <description>Message register %s</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Store the %sth 32-bit of message.</description>
            <name>WDATA</name>
          </field>
        </fields>
        <name>WR_MESSAGE_0</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x84</addressOffset>
        <description>Message register %s</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Store the %sth 32-bit of message.</description>
            <name>WDATA</name>
          </field>
        </fields>
        <name>WR_MESSAGE_1</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x88</addressOffset>
        <description>Message register %s</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Store the %sth 32-bit of message.</description>
            <name>WDATA</name>
          </field>
        </fields>
        <name>WR_MESSAGE_2</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8C</addressOffset>
        <description>Message register %s</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Store the %sth 32-bit of message.</description>
            <name>WDATA</name>
          </field>
        </fields>
        <name>WR_MESSAGE_3</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x90</addressOffset>
        <description>Message register %s</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Store the %sth 32-bit of message.</description>
            <name>WDATA</name>
          </field>
        </fields>
        <name>WR_MESSAGE_4</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x94</addressOffset>
        <description>Message register %s</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Store the %sth 32-bit of message.</description>
            <name>WDATA</name>
          </field>
        </fields>
        <name>WR_MESSAGE_5</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x98</addressOffset>
        <description>Message register %s</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Store the %sth 32-bit of message.</description>
            <name>WDATA</name>
          </field>
        </fields>
        <name>WR_MESSAGE_6</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9C</addressOffset>
        <description>Message register %s</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Store the %sth 32-bit of message.</description>
            <name>WDATA</name>
          </field>
        </fields>
        <name>WR_MESSAGE_7</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA0</addressOffset>
        <description>Message register %s</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Store the %sth 32-bit of message.</description>
            <name>WDATA</name>
          </field>
        </fields>
        <name>WR_MESSAGE_8</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA4</addressOffset>
        <description>Message register %s</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Store the %sth 32-bit of message.</description>
            <name>WDATA</name>
          </field>
        </fields>
        <name>WR_MESSAGE_9</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA8</addressOffset>
        <description>Message register %s</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Store the %sth 32-bit of message.</description>
            <name>WDATA</name>
          </field>
        </fields>
        <name>WR_MESSAGE_10</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAC</addressOffset>
        <description>Message register %s</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Store the %sth 32-bit of message.</description>
            <name>WDATA</name>
          </field>
        </fields>
        <name>WR_MESSAGE_11</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB0</addressOffset>
        <description>Message register %s</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Store the %sth 32-bit of message.</description>
            <name>WDATA</name>
          </field>
        </fields>
        <name>WR_MESSAGE_12</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB4</addressOffset>
        <description>Message register %s</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Store the %sth 32-bit of message.</description>
            <name>WDATA</name>
          </field>
        </fields>
        <name>WR_MESSAGE_13</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB8</addressOffset>
        <description>Message register %s</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Store the %sth 32-bit of message.</description>
            <name>WDATA</name>
          </field>
        </fields>
        <name>WR_MESSAGE_14</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBC</addressOffset>
        <description>Message register %s</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Store the %sth 32-bit of message.</description>
            <name>WDATA</name>
          </field>
        </fields>
        <name>WR_MESSAGE_15</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xC0</addressOffset>
        <description>Hash result register %s</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Read the %sth 32-bit of hash result.</description>
            <name>RDATA</name>
          </field>
        </fields>
        <name>RD_RESULT_0</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xC4</addressOffset>
        <description>Hash result register %s</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Read the %sth 32-bit of hash result.</description>
            <name>RDATA</name>
          </field>
        </fields>
        <name>RD_RESULT_1</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xC8</addressOffset>
        <description>Hash result register %s</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Read the %sth 32-bit of hash result.</description>
            <name>RDATA</name>
          </field>
        </fields>
        <name>RD_RESULT_2</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xCC</addressOffset>
        <description>Hash result register %s</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Read the %sth 32-bit of hash result.</description>
            <name>RDATA</name>
          </field>
        </fields>
        <name>RD_RESULT_3</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xD0</addressOffset>
        <description>Hash result register %s</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Read the %sth 32-bit of hash result.</description>
            <name>RDATA</name>
          </field>
        </fields>
        <name>RD_RESULT_4</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xD4</addressOffset>
        <description>Hash result register %s</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Read the %sth 32-bit of hash result.</description>
            <name>RDATA</name>
          </field>
        </fields>
        <name>RD_RESULT_5</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xD8</addressOffset>
        <description>Hash result register %s</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Read the %sth 32-bit of hash result.</description>
            <name>RDATA</name>
          </field>
        </fields>
        <name>RD_RESULT_6</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xDC</addressOffset>
        <description>Hash result register %s</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Read the %sth 32-bit of hash result.</description>
            <name>RDATA</name>
          </field>
        </fields>
        <name>RD_RESULT_7</name>
        <size>0x20</size>
      </register>
    </registers>
    <resetMask>0xFFFFFFFF</resetMask>
    <resetValue>0x0</resetValue>
  </peripheral>
</peripherals>
<peripherals>
  <peripheral>
    <addressBlock>
      <offset>0x0</offset>
      <size>0xA8</size>
      <usage>registers</usage>
    </addressBlock>
    <baseAddress>0x3F413000</baseAddress>
    <description>I2C (Inter-Integrated Circuit) Controller</description>
    <groupName>I2C</groupName>
    <interrupts>
      <interrupt>
        <name>I2C_EXT0</name>
        <value>0x34</value>
      </interrupt>
    </interrupts>
    <name>I2C0</name>
    <registers>
      <register>
        <addressOffset>0x0</addressOffset>
        <description>Configures the low level width of the SCL clock</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xE</bitWidth>
            <description>This register is used to configure for how long SCL remains low in master mode, in I2C module clock cycles.</description>
            <name>SCL_LOW_PERIOD</name>
          </field>
        </fields>
        <name>SCL_LOW_PERIOD</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4</addressOffset>
        <description>Transmission setting</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: direct output. 1: open drain output.</description>
            <name>SDA_FORCE_OUT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: direct output. 1: open drain output.</description>
            <name>SCL_FORCE_OUT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This register is used to select the sample mode.
            
            1: sample SDA data on the SCL low level.
            
            0: sample SDA data on the SCL high level.</description>
            <name>SAMPLE_SCL_LEVEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This register is used to configure the ACK value that need to sent by master when the rx_fifo_cnt has reached the threshold.</description>
            <name>RX_FULL_ACK_LEVEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to configure the module as an I2C Master. Clear this bit to configure the module as an I2C Slave.</description>
            <name>MS_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to start sending the data in TX FIFO.</description>
            <name>TRANS_START</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This bit is used to control the sending mode for data needing to be sent.
            
            1: send data from the least significant bit.
            
            0: send data from the most significant bit.</description>
            <name>TX_LSB_FIRST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This bit is used to control the storage mode for received data.
            
            1: receive data from the least significant bit.
            
            0: receive data from the most significant bit.</description>
            <name>RX_LSB_FIRST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Reserved.</description>
            <name>CLK_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the enable bit for I2C bus arbitration function.</description>
            <name>ARBITRATION_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This register is used to reset the SCL_FSM.</description>
            <name>FSM_RST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This register is used to control the REF_TICK.</description>
            <name>REF_ALWAYS_ON</name>
          </field>
        </fields>
        <name>CTR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xA0B</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8</addressOffset>
        <description>Describe I2C work status</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The received ACK value in master mode or slave mode. 0: ACK. 1: NACK.</description>
            <name>RESP_REC</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When in slave mode, 1: master reads from slave. 0: master writes to slave.</description>
            <name>SLAVE_RW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When the I2C controller takes more than I2C_TIME_OUT clocks to receive a data bit, this field changes to 1.</description>
            <name>TIME_OUT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When the I2C controller loses control of SCL line, this register changes to 1.</description>
            <name>ARB_LOST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: the I2C bus is busy transferring data. 0: the I2C bus is in idle state.</description>
            <name>BUS_BUSY</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When configured as an I2C Slave, and the address sent by the master is equal to the address of the slave, then this bit will be of high level.</description>
            <name>SLAVE_ADDRESSED</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This field changes to 1 when one byte is transferred.</description>
            <name>BYTE_TRANS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>This field represents the amount of data needed to be sent.</description>
            <name>RXFIFO_CNT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>The cause of stretching SCL low in slave mode. 0:  stretching SCL low at the beginning of I2C read data state. 1: stretching SCL low when I2C TX FIFO is empty in slave mode. 2: stretching SCL low when I2C RX FIFO is full in slave mode.</description>
            <name>STRETCH_CAUSE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>This field stores the amount of received data in RAM.</description>
            <name>TXFIFO_CNT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>This field indicates the states of the I2C module state machine.
            
            0: Idle. 1: Address shift. 2: ACK address. 3: RX data. 4: TX data. 5: Send ACK. 6: Wait ACK</description>
            <name>SCL_MAIN_STATE_LAST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>This field indicates the states of the state machine used to produce SCL.
            
            0: Idle. 1: Start. 2: Negative edge. 3: Low. 4: Positive edge. 5: High. 6: Stop</description>
            <name>SCL_STATE_LAST</name>
          </field>
        </fields>
        <name>SR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xC</addressOffset>
        <description>Setting time out control for receiving data</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x18</bitWidth>
            <description>This register is used to configure the timeout for receiving a data bit in APB clock cycles.</description>
            <name>TIME_OUT_VALUE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the enable bit for time out control.</description>
            <name>TIME_OUT_EN</name>
          </field>
        </fields>
        <name>TO</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x10</addressOffset>
        <description>Local slave address setting</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xF</bitWidth>
            <description>When configured as an I2C Slave, this field is used to configure the slave address.</description>
            <name>SLAVE_ADDR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This field is used to enable the slave 10-bit addressing mode in master mode.</description>
            <name>ADDR_10BIT_EN</name>
          </field>
        </fields>
        <name>SLAVE_ADDR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x14</addressOffset>
        <description>FIFO status register</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This is the offset address of the last received data, as described in I2C_NONFIFO_RX_THRES.</description>
            <name>RXFIFO_START_ADDR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This is the offset address of the last received data, as described in I2C_NONFIFO_RX_THRES. This value refreshes when an I2C_RXFIFO_UDF_INT or I2C_TRANS_COMPLETE_INT interrupt is generated.</description>
            <name>RXFIFO_END_ADDR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This is the offset address of the first sent data, as described in I2C_NONFIFO_TX_THRES.</description>
            <name>TXFIFO_START_ADDR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This is the offset address of the last sent data, as described in  I2C_NONFIFO_TX_THRES.
            
            The value refreshes when an I2C_TXFIFO_OVF_INT or I2C_TRANS_COMPLETE_INT interrupt is generated.</description>
            <name>TXFIFO_END_ADDR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Write 0 or 1 to I2C_RX_UPDATE to update the value of I2C_RXFIFO_END_ADDR and I2C_RXFIFO_START_ADDR.</description>
            <name>RX_UPDATE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Write 0 or 1 to I2C_TX_UPDATE to update the value of I2C_TXFIFO_END_ADDR and I2C_TXFIFO_START_ADDR.</description>
            <name>TX_UPDATE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>The received data in I2C slave mode.</description>
            <name>SLAVE_RW_POINT</name>
          </field>
        </fields>
        <name>FIFO_ST</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x18</addressOffset>
        <description>FIFO configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>The water mark threshold of RX FIFO in non-FIFO mode. When I2C_FIFO_PRT_EN is 1 and RX FIFO counter is bigger than I2C_RXFIFO_WM_THRHD[4:0], I2C_RXFIFO_WM_INT_RAW bit will be valid.</description>
            <name>RXFIFO_WM_THRHD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>The water mark threshold of TX FIFO in non-FIFO mode. When I2C_FIFO_PRT_EN is 1 and TX FIFO counter is smaller than I2C_TXFIFO_WM_THRHD[4:0], I2C_TXFIFO_WM_INT_RAW bit will be valid.</description>
            <name>TXFIFO_WM_THRHD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable APB non-FIFO mode.</description>
            <name>NONFIFO_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When this bit is set to 1, the byte received after the I2C address byte represents the offset address in the I2C Slave RAM.</description>
            <name>FIFO_ADDR_CFG_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to reset RX FIFO.</description>
            <name>RX_FIFO_RST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to reset TX FIFO.</description>
            <name>TX_FIFO_RST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>When I2C receives more than I2C_NONFIFO_RX_THRES bytes of data, it will generate an I2C_RXFIFO_UDF_INT interrupt and update the current offset address of the received data.</description>
            <name>NONFIFO_RX_THRES</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>When I2C sends more than I2C_NONFIFO_TX_THRES bytes of data, it will generate an I2C_TXFIFO_OVF_INT interrupt and update the current offset address of the sent data.</description>
            <name>NONFIFO_TX_THRES</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The control enable bit of FIFO pointer in non-FIFO mode. This bit controls the valid bits and the interrupts of TX/RX FIFO overflow, underflow, full and empty.</description>
            <name>FIFO_PRT_EN</name>
          </field>
        </fields>
        <name>FIFO_CONF</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x555408B</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1C</addressOffset>
        <description>RX FIFO read data</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>The value of RX FIFO read data.</description>
            <name>FIFO_RDATA</name>
          </field>
        </fields>
        <name>DATA</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x20</addressOffset>
        <description>Raw interrupt status</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt bit for I2C_RXFIFO_WM_INT interrupt.</description>
            <name>RXFIFO_WM_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt bit for I2C_TXFIFO_WM_INT interrupt.</description>
            <name>TXFIFO_WM_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt bit for I2C_RXFIFO_OVF_INT interrupt.</description>
            <name>RXFIFO_OVF_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt bit for the I2C_END_DETECT_INT interrupt.</description>
            <name>END_DETECT_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt bit for the I2C_END_DETECT_INT interrupt.</description>
            <name>BYTE_TRANS_DONE_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt bit for the I2C_ARBITRATION_LOST_INT interrupt.</description>
            <name>ARBITRATION_LOST_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt bit for I2C_TRANS_COMPLETE_INT interrupt.</description>
            <name>MST_TXFIFO_UDF_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt bit for the I2C_TRANS_COMPLETE_INT interrupt.</description>
            <name>TRANS_COMPLETE_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt bit for the I2C_TIME_OUT_INT interrupt.</description>
            <name>TIME_OUT_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt bit for the I2C_TRANS_START_INT interrupt.</description>
            <name>TRANS_START_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt bit for I2C_SLAVE_STRETCH_INT interrupt.</description>
            <name>NACK_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt bit for I2C_TXFIFO_OVF_INT interrupt.</description>
            <name>TXFIFO_OVF_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt bit for I2C_RXFIFO_UDF_INT  interrupt.</description>
            <name>RXFIFO_UDF_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt bit for I2C_SCL_ST_TO_INT interrupt.</description>
            <name>SCL_ST_TO_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt bit for I2C_SCL_MAIN_ST_TO_INT interrupt.</description>
            <name>SCL_MAIN_ST_TO_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt bit for I2C_DET_START_INT interrupt.</description>
            <name>DET_START_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt bit for I2C_SLAVE_STRETCH_INT interrupt.</description>
            <name>SLAVE_STRETCH_INT_RAW</name>
          </field>
        </fields>
        <name>INT_RAW</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x24</addressOffset>
        <description>Interrupt clear bits</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear I2C_RXFIFO_WM_INT interrupt.</description>
            <name>RXFIFO_WM_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear I2C_TXFIFO_WM_INT interrupt.</description>
            <name>TXFIFO_WM_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear I2C_RXFIFO_OVF_INT interrupt.</description>
            <name>RXFIFO_OVF_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear the I2C_END_DETECT_INT interrupt.</description>
            <name>END_DETECT_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear the I2C_END_DETECT_INT interrupt.</description>
            <name>BYTE_TRANS_DONE_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear the I2C_ARBITRATION_LOST_INT interrupt.</description>
            <name>ARBITRATION_LOST_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear I2C_TRANS_COMPLETE_INT interrupt.</description>
            <name>MST_TXFIFO_UDF_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear the I2C_TRANS_COMPLETE_INT interrupt.</description>
            <name>TRANS_COMPLETE_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear the I2C_TIME_OUT_INT interrupt.</description>
            <name>TIME_OUT_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear the I2C_TRANS_START_INT interrupt.</description>
            <name>TRANS_START_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear I2C_SLAVE_STRETCH_INT interrupt.</description>
            <name>NACK_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear I2C_TXFIFO_OVF_INT interrupt.</description>
            <name>TXFIFO_OVF_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear I2C_RXFIFO_UDF_INT  interrupt.</description>
            <name>RXFIFO_UDF_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear I2C_SCL_ST_TO_INT interrupt.</description>
            <name>SCL_ST_TO_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear I2C_SCL_MAIN_ST_TO_INT interrupt.</description>
            <name>SCL_MAIN_ST_TO_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear I2C_DET_START_INT interrupt.</description>
            <name>DET_START_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear I2C_SLAVE_STRETCH_INT interrupt.</description>
            <name>SLAVE_STRETCH_INT_CLR</name>
          </field>
        </fields>
        <name>INT_CLR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x28</addressOffset>
        <description>Interrupt enable bits</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt bit for I2C_RXFIFO_WM_INT interrupt.</description>
            <name>RXFIFO_WM_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt bit for I2C_TXFIFO_WM_INT interrupt.</description>
            <name>TXFIFO_WM_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt bit for I2C_RXFIFO_OVF_INT interrupt.</description>
            <name>RXFIFO_OVF_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt bit for the I2C_END_DETECT_INT interrupt.</description>
            <name>END_DETECT_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt bit for the I2C_END_DETECT_INT interrupt.</description>
            <name>BYTE_TRANS_DONE_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt bit for the I2C_ARBITRATION_LOST_INT interrupt.</description>
            <name>ARBITRATION_LOST_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt bit for I2C_TRANS_COMPLETE_INT interrupt.</description>
            <name>MST_TXFIFO_UDF_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt bit for the I2C_TRANS_COMPLETE_INT interrupt.</description>
            <name>TRANS_COMPLETE_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt bit for the I2C_TIME_OUT_INT interrupt.</description>
            <name>TIME_OUT_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt bit for the I2C_TRANS_START_INT interrupt.</description>
            <name>TRANS_START_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt bit for I2C_SLAVE_STRETCH_INT interrupt.</description>
            <name>NACK_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt bit for I2C_TXFIFO_OVF_INT interrupt.</description>
            <name>TXFIFO_OVF_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt bit for I2C_RXFIFO_UDF_INT  interrupt.</description>
            <name>RXFIFO_UDF_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt bit for I2C_SCL_ST_TO_INT interrupt.</description>
            <name>SCL_ST_TO_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt bit for I2C_SCL_MAIN_ST_TO_INT interrupt.</description>
            <name>SCL_MAIN_ST_TO_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt bit for I2C_DET_START_INT interrupt.</description>
            <name>DET_START_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt bit for I2C_SLAVE_STRETCH_INT interrupt.</description>
            <name>SLAVE_STRETCH_INT_ENA</name>
          </field>
        </fields>
        <name>INT_ENA</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2C</addressOffset>
        <description>Status of captured I2C communication events</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The masked interrupt status bit for I2C_RXFIFO_WM_INT interrupt.</description>
            <name>RXFIFO_WM_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The masked interrupt status bit for I2C_TXFIFO_WM_INT interrupt.</description>
            <name>TXFIFO_WM_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The masked interrupt status bit for I2C_RXFIFO_OVF_INT interrupt.</description>
            <name>RXFIFO_OVF_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The masked interrupt status bit for the I2C_END_DETECT_INT interrupt.</description>
            <name>END_DETECT_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The masked interrupt status bit for the I2C_END_DETECT_INT interrupt.</description>
            <name>BYTE_TRANS_DONE_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The masked interrupt status bit for the I2C_ARBITRATION_LOST_INT interrupt.</description>
            <name>ARBITRATION_LOST_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The masked interrupt status bit for I2C_TRANS_COMPLETE_INT interrupt.</description>
            <name>MST_TXFIFO_UDF_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The masked interrupt status bit for the I2C_TRANS_COMPLETE_INT interrupt.</description>
            <name>TRANS_COMPLETE_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The masked interrupt status bit for the I2C_TIME_OUT_INT interrupt.</description>
            <name>TIME_OUT_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The masked interrupt status bit for the I2C_TRANS_START_INT interrupt.</description>
            <name>TRANS_START_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The masked interrupt status bit for I2C_SLAVE_STRETCH_INT interrupt.</description>
            <name>NACK_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The masked interrupt status bit for I2C_TXFIFO_OVF_INT interrupt.</description>
            <name>TXFIFO_OVF_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The masked interrupt status bit for I2C_RXFIFO_UDF_INT  interrupt.</description>
            <name>RXFIFO_UDF_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The masked interrupt status bit for I2C_SCL_ST_TO_INT interrupt.</description>
            <name>SCL_ST_TO_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The masked interrupt status bit for I2C_SCL_MAIN_ST_TO_INT interrupt.</description>
            <name>SCL_MAIN_ST_TO_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The masked interrupt status bit for I2C_DET_START_INT interrupt.</description>
            <name>DET_START_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The masked interrupt status bit for I2C_SLAVE_STRETCH_INT interrupt.</description>
            <name>SLAVE_STRETCH_INT_ST</name>
          </field>
        </fields>
        <name>INT_STATUS</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x30</addressOffset>
        <description>Configures the hold time after a negative SCL edge</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>This register is used to configure the interval between changing the SDA output level and the falling edge of SCL, in I2C module clock cycles.</description>
            <name>TIME</name>
          </field>
        </fields>
        <name>SDA_HOLD</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x34</addressOffset>
        <description>Configures the sample time after a positive SCL edge</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>This register is used to configure the interval between the rising edge of SCL and the level sampling time of SDA, in I2C module clock cycles.</description>
            <name>TIME</name>
          </field>
        </fields>
        <name>SDA_SAMPLE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x38</addressOffset>
        <description>Configures the high level width of the SCL clock</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xE</bitWidth>
            <description>This register is used to configure for how long SCL remains high in master mode, in I2C module clock cycles.</description>
            <name>SCL_HIGH_PERIOD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0xE</bitWidth>
            <description>This register is used to configure for the SCL_FSM's waiting period for SCL to go high in master mode, in I2C module clock cycles.</description>
            <name>SCL_WAIT_HIGH_PERIOD</name>
          </field>
        </fields>
        <name>SCL_HIGH_PERIOD</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x40</addressOffset>
        <description>Configures the interval between pulling SDA low and pulling SCL low when the master generates a START condition</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>This register is used to configure  interval between pulling SDA low and pulling SCL low when the master generates a START condition, in I2C module clock cycles.</description>
            <name>TIME</name>
          </field>
        </fields>
        <name>SCL_START_HOLD</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x8</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x44</addressOffset>
        <description>Configures the interval between the positive edge of SCL and the negative edge of SDA</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>This register is used to configure the interval between the positive edge of SCL and the negative edge of SDA for a RESTART condition, in I2C module clock cycles.</description>
            <name>TIME</name>
          </field>
        </fields>
        <name>SCL_RSTART_SETUP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x8</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x48</addressOffset>
        <description>Configures the delay after the SCL clock edge for a stop condition</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xE</bitWidth>
            <description>This register is used to configure the delay after the STOP condition, in I2C module clock cycles.</description>
            <name>TIME</name>
          </field>
        </fields>
        <name>SCL_STOP_HOLD</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4C</addressOffset>
        <description>Configures the delay between the SDA and SCL positive edge for a stop condition</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>This register is used to configure the time between the positive edge of SCL and the positive edge of SDA, in I2C module clock cycles.</description>
            <name>TIME</name>
          </field>
        </fields>
        <name>SCL_STOP_SETUP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x50</addressOffset>
        <description>SCL filter configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>When a pulse on the SCL input has smaller width than this register value in I2C module clock cycles, the I2C controller will ignore that pulse.</description>
            <name>SCL_FILTER_THRES</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the filter enable bit for SCL.</description>
            <name>SCL_FILTER_EN</name>
          </field>
        </fields>
        <name>SCL_FILTER_CFG</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x54</addressOffset>
        <description>SDA filter configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>When a pulse on the SDA input has smaller width than this register value in I2C module clock cycles, the I2C controller will ignore that pulse.</description>
            <name>SDA_FILTER_THRES</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the filter enable bit for SDA.</description>
            <name>SDA_FILTER_EN</name>
          </field>
        </fields>
        <name>SDA_FILTER_CFG</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x58</addressOffset>
        <description>I2C command register 0</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xE</bitWidth>
            <description>This is the content of command 0. It consists of three parts:
            
            op_code is the command, 0: RSTART. 1: WRITE. 2: READ. 3: STOP. 4: END.
            
            byte_num represents the number of bytes that need to be sent or received.
            
            ack_check_en, ack_exp and ack are used to control the ACK bit. See I2C cmd structure for more information.</description>
            <name>COMMAND0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When command 0 is done in I2C Master mode, this bit changes to high level.</description>
            <name>COMMAND0_DONE</name>
          </field>
        </fields>
        <name>COMD0</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5C</addressOffset>
        <description>I2C command register 1</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xE</bitWidth>
            <description>This is the content of command 1. It consists of three parts:
            
            op_code is the command, 0: RSTART. 1: WRITE. 2: READ. 3: STOP. 4: END.
            
            byte_num represents the number of bytes that need to be sent or received.
            
            ack_check_en, ack_exp and ack are used to control the ACK bit. See I2C cmd structure for more information.</description>
            <name>COMMAND1</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When command 1 is done in I2C Master mode, this bit changes to high level.</description>
            <name>COMMAND1_DONE</name>
          </field>
        </fields>
        <name>COMD1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x60</addressOffset>
        <description>I2C command register 2</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xE</bitWidth>
            <description>This is the content of command 2. It consists of three parts:
            
            op_code is the command, 0: RSTART. 1: WRITE. 2: READ. 3: STOP. 4: END.
            
            byte_num represents the number of bytes that need to be sent or received.
            
            ack_check_en, ack_exp and ack are used to control the ACK bit. See I2C cmd structure for more information.</description>
            <name>COMMAND2</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When command 2 is done in I2C Master mode, this bit changes to high level.</description>
            <name>COMMAND2_DONE</name>
          </field>
        </fields>
        <name>COMD2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x64</addressOffset>
        <description>I2C command register 3</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xE</bitWidth>
            <description>This is the content of command 3. It consists of three parts:
            
            op_code is the command, 0: RSTART. 1: WRITE. 2: READ. 3: STOP. 4: END.
            
            byte_num represents the number of bytes that need to be sent or received.
            
            ack_check_en, ack_exp and ack are used to control the ACK bit. See I2C cmd structure for more information.</description>
            <name>COMMAND3</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When command 3 is done in I2C Master mode, this bit changes to high level.</description>
            <name>COMMAND3_DONE</name>
          </field>
        </fields>
        <name>COMD3</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x68</addressOffset>
        <description>I2C command register 4</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xE</bitWidth>
            <description>This is the content of command 4. It consists of three parts:
            
            op_code is the command, 0: RSTART. 1: WRITE. 2: READ. 3: STOP. 4: END.
            
            byte_num represents the number of bytes that need to be sent or received.
            
            ack_check_en, ack_exp and ack are used to control the ACK bit. See I2C cmd structure for more information.</description>
            <name>COMMAND4</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When command 4 is done in I2C Master mode, this bit changes to high level.</description>
            <name>COMMAND4_DONE</name>
          </field>
        </fields>
        <name>COMD4</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x6C</addressOffset>
        <description>I2C command register 5</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xE</bitWidth>
            <description>This is the content of command 5. It consists of three parts:
            
            op_code is the command, 0: RSTART. 1: WRITE. 2: READ. 3: STOP. 4: END.
            
            byte_num represents the number of bytes that need to be sent or received.
            
            ack_check_en, ack_exp and ack are used to control the ACK bit. See I2C cmd structure for more information.</description>
            <name>COMMAND5</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When command 5 is done in I2C Master mode, this bit changes to high level.</description>
            <name>COMMAND5_DONE</name>
          </field>
        </fields>
        <name>COMD5</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x70</addressOffset>
        <description>I2C command register 6</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xE</bitWidth>
            <description>This is the content of command 6. It consists of three parts:
            
            op_code is the command, 0: RSTART. 1: WRITE. 2: READ. 3: STOP. 4: END.
            
            byte_num represents the number of bytes that need to be sent or received.
            
            ack_check_en, ack_exp and ack are used to control the ACK bit. See I2C cmd structure for more information.</description>
            <name>COMMAND6</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When command 6 is done in I2C Master mode, this bit changes to high level.</description>
            <name>COMMAND6_DONE</name>
          </field>
        </fields>
        <name>COMD6</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x74</addressOffset>
        <description>I2C command register 7</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xE</bitWidth>
            <description>This is the content of command 7. It consists of three parts:
            
            op_code is the command, 0: RSTART. 1: WRITE. 2: READ. 3: STOP. 4: END.
            
            byte_num represents the number of bytes that need to be sent or received.
            
            ack_check_en, ack_exp and ack are used to control the ACK bit. See I2C cmd structure for more information.</description>
            <name>COMMAND7</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When command 7 is done in I2C Master mode, this bit changes to high level.</description>
            <name>COMMAND7_DONE</name>
          </field>
        </fields>
        <name>COMD7</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x78</addressOffset>
        <description>I2C command register 8</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xE</bitWidth>
            <description>This is the content of command 8. It consists of three parts:
            
            op_code is the command, 0: RSTART. 1: WRITE. 2: READ. 3: STOP. 4: END.
            
            byte_num represents the number of bytes that need to be sent or received.
            
            ack_check_en, ack_exp and ack are used to control the ACK bit. See I2C cmd structure for more information.</description>
            <name>COMMAND8</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When command 8 is done in I2C Master mode, this bit changes to high level.</description>
            <name>COMMAND8_DONE</name>
          </field>
        </fields>
        <name>COMD8</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x7C</addressOffset>
        <description>I2C command register 9</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xE</bitWidth>
            <description>This is the content of command 9. It consists of three parts:
            
            op_code is the command, 0: RSTART. 1: WRITE. 2: READ. 3: STOP. 4: END.
            
            byte_num represents the number of bytes that need to be sent or received.
            
            ack_check_en, ack_exp and ack are used to control the ACK bit. See I2C cmd structure for more information.</description>
            <name>COMMAND9</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When command 9 is done in I2C Master mode, this bit changes to high level.</description>
            <name>COMMAND9_DONE</name>
          </field>
        </fields>
        <name>COMD9</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x80</addressOffset>
        <description>I2C command register 10</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xE</bitWidth>
            <description>This is the content of command 10. It consists of three parts:
            
            op_code is the command, 0: RSTART. 1: WRITE. 2: READ. 3: STOP. 4: END.
            
            byte_num represents the number of bytes that need to be sent or received.
            
            ack_check_en, ack_exp and ack are used to control the ACK bit. See I2C cmd structure for more information.</description>
            <name>COMMAND10</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When command 10 is done in I2C Master mode, this bit changes to high level.</description>
            <name>COMMAND10_DONE</name>
          </field>
        </fields>
        <name>COMD10</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x84</addressOffset>
        <description>I2C command register 11</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xE</bitWidth>
            <description>This is the content of command 11. It consists of three parts:
            
            op_code is the command, 0: RSTART. 1: WRITE. 2: READ. 3: STOP. 4: END.
            
            byte_num represents the number of bytes that need to be sent or received.
            
            ack_check_en, ack_exp and ack are used to control the ACK bit. See I2C cmd structure for more information.</description>
            <name>COMMAND11</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When command 11 is done in I2C Master mode, this bit changes to high level.</description>
            <name>COMMAND11_DONE</name>
          </field>
        </fields>
        <name>COMD11</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x88</addressOffset>
        <description>I2C command register 12</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xE</bitWidth>
            <description>This is the content of command 12. It consists of three parts:
            
            op_code is the command, 0: RSTART. 1: WRITE. 2: READ. 3: STOP. 4: END.
            
            byte_num represents the number of bytes that need to be sent or received.
            
            ack_check_en, ack_exp and ack are used to control the ACK bit. See I2C cmd structure for more information.</description>
            <name>COMMAND12</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When command 12 is done in I2C Master mode, this bit changes to high level.</description>
            <name>COMMAND12_DONE</name>
          </field>
        </fields>
        <name>COMD12</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8C</addressOffset>
        <description>I2C command register 13</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xE</bitWidth>
            <description>This is the content of command 13. It consists of three parts:
            
            op_code is the command, 0: RSTART. 1: WRITE. 2: READ. 3: STOP. 4: END.
            
            byte_num represents the number of bytes that need to be sent or received.
            
            ack_check_en, ack_exp and ack are used to control the ACK bit. See I2C cmd structure for more information.</description>
            <name>COMMAND13</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When command 13 is done in I2C Master mode, this bit changes to high level.</description>
            <name>COMMAND13_DONE</name>
          </field>
        </fields>
        <name>COMD13</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x90</addressOffset>
        <description>I2C command register 14</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xE</bitWidth>
            <description>This is the content of command 14. It consists of three parts:
            
            op_code is the command, 0: RSTART. 1: WRITE. 2: READ. 3: STOP. 4: END.
            
            byte_num represents the number of bytes that need to be sent or received.
            
            ack_check_en, ack_exp and ack are used to control the ACK bit. See I2C cmd structure for more information.</description>
            <name>COMMAND14</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When command 14 is done in I2C Master mode, this bit changes to high level.</description>
            <name>COMMAND14_DONE</name>
          </field>
        </fields>
        <name>COMD14</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x94</addressOffset>
        <description>I2C command register 15</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xE</bitWidth>
            <description>This is the content of command 15. It consists of three parts:
            
            op_code is the command, 0: RSTART. 1: WRITE. 2: READ. 3: STOP. 4: END.
            
            byte_num represents the number of bytes that need to be sent or received.
            
            ack_check_en, ack_exp and ack are used to control the ACK bit. See I2C cmd structure for more information.</description>
            <name>COMMAND15</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When command 15 is done in I2C Master mode, this bit changes to high level.</description>
            <name>COMMAND15_DONE</name>
          </field>
        </fields>
        <name>COMD15</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x98</addressOffset>
        <description>SCL status time out register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x18</bitWidth>
            <description>The threshold value of SCL_FSM state unchanged period.</description>
            <name>SCL_ST_TO</name>
          </field>
        </fields>
        <name>SCL_ST_TIME_OUT</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x100</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9C</addressOffset>
        <description>SCL main status time out register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x18</bitWidth>
            <description>The threshold value of SCL_MAIN_FSM state unchanged period.</description>
            <name>SCL_MAIN_ST_TO</name>
          </field>
        </fields>
        <name>SCL_MAIN_ST_TIME_OUT</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x100</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA0</addressOffset>
        <description>Power configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When I2C master is IDLE, set this bit to send out SCL pulses. The number of pulses equals to I2C_SCL_RST_SLV_NUM[4:0].</description>
            <name>SCL_RST_SLV_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Configure the pulses of SCL generated in I2C master mode. Valid when I2C_SCL_RST_SLV_EN is 1.</description>
            <name>SCL_RST_SLV_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The power down enable bit for the I2C output SCL line. 1: Power down. 0: Not power down. Set I2C_SCL_FORCE_OUT and I2C_SCL_PD_EN to 1 to stretch SCL low.</description>
            <name>SCL_PD_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The power down enable bit for the I2C output SDA line. 1: Power down. 0: Not power down. Set I2C_SDA_FORCE_OUT and I2C_SDA_PD_EN to 1 to stretch SDA low.</description>
            <name>SDA_PD_EN</name>
          </field>
        </fields>
        <name>SCL_SP_CONF</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA4</addressOffset>
        <description>Set SCL stretch of I2C slave</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>Configure the period of I2C slave stretching SCL line.</description>
            <name>STRETCH_PROTECT_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The enable bit for slave SCL stretch function. 1: Enable. 0: Disable. The SCL output line will be stretched low when I2C_SLAVE_SCL_STRETCH_EN is 1 and stretch event happens. The stretch cause can be seen in I2C_STRETCH_CAUSE.</description>
            <name>SLAVE_SCL_STRETCH_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear the I2C slave SCL stretch function.</description>
            <name>SLAVE_SCL_STRETCH_CLR</name>
          </field>
        </fields>
        <name>SCL_STRETCH_CONF</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xF8</addressOffset>
        <description>Version control register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>This is the the version control register.</description>
            <name>DATE</name>
          </field>
        </fields>
        <name>DATE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x19052000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <resetMask>0xFFFFFFFF</resetMask>
    <resetValue>0x0</resetValue>
  </peripheral>
</peripherals>
<peripherals>
  <peripheral>
    <addressBlock>
      <offset>0x0</offset>
      <size>0xA8</size>
      <usage>registers</usage>
    </addressBlock>
    <baseAddress>0x3F427000</baseAddress>
    <derivedFrom>I2C0</derivedFrom>
    <description>I2C (Inter-Integrated Circuit) Controller</description>
    <groupName>I2C</groupName>
    <interrupts>
      <interrupt>
        <name>I2C_EXT1</name>
        <value>0x35</value>
      </interrupt>
    </interrupts>
    <name>I2C1</name>
    <registers>
      <register>
        <addressOffset>0x0</addressOffset>
        <description>Configures the low level width of the SCL clock</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xE</bitWidth>
            <description>This register is used to configure for how long SCL remains low in master mode, in I2C module clock cycles.</description>
            <name>SCL_LOW_PERIOD</name>
          </field>
        </fields>
        <name>SCL_LOW_PERIOD</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4</addressOffset>
        <description>Transmission setting</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: direct output. 1: open drain output.</description>
            <name>SDA_FORCE_OUT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: direct output. 1: open drain output.</description>
            <name>SCL_FORCE_OUT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This register is used to select the sample mode.
            
            1: sample SDA data on the SCL low level.
            
            0: sample SDA data on the SCL high level.</description>
            <name>SAMPLE_SCL_LEVEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This register is used to configure the ACK value that need to sent by master when the rx_fifo_cnt has reached the threshold.</description>
            <name>RX_FULL_ACK_LEVEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to configure the module as an I2C Master. Clear this bit to configure the module as an I2C Slave.</description>
            <name>MS_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to start sending the data in TX FIFO.</description>
            <name>TRANS_START</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This bit is used to control the sending mode for data needing to be sent.
            
            1: send data from the least significant bit.
            
            0: send data from the most significant bit.</description>
            <name>TX_LSB_FIRST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This bit is used to control the storage mode for received data.
            
            1: receive data from the least significant bit.
            
            0: receive data from the most significant bit.</description>
            <name>RX_LSB_FIRST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Reserved.</description>
            <name>CLK_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the enable bit for I2C bus arbitration function.</description>
            <name>ARBITRATION_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This register is used to reset the SCL_FSM.</description>
            <name>FSM_RST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This register is used to control the REF_TICK.</description>
            <name>REF_ALWAYS_ON</name>
          </field>
        </fields>
        <name>CTR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xA0B</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8</addressOffset>
        <description>Describe I2C work status</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The received ACK value in master mode or slave mode. 0: ACK. 1: NACK.</description>
            <name>RESP_REC</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When in slave mode, 1: master reads from slave. 0: master writes to slave.</description>
            <name>SLAVE_RW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When the I2C controller takes more than I2C_TIME_OUT clocks to receive a data bit, this field changes to 1.</description>
            <name>TIME_OUT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When the I2C controller loses control of SCL line, this register changes to 1.</description>
            <name>ARB_LOST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: the I2C bus is busy transferring data. 0: the I2C bus is in idle state.</description>
            <name>BUS_BUSY</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When configured as an I2C Slave, and the address sent by the master is equal to the address of the slave, then this bit will be of high level.</description>
            <name>SLAVE_ADDRESSED</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This field changes to 1 when one byte is transferred.</description>
            <name>BYTE_TRANS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>This field represents the amount of data needed to be sent.</description>
            <name>RXFIFO_CNT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>The cause of stretching SCL low in slave mode. 0:  stretching SCL low at the beginning of I2C read data state. 1: stretching SCL low when I2C TX FIFO is empty in slave mode. 2: stretching SCL low when I2C RX FIFO is full in slave mode.</description>
            <name>STRETCH_CAUSE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>This field stores the amount of received data in RAM.</description>
            <name>TXFIFO_CNT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>This field indicates the states of the I2C module state machine.
            
            0: Idle. 1: Address shift. 2: ACK address. 3: RX data. 4: TX data. 5: Send ACK. 6: Wait ACK</description>
            <name>SCL_MAIN_STATE_LAST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>This field indicates the states of the state machine used to produce SCL.
            
            0: Idle. 1: Start. 2: Negative edge. 3: Low. 4: Positive edge. 5: High. 6: Stop</description>
            <name>SCL_STATE_LAST</name>
          </field>
        </fields>
        <name>SR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xC</addressOffset>
        <description>Setting time out control for receiving data</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x18</bitWidth>
            <description>This register is used to configure the timeout for receiving a data bit in APB clock cycles.</description>
            <name>TIME_OUT_VALUE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the enable bit for time out control.</description>
            <name>TIME_OUT_EN</name>
          </field>
        </fields>
        <name>TO</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x10</addressOffset>
        <description>Local slave address setting</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xF</bitWidth>
            <description>When configured as an I2C Slave, this field is used to configure the slave address.</description>
            <name>SLAVE_ADDR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This field is used to enable the slave 10-bit addressing mode in master mode.</description>
            <name>ADDR_10BIT_EN</name>
          </field>
        </fields>
        <name>SLAVE_ADDR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x14</addressOffset>
        <description>FIFO status register</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This is the offset address of the last received data, as described in I2C_NONFIFO_RX_THRES.</description>
            <name>RXFIFO_START_ADDR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This is the offset address of the last received data, as described in I2C_NONFIFO_RX_THRES. This value refreshes when an I2C_RXFIFO_UDF_INT or I2C_TRANS_COMPLETE_INT interrupt is generated.</description>
            <name>RXFIFO_END_ADDR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This is the offset address of the first sent data, as described in I2C_NONFIFO_TX_THRES.</description>
            <name>TXFIFO_START_ADDR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This is the offset address of the last sent data, as described in  I2C_NONFIFO_TX_THRES.
            
            The value refreshes when an I2C_TXFIFO_OVF_INT or I2C_TRANS_COMPLETE_INT interrupt is generated.</description>
            <name>TXFIFO_END_ADDR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Write 0 or 1 to I2C_RX_UPDATE to update the value of I2C_RXFIFO_END_ADDR and I2C_RXFIFO_START_ADDR.</description>
            <name>RX_UPDATE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Write 0 or 1 to I2C_TX_UPDATE to update the value of I2C_TXFIFO_END_ADDR and I2C_TXFIFO_START_ADDR.</description>
            <name>TX_UPDATE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>The received data in I2C slave mode.</description>
            <name>SLAVE_RW_POINT</name>
          </field>
        </fields>
        <name>FIFO_ST</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x18</addressOffset>
        <description>FIFO configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>The water mark threshold of RX FIFO in non-FIFO mode. When I2C_FIFO_PRT_EN is 1 and RX FIFO counter is bigger than I2C_RXFIFO_WM_THRHD[4:0], I2C_RXFIFO_WM_INT_RAW bit will be valid.</description>
            <name>RXFIFO_WM_THRHD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>The water mark threshold of TX FIFO in non-FIFO mode. When I2C_FIFO_PRT_EN is 1 and TX FIFO counter is smaller than I2C_TXFIFO_WM_THRHD[4:0], I2C_TXFIFO_WM_INT_RAW bit will be valid.</description>
            <name>TXFIFO_WM_THRHD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable APB non-FIFO mode.</description>
            <name>NONFIFO_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When this bit is set to 1, the byte received after the I2C address byte represents the offset address in the I2C Slave RAM.</description>
            <name>FIFO_ADDR_CFG_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to reset RX FIFO.</description>
            <name>RX_FIFO_RST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to reset TX FIFO.</description>
            <name>TX_FIFO_RST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>When I2C receives more than I2C_NONFIFO_RX_THRES bytes of data, it will generate an I2C_RXFIFO_UDF_INT interrupt and update the current offset address of the received data.</description>
            <name>NONFIFO_RX_THRES</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>When I2C sends more than I2C_NONFIFO_TX_THRES bytes of data, it will generate an I2C_TXFIFO_OVF_INT interrupt and update the current offset address of the sent data.</description>
            <name>NONFIFO_TX_THRES</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The control enable bit of FIFO pointer in non-FIFO mode. This bit controls the valid bits and the interrupts of TX/RX FIFO overflow, underflow, full and empty.</description>
            <name>FIFO_PRT_EN</name>
          </field>
        </fields>
        <name>FIFO_CONF</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x555408B</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1C</addressOffset>
        <description>RX FIFO read data</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>The value of RX FIFO read data.</description>
            <name>FIFO_RDATA</name>
          </field>
        </fields>
        <name>DATA</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x20</addressOffset>
        <description>Raw interrupt status</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt bit for I2C_RXFIFO_WM_INT interrupt.</description>
            <name>RXFIFO_WM_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt bit for I2C_TXFIFO_WM_INT interrupt.</description>
            <name>TXFIFO_WM_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt bit for I2C_RXFIFO_OVF_INT interrupt.</description>
            <name>RXFIFO_OVF_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt bit for the I2C_END_DETECT_INT interrupt.</description>
            <name>END_DETECT_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt bit for the I2C_END_DETECT_INT interrupt.</description>
            <name>BYTE_TRANS_DONE_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt bit for the I2C_ARBITRATION_LOST_INT interrupt.</description>
            <name>ARBITRATION_LOST_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt bit for I2C_TRANS_COMPLETE_INT interrupt.</description>
            <name>MST_TXFIFO_UDF_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt bit for the I2C_TRANS_COMPLETE_INT interrupt.</description>
            <name>TRANS_COMPLETE_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt bit for the I2C_TIME_OUT_INT interrupt.</description>
            <name>TIME_OUT_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt bit for the I2C_TRANS_START_INT interrupt.</description>
            <name>TRANS_START_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt bit for I2C_SLAVE_STRETCH_INT interrupt.</description>
            <name>NACK_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt bit for I2C_TXFIFO_OVF_INT interrupt.</description>
            <name>TXFIFO_OVF_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt bit for I2C_RXFIFO_UDF_INT  interrupt.</description>
            <name>RXFIFO_UDF_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt bit for I2C_SCL_ST_TO_INT interrupt.</description>
            <name>SCL_ST_TO_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt bit for I2C_SCL_MAIN_ST_TO_INT interrupt.</description>
            <name>SCL_MAIN_ST_TO_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt bit for I2C_DET_START_INT interrupt.</description>
            <name>DET_START_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt bit for I2C_SLAVE_STRETCH_INT interrupt.</description>
            <name>SLAVE_STRETCH_INT_RAW</name>
          </field>
        </fields>
        <name>INT_RAW</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x24</addressOffset>
        <description>Interrupt clear bits</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear I2C_RXFIFO_WM_INT interrupt.</description>
            <name>RXFIFO_WM_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear I2C_TXFIFO_WM_INT interrupt.</description>
            <name>TXFIFO_WM_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear I2C_RXFIFO_OVF_INT interrupt.</description>
            <name>RXFIFO_OVF_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear the I2C_END_DETECT_INT interrupt.</description>
            <name>END_DETECT_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear the I2C_END_DETECT_INT interrupt.</description>
            <name>BYTE_TRANS_DONE_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear the I2C_ARBITRATION_LOST_INT interrupt.</description>
            <name>ARBITRATION_LOST_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear I2C_TRANS_COMPLETE_INT interrupt.</description>
            <name>MST_TXFIFO_UDF_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear the I2C_TRANS_COMPLETE_INT interrupt.</description>
            <name>TRANS_COMPLETE_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear the I2C_TIME_OUT_INT interrupt.</description>
            <name>TIME_OUT_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear the I2C_TRANS_START_INT interrupt.</description>
            <name>TRANS_START_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear I2C_SLAVE_STRETCH_INT interrupt.</description>
            <name>NACK_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear I2C_TXFIFO_OVF_INT interrupt.</description>
            <name>TXFIFO_OVF_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear I2C_RXFIFO_UDF_INT  interrupt.</description>
            <name>RXFIFO_UDF_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear I2C_SCL_ST_TO_INT interrupt.</description>
            <name>SCL_ST_TO_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear I2C_SCL_MAIN_ST_TO_INT interrupt.</description>
            <name>SCL_MAIN_ST_TO_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear I2C_DET_START_INT interrupt.</description>
            <name>DET_START_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear I2C_SLAVE_STRETCH_INT interrupt.</description>
            <name>SLAVE_STRETCH_INT_CLR</name>
          </field>
        </fields>
        <name>INT_CLR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x28</addressOffset>
        <description>Interrupt enable bits</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt bit for I2C_RXFIFO_WM_INT interrupt.</description>
            <name>RXFIFO_WM_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt bit for I2C_TXFIFO_WM_INT interrupt.</description>
            <name>TXFIFO_WM_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt bit for I2C_RXFIFO_OVF_INT interrupt.</description>
            <name>RXFIFO_OVF_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt bit for the I2C_END_DETECT_INT interrupt.</description>
            <name>END_DETECT_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt bit for the I2C_END_DETECT_INT interrupt.</description>
            <name>BYTE_TRANS_DONE_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt bit for the I2C_ARBITRATION_LOST_INT interrupt.</description>
            <name>ARBITRATION_LOST_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt bit for I2C_TRANS_COMPLETE_INT interrupt.</description>
            <name>MST_TXFIFO_UDF_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt bit for the I2C_TRANS_COMPLETE_INT interrupt.</description>
            <name>TRANS_COMPLETE_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt bit for the I2C_TIME_OUT_INT interrupt.</description>
            <name>TIME_OUT_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt bit for the I2C_TRANS_START_INT interrupt.</description>
            <name>TRANS_START_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt bit for I2C_SLAVE_STRETCH_INT interrupt.</description>
            <name>NACK_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt bit for I2C_TXFIFO_OVF_INT interrupt.</description>
            <name>TXFIFO_OVF_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt bit for I2C_RXFIFO_UDF_INT  interrupt.</description>
            <name>RXFIFO_UDF_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt bit for I2C_SCL_ST_TO_INT interrupt.</description>
            <name>SCL_ST_TO_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt bit for I2C_SCL_MAIN_ST_TO_INT interrupt.</description>
            <name>SCL_MAIN_ST_TO_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt bit for I2C_DET_START_INT interrupt.</description>
            <name>DET_START_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt bit for I2C_SLAVE_STRETCH_INT interrupt.</description>
            <name>SLAVE_STRETCH_INT_ENA</name>
          </field>
        </fields>
        <name>INT_ENA</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2C</addressOffset>
        <description>Status of captured I2C communication events</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The masked interrupt status bit for I2C_RXFIFO_WM_INT interrupt.</description>
            <name>RXFIFO_WM_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The masked interrupt status bit for I2C_TXFIFO_WM_INT interrupt.</description>
            <name>TXFIFO_WM_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The masked interrupt status bit for I2C_RXFIFO_OVF_INT interrupt.</description>
            <name>RXFIFO_OVF_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The masked interrupt status bit for the I2C_END_DETECT_INT interrupt.</description>
            <name>END_DETECT_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The masked interrupt status bit for the I2C_END_DETECT_INT interrupt.</description>
            <name>BYTE_TRANS_DONE_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The masked interrupt status bit for the I2C_ARBITRATION_LOST_INT interrupt.</description>
            <name>ARBITRATION_LOST_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The masked interrupt status bit for I2C_TRANS_COMPLETE_INT interrupt.</description>
            <name>MST_TXFIFO_UDF_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The masked interrupt status bit for the I2C_TRANS_COMPLETE_INT interrupt.</description>
            <name>TRANS_COMPLETE_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The masked interrupt status bit for the I2C_TIME_OUT_INT interrupt.</description>
            <name>TIME_OUT_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The masked interrupt status bit for the I2C_TRANS_START_INT interrupt.</description>
            <name>TRANS_START_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The masked interrupt status bit for I2C_SLAVE_STRETCH_INT interrupt.</description>
            <name>NACK_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The masked interrupt status bit for I2C_TXFIFO_OVF_INT interrupt.</description>
            <name>TXFIFO_OVF_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The masked interrupt status bit for I2C_RXFIFO_UDF_INT  interrupt.</description>
            <name>RXFIFO_UDF_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The masked interrupt status bit for I2C_SCL_ST_TO_INT interrupt.</description>
            <name>SCL_ST_TO_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The masked interrupt status bit for I2C_SCL_MAIN_ST_TO_INT interrupt.</description>
            <name>SCL_MAIN_ST_TO_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The masked interrupt status bit for I2C_DET_START_INT interrupt.</description>
            <name>DET_START_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The masked interrupt status bit for I2C_SLAVE_STRETCH_INT interrupt.</description>
            <name>SLAVE_STRETCH_INT_ST</name>
          </field>
        </fields>
        <name>INT_STATUS</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x30</addressOffset>
        <description>Configures the hold time after a negative SCL edge</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>This register is used to configure the interval between changing the SDA output level and the falling edge of SCL, in I2C module clock cycles.</description>
            <name>TIME</name>
          </field>
        </fields>
        <name>SDA_HOLD</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x34</addressOffset>
        <description>Configures the sample time after a positive SCL edge</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>This register is used to configure the interval between the rising edge of SCL and the level sampling time of SDA, in I2C module clock cycles.</description>
            <name>TIME</name>
          </field>
        </fields>
        <name>SDA_SAMPLE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x38</addressOffset>
        <description>Configures the high level width of the SCL clock</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xE</bitWidth>
            <description>This register is used to configure for how long SCL remains high in master mode, in I2C module clock cycles.</description>
            <name>SCL_HIGH_PERIOD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0xE</bitWidth>
            <description>This register is used to configure for the SCL_FSM's waiting period for SCL to go high in master mode, in I2C module clock cycles.</description>
            <name>SCL_WAIT_HIGH_PERIOD</name>
          </field>
        </fields>
        <name>SCL_HIGH_PERIOD</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x40</addressOffset>
        <description>Configures the interval between pulling SDA low and pulling SCL low when the master generates a START condition</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>This register is used to configure  interval between pulling SDA low and pulling SCL low when the master generates a START condition, in I2C module clock cycles.</description>
            <name>TIME</name>
          </field>
        </fields>
        <name>SCL_START_HOLD</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x8</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x44</addressOffset>
        <description>Configures the interval between the positive edge of SCL and the negative edge of SDA</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>This register is used to configure the interval between the positive edge of SCL and the negative edge of SDA for a RESTART condition, in I2C module clock cycles.</description>
            <name>TIME</name>
          </field>
        </fields>
        <name>SCL_RSTART_SETUP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x8</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x48</addressOffset>
        <description>Configures the delay after the SCL clock edge for a stop condition</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xE</bitWidth>
            <description>This register is used to configure the delay after the STOP condition, in I2C module clock cycles.</description>
            <name>TIME</name>
          </field>
        </fields>
        <name>SCL_STOP_HOLD</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4C</addressOffset>
        <description>Configures the delay between the SDA and SCL positive edge for a stop condition</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>This register is used to configure the time between the positive edge of SCL and the positive edge of SDA, in I2C module clock cycles.</description>
            <name>TIME</name>
          </field>
        </fields>
        <name>SCL_STOP_SETUP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x50</addressOffset>
        <description>SCL filter configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>When a pulse on the SCL input has smaller width than this register value in I2C module clock cycles, the I2C controller will ignore that pulse.</description>
            <name>SCL_FILTER_THRES</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the filter enable bit for SCL.</description>
            <name>SCL_FILTER_EN</name>
          </field>
        </fields>
        <name>SCL_FILTER_CFG</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x54</addressOffset>
        <description>SDA filter configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>When a pulse on the SDA input has smaller width than this register value in I2C module clock cycles, the I2C controller will ignore that pulse.</description>
            <name>SDA_FILTER_THRES</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the filter enable bit for SDA.</description>
            <name>SDA_FILTER_EN</name>
          </field>
        </fields>
        <name>SDA_FILTER_CFG</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x58</addressOffset>
        <description>I2C command register 0</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xE</bitWidth>
            <description>This is the content of command 0. It consists of three parts:
            
            op_code is the command, 0: RSTART. 1: WRITE. 2: READ. 3: STOP. 4: END.
            
            byte_num represents the number of bytes that need to be sent or received.
            
            ack_check_en, ack_exp and ack are used to control the ACK bit. See I2C cmd structure for more information.</description>
            <name>COMMAND0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When command 0 is done in I2C Master mode, this bit changes to high level.</description>
            <name>COMMAND0_DONE</name>
          </field>
        </fields>
        <name>COMD0</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5C</addressOffset>
        <description>I2C command register 1</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xE</bitWidth>
            <description>This is the content of command 1. It consists of three parts:
            
            op_code is the command, 0: RSTART. 1: WRITE. 2: READ. 3: STOP. 4: END.
            
            byte_num represents the number of bytes that need to be sent or received.
            
            ack_check_en, ack_exp and ack are used to control the ACK bit. See I2C cmd structure for more information.</description>
            <name>COMMAND1</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When command 1 is done in I2C Master mode, this bit changes to high level.</description>
            <name>COMMAND1_DONE</name>
          </field>
        </fields>
        <name>COMD1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x60</addressOffset>
        <description>I2C command register 2</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xE</bitWidth>
            <description>This is the content of command 2. It consists of three parts:
            
            op_code is the command, 0: RSTART. 1: WRITE. 2: READ. 3: STOP. 4: END.
            
            byte_num represents the number of bytes that need to be sent or received.
            
            ack_check_en, ack_exp and ack are used to control the ACK bit. See I2C cmd structure for more information.</description>
            <name>COMMAND2</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When command 2 is done in I2C Master mode, this bit changes to high level.</description>
            <name>COMMAND2_DONE</name>
          </field>
        </fields>
        <name>COMD2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x64</addressOffset>
        <description>I2C command register 3</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xE</bitWidth>
            <description>This is the content of command 3. It consists of three parts:
            
            op_code is the command, 0: RSTART. 1: WRITE. 2: READ. 3: STOP. 4: END.
            
            byte_num represents the number of bytes that need to be sent or received.
            
            ack_check_en, ack_exp and ack are used to control the ACK bit. See I2C cmd structure for more information.</description>
            <name>COMMAND3</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When command 3 is done in I2C Master mode, this bit changes to high level.</description>
            <name>COMMAND3_DONE</name>
          </field>
        </fields>
        <name>COMD3</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x68</addressOffset>
        <description>I2C command register 4</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xE</bitWidth>
            <description>This is the content of command 4. It consists of three parts:
            
            op_code is the command, 0: RSTART. 1: WRITE. 2: READ. 3: STOP. 4: END.
            
            byte_num represents the number of bytes that need to be sent or received.
            
            ack_check_en, ack_exp and ack are used to control the ACK bit. See I2C cmd structure for more information.</description>
            <name>COMMAND4</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When command 4 is done in I2C Master mode, this bit changes to high level.</description>
            <name>COMMAND4_DONE</name>
          </field>
        </fields>
        <name>COMD4</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x6C</addressOffset>
        <description>I2C command register 5</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xE</bitWidth>
            <description>This is the content of command 5. It consists of three parts:
            
            op_code is the command, 0: RSTART. 1: WRITE. 2: READ. 3: STOP. 4: END.
            
            byte_num represents the number of bytes that need to be sent or received.
            
            ack_check_en, ack_exp and ack are used to control the ACK bit. See I2C cmd structure for more information.</description>
            <name>COMMAND5</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When command 5 is done in I2C Master mode, this bit changes to high level.</description>
            <name>COMMAND5_DONE</name>
          </field>
        </fields>
        <name>COMD5</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x70</addressOffset>
        <description>I2C command register 6</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xE</bitWidth>
            <description>This is the content of command 6. It consists of three parts:
            
            op_code is the command, 0: RSTART. 1: WRITE. 2: READ. 3: STOP. 4: END.
            
            byte_num represents the number of bytes that need to be sent or received.
            
            ack_check_en, ack_exp and ack are used to control the ACK bit. See I2C cmd structure for more information.</description>
            <name>COMMAND6</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When command 6 is done in I2C Master mode, this bit changes to high level.</description>
            <name>COMMAND6_DONE</name>
          </field>
        </fields>
        <name>COMD6</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x74</addressOffset>
        <description>I2C command register 7</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xE</bitWidth>
            <description>This is the content of command 7. It consists of three parts:
            
            op_code is the command, 0: RSTART. 1: WRITE. 2: READ. 3: STOP. 4: END.
            
            byte_num represents the number of bytes that need to be sent or received.
            
            ack_check_en, ack_exp and ack are used to control the ACK bit. See I2C cmd structure for more information.</description>
            <name>COMMAND7</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When command 7 is done in I2C Master mode, this bit changes to high level.</description>
            <name>COMMAND7_DONE</name>
          </field>
        </fields>
        <name>COMD7</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x78</addressOffset>
        <description>I2C command register 8</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xE</bitWidth>
            <description>This is the content of command 8. It consists of three parts:
            
            op_code is the command, 0: RSTART. 1: WRITE. 2: READ. 3: STOP. 4: END.
            
            byte_num represents the number of bytes that need to be sent or received.
            
            ack_check_en, ack_exp and ack are used to control the ACK bit. See I2C cmd structure for more information.</description>
            <name>COMMAND8</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When command 8 is done in I2C Master mode, this bit changes to high level.</description>
            <name>COMMAND8_DONE</name>
          </field>
        </fields>
        <name>COMD8</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x7C</addressOffset>
        <description>I2C command register 9</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xE</bitWidth>
            <description>This is the content of command 9. It consists of three parts:
            
            op_code is the command, 0: RSTART. 1: WRITE. 2: READ. 3: STOP. 4: END.
            
            byte_num represents the number of bytes that need to be sent or received.
            
            ack_check_en, ack_exp and ack are used to control the ACK bit. See I2C cmd structure for more information.</description>
            <name>COMMAND9</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When command 9 is done in I2C Master mode, this bit changes to high level.</description>
            <name>COMMAND9_DONE</name>
          </field>
        </fields>
        <name>COMD9</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x80</addressOffset>
        <description>I2C command register 10</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xE</bitWidth>
            <description>This is the content of command 10. It consists of three parts:
            
            op_code is the command, 0: RSTART. 1: WRITE. 2: READ. 3: STOP. 4: END.
            
            byte_num represents the number of bytes that need to be sent or received.
            
            ack_check_en, ack_exp and ack are used to control the ACK bit. See I2C cmd structure for more information.</description>
            <name>COMMAND10</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When command 10 is done in I2C Master mode, this bit changes to high level.</description>
            <name>COMMAND10_DONE</name>
          </field>
        </fields>
        <name>COMD10</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x84</addressOffset>
        <description>I2C command register 11</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xE</bitWidth>
            <description>This is the content of command 11. It consists of three parts:
            
            op_code is the command, 0: RSTART. 1: WRITE. 2: READ. 3: STOP. 4: END.
            
            byte_num represents the number of bytes that need to be sent or received.
            
            ack_check_en, ack_exp and ack are used to control the ACK bit. See I2C cmd structure for more information.</description>
            <name>COMMAND11</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When command 11 is done in I2C Master mode, this bit changes to high level.</description>
            <name>COMMAND11_DONE</name>
          </field>
        </fields>
        <name>COMD11</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x88</addressOffset>
        <description>I2C command register 12</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xE</bitWidth>
            <description>This is the content of command 12. It consists of three parts:
            
            op_code is the command, 0: RSTART. 1: WRITE. 2: READ. 3: STOP. 4: END.
            
            byte_num represents the number of bytes that need to be sent or received.
            
            ack_check_en, ack_exp and ack are used to control the ACK bit. See I2C cmd structure for more information.</description>
            <name>COMMAND12</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When command 12 is done in I2C Master mode, this bit changes to high level.</description>
            <name>COMMAND12_DONE</name>
          </field>
        </fields>
        <name>COMD12</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8C</addressOffset>
        <description>I2C command register 13</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xE</bitWidth>
            <description>This is the content of command 13. It consists of three parts:
            
            op_code is the command, 0: RSTART. 1: WRITE. 2: READ. 3: STOP. 4: END.
            
            byte_num represents the number of bytes that need to be sent or received.
            
            ack_check_en, ack_exp and ack are used to control the ACK bit. See I2C cmd structure for more information.</description>
            <name>COMMAND13</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When command 13 is done in I2C Master mode, this bit changes to high level.</description>
            <name>COMMAND13_DONE</name>
          </field>
        </fields>
        <name>COMD13</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x90</addressOffset>
        <description>I2C command register 14</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xE</bitWidth>
            <description>This is the content of command 14. It consists of three parts:
            
            op_code is the command, 0: RSTART. 1: WRITE. 2: READ. 3: STOP. 4: END.
            
            byte_num represents the number of bytes that need to be sent or received.
            
            ack_check_en, ack_exp and ack are used to control the ACK bit. See I2C cmd structure for more information.</description>
            <name>COMMAND14</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When command 14 is done in I2C Master mode, this bit changes to high level.</description>
            <name>COMMAND14_DONE</name>
          </field>
        </fields>
        <name>COMD14</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x94</addressOffset>
        <description>I2C command register 15</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xE</bitWidth>
            <description>This is the content of command 15. It consists of three parts:
            
            op_code is the command, 0: RSTART. 1: WRITE. 2: READ. 3: STOP. 4: END.
            
            byte_num represents the number of bytes that need to be sent or received.
            
            ack_check_en, ack_exp and ack are used to control the ACK bit. See I2C cmd structure for more information.</description>
            <name>COMMAND15</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When command 15 is done in I2C Master mode, this bit changes to high level.</description>
            <name>COMMAND15_DONE</name>
          </field>
        </fields>
        <name>COMD15</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x98</addressOffset>
        <description>SCL status time out register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x18</bitWidth>
            <description>The threshold value of SCL_FSM state unchanged period.</description>
            <name>SCL_ST_TO</name>
          </field>
        </fields>
        <name>SCL_ST_TIME_OUT</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x100</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9C</addressOffset>
        <description>SCL main status time out register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x18</bitWidth>
            <description>The threshold value of SCL_MAIN_FSM state unchanged period.</description>
            <name>SCL_MAIN_ST_TO</name>
          </field>
        </fields>
        <name>SCL_MAIN_ST_TIME_OUT</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x100</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA0</addressOffset>
        <description>Power configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When I2C master is IDLE, set this bit to send out SCL pulses. The number of pulses equals to I2C_SCL_RST_SLV_NUM[4:0].</description>
            <name>SCL_RST_SLV_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Configure the pulses of SCL generated in I2C master mode. Valid when I2C_SCL_RST_SLV_EN is 1.</description>
            <name>SCL_RST_SLV_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The power down enable bit for the I2C output SCL line. 1: Power down. 0: Not power down. Set I2C_SCL_FORCE_OUT and I2C_SCL_PD_EN to 1 to stretch SCL low.</description>
            <name>SCL_PD_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The power down enable bit for the I2C output SDA line. 1: Power down. 0: Not power down. Set I2C_SDA_FORCE_OUT and I2C_SDA_PD_EN to 1 to stretch SDA low.</description>
            <name>SDA_PD_EN</name>
          </field>
        </fields>
        <name>SCL_SP_CONF</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA4</addressOffset>
        <description>Set SCL stretch of I2C slave</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>Configure the period of I2C slave stretching SCL line.</description>
            <name>STRETCH_PROTECT_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The enable bit for slave SCL stretch function. 1: Enable. 0: Disable. The SCL output line will be stretched low when I2C_SLAVE_SCL_STRETCH_EN is 1 and stretch event happens. The stretch cause can be seen in I2C_STRETCH_CAUSE.</description>
            <name>SLAVE_SCL_STRETCH_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear the I2C slave SCL stretch function.</description>
            <name>SLAVE_SCL_STRETCH_CLR</name>
          </field>
        </fields>
        <name>SCL_STRETCH_CONF</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xF8</addressOffset>
        <description>Version control register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>This is the the version control register.</description>
            <name>DATE</name>
          </field>
        </fields>
        <name>DATE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x19052000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <resetMask>0xFFFFFFFF</resetMask>
    <resetValue>0x0</resetValue>
  </peripheral>
</peripherals>
<peripherals>
  <peripheral>
    <addressBlock>
      <offset>0x0</offset>
      <size>0x88</size>
      <usage>registers</usage>
    </addressBlock>
    <baseAddress>0x3F40F000</baseAddress>
    <description>I2S (Inter-IC Sound) Controller</description>
    <groupName>I2S</groupName>
    <interrupts>
      <interrupt>
        <name>I2S0</name>
        <value>0x23</value>
      </interrupt>
    </interrupts>
    <interrupts>
      <interrupt>
        <name>I2S1</name>
        <value>0x24</value>
      </interrupt>
    </interrupts>
    <name>I2S</name>
    <registers>
      <register>
        <addressOffset>0x8</addressOffset>
        <description>I2S Configure register</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to reset transmitter</description>
            <name>TX_RESET</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to reset receiver</description>
            <name>RX_RESET</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to reset txFIFO</description>
            <name>TX_FIFO_RESET</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to reset rxFIFO</description>
            <name>RX_FIFO_RESET</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to start transmitting data</description>
            <name>TX_START</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to start receiving data</description>
            <name>RX_START</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable slave transmitter mode</description>
            <name>TX_SLAVE_MOD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable slave receiver mode</description>
            <name>RX_SLAVE_MOD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to transmit right channel data first</description>
            <name>TX_RIGHT_FIRST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to receive right channel data first</description>
            <name>RX_RIGHT_FIRST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable transmitter in Phillips standard mode</description>
            <name>TX_MSB_SHIFT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable receiver in Phillips standard mode</description>
            <name>RX_MSB_SHIFT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable transmitter in PCM standard mode</description>
            <name>TX_SHORT_SYNC</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable receiver in PCM standard mode</description>
            <name>RX_SHORT_SYNC</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable transmitter in mono mode</description>
            <name>TX_MONO</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable receiver  in mono mode</description>
            <name>RX_MONO</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to place right channel data at the MSB in the transmit FIFO.</description>
            <name>TX_MSB_RIGHT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to place right channel data at the MSB in the receive FIFO.</description>
            <name>RX_MSB_RIGHT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1:the data in DMA/APB transform from low bits. 0:the data from DMA/APB transform from high bits.</description>
            <name>TX_LSB_FIRST_DMA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1:the data in DMA/APB transform from low bits. 0:the data from DMA/APB transform from high bits.</description>
            <name>RX_LSB_FIRST_DMA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enable signal loopback mode with transmitter module and receiver module sharing the same WS and BCK signals.</description>
            <name>SIG_LOOPBACK</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1:i2s_tx_fifo reset is not ok   0:i2s_tx_fifo_reset is ok</description>
            <name>TX_FIFO_RESET_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1:i2s_rx_fifo_reset is not ok   0:i2s_rx_fifo reset is ok</description>
            <name>RX_FIFO_RESET_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: i2s_tx_reset is not ok   0: i2s_tx_reset is ok</description>
            <name>TX_RESET_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1:data in left channel is equal to data in right channel</description>
            <name>TX_DMA_EQUAL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1:data in left channel is equal to data in right channel</description>
            <name>RX_DMA_EQUAL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>set this bit to enable i2s to prepare data earlier</description>
            <name>PRE_REQ_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>I2S TX byte endian.</description>
            <name>TX_BIG_ENDIAN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>I2S RX byte endian.</description>
            <name>RX_BIG_ENDIAN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>I2S RX reset status. 1: I2S_RX_RESET is not finished. 0: I2S_RX_RESET is finished.</description>
            <name>RX_RESET_ST</name>
          </field>
        </fields>
        <name>CONF</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xC0300</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xC</addressOffset>
        <description>Raw interrupt status</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt status bit  for the i2s_rx_take_data_int interrupt</description>
            <name>RX_TAKE_DATA_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt status bit  for the i2s_tx_put_data_int interrupt</description>
            <name>TX_PUT_DATA_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt status bit  for the i2s_rx_wfull_int interrupt</description>
            <name>RX_WFULL_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt status bit  for the i2s_rx_rempty_int interrupt</description>
            <name>RX_REMPTY_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt status bit  for the i2s_tx_wfull_int interrupt</description>
            <name>TX_WFULL_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt status bit  for the i2s_tx_rempty_int interrupt</description>
            <name>TX_REMPTY_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt status bit  for the i2s_rx_hung_int interrupt</description>
            <name>RX_HUNG_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt status bit  for the i2s_tx_hung_int interrupt</description>
            <name>TX_HUNG_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt status bit  for the i2s_in_done_int interrupt</description>
            <name>IN_DONE_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt status bit  for the i2s_in_suc_eof_int interrupt</description>
            <name>IN_SUC_EOF_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>don't use</description>
            <name>IN_ERR_EOF_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt status bit  for the i2s_out_done_int interrupt</description>
            <name>OUT_DONE_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt status bit  for the i2s_out_eof_int interrupt</description>
            <name>OUT_EOF_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt status bit  for the i2s_in_dscr_err_int interrupt</description>
            <name>IN_DSCR_ERR_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt status bit  for the i2s_out_dscr_err_int interrupt</description>
            <name>OUT_DSCR_ERR_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt status bit  for the i2s_in_dscr_empty_int interrupt</description>
            <name>IN_DSCR_EMPTY_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt status bit  for the i2s_out_total_eof_int interrupt</description>
            <name>OUT_TOTAL_EOF_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt status bit  for the i2s_v_sync_int interrupt</description>
            <name>V_SYNC_INT_RAW</name>
          </field>
        </fields>
        <name>INT_RAW</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x10</addressOffset>
        <description>Masked interrupt status</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The masked interrupt status bit  for the i2s_rx_take_data_int interrupt</description>
            <name>RX_TAKE_DATA_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The masked interrupt status bit  for the i2s_tx_put_data_int interrupt</description>
            <name>TX_PUT_DATA_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The masked interrupt status bit  for the i2s_rx_wfull_int interrupt</description>
            <name>RX_WFULL_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The masked interrupt status bit  for the i2s_rx_rempty_int interrupt</description>
            <name>RX_REMPTY_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The masked interrupt status bit  for the i2s_tx_wfull_int interrupt</description>
            <name>TX_WFULL_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The masked interrupt status bit  for the i2s_tx_rempty_int interrupt</description>
            <name>TX_REMPTY_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The masked interrupt status bit  for the i2s_rx_hung_int interrupt</description>
            <name>RX_HUNG_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The masked interrupt status bit  for the i2s_tx_hung_int interrupt</description>
            <name>TX_HUNG_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The masked interrupt status bit  for the i2s_in_done_int interrupt</description>
            <name>IN_DONE_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The masked interrupt status bit  for the i2s_in_suc_eof_int interrupt</description>
            <name>IN_SUC_EOF_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>don't use</description>
            <name>IN_ERR_EOF_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The masked interrupt status bit  for the i2s_out_done_int interrupt</description>
            <name>OUT_DONE_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The masked interrupt status bit  for the i2s_out_eof_int interrupt</description>
            <name>OUT_EOF_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The masked interrupt status bit  for the i2s_in_dscr_err_int interrupt</description>
            <name>IN_DSCR_ERR_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The masked interrupt status bit  for the i2s_out_dscr_err_int interrupt</description>
            <name>OUT_DSCR_ERR_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The masked interrupt status bit  for the i2s_in_dscr_empty_int interrupt</description>
            <name>IN_DSCR_EMPTY_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The masked interrupt status bit  for the i2s_out_total_eof_int interrupt</description>
            <name>OUT_TOTAL_EOF_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The masked interrupt status bit  for the i2s_v_sync_int  interrupt</description>
            <name>V_SYNC_INT_ST</name>
          </field>
        </fields>
        <name>INT_ST</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x14</addressOffset>
        <description>Interrupt enable bits</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt enable bit  for the i2s_rx_take_data_int interrupt</description>
            <name>RX_TAKE_DATA_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt enable bit  for the i2s_tx_put_data_int interrupt</description>
            <name>TX_PUT_DATA_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt enable bit  for the i2s_rx_wfull_int interrupt</description>
            <name>RX_WFULL_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt enable bit  for the i2s_rx_rempty_int interrupt</description>
            <name>RX_REMPTY_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt enable bit  for the i2s_tx_wfull_int interrupt</description>
            <name>TX_WFULL_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt enable bit  for the i2s_tx_rempty_int interrupt</description>
            <name>TX_REMPTY_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt enable bit  for the i2s_rx_hung_int interrupt</description>
            <name>RX_HUNG_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt enable bit  for the i2s_tx_hung_int interrupt</description>
            <name>TX_HUNG_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt enable bit  for the i2s_in_done_int interrupt</description>
            <name>IN_DONE_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt enable bit  for the i2s_in_suc_eof_int interrupt</description>
            <name>IN_SUC_EOF_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>don't use</description>
            <name>IN_ERR_EOF_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt enable bit  for the i2s_out_done_int interrupt</description>
            <name>OUT_DONE_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt enable bit  for the i2s_out_eof_int interrupt</description>
            <name>OUT_EOF_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt enable bit  for the i2s_in_dscr_err_int interrupt</description>
            <name>IN_DSCR_ERR_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt enable bit  for the i2s_out_dscr_err_int interrupt</description>
            <name>OUT_DSCR_ERR_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt enable bit  for the i2s_in_dscr_empty_int interrupt</description>
            <name>IN_DSCR_EMPTY_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt enable bit  for the i2s_out_total_eof_int interrupt</description>
            <name>OUT_TOTAL_EOF_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt enable bit  for the i2s_v_sync_int interrupt</description>
            <name>V_SYNC_INT_ENA</name>
          </field>
        </fields>
        <name>INT_ENA</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x18</addressOffset>
        <description>Interrupt clear bits</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear the i2s_rx_take_data_int interrupt</description>
            <name>TAKE_DATA_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear the i2s_tx_put_data_int interrupt</description>
            <name>PUT_DATA_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear the i2s_rx_wfull_int interrupt</description>
            <name>RX_WFULL_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear the i2s_rx_rempty_int interrupt</description>
            <name>RX_REMPTY_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear the i2s_tx_wfull_int interrupt</description>
            <name>TX_WFULL_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear the i2s_tx_rempty_int interrupt</description>
            <name>TX_REMPTY_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear the i2s_rx_hung_int interrupt</description>
            <name>RX_HUNG_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear the i2s_tx_hung_int interrupt</description>
            <name>TX_HUNG_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear the i2s_in_done_int interrupt</description>
            <name>IN_DONE_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear the i2s_in_suc_eof_int interrupt</description>
            <name>IN_SUC_EOF_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>don't use</description>
            <name>IN_ERR_EOF_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear the i2s_out_done_int interrupt</description>
            <name>OUT_DONE_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear the i2s_out_eof_int interrupt</description>
            <name>OUT_EOF_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear the i2s_in_dscr_err_int interrupt</description>
            <name>IN_DSCR_ERR_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear the i2s_out_dscr_err_int interrupt</description>
            <name>OUT_DSCR_ERR_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear the i2s_in_dscr_empty_int interrupt</description>
            <name>IN_DSCR_EMPTY_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear the i2s_out_total_eof_int interrupt</description>
            <name>OUT_TOTAL_EOF_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear the  i2s_v_sync_int interrupt</description>
            <name>V_SYNC_INT_CLR</name>
          </field>
        </fields>
        <name>INT_CLR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1C</addressOffset>
        <description>I2S timing register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Number of delay cycles for BCK into the transmitter</description>
            <name>TX_BCK_IN_DELAY</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Number of delay cycles for WS into the transmitter</description>
            <name>TX_WS_IN_DELAY</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Number of delay cycles for BCK into the receiver</description>
            <name>RX_BCK_IN_DELAY</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Number of delay cycles for WS into the receiver</description>
            <name>RX_WS_IN_DELAY</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Number of delay cycles for SD into the receiver</description>
            <name>RX_SD_IN_DELAY</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Number of delay cycles for BCK out of the transmitter</description>
            <name>TX_BCK_OUT_DELAY</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Number of delay cycles for WS out of the transmitter</description>
            <name>TX_WS_OUT_DELAY</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Number of delay cycles for SD out of the transmitter</description>
            <name>TX_SD_OUT_DELAY</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Number of delay cycles for WS out of the receiver</description>
            <name>RX_WS_OUT_DELAY</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Number of delay cycles for BCK out of the receiver</description>
            <name>RX_BCK_OUT_DELAY</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to synchronize signals with the double sync method into the transmitter</description>
            <name>TX_DSYNC_SW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to synchronize signals with the double sync method into the receiver</description>
            <name>RX_DSYNC_SW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Number of delay cycles for data valid flag.</description>
            <name>DATA_ENABLE_DELAY</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to invert BCK signal input to the slave transmitter</description>
            <name>TX_BCK_IN_INV</name>
          </field>
        </fields>
        <name>TIMING</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x20</addressOffset>
        <description>I2S FIFO configure register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Threshold of data length in receiver FIFO</description>
            <name>RX_DATA_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Threshold of data length in transmitter FIFO</description>
            <name>TX_DATA_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable I2S DMA mode</description>
            <name>DSCR_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Transmitter FIFO mode configuration bits</description>
            <name>TX_FIFO_MOD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Receiver FIFO mode configuration bits</description>
            <name>RX_FIFO_MOD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit should always be set to 1</description>
            <name>TX_FIFO_MOD_FORCE_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit should always be set to 1</description>
            <name>RX_FIFO_MOD_FORCE_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>force write back rx data to memory</description>
            <name>RX_FIFO_SYNC</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Only useful in rx 24bit mode. 1: the high 24 bits are effective in i2s fifo   0: the low 24 bits are effective in i2s fifo</description>
            <name>RX_24MSB_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Only useful in tx 24bit mode. 1: the high 24 bits are effective in i2s fifo   0: the low 24 bits are effective in i2s fifo</description>
            <name>TX_24MSB_EN</name>
          </field>
        </fields>
        <name>FIFO_CONF</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x1820</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x24</addressOffset>
        <description>I2S DMA RX EOF data length</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>the length of data to be received. It will trigger i2s_in_suc_eof_int.</description>
            <name>RX_EOF_NUM</name>
          </field>
        </fields>
        <name>RXEOF_NUM</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x40</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x28</addressOffset>
        <description>Constant single channel data</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>the right channel or left channel put out constant value stored in this register according to tx_chan_mod and reg_tx_msb_right</description>
            <name>SIGLE_DATA</name>
          </field>
        </fields>
        <name>CONF_SIGLE_DATA</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2C</addressOffset>
        <description>I2S channel configure register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>I2S transmitter channel mode configuration bits.</description>
            <name>TX_CHAN_MOD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>I2S receiver channel mode configuration bits.</description>
            <name>RX_CHAN_MOD</name>
          </field>
        </fields>
        <name>CONF_CHAN</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x30</addressOffset>
        <description>I2S DMA TX configure register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x14</bitWidth>
            <description>The address of first outlink descriptor</description>
            <name>OUTLINK_ADDR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to stop outlink descriptor</description>
            <name>OUTLINK_STOP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to start outlink descriptor</description>
            <name>OUTLINK_START</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to restart outlink descriptor</description>
            <name>OUTLINK_RESTART</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <name>OUTLINK_PARK</name>
          </field>
        </fields>
        <name>OUT_LINK</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x34</addressOffset>
        <description>I2S DMA RX configure register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x14</bitWidth>
            <description>The address of first inlink descriptor</description>
            <name>INLINK_ADDR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to stop inlink descriptor</description>
            <name>INLINK_STOP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to start inlink descriptor</description>
            <name>INLINK_START</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to restart inlink descriptor</description>
            <name>INLINK_RESTART</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <name>INLINK_PARK</name>
          </field>
        </fields>
        <name>IN_LINK</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x38</addressOffset>
        <description>The address of outlink descriptor that produces EOF</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The address of outlink descriptor that produces EOF</description>
            <name>OUT_EOF_DES_ADDR</name>
          </field>
        </fields>
        <name>OUT_EOF_DES_ADDR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3C</addressOffset>
        <description>The address of inlink descriptor that produces EOF</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The address of inlink descriptor that produces EOF</description>
            <name>IN_SUC_EOF_DES_ADDR</name>
          </field>
        </fields>
        <name>IN_EOF_DES_ADDR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x40</addressOffset>
        <description>The address of buffer relative to the outlink descriptor that produces EOF</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The address of buffer relative to the outlink descriptor that produces EOF</description>
            <name>OUT_EOF_BFR_DES_ADDR</name>
          </field>
        </fields>
        <name>OUT_EOF_BFR_DES_ADDR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x48</addressOffset>
        <description>The address of current inlink descriptor</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The address of current inlink descriptor</description>
            <name>INLINK_DSCR</name>
          </field>
        </fields>
        <name>INLINK_DSCR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4C</addressOffset>
        <description>The address of next inlink descriptor</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The address of next inlink descriptor</description>
            <name>INLINK_DSCR_BF0</name>
          </field>
        </fields>
        <name>INLINK_DSCR_BF0</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x50</addressOffset>
        <description>The address of next inlink data buffer</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The address of next inlink data buffer</description>
            <name>INLINK_DSCR_BF1</name>
          </field>
        </fields>
        <name>INLINK_DSCR_BF1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x54</addressOffset>
        <description>The address of current outlink descriptor</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The address of current outlink descriptor</description>
            <name>OUTLINK_DSCR</name>
          </field>
        </fields>
        <name>OUTLINK_DSCR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x58</addressOffset>
        <description>The address of next outlink descriptor</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The address of next outlink descriptor</description>
            <name>OUTLINK_DSCR_BF0</name>
          </field>
        </fields>
        <name>OUTLINK_DSCR_BF0</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5C</addressOffset>
        <description>The address of next outlink data buffer</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The address of next outlink data buffer</description>
            <name>OUTLINK_DSCR_BF1</name>
          </field>
        </fields>
        <name>OUTLINK_DSCR_BF1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x60</addressOffset>
        <description>I2S DMA configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to reset in dma FSM</description>
            <name>IN_RST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to reset out dma FSM</description>
            <name>OUT_RST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to reset ahb interface cmdFIFO of DMA</description>
            <name>AHBM_FIFO_RST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to reset ahb interface of DMA</description>
            <name>AHBM_RST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to loop test inlink</description>
            <name>OUT_LOOP_TEST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to loop test outlink</description>
            <name>IN_LOOP_TEST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable outlink-written-back automatically when out buffer is transmitted done.</description>
            <name>OUT_AUTO_WRBACK</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>don't use</description>
            <name>OUT_NO_RESTART_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>DMA out EOF flag generation mode . 1: when dma has popped all data from the FIFO  0:when ahb has pushed all data to the FIFO</description>
            <name>OUT_EOF_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>DMA outlink descriptor transfer mode configuration bit. 1:  to prepare outlink descriptor with burst mode    0: to prepare outlink descriptor with byte mode</description>
            <name>OUTDSCR_BURST_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>DMA inlink descriptor transfer mode configuration bit. 1:  to prepare inlink descriptor with burst mode    0: to prepare inlink descriptor with byte mode</description>
            <name>INDSCR_BURST_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmitter data transfer mode configuration bit. 1:  to prepare out data with burst mode      0: to prepare out data with byte mode</description>
            <name>OUT_DATA_BURST_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable check owner bit by hardware</description>
            <name>CHECK_OWNER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>don't use</description>
            <name>MEM_TRANS_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>DMA access external memory block size. 0: 16 bytes      1: 32 bytes    2:64 bytes      3:reserved</description>
            <name>EXT_MEM_BK_SIZE</name>
          </field>
        </fields>
        <name>LC_CONF</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x100</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x64</addressOffset>
        <description>APB out FIFO mode register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>APB out FIFO write data.</description>
            <name>OUTFIFO_WDATA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>APB out FIFO  push.</description>
            <name>OUTFIFO_PUSH</name>
          </field>
        </fields>
        <name>OUTFIFO_PUSH</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x68</addressOffset>
        <description>APB in FIFO mode register</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xC</bitWidth>
            <description>APB in FIFO  read data.</description>
            <name>INFIFO_RDATA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>APB in FIFO  pop.</description>
            <name>INFIFO_POP</name>
          </field>
        </fields>
        <name>INFIFO_POP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x6C</addressOffset>
        <description>I2S DMA TX status</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x12</bitWidth>
            <description>I2S DMA out descriptor address.</description>
            <name>OUTLINK_DSCR_ADDR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>I2S DMA out descriptor state.</description>
            <name>OUT_DSCR_STATE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>I2S DMA out data state.</description>
            <name>OUT_STATE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x7</bitWidth>
            <description>The remains of I2S DMA outfifo data.</description>
            <name>OUTFIFO_CNT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>I2S DMA outfifo is full.</description>
            <name>OUT_FULL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>I2S DMA outfifo is empty.</description>
            <name>OUT_EMPTY</name>
          </field>
        </fields>
        <name>LC_STATE0</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x70</addressOffset>
        <description>I2S DMA RX status</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x12</bitWidth>
            <description>I2S DMA in descriptor address.</description>
            <name>INLINK_DSCR_ADDR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>I2S DMA in descriptor state.</description>
            <name>IN_DSCR_STATE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>I2S DMA in data state.</description>
            <name>IN_STATE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x7</bitWidth>
            <description>The remains of I2S DMA infifo data.</description>
            <name>INFIFO_CNT_DEBUG</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>I2S DMA infifo is full.</description>
            <name>IN_FULL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>I2S DMA infifo is empty.</description>
            <name>IN_EMPTY</name>
          </field>
        </fields>
        <name>LC_STATE1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x74</addressOffset>
        <description>I2S Hung configure register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>the i2s_tx_hung_int interrupt or the i2s_rx_hung_int interrupt will be triggered when fifo hung counter is equal to this value</description>
            <name>LC_FIFO_TIMEOUT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>The bits are used to scale tick counter threshold. The tick counter is reset when counter value &gt;= 88000/2^i2s_lc_fifo_timeout_shift</description>
            <name>LC_FIFO_TIMEOUT_SHIFT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The enable bit for FIFO timeout</description>
            <name>LC_FIFO_TIMEOUT_ENA</name>
          </field>
        </fields>
        <name>LC_HUNG_CONF</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x810</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA0</addressOffset>
        <description>I2S configure1 register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Compress/Decompress module configuration bits. 0: decompress transmitted data  1:compress transmitted data</description>
            <name>TX_PCM_CONF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to bypass  Compress/Decompress module for transmitted data.</description>
            <name>TX_PCM_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Compress/Decompress module configuration bits. 0: decompress received data  1:compress received data</description>
            <name>RX_PCM_CONF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to bypass Compress/Decompress module for received data.</description>
            <name>RX_PCM_BYPASS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to stop disable output BCK signal and WS signal when tx FIFO is emtpy</description>
            <name>TX_STOP_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>don't use</description>
            <name>TX_ZEROS_RM_EN</name>
          </field>
        </fields>
        <name>CONF1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x89</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA4</addressOffset>
        <description>I2S power down configure register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Force FIFO power-down</description>
            <name>FIFO_FORCE_PD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Force FIFO power-up</description>
            <name>FIFO_FORCE_PU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Force I2S memory power-down</description>
            <name>PLC_MEM_FORCE_PD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Force I2S memory power-up</description>
            <name>PLC_MEM_FORCE_PU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Force DMA FIFO power-down</description>
            <name>DMA_RAM_FORCE_PD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Force DMA FIFO power-up</description>
            <name>DMA_RAM_FORCE_PU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to force on the DMA ram clock.</description>
            <name>DMA_RAM_CLK_FO</name>
          </field>
        </fields>
        <name>PD_CONF</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x2A</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA8</addressOffset>
        <description>I2S configure2 register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable camera mode</description>
            <name>CAMERA_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>LCD WR double for one datum.</description>
            <name>LCD_TX_WRX2_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to duplicate data pairs (Frame Form 2) in LCD mode.</description>
            <name>LCD_TX_SDX2_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>for debug camera mode enable</description>
            <name>DATA_ENABLE_TEST_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>for debug camera mode enable</description>
            <name>DATA_ENABLE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable LCD mode</description>
            <name>LCD_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable the function that ADC mode is triggered by external signal.</description>
            <name>EXT_ADC_START_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable camera internal valid</description>
            <name>INTER_VALID_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to reset cam_sync_fifo</description>
            <name>CAM_SYNC_FIFO_RESET</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to loopback cam_clk from i2s_rx</description>
            <name>CAM_CLK_LOOPBACK</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable I2S VSYNC filter function.</description>
            <name>VSYNC_FILTER_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Configure the I2S VSYNC filter threshold value</description>
            <name>VSYNC_FILTER_THRES</name>
          </field>
        </fields>
        <name>CONF2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAC</addressOffset>
        <description>I2S module clock configure register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>Integral I2S clock divider value</description>
            <name>CLKM_DIV_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Fractional clock divider numerator value</description>
            <name>CLKM_DIV_B</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Fractional clock divider denominator value</description>
            <name>CLKM_DIV_A</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable clk gate</description>
            <name>CLK_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Set this bit to select I2S module clock source. 0: No clock. 1: APLL_CLK. 2: PLL_160M_CLK. 3: No clock.</description>
            <name>CLK_SEL</name>
          </field>
        </fields>
        <name>CLKM_CONF</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x4</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB0</addressOffset>
        <description>I2S sample rate register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Bit clock configuration bits in transmitter mode.</description>
            <name>TX_BCK_DIV_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Bit clock configuration bits in receiver mode.</description>
            <name>RX_BCK_DIV_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Set the bits to configure bit length of I2S transmitter channel.</description>
            <name>TX_BITS_MOD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Set the bits to configure bit length of I2S receiver channel.</description>
            <name>RX_BITS_MOD</name>
          </field>
        </fields>
        <name>SAMPLE_RATE_CONF</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x410186</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBC</addressOffset>
        <description>I2S TX status register</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: I2S TX is in idle state. 0: I2S TX is at work.</description>
            <name>TX_IDLE</name>
          </field>
        </fields>
        <name>STATE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x1</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xFC</addressOffset>
        <description>Version control register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Version control register</description>
            <name>DATE</name>
          </field>
        </fields>
        <name>DATE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x19052500</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <resetMask>0xFFFFFFFF</resetMask>
    <resetValue>0x0</resetValue>
  </peripheral>
</peripherals>
<peripherals>
  <peripheral>
    <addressBlock>
      <offset>0x0</offset>
      <size>0x190</size>
      <usage>registers</usage>
    </addressBlock>
    <baseAddress>0x3F4C2000</baseAddress>
    <description>Interrupt</description>
    <groupName>INTERRUPT</groupName>
    <interrupts></interrupts>
    <name>INTERRUPT</name>
    <registers>
      <register>
        <addressOffset>0x0</addressOffset>
        <description>MAC_INTR interrupt configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register is used to map MAC_INTR interrupt signal to one of the CPU interrupts.</description>
            <name>PRO_MAC_INTR_MAP</name>
          </field>
        </fields>
        <name>PRO_MAC_INTR_MAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4</addressOffset>
        <description>MAC_NMI interrupt configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register is used to map MAC_NMI interrupt signal to one of the CPU interrupts.</description>
            <name>PRO_MAC_NMI_MAP</name>
          </field>
        </fields>
        <name>PRO_MAC_NMI_MAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8</addressOffset>
        <description>PWR_INTR interrupt configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register is used to map PWR_INTR interrupt signal to one of the CPU interrupts.</description>
            <name>PRO_PWR_INTR_MAP</name>
          </field>
        </fields>
        <name>PRO_PWR_INTR_MAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xC</addressOffset>
        <description>BB_INT interrupt configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register is used to map BB_INT interrupt signal to one of the CPU interrupts.</description>
            <name>PRO_BB_INT_MAP</name>
          </field>
        </fields>
        <name>PRO_BB_INT_MAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x10</addressOffset>
        <description>BT_MAC_INT interrupt configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register is used to map BT_MAC_INT interrupt signal to one of the CPU interrupts.</description>
            <name>PRO_BT_MAC_INT_MAP</name>
          </field>
        </fields>
        <name>PRO_BT_MAC_INT_MAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x14</addressOffset>
        <description>BT_BB_INT interrupt configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register is used to map BT_BB_INT interrupt signal to one of the CPU interrupts.</description>
            <name>PRO_BT_BB_INT_MAP</name>
          </field>
        </fields>
        <name>PRO_BT_BB_INT_MAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x18</addressOffset>
        <description>BT_BB_NMI interrupt configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register is used to map BT_BB_NMI interrupt signal to one of the CPU interrupts.</description>
            <name>PRO_BT_BB_NMI_MAP</name>
          </field>
        </fields>
        <name>PRO_BT_BB_NMI_MAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1C</addressOffset>
        <description>RWBT_IRQ interrupt configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register is used to map RWBT_IRQ interrupt signal to one of the CPU interrupts.</description>
            <name>PRO_RWBT_IRQ_MAP</name>
          </field>
        </fields>
        <name>PRO_RWBT_IRQ_MAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x20</addressOffset>
        <description>RWBLE_IRQ interrupt configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register is used to map RWBLE_IRQ interrupt signal to one of the CPU interrupts.</description>
            <name>PRO_RWBLE_IRQ_MAP</name>
          </field>
        </fields>
        <name>PRO_RWBLE_IRQ_MAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x24</addressOffset>
        <description>RWBT_NMI interrupt configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register is used to map RWBT_NMI interrupt signal to one of the CPU interrupts.</description>
            <name>PRO_RWBT_NMI_MAP</name>
          </field>
        </fields>
        <name>PRO_RWBT_NMI_MAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x28</addressOffset>
        <description>RWBLE_NMI interrupt configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register is used to map RWBLE_NMI interrupt signal to one of the CPU interrupts.</description>
            <name>PRO_RWBLE_NMI_MAP</name>
          </field>
        </fields>
        <name>PRO_RWBLE_NMI_MAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2C</addressOffset>
        <description>SLC0_INTR interrupt configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register is used to map SLC0_INTR interrupt signal to one of the CPU interrupts.</description>
            <name>PRO_SLC0_INTR_MAP</name>
          </field>
        </fields>
        <name>PRO_SLC0_INTR_MAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x30</addressOffset>
        <description>SLC1_INTR interrupt configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register is used to map SLC1_INTR interrupt signal to one of the CPU interrupts.</description>
            <name>PRO_SLC1_INTR_MAP</name>
          </field>
        </fields>
        <name>PRO_SLC1_INTR_MAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x34</addressOffset>
        <description>UHCI0_INTR interrupt configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register is used to map UHCI0_INTR interrupt signal to one of the CPU interrupts.</description>
            <name>PRO_UHCI0_INTR_MAP</name>
          </field>
        </fields>
        <name>PRO_UHCI0_INTR_MAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x38</addressOffset>
        <description>UHCI1_INTR interrupt configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register is used to map UHCI1_INTR interrupt signal to one of the CPU interrupts.</description>
            <name>PRO_UHCI1_INTR_MAP</name>
          </field>
        </fields>
        <name>PRO_UHCI1_INTR_MAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3C</addressOffset>
        <description>TG_T0_LEVEL_INT interrupt configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register is used to map TG_T0_LEVEL_INT interrupt signal to one of the CPU interrupts.</description>
            <name>PRO_TG_T0_LEVEL_INT_MAP</name>
          </field>
        </fields>
        <name>PRO_TG_T0_LEVEL_INT_MAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x40</addressOffset>
        <description>TG_T1_LEVEL_INT interrupt configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register is used to map TG_T1_LEVEL_INT interrupt signal to one of the CPU interrupts.</description>
            <name>PRO_TG_T1_LEVEL_INT_MAP</name>
          </field>
        </fields>
        <name>PRO_TG_T1_LEVEL_INT_MAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x44</addressOffset>
        <description>TG_WDT_LEVEL_INT interrupt configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register is used to map TG_WDT_LEVEL_INT interrupt signal to one of the CPU interrupts.</description>
            <name>PRO_TG_WDT_LEVEL_INT_MAP</name>
          </field>
        </fields>
        <name>PRO_TG_WDT_LEVEL_INT_MAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x48</addressOffset>
        <description>TG_LACT_LEVEL_INT interrupt configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register is used to map TG_LACT_LEVEL_INT interrupt signal to one of the CPU interrupts.</description>
            <name>PRO_TG_LACT_LEVEL_INT_MAP</name>
          </field>
        </fields>
        <name>PRO_TG_LACT_LEVEL_INT_MAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4C</addressOffset>
        <description>TG1_T0_LEVEL_INT interrupt configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register is used to map TG1_T0_LEVEL_INT interrupt signal to one of the CPU interrupts.</description>
            <name>PRO_TG1_T0_LEVEL_INT_MAP</name>
          </field>
        </fields>
        <name>PRO_TG1_T0_LEVEL_INT_MAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x50</addressOffset>
        <description>TG1_T1_LEVEL_INT interrupt configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register is used to map TG1_T1_LEVEL_INT interrupt signal to one of the CPU interrupts.</description>
            <name>PRO_TG1_T1_LEVEL_INT_MAP</name>
          </field>
        </fields>
        <name>PRO_TG1_T1_LEVEL_INT_MAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x54</addressOffset>
        <description>TG1_WDT_LEVEL_INT interrupt configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register is used to map TG1_WDT_LEVEL_INT interrupt signal to one of the CPU interrupts.</description>
            <name>PRO_TG1_WDT_LEVEL_INT_MAP</name>
          </field>
        </fields>
        <name>PRO_TG1_WDT_LEVEL_INT_MAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x58</addressOffset>
        <description>TG1_LACT_LEVEL_INT interrupt configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register is used to map TG1_LACT_LEVEL_INT interrupt signal to one of the CPU interrupts.</description>
            <name>PRO_TG1_LACT_LEVEL_INT_MAP</name>
          </field>
        </fields>
        <name>PRO_TG1_LACT_LEVEL_INT_MAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5C</addressOffset>
        <description>GPIO_INTERRUPT_PRO interrupt configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register is used to map GPIO_INTERRUPT_PRO interrupt signal to one of the CPU interrupts.</description>
            <name>PRO_GPIO_INTERRUPT_PRO_MAP</name>
          </field>
        </fields>
        <name>PRO_GPIO_INTERRUPT_PRO_MAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x60</addressOffset>
        <description>GPIO_INTERRUPT_PRO_NMI interrupt configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register is used to map GPIO_INTERRUPT_PRO_NMI interrupt signal to one of the CPU interrupts.</description>
            <name>PRO_GPIO_INTERRUPT_PRO_NMI_MAP</name>
          </field>
        </fields>
        <name>PRO_GPIO_INTERRUPT_PRO_NMI_MAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x64</addressOffset>
        <description>GPIO_INTERRUPT_APP interrupt configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register is used to map GPIO_INTERRUPT_APP interrupt signal to one of the CPU interrupts.</description>
            <name>PRO_GPIO_INTERRUPT_APP_MAP</name>
          </field>
        </fields>
        <name>PRO_GPIO_INTERRUPT_APP_MAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x68</addressOffset>
        <description>GPIO_INTERRUPT_APP_NMI interrupt configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register is used to map GPIO_INTERRUPT_APP_NMI interrupt signal to one of the CPU interrupts.</description>
            <name>PRO_GPIO_INTERRUPT_APP_NMI_MAP</name>
          </field>
        </fields>
        <name>PRO_GPIO_INTERRUPT_APP_NMI_MAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x6C</addressOffset>
        <description>DEDICATED_GPIO_IN_INTR interrupt configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register is used to map DEDICATED_GPIO_IN_INTR interrupt signal to one of the CPU interrupts.</description>
            <name>PRO_DEDICATED_GPIO_IN_INTR_MAP</name>
          </field>
        </fields>
        <name>PRO_DEDICATED_GPIO_IN_INTR_MAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x70</addressOffset>
        <description>CPU_INTR_FROM_CPU_0 interrupt configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register is used to map CPU_INTR_FROM_CPU_0 interrupt signal to one of the CPU interrupts.</description>
            <name>PRO_CPU_INTR_FROM_CPU_0_MAP</name>
          </field>
        </fields>
        <name>PRO_CPU_INTR_FROM_CPU_0_MAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x74</addressOffset>
        <description>CPU_INTR_FROM_CPU_1 interrupt configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register is used to map CPU_INTR_FROM_CPU_1 interrupt signal to one of the CPU interrupts.</description>
            <name>PRO_CPU_INTR_FROM_CPU_1_MAP</name>
          </field>
        </fields>
        <name>PRO_CPU_INTR_FROM_CPU_1_MAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x78</addressOffset>
        <description>CPU_INTR_FROM_CPU_2 interrupt configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register is used to map CPU_INTR_FROM_CPU_2 interrupt signal to one of the CPU interrupts.</description>
            <name>PRO_CPU_INTR_FROM_CPU_2_MAP</name>
          </field>
        </fields>
        <name>PRO_CPU_INTR_FROM_CPU_2_MAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x7C</addressOffset>
        <description>CPU_INTR_FROM_CPU_3 interrupt configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register is used to map CPU_INTR_FROM_CPU_3 interrupt signal to one of the CPU interrupts.</description>
            <name>PRO_CPU_INTR_FROM_CPU_3_MAP</name>
          </field>
        </fields>
        <name>PRO_CPU_INTR_FROM_CPU_3_MAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x80</addressOffset>
        <description>SPI_INTR_1 interrupt configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register is used to map SPI_INTR_1 interrupt signal to one of the CPU interrupts.</description>
            <name>PRO_SPI_INTR_1_MAP</name>
          </field>
        </fields>
        <name>PRO_SPI_INTR_1_MAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x84</addressOffset>
        <description>SPI_INTR_2 interrupt configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register is used to map SPI_INTR_2 interrupt signal to one of the CPU interrupts.</description>
            <name>PRO_SPI_INTR_2_MAP</name>
          </field>
        </fields>
        <name>PRO_SPI_INTR_2_MAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x88</addressOffset>
        <description>SPI_INTR_3 interrupt configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register is used to map SPI_INTR_3 interrupt signal to one of the CPU interrupts.</description>
            <name>PRO_SPI_INTR_3_MAP</name>
          </field>
        </fields>
        <name>PRO_SPI_INTR_3_MAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8C</addressOffset>
        <description>I2S0_INT interrupt configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register is used to map I2S0_INT interrupt signal to one of the CPU interrupts.</description>
            <name>PRO_I2S0_INT_MAP</name>
          </field>
        </fields>
        <name>PRO_I2S0_INT_MAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x90</addressOffset>
        <description>I2S1_INT interrupt configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register is used to map I2S1_INT interrupt signal to one of the CPU interrupts.</description>
            <name>PRO_I2S1_INT_MAP</name>
          </field>
        </fields>
        <name>PRO_I2S1_INT_MAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x94</addressOffset>
        <description>UART_INT interrupt configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register is used to map UART_INT interrupt signal to one of the CPU interrupts.</description>
            <name>PRO_UART_INTR_MAP</name>
          </field>
        </fields>
        <name>PRO_UART_INTR_MAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x98</addressOffset>
        <description>UART1_INT interrupt configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register is used to map UART1_INT interrupt signal to one of the CPU interrupts.</description>
            <name>PRO_UART1_INTR_MAP</name>
          </field>
        </fields>
        <name>PRO_UART1_INTR_MAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9C</addressOffset>
        <description>UART2_INT interrupt configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register is used to map UART2_INT interrupt signal to one of the CPU interrupts.</description>
            <name>PRO_UART2_INTR_MAP</name>
          </field>
        </fields>
        <name>PRO_UART2_INTR_MAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA0</addressOffset>
        <description>SDIO_HOST_INTERRUPT configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register is used to map SDIO_HOST_INTERRUPT signal to one of the CPU interrupts.</description>
            <name>PRO_SDIO_HOST_INTERRUPT_MAP</name>
          </field>
        </fields>
        <name>PRO_SDIO_HOST_INTERRUPT_MAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA4</addressOffset>
        <description>PWM0_INTR interrupt configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register is used to map PWM0_INTR interrupt signal to one of the CPU interrupts.</description>
            <name>PRO_PWM0_INTR_MAP</name>
          </field>
        </fields>
        <name>PRO_PWM0_INTR_MAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA8</addressOffset>
        <description>PWM1_INTR interrupt configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register is used to map PWM1_INTR interrupt signal to one of the CPU interrupts.</description>
            <name>PRO_PWM1_INTR_MAP</name>
          </field>
        </fields>
        <name>PRO_PWM1_INTR_MAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAC</addressOffset>
        <description>PWM2_INTR interrupt configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register is used to map PWM2_INTR interrupt signal to one of the CPU interrupts.</description>
            <name>PRO_PWM2_INTR_MAP</name>
          </field>
        </fields>
        <name>PRO_PWM2_INTR_MAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB0</addressOffset>
        <description>PWM3_INTR interrupt configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register is used to map PWM3_INTR interrupt signal to one of the CPU interrupts.</description>
            <name>PRO_PWM3_INTR_MAP</name>
          </field>
        </fields>
        <name>PRO_PWM3_INTR_MAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB4</addressOffset>
        <description>LEDC_INTR interrupt configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register is used to map LEDC_INTR interrupt signal to one of the CPU interrupts.</description>
            <name>PRO_LEDC_INT_MAP</name>
          </field>
        </fields>
        <name>PRO_LEDC_INT_MAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB8</addressOffset>
        <description>EFUSE_INT interrupt configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register is used to map EFUSE_INT interrupt signal to one of the CPU interrupts.</description>
            <name>PRO_EFUSE_INT_MAP</name>
          </field>
        </fields>
        <name>PRO_EFUSE_INT_MAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBC</addressOffset>
        <description>CAN_INT interrupt configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register is used to map CAN_INT interrupt signal to one of the CPU interrupts.</description>
            <name>PRO_CAN_INT_MAP</name>
          </field>
        </fields>
        <name>PRO_CAN_INT_MAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xC0</addressOffset>
        <description>USB_INT interrupt configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register is used to map USB_INT interrupt signal to one of the CPU interrupts.</description>
            <name>PRO_USB_INTR_MAP</name>
          </field>
        </fields>
        <name>PRO_USB_INTR_MAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xC4</addressOffset>
        <description>RTC_CORE_INTR interrupt configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register is used to map RTC_CORE_INTR interrupt signal to one of the CPU interrupts.</description>
            <name>PRO_RTC_CORE_INTR_MAP</name>
          </field>
        </fields>
        <name>PRO_RTC_CORE_INTR_MAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xC8</addressOffset>
        <description>RMT_INTR interrupt configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register is used to map RMT_INTR interrupt signal to one of the CPU interrupts.</description>
            <name>PRO_RMT_INTR_MAP</name>
          </field>
        </fields>
        <name>PRO_RMT_INTR_MAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xCC</addressOffset>
        <description>PCNT_INTR interrupt configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register is used to map PCNT_INTR interrupt signal to one of the CPU interrupts.</description>
            <name>PRO_PCNT_INTR_MAP</name>
          </field>
        </fields>
        <name>PRO_PCNT_INTR_MAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xD0</addressOffset>
        <description>I2C_EXT0_INTR interrupt configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register is used to map I2C_EXT0_INTR interrupt signal to one of the CPU interrupts.</description>
            <name>PRO_I2C_EXT0_INTR_MAP</name>
          </field>
        </fields>
        <name>PRO_I2C_EXT0_INTR_MAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xD4</addressOffset>
        <description>I2C_EXT1_INTR interrupt configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register is used to map I2C_EXT1_INTR interrupt signal to one of the CPU interrupts.</description>
            <name>PRO_I2C_EXT1_INTR_MAP</name>
          </field>
        </fields>
        <name>PRO_I2C_EXT1_INTR_MAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xD8</addressOffset>
        <description>RSA_INTR interrupt configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register is used to map RSA_INTR interrupt signal to one of the CPU interrupts.</description>
            <name>PRO_RSA_INTR_MAP</name>
          </field>
        </fields>
        <name>PRO_RSA_INTR_MAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xDC</addressOffset>
        <description>SHA_INTR interrupt configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register is used to map SHA_INTR interrupt signal to one of the CPU interrupts.</description>
            <name>PRO_SHA_INTR_MAP</name>
          </field>
        </fields>
        <name>PRO_SHA_INTR_MAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xE0</addressOffset>
        <description>AES_INTR interrupt configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register is used to map AES_INTR interrupt signal to one of the CPU interrupts.</description>
            <name>PRO_AES_INTR_MAP</name>
          </field>
        </fields>
        <name>PRO_AES_INTR_MAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xE4</addressOffset>
        <description>SPI2_DMA_INT interrupt configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register is used to map AES_INTR interrupt signal to one of the CPU interrupts.</description>
            <name>PRO_SPI2_DMA_INT_MAP</name>
          </field>
        </fields>
        <name>PRO_SPI2_DMA_INT_MAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xE8</addressOffset>
        <description>SPI3_DMA_INT interrupt configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register is used to map SPI3_DMA_INT dma interrupt signal to one of the CPU interrupts.</description>
            <name>PRO_SPI3_DMA_INT_MAP</name>
          </field>
        </fields>
        <name>PRO_SPI3_DMA_INT_MAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xEC</addressOffset>
        <description>WDG_INT interrupt configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register is used to map WDG_INT interrupt signal to one of the CPU interrupts.</description>
            <name>PRO_WDG_INT_MAP</name>
          </field>
        </fields>
        <name>PRO_WDG_INT_MAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xF0</addressOffset>
        <description>TIMER_INT1 interrupt configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register is used to map TIMER_INT1 interrupt signal to one of the CPU interrupts.</description>
            <name>PRO_TIMER_INT1_MAP</name>
          </field>
        </fields>
        <name>PRO_TIMER_INT1_MAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xF4</addressOffset>
        <description>TIMER_INT2 interrupt configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register is used to map TIMER_INT2 interrupt signal to one of the CPU interrupts.</description>
            <name>PRO_TIMER_INT2_MAP</name>
          </field>
        </fields>
        <name>PRO_TIMER_INT2_MAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xF8</addressOffset>
        <description>TG_T0_EDGE_INT interrupt configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register is used to map TG_T0_EDGE_INT interrupt signal to one of the CPU interrupts.</description>
            <name>PRO_TG_T0_EDGE_INT_MAP</name>
          </field>
        </fields>
        <name>PRO_TG_T0_EDGE_INT_MAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xFC</addressOffset>
        <description>TG_T1_EDGE_INT interrupt configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register is used to map TG_T1_EDGE_INT interrupt signal to one of the CPU interrupts.</description>
            <name>PRO_TG_T1_EDGE_INT_MAP</name>
          </field>
        </fields>
        <name>PRO_TG_T1_EDGE_INT_MAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x100</addressOffset>
        <description>TG_WDT_EDGE_INT interrupt configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register is used to map TG_WDT_EDGE_INT interrupt signal to one of the CPU interrupts.</description>
            <name>PRO_TG_WDT_EDGE_INT_MAP</name>
          </field>
        </fields>
        <name>PRO_TG_WDT_EDGE_INT_MAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x104</addressOffset>
        <description>TG_LACT_EDGE_INT interrupt configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register is used to map TG_LACT_EDGE_INT interrupt signal to one of the CPU interrupts.</description>
            <name>PRO_TG_LACT_EDGE_INT_MAP</name>
          </field>
        </fields>
        <name>PRO_TG_LACT_EDGE_INT_MAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x108</addressOffset>
        <description>TG1_T0_EDGE_INT interrupt configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register is used to map TG1_T0_EDGE_INT interrupt signal to one of the CPU interrupts.</description>
            <name>PRO_TG1_T0_EDGE_INT_MAP</name>
          </field>
        </fields>
        <name>PRO_TG1_T0_EDGE_INT_MAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x10C</addressOffset>
        <description>TG1_T1_EDGE_INT interrupt configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register is used to map TG1_T1_EDGE_INT interrupt signal to one of the CPU interrupts.</description>
            <name>PRO_TG1_T1_EDGE_INT_MAP</name>
          </field>
        </fields>
        <name>PRO_TG1_T1_EDGE_INT_MAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x110</addressOffset>
        <description>TG1_WDT_EDGE_INT interrupt configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register is used to map TG1_WDT_EDGE_INT interrupt signal to one of the CPU interrupts.</description>
            <name>PRO_TG1_WDT_EDGE_INT_MAP</name>
          </field>
        </fields>
        <name>PRO_TG1_WDT_EDGE_INT_MAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x114</addressOffset>
        <description>TG1_LACT_EDGE_INT interrupt configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register is used to map TG1_LACT_EDGE_INT interrupt signal to one of the CPU interrupts.</description>
            <name>PRO_TG1_LACT_EDGE_INT_MAP</name>
          </field>
        </fields>
        <name>PRO_TG1_LACT_EDGE_INT_MAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x118</addressOffset>
        <description>CACHE_IA_INT interrupt configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register is used to map CACHE_IA_INT interrupt signal to one of the CPU interrupts.</description>
            <name>PRO_CACHE_IA_INT_MAP</name>
          </field>
        </fields>
        <name>PRO_CACHE_IA_INT_MAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x11C</addressOffset>
        <description>SYSTIMER_TARGET0_INT interrupt configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register is used to map SYSTIMER_TARGET0_INT interrupt signal to one of the CPU interrupts.</description>
            <name>PRO_SYSTIMER_TARGET0_INT_MAP</name>
          </field>
        </fields>
        <name>PRO_SYSTIMER_TARGET0_INT_MAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x120</addressOffset>
        <description>SYSTIMER_TARGET1_INT interrupt configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register is used to map SYSTIMER_TARGET1_INT interrupt signal to one of the CPU interrupts.</description>
            <name>PRO_SYSTIMER_TARGET1_INT_MAP</name>
          </field>
        </fields>
        <name>PRO_SYSTIMER_TARGET1_INT_MAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x124</addressOffset>
        <description>SYSTIMER_TARGET2_INT interrupt configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register is used to map SYSTIMER_TARGET2_INT interrupt signal to one of the CPU interrupts.</description>
            <name>PRO_SYSTIMER_TARGET2_INT_MAP</name>
          </field>
        </fields>
        <name>PRO_SYSTIMER_TARGET2_INT_MAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x128</addressOffset>
        <description>ASSIST_DEBUG_INTR interrupt configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register is used to map ASSIST_DEBUG_INTR interrupt signal to one of the CPU interrupts.</description>
            <name>PRO_ASSIST_DEBUG_INTR_MAP</name>
          </field>
        </fields>
        <name>PRO_ASSIST_DEBUG_INTR_MAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x12C</addressOffset>
        <description>PMS_PRO_IRAM0_ILG interrupt configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register is used to map PMS_PRO_IRAM0_ILG interrupt signal to one of the CPU interrupts.</description>
            <name>PRO_PMS_PRO_IRAM0_ILG_INTR_MAP</name>
          </field>
        </fields>
        <name>PRO_PMS_PRO_IRAM0_ILG_INTR_MAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x130</addressOffset>
        <description>PMS_PRO_DRAM0_ILG interrupt configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register is used to map PMS_PRO_DRAM0_ILG interrupt signal to one of the CPU interrupts.</description>
            <name>PRO_PMS_PRO_DRAM0_ILG_INTR_MAP</name>
          </field>
        </fields>
        <name>PRO_PMS_PRO_DRAM0_ILG_INTR_MAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x134</addressOffset>
        <description>PMS_PRO_DPORT_ILG interrupt configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register is used to map PMS_PRO_DPORT_ILG interrupt signal to one of the CPU interrupts.</description>
            <name>PRO_PMS_PRO_DPORT_ILG_INTR_MAP</name>
          </field>
        </fields>
        <name>PRO_PMS_PRO_DPORT_ILG_INTR_MAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x138</addressOffset>
        <description>PMS_PRO_AHB_ILG interrupt configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register is used to map PMS_PRO_AHB_ILG interrupt signal to one of the CPU interrupts.</description>
            <name>PRO_PMS_PRO_AHB_ILG_INTR_MAP</name>
          </field>
        </fields>
        <name>PRO_PMS_PRO_AHB_ILG_INTR_MAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x13C</addressOffset>
        <description>PMS_PRO_CACHE_ILG interrupt configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register is used to map PMS_PRO_CACHE_ILG interrupt signal to one of the CPU interrupts.</description>
            <name>PRO_PMS_PRO_CACHE_ILG_INTR_MAP</name>
          </field>
        </fields>
        <name>PRO_PMS_PRO_CACHE_ILG_INTR_MAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x140</addressOffset>
        <description>PMS_DMA_APB_I_ILG  interrupt configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register is used to map PMS_DMA_APB_I_ILG interrupt signal to one of the CPU interrupts.</description>
            <name>PRO_PMS_DMA_APB_I_ILG_INTR_MAP</name>
          </field>
        </fields>
        <name>PRO_PMS_DMA_APB_I_ILG_INTR_MAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x144</addressOffset>
        <description>PMS_DMA_RX_I_ILG interrupt configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register is used to map PMS_DMA_RX_I_ILG interrupt signal to one of the CPU interrupts.</description>
            <name>PRO_PMS_DMA_RX_I_ILG_INTR_MAP</name>
          </field>
        </fields>
        <name>PRO_PMS_DMA_RX_I_ILG_INTR_MAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x148</addressOffset>
        <description>PMS_DMA_TX_I_ILG interrupt configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register is used to map PMS_DMA_TX_I_ILG interrupt signal to one of the CPU interrupts.</description>
            <name>PRO_PMS_DMA_TX_I_ILG_INTR_MAP</name>
          </field>
        </fields>
        <name>PRO_PMS_DMA_TX_I_ILG_INTR_MAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x14C</addressOffset>
        <description>SPI_MEM_REJECT_INTR interrupt configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register is used to map SPI_MEM_REJECT_INTR interrupt signal to one of the CPU interrupts.</description>
            <name>PRO_SPI_MEM_REJECT_INTR_MAP</name>
          </field>
        </fields>
        <name>PRO_SPI_MEM_REJECT_INTR_MAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x150</addressOffset>
        <description>DMA_COPY_INTR interrupt configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register is used to map DMA_COPY_INTR interrupt signal to one of the CPU interrupts.</description>
            <name>PRO_DMA_COPY_INTR_MAP</name>
          </field>
        </fields>
        <name>PRO_DMA_COPY_INTR_MAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x154</addressOffset>
        <description>SPI4_DMA_INT interrupt configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register is used to map SPI4_DMA_INT interrupt signal to one of the CPU interrupts.</description>
            <name>PRO_SPI4_DMA_INT_MAP</name>
          </field>
        </fields>
        <name>PRO_SPI4_DMA_INT_MAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x158</addressOffset>
        <description>SPI_INTR_4 interrupt configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register is used to map SPI_INTR_4 interrupt signal to one of the CPU interrupts.</description>
            <name>PRO_SPI_INTR_4_MAP</name>
          </field>
        </fields>
        <name>PRO_SPI_INTR_4_MAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x15C</addressOffset>
        <description>DCACHE_PRELOAD_INT interrupt configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register is used to map DCACHE_PRELOAD_INT interrupt signal to one of the CPU interrupts.</description>
            <name>PRO_DCACHE_PRELOAD_INT_MAP</name>
          </field>
        </fields>
        <name>PRO_DCACHE_PRELOAD_INT_MAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x160</addressOffset>
        <description>ICACHE_PRELOAD_INT interrupt configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register is used to map ICACHE_PRELOAD_INT interrupt signal to one of the CPU interrupts.</description>
            <name>PRO_ICACHE_PRELOAD_INT_MAP</name>
          </field>
        </fields>
        <name>PRO_ICACHE_PRELOAD_INT_MAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x164</addressOffset>
        <description>APB_ADC_INT interrupt configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register is used to map APB_ADC_INT interrupt signal to one of the CPU interrupts.</description>
            <name>PRO_APB_ADC_INT_MAP</name>
          </field>
        </fields>
        <name>PRO_APB_ADC_INT_MAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x168</addressOffset>
        <description>CRYPTO_DMA_INT interrupt configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register is used to map CRYPTO_DMA_INT interrupt signal to one of the CPU interrupts.</description>
            <name>PRO_CRYPTO_DMA_INT_MAP</name>
          </field>
        </fields>
        <name>PRO_CRYPTO_DMA_INT_MAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x16C</addressOffset>
        <description>CPU_PERI_ERROR_INT interrupt configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register is used to map CPU_PERI_ERROR_INT interrupt signal to one of the CPU interrupts.</description>
            <name>PRO_CPU_PERI_ERROR_INT_MAP</name>
          </field>
        </fields>
        <name>PRO_CPU_PERI_ERROR_INT_MAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x170</addressOffset>
        <description>APB_PERI_ERROR_INT interrupt configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register is used to map APB_PERI_ERROR_INT interrupt signal to one of the CPU interrupts.</description>
            <name>PRO_APB_PERI_ERROR_INT_MAP</name>
          </field>
        </fields>
        <name>PRO_APB_PERI_ERROR_INT_MAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x174</addressOffset>
        <description>DCACHE_SYNC_INT interrupt configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register is used to map DCACHE_SYNC_INT interrupt signal to one of the CPU interrupts.</description>
            <name>PRO_DCACHE_SYNC_INT_MAP</name>
          </field>
        </fields>
        <name>PRO_DCACHE_SYNC_INT_MAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x178</addressOffset>
        <description>ICACHE_SYNC_INT interrupt configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register is used to map ICACHE_SYNC_INT interrupt signal to one of the CPU interrupts.</description>
            <name>PRO_ICACHE_SYNC_INT_MAP</name>
          </field>
        </fields>
        <name>PRO_ICACHE_SYNC_INT_MAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x17C</addressOffset>
        <description>Interrupt status register 0</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>This register stores the status of the first 32 input interrupt sources.</description>
            <name>PRO_INTR_STATUS_0</name>
          </field>
        </fields>
        <name>PRO_INTR_STATUS_REG_0</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x180</addressOffset>
        <description>Interrupt status register 1</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>This register stores the status of the second 32 input interrupt sources.</description>
            <name>PRO_INTR_STATUS_1</name>
          </field>
        </fields>
        <name>PRO_INTR_STATUS_REG_1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x184</addressOffset>
        <description>Interrupt status register 2</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>This register stores the status of the last 31 input interrupt sources.</description>
            <name>PRO_INTR_STATUS_2</name>
          </field>
        </fields>
        <name>PRO_INTR_STATUS_REG_2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x188</addressOffset>
        <description>NMI interrupt signals mask register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This bit is used to enable or disable the clock of interrupt matrix. 1: enable the clock. 0: disable the clock.</description>
            <name>CLK_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This bit is used to disable all NMI interrupt signals to CPU.</description>
            <name>PRO_NMI_MASK_HW</name>
          </field>
        </fields>
        <name>CLOCK_GATE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x1</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xFFC</addressOffset>
        <description>Version control register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1C</bitWidth>
            <description>This is the version register.</description>
            <name>INTERRUPT_REG_DATE</name>
          </field>
        </fields>
        <name>REG_DATE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x1904180</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <resetMask>0xFFFFFFFF</resetMask>
    <resetValue>0x0</resetValue>
  </peripheral>
</peripherals>
<peripherals>
  <peripheral>
    <addressBlock>
      <offset>0x0</offset>
      <size>0xB4</size>
      <usage>registers</usage>
    </addressBlock>
    <baseAddress>0x3F409000</baseAddress>
    <description>Input/Output Multiplexer</description>
    <groupName>IO_MUX</groupName>
    <interrupts></interrupts>
    <name>IO_MUX</name>
    <registers>
      <register>
        <addressOffset>0x0</addressOffset>
        <description>Clock output configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Configure this register to 0, then output clock i2s0 to CLK_OUT1. The CLK_OUT1 can be found in IO_MUX Pad List.</description>
            <name>PIN_CLK_OUT1</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Configure this register to 0, then output clock i2s0 to CLK_OUT2. The CLK_OUT2 can be found in IO_MUX Pad List.</description>
            <name>PIN_CLK_OUT2</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Configure this register to 0, then output clock i2s0 to CLK_OUT3. The CLK_OUT3 can be found in IO_MUX Pad List.</description>
            <name>PIN_CLK_OUT3</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>IO pad power switch delay, delay unit is one APB clock.</description>
            <name>SWITCH_PRT_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Select power voltage for GPIO33 ~ GPIO37. 1: select VDD_SPI 1.8 V. 0: select VDD3P3_CPU 3.3 V.</description>
            <name>PAD_POWER_CTRL</name>
          </field>
        </fields>
        <name>PIN_CTRL</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x27FF</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4</addressOffset>
        <description>Configuration register for pad GPIO0</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output enable of the pad in sleep mode. 1: Output enabled. 0: Output disabled.</description>
            <name>MCU_OE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Sleep mode selection of this pad. Set to 1 to put the pad in sleep mode.</description>
            <name>SLP_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad in sleep mode. 1: Internal pull-down enabled. 0: internal pull-down disabled.</description>
            <name>MCU_WPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad during sleep mode. 1: Internal pull-up enabled. 0: Internal pull-up disabled.</description>
            <name>MCU_WPU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable of the pad during sleep mode. 1: Input enabled. 0: Input disabled.</description>
            <name>MCU_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad. 1: Internal pull-down enabled. 0: internal pull-down disabled.</description>
            <name>FUN_WPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad. 1: Internal pull-up enabled. 0: Internal pull-up disabled.</description>
            <name>FUN_WPU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable of the pad. 1: Input enabled. 0: Input disabled.</description>
            <name>FUN_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Select the drive strength of the pad. 0: ~5 mA. 1: ~10 mA. 2: ~20 mA. 3: ~40 mA.</description>
            <name>FUN_DRV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Select IO MUX function for this signal. 0: Select Function 1. 1: Select Function 2, etc.</description>
            <name>MCU_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enable filter for pin input signals. 1: Filter enabled. 2: Filter disabled.</description>
            <name>FILTER_EN</name>
          </field>
        </fields>
        <name>GPIO0</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xB00</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8</addressOffset>
        <description>Configuration register for pad GPIO1</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output enable of the pad in sleep mode. 1: Output enabled. 0: Output disabled.</description>
            <name>MCU_OE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Sleep mode selection of this pad. Set to 1 to put the pad in sleep mode.</description>
            <name>SLP_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad in sleep mode. 1: Internal pull-down enabled. 0: internal pull-down disabled.</description>
            <name>MCU_WPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad during sleep mode. 1: Internal pull-up enabled. 0: Internal pull-up disabled.</description>
            <name>MCU_WPU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable of the pad during sleep mode. 1: Input enabled. 0: Input disabled.</description>
            <name>MCU_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad. 1: Internal pull-down enabled. 0: internal pull-down disabled.</description>
            <name>FUN_WPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad. 1: Internal pull-up enabled. 0: Internal pull-up disabled.</description>
            <name>FUN_WPU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable of the pad. 1: Input enabled. 0: Input disabled.</description>
            <name>FUN_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Select the drive strength of the pad. 0: ~5 mA. 1: ~10 mA. 2: ~20 mA. 3: ~40 mA.</description>
            <name>FUN_DRV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Select IO MUX function for this signal. 0: Select Function 1. 1: Select Function 2, etc.</description>
            <name>MCU_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enable filter for pin input signals. 1: Filter enabled. 2: Filter disabled.</description>
            <name>FILTER_EN</name>
          </field>
        </fields>
        <name>GPIO1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xB00</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xC</addressOffset>
        <description>Configuration register for pad GPIO2</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output enable of the pad in sleep mode. 1: Output enabled. 0: Output disabled.</description>
            <name>MCU_OE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Sleep mode selection of this pad. Set to 1 to put the pad in sleep mode.</description>
            <name>SLP_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad in sleep mode. 1: Internal pull-down enabled. 0: internal pull-down disabled.</description>
            <name>MCU_WPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad during sleep mode. 1: Internal pull-up enabled. 0: Internal pull-up disabled.</description>
            <name>MCU_WPU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable of the pad during sleep mode. 1: Input enabled. 0: Input disabled.</description>
            <name>MCU_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad. 1: Internal pull-down enabled. 0: internal pull-down disabled.</description>
            <name>FUN_WPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad. 1: Internal pull-up enabled. 0: Internal pull-up disabled.</description>
            <name>FUN_WPU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable of the pad. 1: Input enabled. 0: Input disabled.</description>
            <name>FUN_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Select the drive strength of the pad. 0: ~5 mA. 1: ~10 mA. 2: ~20 mA. 3: ~40 mA.</description>
            <name>FUN_DRV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Select IO MUX function for this signal. 0: Select Function 1. 1: Select Function 2, etc.</description>
            <name>MCU_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enable filter for pin input signals. 1: Filter enabled. 2: Filter disabled.</description>
            <name>FILTER_EN</name>
          </field>
        </fields>
        <name>GPIO2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xB00</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x10</addressOffset>
        <description>Configuration register for pad GPIO3</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output enable of the pad in sleep mode. 1: Output enabled. 0: Output disabled.</description>
            <name>MCU_OE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Sleep mode selection of this pad. Set to 1 to put the pad in sleep mode.</description>
            <name>SLP_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad in sleep mode. 1: Internal pull-down enabled. 0: internal pull-down disabled.</description>
            <name>MCU_WPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad during sleep mode. 1: Internal pull-up enabled. 0: Internal pull-up disabled.</description>
            <name>MCU_WPU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable of the pad during sleep mode. 1: Input enabled. 0: Input disabled.</description>
            <name>MCU_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad. 1: Internal pull-down enabled. 0: internal pull-down disabled.</description>
            <name>FUN_WPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad. 1: Internal pull-up enabled. 0: Internal pull-up disabled.</description>
            <name>FUN_WPU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable of the pad. 1: Input enabled. 0: Input disabled.</description>
            <name>FUN_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Select the drive strength of the pad. 0: ~5 mA. 1: ~10 mA. 2: ~20 mA. 3: ~40 mA.</description>
            <name>FUN_DRV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Select IO MUX function for this signal. 0: Select Function 1. 1: Select Function 2, etc.</description>
            <name>MCU_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enable filter for pin input signals. 1: Filter enabled. 2: Filter disabled.</description>
            <name>FILTER_EN</name>
          </field>
        </fields>
        <name>GPIO3</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xB00</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x14</addressOffset>
        <description>Configuration register for pad GPIO4</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output enable of the pad in sleep mode. 1: Output enabled. 0: Output disabled.</description>
            <name>MCU_OE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Sleep mode selection of this pad. Set to 1 to put the pad in sleep mode.</description>
            <name>SLP_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad in sleep mode. 1: Internal pull-down enabled. 0: internal pull-down disabled.</description>
            <name>MCU_WPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad during sleep mode. 1: Internal pull-up enabled. 0: Internal pull-up disabled.</description>
            <name>MCU_WPU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable of the pad during sleep mode. 1: Input enabled. 0: Input disabled.</description>
            <name>MCU_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad. 1: Internal pull-down enabled. 0: internal pull-down disabled.</description>
            <name>FUN_WPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad. 1: Internal pull-up enabled. 0: Internal pull-up disabled.</description>
            <name>FUN_WPU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable of the pad. 1: Input enabled. 0: Input disabled.</description>
            <name>FUN_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Select the drive strength of the pad. 0: ~5 mA. 1: ~10 mA. 2: ~20 mA. 3: ~40 mA.</description>
            <name>FUN_DRV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Select IO MUX function for this signal. 0: Select Function 1. 1: Select Function 2, etc.</description>
            <name>MCU_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enable filter for pin input signals. 1: Filter enabled. 2: Filter disabled.</description>
            <name>FILTER_EN</name>
          </field>
        </fields>
        <name>GPIO4</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xB00</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x18</addressOffset>
        <description>Configuration register for pad GPIO5</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output enable of the pad in sleep mode. 1: Output enabled. 0: Output disabled.</description>
            <name>MCU_OE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Sleep mode selection of this pad. Set to 1 to put the pad in sleep mode.</description>
            <name>SLP_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad in sleep mode. 1: Internal pull-down enabled. 0: internal pull-down disabled.</description>
            <name>MCU_WPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad during sleep mode. 1: Internal pull-up enabled. 0: Internal pull-up disabled.</description>
            <name>MCU_WPU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable of the pad during sleep mode. 1: Input enabled. 0: Input disabled.</description>
            <name>MCU_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad. 1: Internal pull-down enabled. 0: internal pull-down disabled.</description>
            <name>FUN_WPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad. 1: Internal pull-up enabled. 0: Internal pull-up disabled.</description>
            <name>FUN_WPU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable of the pad. 1: Input enabled. 0: Input disabled.</description>
            <name>FUN_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Select the drive strength of the pad. 0: ~5 mA. 1: ~10 mA. 2: ~20 mA. 3: ~40 mA.</description>
            <name>FUN_DRV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Select IO MUX function for this signal. 0: Select Function 1. 1: Select Function 2, etc.</description>
            <name>MCU_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enable filter for pin input signals. 1: Filter enabled. 2: Filter disabled.</description>
            <name>FILTER_EN</name>
          </field>
        </fields>
        <name>GPIO5</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xB00</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1C</addressOffset>
        <description>Configuration register for pad GPIO6</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output enable of the pad in sleep mode. 1: Output enabled. 0: Output disabled.</description>
            <name>MCU_OE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Sleep mode selection of this pad. Set to 1 to put the pad in sleep mode.</description>
            <name>SLP_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad in sleep mode. 1: Internal pull-down enabled. 0: internal pull-down disabled.</description>
            <name>MCU_WPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad during sleep mode. 1: Internal pull-up enabled. 0: Internal pull-up disabled.</description>
            <name>MCU_WPU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable of the pad during sleep mode. 1: Input enabled. 0: Input disabled.</description>
            <name>MCU_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad. 1: Internal pull-down enabled. 0: internal pull-down disabled.</description>
            <name>FUN_WPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad. 1: Internal pull-up enabled. 0: Internal pull-up disabled.</description>
            <name>FUN_WPU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable of the pad. 1: Input enabled. 0: Input disabled.</description>
            <name>FUN_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Select the drive strength of the pad. 0: ~5 mA. 1: ~10 mA. 2: ~20 mA. 3: ~40 mA.</description>
            <name>FUN_DRV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Select IO MUX function for this signal. 0: Select Function 1. 1: Select Function 2, etc.</description>
            <name>MCU_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enable filter for pin input signals. 1: Filter enabled. 2: Filter disabled.</description>
            <name>FILTER_EN</name>
          </field>
        </fields>
        <name>GPIO6</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xB00</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x20</addressOffset>
        <description>Configuration register for pad GPIO7</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output enable of the pad in sleep mode. 1: Output enabled. 0: Output disabled.</description>
            <name>MCU_OE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Sleep mode selection of this pad. Set to 1 to put the pad in sleep mode.</description>
            <name>SLP_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad in sleep mode. 1: Internal pull-down enabled. 0: internal pull-down disabled.</description>
            <name>MCU_WPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad during sleep mode. 1: Internal pull-up enabled. 0: Internal pull-up disabled.</description>
            <name>MCU_WPU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable of the pad during sleep mode. 1: Input enabled. 0: Input disabled.</description>
            <name>MCU_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad. 1: Internal pull-down enabled. 0: internal pull-down disabled.</description>
            <name>FUN_WPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad. 1: Internal pull-up enabled. 0: Internal pull-up disabled.</description>
            <name>FUN_WPU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable of the pad. 1: Input enabled. 0: Input disabled.</description>
            <name>FUN_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Select the drive strength of the pad. 0: ~5 mA. 1: ~10 mA. 2: ~20 mA. 3: ~40 mA.</description>
            <name>FUN_DRV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Select IO MUX function for this signal. 0: Select Function 1. 1: Select Function 2, etc.</description>
            <name>MCU_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enable filter for pin input signals. 1: Filter enabled. 2: Filter disabled.</description>
            <name>FILTER_EN</name>
          </field>
        </fields>
        <name>GPIO7</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xB00</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x24</addressOffset>
        <description>Configuration register for pad GPIO8</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output enable of the pad in sleep mode. 1: Output enabled. 0: Output disabled.</description>
            <name>MCU_OE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Sleep mode selection of this pad. Set to 1 to put the pad in sleep mode.</description>
            <name>SLP_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad in sleep mode. 1: Internal pull-down enabled. 0: internal pull-down disabled.</description>
            <name>MCU_WPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad during sleep mode. 1: Internal pull-up enabled. 0: Internal pull-up disabled.</description>
            <name>MCU_WPU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable of the pad during sleep mode. 1: Input enabled. 0: Input disabled.</description>
            <name>MCU_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad. 1: Internal pull-down enabled. 0: internal pull-down disabled.</description>
            <name>FUN_WPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad. 1: Internal pull-up enabled. 0: Internal pull-up disabled.</description>
            <name>FUN_WPU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable of the pad. 1: Input enabled. 0: Input disabled.</description>
            <name>FUN_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Select the drive strength of the pad. 0: ~5 mA. 1: ~10 mA. 2: ~20 mA. 3: ~40 mA.</description>
            <name>FUN_DRV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Select IO MUX function for this signal. 0: Select Function 1. 1: Select Function 2, etc.</description>
            <name>MCU_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enable filter for pin input signals. 1: Filter enabled. 2: Filter disabled.</description>
            <name>FILTER_EN</name>
          </field>
        </fields>
        <name>GPIO8</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xB00</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x28</addressOffset>
        <description>Configuration register for pad GPIO9</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output enable of the pad in sleep mode. 1: Output enabled. 0: Output disabled.</description>
            <name>MCU_OE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Sleep mode selection of this pad. Set to 1 to put the pad in sleep mode.</description>
            <name>SLP_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad in sleep mode. 1: Internal pull-down enabled. 0: internal pull-down disabled.</description>
            <name>MCU_WPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad during sleep mode. 1: Internal pull-up enabled. 0: Internal pull-up disabled.</description>
            <name>MCU_WPU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable of the pad during sleep mode. 1: Input enabled. 0: Input disabled.</description>
            <name>MCU_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad. 1: Internal pull-down enabled. 0: internal pull-down disabled.</description>
            <name>FUN_WPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad. 1: Internal pull-up enabled. 0: Internal pull-up disabled.</description>
            <name>FUN_WPU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable of the pad. 1: Input enabled. 0: Input disabled.</description>
            <name>FUN_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Select the drive strength of the pad. 0: ~5 mA. 1: ~10 mA. 2: ~20 mA. 3: ~40 mA.</description>
            <name>FUN_DRV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Select IO MUX function for this signal. 0: Select Function 1. 1: Select Function 2, etc.</description>
            <name>MCU_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enable filter for pin input signals. 1: Filter enabled. 2: Filter disabled.</description>
            <name>FILTER_EN</name>
          </field>
        </fields>
        <name>GPIO9</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xB00</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2C</addressOffset>
        <description>Configuration register for pad GPIO10</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output enable of the pad in sleep mode. 1: Output enabled. 0: Output disabled.</description>
            <name>MCU_OE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Sleep mode selection of this pad. Set to 1 to put the pad in sleep mode.</description>
            <name>SLP_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad in sleep mode. 1: Internal pull-down enabled. 0: internal pull-down disabled.</description>
            <name>MCU_WPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad during sleep mode. 1: Internal pull-up enabled. 0: Internal pull-up disabled.</description>
            <name>MCU_WPU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable of the pad during sleep mode. 1: Input enabled. 0: Input disabled.</description>
            <name>MCU_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad. 1: Internal pull-down enabled. 0: internal pull-down disabled.</description>
            <name>FUN_WPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad. 1: Internal pull-up enabled. 0: Internal pull-up disabled.</description>
            <name>FUN_WPU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable of the pad. 1: Input enabled. 0: Input disabled.</description>
            <name>FUN_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Select the drive strength of the pad. 0: ~5 mA. 1: ~10 mA. 2: ~20 mA. 3: ~40 mA.</description>
            <name>FUN_DRV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Select IO MUX function for this signal. 0: Select Function 1. 1: Select Function 2, etc.</description>
            <name>MCU_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enable filter for pin input signals. 1: Filter enabled. 2: Filter disabled.</description>
            <name>FILTER_EN</name>
          </field>
        </fields>
        <name>GPIO10</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xB00</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x30</addressOffset>
        <description>Configuration register for pad GPIO11</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output enable of the pad in sleep mode. 1: Output enabled. 0: Output disabled.</description>
            <name>MCU_OE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Sleep mode selection of this pad. Set to 1 to put the pad in sleep mode.</description>
            <name>SLP_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad in sleep mode. 1: Internal pull-down enabled. 0: internal pull-down disabled.</description>
            <name>MCU_WPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad during sleep mode. 1: Internal pull-up enabled. 0: Internal pull-up disabled.</description>
            <name>MCU_WPU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable of the pad during sleep mode. 1: Input enabled. 0: Input disabled.</description>
            <name>MCU_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad. 1: Internal pull-down enabled. 0: internal pull-down disabled.</description>
            <name>FUN_WPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad. 1: Internal pull-up enabled. 0: Internal pull-up disabled.</description>
            <name>FUN_WPU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable of the pad. 1: Input enabled. 0: Input disabled.</description>
            <name>FUN_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Select the drive strength of the pad. 0: ~5 mA. 1: ~10 mA. 2: ~20 mA. 3: ~40 mA.</description>
            <name>FUN_DRV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Select IO MUX function for this signal. 0: Select Function 1. 1: Select Function 2, etc.</description>
            <name>MCU_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enable filter for pin input signals. 1: Filter enabled. 2: Filter disabled.</description>
            <name>FILTER_EN</name>
          </field>
        </fields>
        <name>GPIO11</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xB00</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x34</addressOffset>
        <description>Configuration register for pad GPIO12</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output enable of the pad in sleep mode. 1: Output enabled. 0: Output disabled.</description>
            <name>MCU_OE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Sleep mode selection of this pad. Set to 1 to put the pad in sleep mode.</description>
            <name>SLP_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad in sleep mode. 1: Internal pull-down enabled. 0: internal pull-down disabled.</description>
            <name>MCU_WPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad during sleep mode. 1: Internal pull-up enabled. 0: Internal pull-up disabled.</description>
            <name>MCU_WPU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable of the pad during sleep mode. 1: Input enabled. 0: Input disabled.</description>
            <name>MCU_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad. 1: Internal pull-down enabled. 0: internal pull-down disabled.</description>
            <name>FUN_WPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad. 1: Internal pull-up enabled. 0: Internal pull-up disabled.</description>
            <name>FUN_WPU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable of the pad. 1: Input enabled. 0: Input disabled.</description>
            <name>FUN_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Select the drive strength of the pad. 0: ~5 mA. 1: ~10 mA. 2: ~20 mA. 3: ~40 mA.</description>
            <name>FUN_DRV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Select IO MUX function for this signal. 0: Select Function 1. 1: Select Function 2, etc.</description>
            <name>MCU_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enable filter for pin input signals. 1: Filter enabled. 2: Filter disabled.</description>
            <name>FILTER_EN</name>
          </field>
        </fields>
        <name>GPIO12</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xB00</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x38</addressOffset>
        <description>Configuration register for pad GPIO13</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output enable of the pad in sleep mode. 1: Output enabled. 0: Output disabled.</description>
            <name>MCU_OE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Sleep mode selection of this pad. Set to 1 to put the pad in sleep mode.</description>
            <name>SLP_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad in sleep mode. 1: Internal pull-down enabled. 0: internal pull-down disabled.</description>
            <name>MCU_WPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad during sleep mode. 1: Internal pull-up enabled. 0: Internal pull-up disabled.</description>
            <name>MCU_WPU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable of the pad during sleep mode. 1: Input enabled. 0: Input disabled.</description>
            <name>MCU_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad. 1: Internal pull-down enabled. 0: internal pull-down disabled.</description>
            <name>FUN_WPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad. 1: Internal pull-up enabled. 0: Internal pull-up disabled.</description>
            <name>FUN_WPU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable of the pad. 1: Input enabled. 0: Input disabled.</description>
            <name>FUN_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Select the drive strength of the pad. 0: ~5 mA. 1: ~10 mA. 2: ~20 mA. 3: ~40 mA.</description>
            <name>FUN_DRV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Select IO MUX function for this signal. 0: Select Function 1. 1: Select Function 2, etc.</description>
            <name>MCU_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enable filter for pin input signals. 1: Filter enabled. 2: Filter disabled.</description>
            <name>FILTER_EN</name>
          </field>
        </fields>
        <name>GPIO13</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xB00</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3C</addressOffset>
        <description>Configuration register for pad GPIO14</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output enable of the pad in sleep mode. 1: Output enabled. 0: Output disabled.</description>
            <name>MCU_OE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Sleep mode selection of this pad. Set to 1 to put the pad in sleep mode.</description>
            <name>SLP_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad in sleep mode. 1: Internal pull-down enabled. 0: internal pull-down disabled.</description>
            <name>MCU_WPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad during sleep mode. 1: Internal pull-up enabled. 0: Internal pull-up disabled.</description>
            <name>MCU_WPU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable of the pad during sleep mode. 1: Input enabled. 0: Input disabled.</description>
            <name>MCU_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad. 1: Internal pull-down enabled. 0: internal pull-down disabled.</description>
            <name>FUN_WPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad. 1: Internal pull-up enabled. 0: Internal pull-up disabled.</description>
            <name>FUN_WPU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable of the pad. 1: Input enabled. 0: Input disabled.</description>
            <name>FUN_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Select the drive strength of the pad. 0: ~5 mA. 1: ~10 mA. 2: ~20 mA. 3: ~40 mA.</description>
            <name>FUN_DRV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Select IO MUX function for this signal. 0: Select Function 1. 1: Select Function 2, etc.</description>
            <name>MCU_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enable filter for pin input signals. 1: Filter enabled. 2: Filter disabled.</description>
            <name>FILTER_EN</name>
          </field>
        </fields>
        <name>GPIO14</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xB00</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x40</addressOffset>
        <description>Configuration register for pad XTAL_32K_P</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output enable of the pad in sleep mode. 1: Output enabled. 0: Output disabled.</description>
            <name>MCU_OE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Sleep mode selection of this pad. Set to 1 to put the pad in sleep mode.</description>
            <name>SLP_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad in sleep mode. 1: Internal pull-down enabled. 0: internal pull-down disabled.</description>
            <name>MCU_WPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad during sleep mode. 1: Internal pull-up enabled. 0: Internal pull-up disabled.</description>
            <name>MCU_WPU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable of the pad during sleep mode. 1: Input enabled. 0: Input disabled.</description>
            <name>MCU_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad. 1: Internal pull-down enabled. 0: internal pull-down disabled.</description>
            <name>FUN_WPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad. 1: Internal pull-up enabled. 0: Internal pull-up disabled.</description>
            <name>FUN_WPU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable of the pad. 1: Input enabled. 0: Input disabled.</description>
            <name>FUN_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Select the drive strength of the pad. 0: ~5 mA. 1: ~10 mA. 2: ~20 mA. 3: ~40 mA.</description>
            <name>FUN_DRV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Select IO MUX function for this signal. 0: Select Function 1. 1: Select Function 2, etc.</description>
            <name>MCU_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enable filter for pin input signals. 1: Filter enabled. 2: Filter disabled.</description>
            <name>FILTER_EN</name>
          </field>
        </fields>
        <name>XTAL_32K_P</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xB00</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x44</addressOffset>
        <description>Configuration register for pad XTAL_32K_N</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output enable of the pad in sleep mode. 1: Output enabled. 0: Output disabled.</description>
            <name>MCU_OE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Sleep mode selection of this pad. Set to 1 to put the pad in sleep mode.</description>
            <name>SLP_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad in sleep mode. 1: Internal pull-down enabled. 0: internal pull-down disabled.</description>
            <name>MCU_WPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad during sleep mode. 1: Internal pull-up enabled. 0: Internal pull-up disabled.</description>
            <name>MCU_WPU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable of the pad during sleep mode. 1: Input enabled. 0: Input disabled.</description>
            <name>MCU_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad. 1: Internal pull-down enabled. 0: internal pull-down disabled.</description>
            <name>FUN_WPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad. 1: Internal pull-up enabled. 0: Internal pull-up disabled.</description>
            <name>FUN_WPU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable of the pad. 1: Input enabled. 0: Input disabled.</description>
            <name>FUN_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Select the drive strength of the pad. 0: ~5 mA. 1: ~10 mA. 2: ~20 mA. 3: ~40 mA.</description>
            <name>FUN_DRV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Select IO MUX function for this signal. 0: Select Function 1. 1: Select Function 2, etc.</description>
            <name>MCU_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enable filter for pin input signals. 1: Filter enabled. 2: Filter disabled.</description>
            <name>FILTER_EN</name>
          </field>
        </fields>
        <name>XTAL_32K_N</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xB00</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x48</addressOffset>
        <description>Configuration register for pad DAC_1</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output enable of the pad in sleep mode. 1: Output enabled. 0: Output disabled.</description>
            <name>MCU_OE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Sleep mode selection of this pad. Set to 1 to put the pad in sleep mode.</description>
            <name>SLP_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad in sleep mode. 1: Internal pull-down enabled. 0: internal pull-down disabled.</description>
            <name>MCU_WPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad during sleep mode. 1: Internal pull-up enabled. 0: Internal pull-up disabled.</description>
            <name>MCU_WPU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable of the pad during sleep mode. 1: Input enabled. 0: Input disabled.</description>
            <name>MCU_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad. 1: Internal pull-down enabled. 0: internal pull-down disabled.</description>
            <name>FUN_WPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad. 1: Internal pull-up enabled. 0: Internal pull-up disabled.</description>
            <name>FUN_WPU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable of the pad. 1: Input enabled. 0: Input disabled.</description>
            <name>FUN_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Select the drive strength of the pad. 0: ~5 mA. 1: ~10 mA. 2: ~20 mA. 3: ~40 mA.</description>
            <name>FUN_DRV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Select IO MUX function for this signal. 0: Select Function 1. 1: Select Function 2, etc.</description>
            <name>MCU_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enable filter for pin input signals. 1: Filter enabled. 2: Filter disabled.</description>
            <name>FILTER_EN</name>
          </field>
        </fields>
        <name>DAC_1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xB00</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4C</addressOffset>
        <description>Configuration register for pad DAC_2</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output enable of the pad in sleep mode. 1: Output enabled. 0: Output disabled.</description>
            <name>MCU_OE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Sleep mode selection of this pad. Set to 1 to put the pad in sleep mode.</description>
            <name>SLP_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad in sleep mode. 1: Internal pull-down enabled. 0: internal pull-down disabled.</description>
            <name>MCU_WPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad during sleep mode. 1: Internal pull-up enabled. 0: Internal pull-up disabled.</description>
            <name>MCU_WPU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable of the pad during sleep mode. 1: Input enabled. 0: Input disabled.</description>
            <name>MCU_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad. 1: Internal pull-down enabled. 0: internal pull-down disabled.</description>
            <name>FUN_WPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad. 1: Internal pull-up enabled. 0: Internal pull-up disabled.</description>
            <name>FUN_WPU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable of the pad. 1: Input enabled. 0: Input disabled.</description>
            <name>FUN_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Select the drive strength of the pad. 0: ~5 mA. 1: ~10 mA. 2: ~20 mA. 3: ~40 mA.</description>
            <name>FUN_DRV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Select IO MUX function for this signal. 0: Select Function 1. 1: Select Function 2, etc.</description>
            <name>MCU_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enable filter for pin input signals. 1: Filter enabled. 2: Filter disabled.</description>
            <name>FILTER_EN</name>
          </field>
        </fields>
        <name>DAC_2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xB00</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x50</addressOffset>
        <description>Configuration register for pad GPIO19</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output enable of the pad in sleep mode. 1: Output enabled. 0: Output disabled.</description>
            <name>MCU_OE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Sleep mode selection of this pad. Set to 1 to put the pad in sleep mode.</description>
            <name>SLP_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad in sleep mode. 1: Internal pull-down enabled. 0: internal pull-down disabled.</description>
            <name>MCU_WPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad during sleep mode. 1: Internal pull-up enabled. 0: Internal pull-up disabled.</description>
            <name>MCU_WPU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable of the pad during sleep mode. 1: Input enabled. 0: Input disabled.</description>
            <name>MCU_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad. 1: Internal pull-down enabled. 0: internal pull-down disabled.</description>
            <name>FUN_WPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad. 1: Internal pull-up enabled. 0: Internal pull-up disabled.</description>
            <name>FUN_WPU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable of the pad. 1: Input enabled. 0: Input disabled.</description>
            <name>FUN_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Select the drive strength of the pad. 0: ~5 mA. 1: ~10 mA. 2: ~20 mA. 3: ~40 mA.</description>
            <name>FUN_DRV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Select IO MUX function for this signal. 0: Select Function 1. 1: Select Function 2, etc.</description>
            <name>MCU_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enable filter for pin input signals. 1: Filter enabled. 2: Filter disabled.</description>
            <name>FILTER_EN</name>
          </field>
        </fields>
        <name>GPIO19</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xB00</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x54</addressOffset>
        <description>Configuration register for pad GPIO20</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output enable of the pad in sleep mode. 1: Output enabled. 0: Output disabled.</description>
            <name>MCU_OE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Sleep mode selection of this pad. Set to 1 to put the pad in sleep mode.</description>
            <name>SLP_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad in sleep mode. 1: Internal pull-down enabled. 0: internal pull-down disabled.</description>
            <name>MCU_WPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad during sleep mode. 1: Internal pull-up enabled. 0: Internal pull-up disabled.</description>
            <name>MCU_WPU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable of the pad during sleep mode. 1: Input enabled. 0: Input disabled.</description>
            <name>MCU_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad. 1: Internal pull-down enabled. 0: internal pull-down disabled.</description>
            <name>FUN_WPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad. 1: Internal pull-up enabled. 0: Internal pull-up disabled.</description>
            <name>FUN_WPU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable of the pad. 1: Input enabled. 0: Input disabled.</description>
            <name>FUN_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Select the drive strength of the pad. 0: ~5 mA. 1: ~10 mA. 2: ~20 mA. 3: ~40 mA.</description>
            <name>FUN_DRV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Select IO MUX function for this signal. 0: Select Function 1. 1: Select Function 2, etc.</description>
            <name>MCU_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enable filter for pin input signals. 1: Filter enabled. 2: Filter disabled.</description>
            <name>FILTER_EN</name>
          </field>
        </fields>
        <name>GPIO20</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xB00</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x58</addressOffset>
        <description>Configuration register for pad GPIO21</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output enable of the pad in sleep mode. 1: Output enabled. 0: Output disabled.</description>
            <name>MCU_OE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Sleep mode selection of this pad. Set to 1 to put the pad in sleep mode.</description>
            <name>SLP_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad in sleep mode. 1: Internal pull-down enabled. 0: internal pull-down disabled.</description>
            <name>MCU_WPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad during sleep mode. 1: Internal pull-up enabled. 0: Internal pull-up disabled.</description>
            <name>MCU_WPU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable of the pad during sleep mode. 1: Input enabled. 0: Input disabled.</description>
            <name>MCU_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad. 1: Internal pull-down enabled. 0: internal pull-down disabled.</description>
            <name>FUN_WPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad. 1: Internal pull-up enabled. 0: Internal pull-up disabled.</description>
            <name>FUN_WPU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable of the pad. 1: Input enabled. 0: Input disabled.</description>
            <name>FUN_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Select the drive strength of the pad. 0: ~5 mA. 1: ~10 mA. 2: ~20 mA. 3: ~40 mA.</description>
            <name>FUN_DRV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Select IO MUX function for this signal. 0: Select Function 1. 1: Select Function 2, etc.</description>
            <name>MCU_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enable filter for pin input signals. 1: Filter enabled. 2: Filter disabled.</description>
            <name>FILTER_EN</name>
          </field>
        </fields>
        <name>GPIO21</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xB00</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x6C</addressOffset>
        <description>Configuration register for pad SPICS1</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output enable of the pad in sleep mode. 1: Output enabled. 0: Output disabled.</description>
            <name>MCU_OE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Sleep mode selection of this pad. Set to 1 to put the pad in sleep mode.</description>
            <name>SLP_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad in sleep mode. 1: Internal pull-down enabled. 0: internal pull-down disabled.</description>
            <name>MCU_WPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad during sleep mode. 1: Internal pull-up enabled. 0: Internal pull-up disabled.</description>
            <name>MCU_WPU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable of the pad during sleep mode. 1: Input enabled. 0: Input disabled.</description>
            <name>MCU_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad. 1: Internal pull-down enabled. 0: internal pull-down disabled.</description>
            <name>FUN_WPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad. 1: Internal pull-up enabled. 0: Internal pull-up disabled.</description>
            <name>FUN_WPU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable of the pad. 1: Input enabled. 0: Input disabled.</description>
            <name>FUN_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Select the drive strength of the pad. 0: ~5 mA. 1: ~10 mA. 2: ~20 mA. 3: ~40 mA.</description>
            <name>FUN_DRV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Select IO MUX function for this signal. 0: Select Function 1. 1: Select Function 2, etc.</description>
            <name>MCU_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enable filter for pin input signals. 1: Filter enabled. 2: Filter disabled.</description>
            <name>FILTER_EN</name>
          </field>
        </fields>
        <name>SPICS1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xB00</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x70</addressOffset>
        <description>Configuration register for pad SPIHD</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output enable of the pad in sleep mode. 1: Output enabled. 0: Output disabled.</description>
            <name>MCU_OE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Sleep mode selection of this pad. Set to 1 to put the pad in sleep mode.</description>
            <name>SLP_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad in sleep mode. 1: Internal pull-down enabled. 0: internal pull-down disabled.</description>
            <name>MCU_WPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad during sleep mode. 1: Internal pull-up enabled. 0: Internal pull-up disabled.</description>
            <name>MCU_WPU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable of the pad during sleep mode. 1: Input enabled. 0: Input disabled.</description>
            <name>MCU_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad. 1: Internal pull-down enabled. 0: internal pull-down disabled.</description>
            <name>FUN_WPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad. 1: Internal pull-up enabled. 0: Internal pull-up disabled.</description>
            <name>FUN_WPU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable of the pad. 1: Input enabled. 0: Input disabled.</description>
            <name>FUN_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Select the drive strength of the pad. 0: ~5 mA. 1: ~10 mA. 2: ~20 mA. 3: ~40 mA.</description>
            <name>FUN_DRV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Select IO MUX function for this signal. 0: Select Function 1. 1: Select Function 2, etc.</description>
            <name>MCU_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enable filter for pin input signals. 1: Filter enabled. 2: Filter disabled.</description>
            <name>FILTER_EN</name>
          </field>
        </fields>
        <name>SPIHD</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xB00</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x74</addressOffset>
        <description>Configuration register for pad SPIWP</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output enable of the pad in sleep mode. 1: Output enabled. 0: Output disabled.</description>
            <name>MCU_OE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Sleep mode selection of this pad. Set to 1 to put the pad in sleep mode.</description>
            <name>SLP_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad in sleep mode. 1: Internal pull-down enabled. 0: internal pull-down disabled.</description>
            <name>MCU_WPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad during sleep mode. 1: Internal pull-up enabled. 0: Internal pull-up disabled.</description>
            <name>MCU_WPU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable of the pad during sleep mode. 1: Input enabled. 0: Input disabled.</description>
            <name>MCU_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad. 1: Internal pull-down enabled. 0: internal pull-down disabled.</description>
            <name>FUN_WPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad. 1: Internal pull-up enabled. 0: Internal pull-up disabled.</description>
            <name>FUN_WPU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable of the pad. 1: Input enabled. 0: Input disabled.</description>
            <name>FUN_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Select the drive strength of the pad. 0: ~5 mA. 1: ~10 mA. 2: ~20 mA. 3: ~40 mA.</description>
            <name>FUN_DRV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Select IO MUX function for this signal. 0: Select Function 1. 1: Select Function 2, etc.</description>
            <name>MCU_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enable filter for pin input signals. 1: Filter enabled. 2: Filter disabled.</description>
            <name>FILTER_EN</name>
          </field>
        </fields>
        <name>SPIWP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xB00</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x78</addressOffset>
        <description>Configuration register for pad SPICS0</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output enable of the pad in sleep mode. 1: Output enabled. 0: Output disabled.</description>
            <name>MCU_OE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Sleep mode selection of this pad. Set to 1 to put the pad in sleep mode.</description>
            <name>SLP_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad in sleep mode. 1: Internal pull-down enabled. 0: internal pull-down disabled.</description>
            <name>MCU_WPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad during sleep mode. 1: Internal pull-up enabled. 0: Internal pull-up disabled.</description>
            <name>MCU_WPU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable of the pad during sleep mode. 1: Input enabled. 0: Input disabled.</description>
            <name>MCU_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad. 1: Internal pull-down enabled. 0: internal pull-down disabled.</description>
            <name>FUN_WPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad. 1: Internal pull-up enabled. 0: Internal pull-up disabled.</description>
            <name>FUN_WPU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable of the pad. 1: Input enabled. 0: Input disabled.</description>
            <name>FUN_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Select the drive strength of the pad. 0: ~5 mA. 1: ~10 mA. 2: ~20 mA. 3: ~40 mA.</description>
            <name>FUN_DRV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Select IO MUX function for this signal. 0: Select Function 1. 1: Select Function 2, etc.</description>
            <name>MCU_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enable filter for pin input signals. 1: Filter enabled. 2: Filter disabled.</description>
            <name>FILTER_EN</name>
          </field>
        </fields>
        <name>SPICS0</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xB00</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x7C</addressOffset>
        <description>Configuration register for pad SPICLK</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output enable of the pad in sleep mode. 1: Output enabled. 0: Output disabled.</description>
            <name>MCU_OE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Sleep mode selection of this pad. Set to 1 to put the pad in sleep mode.</description>
            <name>SLP_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad in sleep mode. 1: Internal pull-down enabled. 0: internal pull-down disabled.</description>
            <name>MCU_WPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad during sleep mode. 1: Internal pull-up enabled. 0: Internal pull-up disabled.</description>
            <name>MCU_WPU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable of the pad during sleep mode. 1: Input enabled. 0: Input disabled.</description>
            <name>MCU_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad. 1: Internal pull-down enabled. 0: internal pull-down disabled.</description>
            <name>FUN_WPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad. 1: Internal pull-up enabled. 0: Internal pull-up disabled.</description>
            <name>FUN_WPU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable of the pad. 1: Input enabled. 0: Input disabled.</description>
            <name>FUN_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Select the drive strength of the pad. 0: ~5 mA. 1: ~10 mA. 2: ~20 mA. 3: ~40 mA.</description>
            <name>FUN_DRV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Select IO MUX function for this signal. 0: Select Function 1. 1: Select Function 2, etc.</description>
            <name>MCU_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enable filter for pin input signals. 1: Filter enabled. 2: Filter disabled.</description>
            <name>FILTER_EN</name>
          </field>
        </fields>
        <name>SPICLK</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xB00</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x80</addressOffset>
        <description>Configuration register for pad SPIQ</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output enable of the pad in sleep mode. 1: Output enabled. 0: Output disabled.</description>
            <name>MCU_OE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Sleep mode selection of this pad. Set to 1 to put the pad in sleep mode.</description>
            <name>SLP_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad in sleep mode. 1: Internal pull-down enabled. 0: internal pull-down disabled.</description>
            <name>MCU_WPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad during sleep mode. 1: Internal pull-up enabled. 0: Internal pull-up disabled.</description>
            <name>MCU_WPU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable of the pad during sleep mode. 1: Input enabled. 0: Input disabled.</description>
            <name>MCU_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad. 1: Internal pull-down enabled. 0: internal pull-down disabled.</description>
            <name>FUN_WPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad. 1: Internal pull-up enabled. 0: Internal pull-up disabled.</description>
            <name>FUN_WPU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable of the pad. 1: Input enabled. 0: Input disabled.</description>
            <name>FUN_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Select the drive strength of the pad. 0: ~5 mA. 1: ~10 mA. 2: ~20 mA. 3: ~40 mA.</description>
            <name>FUN_DRV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Select IO MUX function for this signal. 0: Select Function 1. 1: Select Function 2, etc.</description>
            <name>MCU_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enable filter for pin input signals. 1: Filter enabled. 2: Filter disabled.</description>
            <name>FILTER_EN</name>
          </field>
        </fields>
        <name>SPIQ</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xB00</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x84</addressOffset>
        <description>Configuration register for pad SPID</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output enable of the pad in sleep mode. 1: Output enabled. 0: Output disabled.</description>
            <name>MCU_OE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Sleep mode selection of this pad. Set to 1 to put the pad in sleep mode.</description>
            <name>SLP_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad in sleep mode. 1: Internal pull-down enabled. 0: internal pull-down disabled.</description>
            <name>MCU_WPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad during sleep mode. 1: Internal pull-up enabled. 0: Internal pull-up disabled.</description>
            <name>MCU_WPU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable of the pad during sleep mode. 1: Input enabled. 0: Input disabled.</description>
            <name>MCU_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad. 1: Internal pull-down enabled. 0: internal pull-down disabled.</description>
            <name>FUN_WPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad. 1: Internal pull-up enabled. 0: Internal pull-up disabled.</description>
            <name>FUN_WPU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable of the pad. 1: Input enabled. 0: Input disabled.</description>
            <name>FUN_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Select the drive strength of the pad. 0: ~5 mA. 1: ~10 mA. 2: ~20 mA. 3: ~40 mA.</description>
            <name>FUN_DRV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Select IO MUX function for this signal. 0: Select Function 1. 1: Select Function 2, etc.</description>
            <name>MCU_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enable filter for pin input signals. 1: Filter enabled. 2: Filter disabled.</description>
            <name>FILTER_EN</name>
          </field>
        </fields>
        <name>SPID</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xB00</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x88</addressOffset>
        <description>Configuration register for pad GPIO33</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output enable of the pad in sleep mode. 1: Output enabled. 0: Output disabled.</description>
            <name>MCU_OE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Sleep mode selection of this pad. Set to 1 to put the pad in sleep mode.</description>
            <name>SLP_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad in sleep mode. 1: Internal pull-down enabled. 0: internal pull-down disabled.</description>
            <name>MCU_WPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad during sleep mode. 1: Internal pull-up enabled. 0: Internal pull-up disabled.</description>
            <name>MCU_WPU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable of the pad during sleep mode. 1: Input enabled. 0: Input disabled.</description>
            <name>MCU_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad. 1: Internal pull-down enabled. 0: internal pull-down disabled.</description>
            <name>FUN_WPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad. 1: Internal pull-up enabled. 0: Internal pull-up disabled.</description>
            <name>FUN_WPU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable of the pad. 1: Input enabled. 0: Input disabled.</description>
            <name>FUN_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Select the drive strength of the pad. 0: ~5 mA. 1: ~10 mA. 2: ~20 mA. 3: ~40 mA.</description>
            <name>FUN_DRV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Select IO MUX function for this signal. 0: Select Function 1. 1: Select Function 2, etc.</description>
            <name>MCU_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enable filter for pin input signals. 1: Filter enabled. 2: Filter disabled.</description>
            <name>FILTER_EN</name>
          </field>
        </fields>
        <name>GPIO_33</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xB00</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8C</addressOffset>
        <description>Configuration register for pad GPIO34</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output enable of the pad in sleep mode. 1: Output enabled. 0: Output disabled.</description>
            <name>MCU_OE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Sleep mode selection of this pad. Set to 1 to put the pad in sleep mode.</description>
            <name>SLP_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad in sleep mode. 1: Internal pull-down enabled. 0: internal pull-down disabled.</description>
            <name>MCU_WPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad during sleep mode. 1: Internal pull-up enabled. 0: Internal pull-up disabled.</description>
            <name>MCU_WPU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable of the pad during sleep mode. 1: Input enabled. 0: Input disabled.</description>
            <name>MCU_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad. 1: Internal pull-down enabled. 0: internal pull-down disabled.</description>
            <name>FUN_WPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad. 1: Internal pull-up enabled. 0: Internal pull-up disabled.</description>
            <name>FUN_WPU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable of the pad. 1: Input enabled. 0: Input disabled.</description>
            <name>FUN_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Select the drive strength of the pad. 0: ~5 mA. 1: ~10 mA. 2: ~20 mA. 3: ~40 mA.</description>
            <name>FUN_DRV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Select IO MUX function for this signal. 0: Select Function 1. 1: Select Function 2, etc.</description>
            <name>MCU_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enable filter for pin input signals. 1: Filter enabled. 2: Filter disabled.</description>
            <name>FILTER_EN</name>
          </field>
        </fields>
        <name>GPIO_34</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xB00</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x90</addressOffset>
        <description>Configuration register for pad GPIO35</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output enable of the pad in sleep mode. 1: Output enabled. 0: Output disabled.</description>
            <name>MCU_OE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Sleep mode selection of this pad. Set to 1 to put the pad in sleep mode.</description>
            <name>SLP_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad in sleep mode. 1: Internal pull-down enabled. 0: internal pull-down disabled.</description>
            <name>MCU_WPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad during sleep mode. 1: Internal pull-up enabled. 0: Internal pull-up disabled.</description>
            <name>MCU_WPU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable of the pad during sleep mode. 1: Input enabled. 0: Input disabled.</description>
            <name>MCU_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad. 1: Internal pull-down enabled. 0: internal pull-down disabled.</description>
            <name>FUN_WPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad. 1: Internal pull-up enabled. 0: Internal pull-up disabled.</description>
            <name>FUN_WPU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable of the pad. 1: Input enabled. 0: Input disabled.</description>
            <name>FUN_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Select the drive strength of the pad. 0: ~5 mA. 1: ~10 mA. 2: ~20 mA. 3: ~40 mA.</description>
            <name>FUN_DRV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Select IO MUX function for this signal. 0: Select Function 1. 1: Select Function 2, etc.</description>
            <name>MCU_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enable filter for pin input signals. 1: Filter enabled. 2: Filter disabled.</description>
            <name>FILTER_EN</name>
          </field>
        </fields>
        <name>GPIO_35</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xB00</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x94</addressOffset>
        <description>Configuration register for pad GPIO36</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output enable of the pad in sleep mode. 1: Output enabled. 0: Output disabled.</description>
            <name>MCU_OE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Sleep mode selection of this pad. Set to 1 to put the pad in sleep mode.</description>
            <name>SLP_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad in sleep mode. 1: Internal pull-down enabled. 0: internal pull-down disabled.</description>
            <name>MCU_WPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad during sleep mode. 1: Internal pull-up enabled. 0: Internal pull-up disabled.</description>
            <name>MCU_WPU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable of the pad during sleep mode. 1: Input enabled. 0: Input disabled.</description>
            <name>MCU_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad. 1: Internal pull-down enabled. 0: internal pull-down disabled.</description>
            <name>FUN_WPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad. 1: Internal pull-up enabled. 0: Internal pull-up disabled.</description>
            <name>FUN_WPU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable of the pad. 1: Input enabled. 0: Input disabled.</description>
            <name>FUN_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Select the drive strength of the pad. 0: ~5 mA. 1: ~10 mA. 2: ~20 mA. 3: ~40 mA.</description>
            <name>FUN_DRV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Select IO MUX function for this signal. 0: Select Function 1. 1: Select Function 2, etc.</description>
            <name>MCU_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enable filter for pin input signals. 1: Filter enabled. 2: Filter disabled.</description>
            <name>FILTER_EN</name>
          </field>
        </fields>
        <name>GPIO_36</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xB00</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x98</addressOffset>
        <description>Configuration register for pad GPIO37</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output enable of the pad in sleep mode. 1: Output enabled. 0: Output disabled.</description>
            <name>MCU_OE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Sleep mode selection of this pad. Set to 1 to put the pad in sleep mode.</description>
            <name>SLP_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad in sleep mode. 1: Internal pull-down enabled. 0: internal pull-down disabled.</description>
            <name>MCU_WPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad during sleep mode. 1: Internal pull-up enabled. 0: Internal pull-up disabled.</description>
            <name>MCU_WPU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable of the pad during sleep mode. 1: Input enabled. 0: Input disabled.</description>
            <name>MCU_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad. 1: Internal pull-down enabled. 0: internal pull-down disabled.</description>
            <name>FUN_WPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad. 1: Internal pull-up enabled. 0: Internal pull-up disabled.</description>
            <name>FUN_WPU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable of the pad. 1: Input enabled. 0: Input disabled.</description>
            <name>FUN_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Select the drive strength of the pad. 0: ~5 mA. 1: ~10 mA. 2: ~20 mA. 3: ~40 mA.</description>
            <name>FUN_DRV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Select IO MUX function for this signal. 0: Select Function 1. 1: Select Function 2, etc.</description>
            <name>MCU_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enable filter for pin input signals. 1: Filter enabled. 2: Filter disabled.</description>
            <name>FILTER_EN</name>
          </field>
        </fields>
        <name>GPIO_37</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xB00</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9C</addressOffset>
        <description>Configuration register for pad GPIO38</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output enable of the pad in sleep mode. 1: Output enabled. 0: Output disabled.</description>
            <name>MCU_OE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Sleep mode selection of this pad. Set to 1 to put the pad in sleep mode.</description>
            <name>SLP_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad in sleep mode. 1: Internal pull-down enabled. 0: internal pull-down disabled.</description>
            <name>MCU_WPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad during sleep mode. 1: Internal pull-up enabled. 0: Internal pull-up disabled.</description>
            <name>MCU_WPU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable of the pad during sleep mode. 1: Input enabled. 0: Input disabled.</description>
            <name>MCU_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad. 1: Internal pull-down enabled. 0: internal pull-down disabled.</description>
            <name>FUN_WPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad. 1: Internal pull-up enabled. 0: Internal pull-up disabled.</description>
            <name>FUN_WPU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable of the pad. 1: Input enabled. 0: Input disabled.</description>
            <name>FUN_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Select the drive strength of the pad. 0: ~5 mA. 1: ~10 mA. 2: ~20 mA. 3: ~40 mA.</description>
            <name>FUN_DRV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Select IO MUX function for this signal. 0: Select Function 1. 1: Select Function 2, etc.</description>
            <name>MCU_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enable filter for pin input signals. 1: Filter enabled. 2: Filter disabled.</description>
            <name>FILTER_EN</name>
          </field>
        </fields>
        <name>GPIO_38</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xB00</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA0</addressOffset>
        <description>Configuration register for pad MTCK</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output enable of the pad in sleep mode. 1: Output enabled. 0: Output disabled.</description>
            <name>MCU_OE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Sleep mode selection of this pad. Set to 1 to put the pad in sleep mode.</description>
            <name>SLP_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad in sleep mode. 1: Internal pull-down enabled. 0: internal pull-down disabled.</description>
            <name>MCU_WPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad during sleep mode. 1: Internal pull-up enabled. 0: Internal pull-up disabled.</description>
            <name>MCU_WPU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable of the pad during sleep mode. 1: Input enabled. 0: Input disabled.</description>
            <name>MCU_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad. 1: Internal pull-down enabled. 0: internal pull-down disabled.</description>
            <name>FUN_WPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad. 1: Internal pull-up enabled. 0: Internal pull-up disabled.</description>
            <name>FUN_WPU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable of the pad. 1: Input enabled. 0: Input disabled.</description>
            <name>FUN_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Select the drive strength of the pad. 0: ~5 mA. 1: ~10 mA. 2: ~20 mA. 3: ~40 mA.</description>
            <name>FUN_DRV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Select IO MUX function for this signal. 0: Select Function 1. 1: Select Function 2, etc.</description>
            <name>MCU_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enable filter for pin input signals. 1: Filter enabled. 2: Filter disabled.</description>
            <name>FILTER_EN</name>
          </field>
        </fields>
        <name>MTCK</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xB00</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA4</addressOffset>
        <description>Configuration register for pad MTDO</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output enable of the pad in sleep mode. 1: Output enabled. 0: Output disabled.</description>
            <name>MCU_OE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Sleep mode selection of this pad. Set to 1 to put the pad in sleep mode.</description>
            <name>SLP_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad in sleep mode. 1: Internal pull-down enabled. 0: internal pull-down disabled.</description>
            <name>MCU_WPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad during sleep mode. 1: Internal pull-up enabled. 0: Internal pull-up disabled.</description>
            <name>MCU_WPU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable of the pad during sleep mode. 1: Input enabled. 0: Input disabled.</description>
            <name>MCU_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad. 1: Internal pull-down enabled. 0: internal pull-down disabled.</description>
            <name>FUN_WPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad. 1: Internal pull-up enabled. 0: Internal pull-up disabled.</description>
            <name>FUN_WPU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable of the pad. 1: Input enabled. 0: Input disabled.</description>
            <name>FUN_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Select the drive strength of the pad. 0: ~5 mA. 1: ~10 mA. 2: ~20 mA. 3: ~40 mA.</description>
            <name>FUN_DRV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Select IO MUX function for this signal. 0: Select Function 1. 1: Select Function 2, etc.</description>
            <name>MCU_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enable filter for pin input signals. 1: Filter enabled. 2: Filter disabled.</description>
            <name>FILTER_EN</name>
          </field>
        </fields>
        <name>MTDO</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xB00</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA8</addressOffset>
        <description>Configuration register for pad MTDI</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output enable of the pad in sleep mode. 1: Output enabled. 0: Output disabled.</description>
            <name>MCU_OE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Sleep mode selection of this pad. Set to 1 to put the pad in sleep mode.</description>
            <name>SLP_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad in sleep mode. 1: Internal pull-down enabled. 0: internal pull-down disabled.</description>
            <name>MCU_WPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad during sleep mode. 1: Internal pull-up enabled. 0: Internal pull-up disabled.</description>
            <name>MCU_WPU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable of the pad during sleep mode. 1: Input enabled. 0: Input disabled.</description>
            <name>MCU_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad. 1: Internal pull-down enabled. 0: internal pull-down disabled.</description>
            <name>FUN_WPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad. 1: Internal pull-up enabled. 0: Internal pull-up disabled.</description>
            <name>FUN_WPU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable of the pad. 1: Input enabled. 0: Input disabled.</description>
            <name>FUN_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Select the drive strength of the pad. 0: ~5 mA. 1: ~10 mA. 2: ~20 mA. 3: ~40 mA.</description>
            <name>FUN_DRV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Select IO MUX function for this signal. 0: Select Function 1. 1: Select Function 2, etc.</description>
            <name>MCU_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enable filter for pin input signals. 1: Filter enabled. 2: Filter disabled.</description>
            <name>FILTER_EN</name>
          </field>
        </fields>
        <name>MTDI</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xB00</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAC</addressOffset>
        <description>Configuration register for pad MTMS</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output enable of the pad in sleep mode. 1: Output enabled. 0: Output disabled.</description>
            <name>MCU_OE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Sleep mode selection of this pad. Set to 1 to put the pad in sleep mode.</description>
            <name>SLP_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad in sleep mode. 1: Internal pull-down enabled. 0: internal pull-down disabled.</description>
            <name>MCU_WPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad during sleep mode. 1: Internal pull-up enabled. 0: Internal pull-up disabled.</description>
            <name>MCU_WPU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable of the pad during sleep mode. 1: Input enabled. 0: Input disabled.</description>
            <name>MCU_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad. 1: Internal pull-down enabled. 0: internal pull-down disabled.</description>
            <name>FUN_WPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad. 1: Internal pull-up enabled. 0: Internal pull-up disabled.</description>
            <name>FUN_WPU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable of the pad. 1: Input enabled. 0: Input disabled.</description>
            <name>FUN_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Select the drive strength of the pad. 0: ~5 mA. 1: ~10 mA. 2: ~20 mA. 3: ~40 mA.</description>
            <name>FUN_DRV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Select IO MUX function for this signal. 0: Select Function 1. 1: Select Function 2, etc.</description>
            <name>MCU_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enable filter for pin input signals. 1: Filter enabled. 2: Filter disabled.</description>
            <name>FILTER_EN</name>
          </field>
        </fields>
        <name>MTMS</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xB00</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB0</addressOffset>
        <description>Configuration register for pad U0TXD</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output enable of the pad in sleep mode. 1: Output enabled. 0: Output disabled.</description>
            <name>MCU_OE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Sleep mode selection of this pad. Set to 1 to put the pad in sleep mode.</description>
            <name>SLP_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad in sleep mode. 1: Internal pull-down enabled. 0: internal pull-down disabled.</description>
            <name>MCU_WPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad during sleep mode. 1: Internal pull-up enabled. 0: Internal pull-up disabled.</description>
            <name>MCU_WPU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable of the pad during sleep mode. 1: Input enabled. 0: Input disabled.</description>
            <name>MCU_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad. 1: Internal pull-down enabled. 0: internal pull-down disabled.</description>
            <name>FUN_WPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad. 1: Internal pull-up enabled. 0: Internal pull-up disabled.</description>
            <name>FUN_WPU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable of the pad. 1: Input enabled. 0: Input disabled.</description>
            <name>FUN_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Select the drive strength of the pad. 0: ~5 mA. 1: ~10 mA. 2: ~20 mA. 3: ~40 mA.</description>
            <name>FUN_DRV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Select IO MUX function for this signal. 0: Select Function 1. 1: Select Function 2, etc.</description>
            <name>MCU_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enable filter for pin input signals. 1: Filter enabled. 2: Filter disabled.</description>
            <name>FILTER_EN</name>
          </field>
        </fields>
        <name>U0TXD</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xB00</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB4</addressOffset>
        <description>Configuration register for pad U0RXD</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output enable of the pad in sleep mode. 1: Output enabled. 0: Output disabled.</description>
            <name>MCU_OE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Sleep mode selection of this pad. Set to 1 to put the pad in sleep mode.</description>
            <name>SLP_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad in sleep mode. 1: Internal pull-down enabled. 0: internal pull-down disabled.</description>
            <name>MCU_WPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad during sleep mode. 1: Internal pull-up enabled. 0: Internal pull-up disabled.</description>
            <name>MCU_WPU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable of the pad during sleep mode. 1: Input enabled. 0: Input disabled.</description>
            <name>MCU_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad. 1: Internal pull-down enabled. 0: internal pull-down disabled.</description>
            <name>FUN_WPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad. 1: Internal pull-up enabled. 0: Internal pull-up disabled.</description>
            <name>FUN_WPU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable of the pad. 1: Input enabled. 0: Input disabled.</description>
            <name>FUN_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Select the drive strength of the pad. 0: ~5 mA. 1: ~10 mA. 2: ~20 mA. 3: ~40 mA.</description>
            <name>FUN_DRV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Select IO MUX function for this signal. 0: Select Function 1. 1: Select Function 2, etc.</description>
            <name>MCU_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enable filter for pin input signals. 1: Filter enabled. 2: Filter disabled.</description>
            <name>FILTER_EN</name>
          </field>
        </fields>
        <name>U0RXD</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xB00</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB8</addressOffset>
        <description>Configuration register for pad GPIO45</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output enable of the pad in sleep mode. 1: Output enabled. 0: Output disabled.</description>
            <name>MCU_OE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Sleep mode selection of this pad. Set to 1 to put the pad in sleep mode.</description>
            <name>SLP_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad in sleep mode. 1: Internal pull-down enabled. 0: internal pull-down disabled.</description>
            <name>MCU_WPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad during sleep mode. 1: Internal pull-up enabled. 0: Internal pull-up disabled.</description>
            <name>MCU_WPU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable of the pad during sleep mode. 1: Input enabled. 0: Input disabled.</description>
            <name>MCU_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad. 1: Internal pull-down enabled. 0: internal pull-down disabled.</description>
            <name>FUN_WPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad. 1: Internal pull-up enabled. 0: Internal pull-up disabled.</description>
            <name>FUN_WPU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable of the pad. 1: Input enabled. 0: Input disabled.</description>
            <name>FUN_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Select the drive strength of the pad. 0: ~5 mA. 1: ~10 mA. 2: ~20 mA. 3: ~40 mA.</description>
            <name>FUN_DRV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Select IO MUX function for this signal. 0: Select Function 1. 1: Select Function 2, etc.</description>
            <name>MCU_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enable filter for pin input signals. 1: Filter enabled. 2: Filter disabled.</description>
            <name>FILTER_EN</name>
          </field>
        </fields>
        <name>GPIO_45</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xB00</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBC</addressOffset>
        <description>Configuration register for pad GPIO46</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output enable of the pad in sleep mode. 1: Output enabled. 0: Output disabled.</description>
            <name>MCU_OE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Sleep mode selection of this pad. Set to 1 to put the pad in sleep mode.</description>
            <name>SLP_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad in sleep mode. 1: Internal pull-down enabled. 0: internal pull-down disabled.</description>
            <name>MCU_WPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad during sleep mode. 1: Internal pull-up enabled. 0: Internal pull-up disabled.</description>
            <name>MCU_WPU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable of the pad during sleep mode. 1: Input enabled. 0: Input disabled.</description>
            <name>MCU_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad. 1: Internal pull-down enabled. 0: internal pull-down disabled.</description>
            <name>FUN_WPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad. 1: Internal pull-up enabled. 0: Internal pull-up disabled.</description>
            <name>FUN_WPU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable of the pad. 1: Input enabled. 0: Input disabled.</description>
            <name>FUN_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Select the drive strength of the pad. 0: ~5 mA. 1: ~10 mA. 2: ~20 mA. 3: ~40 mA.</description>
            <name>FUN_DRV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Select IO MUX function for this signal. 0: Select Function 1. 1: Select Function 2, etc.</description>
            <name>MCU_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enable filter for pin input signals. 1: Filter enabled. 2: Filter disabled.</description>
            <name>FILTER_EN</name>
          </field>
        </fields>
        <name>GPIO_46</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xB00</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xFC</addressOffset>
        <description>Version control register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1C</bitWidth>
            <description>Version control register</description>
            <name>VERSION</name>
          </field>
        </fields>
        <name>DATE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x1907160</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <resetMask>0xFFFFFFFF</resetMask>
    <resetValue>0x0</resetValue>
  </peripheral>
</peripherals>
<peripherals>
  <peripheral>
    <addressBlock>
      <offset>0x0</offset>
      <size>0xD8</size>
      <usage>registers</usage>
    </addressBlock>
    <baseAddress>0x3F419000</baseAddress>
    <description>LED PWM (Pulse Width Modulation) Controller</description>
    <groupName>LEDC</groupName>
    <interrupts>
      <interrupt>
        <name>LEDC</name>
        <value>0x2D</value>
      </interrupt>
    </interrupts>
    <interrupts>
      <interrupt>
        <name>TIMER1</name>
        <value>0x3C</value>
      </interrupt>
    </interrupts>
    <interrupts>
      <interrupt>
        <name>TIMER2</name>
        <value>0x3D</value>
      </interrupt>
    </interrupts>
    <name>LEDC</name>
    <registers>
      <register>
        <addressOffset>0xC0</addressOffset>
        <description>Raw interrupt status</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Triggered when the timer0 has reached its maximum counter value.</description>
            <name>TIMER0_OVF_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Triggered when the timer1 has reached its maximum counter value.</description>
            <name>TIMER1_OVF_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Triggered when the timer2 has reached its maximum counter value.</description>
            <name>TIMER2_OVF_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Triggered when the timer3 has reached its maximum counter value.</description>
            <name>TIMER3_OVF_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Interrupt raw bit for channel 0. Triggered when the gradual change of duty has finished.</description>
            <name>DUTY_CHNG_END_CH0_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Interrupt raw bit for channel 1. Triggered when the gradual change of duty has finished.</description>
            <name>DUTY_CHNG_END_CH1_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Interrupt raw bit for channel 2. Triggered when the gradual change of duty has finished.</description>
            <name>DUTY_CHNG_END_CH2_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Interrupt raw bit for channel 3. Triggered when the gradual change of duty has finished.</description>
            <name>DUTY_CHNG_END_CH3_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Interrupt raw bit for channel 4. Triggered when the gradual change of duty has finished.</description>
            <name>DUTY_CHNG_END_CH4_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Interrupt raw bit for channel 5. Triggered when the gradual change of duty has finished.</description>
            <name>DUTY_CHNG_END_CH5_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Interrupt raw bit for channel 6. Triggered when the gradual change of duty has finished.</description>
            <name>DUTY_CHNG_END_CH6_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Interrupt raw bit for channel 7. Triggered when the gradual change of duty has finished.</description>
            <name>DUTY_CHNG_END_CH7_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Interrupt raw bit for channel 0. Triggered when the ovf_cnt has reached the value specified by LEDC_OVF_NUM_CH0.</description>
            <name>OVF_CNT_CH0_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Interrupt raw bit for channel 1. Triggered when the ovf_cnt has reached the value specified by LEDC_OVF_NUM_CH1.</description>
            <name>OVF_CNT_CH1_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Interrupt raw bit for channel 2. Triggered when the ovf_cnt has reached the value specified by LEDC_OVF_NUM_CH2.</description>
            <name>OVF_CNT_CH2_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Interrupt raw bit for channel 3. Triggered when the ovf_cnt has reached the value specified by LEDC_OVF_NUM_CH3.</description>
            <name>OVF_CNT_CH3_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Interrupt raw bit for channel 4. Triggered when the ovf_cnt has reached the value specified by LEDC_OVF_NUM_CH4.</description>
            <name>OVF_CNT_CH4_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Interrupt raw bit for channel 5. Triggered when the ovf_cnt has reached the value specified by LEDC_OVF_NUM_CH5.</description>
            <name>OVF_CNT_CH5_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Interrupt raw bit for channel 6. Triggered when the ovf_cnt has reached the value specified by LEDC_OVF_NUM_CH6.</description>
            <name>OVF_CNT_CH6_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Interrupt raw bit for channel 7. Triggered when the ovf_cnt has reached the value specified by LEDC_OVF_NUM_CH7.</description>
            <name>OVF_CNT_CH7_INT_RAW</name>
          </field>
        </fields>
        <name>INT_RAW</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xC4</addressOffset>
        <description>Masked interrupt status</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the masked interrupt status bit for the LEDC_TIMER0_OVF_INT interrupt when LEDC_TIMER0_OVF_INT_ENA is set to 1.</description>
            <name>TIMER0_OVF_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the masked interrupt status bit for the LEDC_TIMER1_OVF_INT interrupt when LEDC_TIMER1_OVF_INT_ENA is set to 1.</description>
            <name>TIMER1_OVF_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the masked interrupt status bit for the LEDC_TIMER2_OVF_INT interrupt when LEDC_TIMER2_OVF_INT_ENA is set to 1.</description>
            <name>TIMER2_OVF_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the masked interrupt status bit for the LEDC_TIMER3_OVF_INT interrupt when LEDC_TIMER3_OVF_INT_ENA is set to 1.</description>
            <name>TIMER3_OVF_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the masked interrupt status bit for the LEDC_DUTY_CHNG_END_CH0_INT interrupt when LEDC_DUTY_CHNG_END_CH0_INT_ENAIS set to 1.</description>
            <name>DUTY_CHNG_END_CH0_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the masked interrupt status bit for the LEDC_DUTY_CHNG_END_CH1_INT interrupt when LEDC_DUTY_CHNG_END_CH1_INT_ENAIS set to 1.</description>
            <name>DUTY_CHNG_END_CH1_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the masked interrupt status bit for the LEDC_DUTY_CHNG_END_CH2_INT interrupt when LEDC_DUTY_CHNG_END_CH2_INT_ENAIS set to 1.</description>
            <name>DUTY_CHNG_END_CH2_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the masked interrupt status bit for the LEDC_DUTY_CHNG_END_CH3_INT interrupt when LEDC_DUTY_CHNG_END_CH3_INT_ENAIS set to 1.</description>
            <name>DUTY_CHNG_END_CH3_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the masked interrupt status bit for the LEDC_DUTY_CHNG_END_CH4_INT interrupt when LEDC_DUTY_CHNG_END_CH4_INT_ENAIS set to 1.</description>
            <name>DUTY_CHNG_END_CH4_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the masked interrupt status bit for the LEDC_DUTY_CHNG_END_CH5_INT interrupt when LEDC_DUTY_CHNG_END_CH5_INT_ENAIS set to 1.</description>
            <name>DUTY_CHNG_END_CH5_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the masked interrupt status bit for the LEDC_DUTY_CHNG_END_CH6_INT interrupt when LEDC_DUTY_CHNG_END_CH6_INT_ENAIS set to 1.</description>
            <name>DUTY_CHNG_END_CH6_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the masked interrupt status bit for the LEDC_DUTY_CHNG_END_CH7_INT interrupt when LEDC_DUTY_CHNG_END_CH7_INT_ENAIS set to 1.</description>
            <name>DUTY_CHNG_END_CH7_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the masked interrupt status bit for the LEDC_OVF_CNT_CH0_INT interrupt when LEDC_OVF_CNT_CH0_INT_ENA is set to 1.</description>
            <name>OVF_CNT_CH0_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the masked interrupt status bit for the LEDC_OVF_CNT_CH1_INT interrupt when LEDC_OVF_CNT_CH1_INT_ENA is set to 1.</description>
            <name>OVF_CNT_CH1_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the masked interrupt status bit for the LEDC_OVF_CNT_CH2_INT interrupt when LEDC_OVF_CNT_CH2_INT_ENA is set to 1.</description>
            <name>OVF_CNT_CH2_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the masked interrupt status bit for the LEDC_OVF_CNT_CH3_INT interrupt when LEDC_OVF_CNT_CH3_INT_ENA is set to 1.</description>
            <name>OVF_CNT_CH3_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the masked interrupt status bit for the LEDC_OVF_CNT_CH4_INT interrupt when LEDC_OVF_CNT_CH4_INT_ENA is set to 1.</description>
            <name>OVF_CNT_CH4_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the masked interrupt status bit for the LEDC_OVF_CNT_CH5_INT interrupt when LEDC_OVF_CNT_CH5_INT_ENA is set to 1.</description>
            <name>OVF_CNT_CH5_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the masked interrupt status bit for the LEDC_OVF_CNT_CH6_INT interrupt when LEDC_OVF_CNT_CH6_INT_ENA is set to 1.</description>
            <name>OVF_CNT_CH6_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the masked interrupt status bit for the LEDC_OVF_CNT_CH7_INT interrupt when LEDC_OVF_CNT_CH7_INT_ENA is set to 1.</description>
            <name>OVF_CNT_CH7_INT_ST</name>
          </field>
        </fields>
        <name>INT_ST</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xC8</addressOffset>
        <description>Interrupt enable bits</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt enable bit for the LEDC_TIMER0_OVF_INT interrupt.</description>
            <name>TIMER0_OVF_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt enable bit for the LEDC_TIMER1_OVF_INT interrupt.</description>
            <name>TIMER1_OVF_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt enable bit for the LEDC_TIMER2_OVF_INT interrupt.</description>
            <name>TIMER2_OVF_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt enable bit for the LEDC_TIMER3_OVF_INT interrupt.</description>
            <name>TIMER3_OVF_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt enable bit for the LEDC_DUTY_CHNG_END_CH0_INT interrupt.</description>
            <name>DUTY_CHNG_END_CH0_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt enable bit for the LEDC_DUTY_CHNG_END_CH1_INT interrupt.</description>
            <name>DUTY_CHNG_END_CH1_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt enable bit for the LEDC_DUTY_CHNG_END_CH2_INT interrupt.</description>
            <name>DUTY_CHNG_END_CH2_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt enable bit for the LEDC_DUTY_CHNG_END_CH3_INT interrupt.</description>
            <name>DUTY_CHNG_END_CH3_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt enable bit for the LEDC_DUTY_CHNG_END_CH4_INT interrupt.</description>
            <name>DUTY_CHNG_END_CH4_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt enable bit for the LEDC_DUTY_CHNG_END_CH5_INT interrupt.</description>
            <name>DUTY_CHNG_END_CH5_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt enable bit for the LEDC_DUTY_CHNG_END_CH6_INT interrupt.</description>
            <name>DUTY_CHNG_END_CH6_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt enable bit for the LEDC_DUTY_CHNG_END_CH7_INT interrupt.</description>
            <name>DUTY_CHNG_END_CH7_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt enable bit for the LEDC_OVF_CNT_CH0_INT interrupt.</description>
            <name>OVF_CNT_CH0_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt enable bit for the LEDC_OVF_CNT_CH1_INT interrupt.</description>
            <name>OVF_CNT_CH1_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt enable bit for the LEDC_OVF_CNT_CH2_INT interrupt.</description>
            <name>OVF_CNT_CH2_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt enable bit for the LEDC_OVF_CNT_CH3_INT interrupt.</description>
            <name>OVF_CNT_CH3_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt enable bit for the LEDC_OVF_CNT_CH4_INT interrupt.</description>
            <name>OVF_CNT_CH4_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt enable bit for the LEDC_OVF_CNT_CH5_INT interrupt.</description>
            <name>OVF_CNT_CH5_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt enable bit for the LEDC_OVF_CNT_CH6_INT interrupt.</description>
            <name>OVF_CNT_CH6_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt enable bit for the LEDC_OVF_CNT_CH7_INT interrupt.</description>
            <name>OVF_CNT_CH7_INT_ENA</name>
          </field>
        </fields>
        <name>INT_ENA</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xCC</addressOffset>
        <description>Interrupt clear bits</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear the LEDC_TIMER0_OVF_INT interrupt.</description>
            <name>TIMER0_OVF_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear the LEDC_TIMER1_OVF_INT interrupt.</description>
            <name>TIMER1_OVF_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear the LEDC_TIMER2_OVF_INT interrupt.</description>
            <name>TIMER2_OVF_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear the LEDC_TIMER3_OVF_INT interrupt.</description>
            <name>TIMER3_OVF_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear the LEDC_DUTY_CHNG_END_CH0_INT interrupt.</description>
            <name>DUTY_CHNG_END_CH0_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear the LEDC_DUTY_CHNG_END_CH1_INT interrupt.</description>
            <name>DUTY_CHNG_END_CH1_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear the LEDC_DUTY_CHNG_END_CH2_INT interrupt.</description>
            <name>DUTY_CHNG_END_CH2_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear the LEDC_DUTY_CHNG_END_CH3_INT interrupt.</description>
            <name>DUTY_CHNG_END_CH3_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear the LEDC_DUTY_CHNG_END_CH4_INT interrupt.</description>
            <name>DUTY_CHNG_END_CH4_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear the LEDC_DUTY_CHNG_END_CH5_INT interrupt.</description>
            <name>DUTY_CHNG_END_CH5_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear the LEDC_DUTY_CHNG_END_CH6_INT interrupt.</description>
            <name>DUTY_CHNG_END_CH6_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear the LEDC_DUTY_CHNG_END_CH7_INT interrupt.</description>
            <name>DUTY_CHNG_END_CH7_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear the LEDC_OVF_CNT_CH0_INT interrupt.</description>
            <name>OVF_CNT_CH0_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear the LEDC_OVF_CNT_CH1_INT interrupt.</description>
            <name>OVF_CNT_CH1_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear the LEDC_OVF_CNT_CH2_INT interrupt.</description>
            <name>OVF_CNT_CH2_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear the LEDC_OVF_CNT_CH3_INT interrupt.</description>
            <name>OVF_CNT_CH3_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear the LEDC_OVF_CNT_CH4_INT interrupt.</description>
            <name>OVF_CNT_CH4_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear the LEDC_OVF_CNT_CH5_INT interrupt.</description>
            <name>OVF_CNT_CH5_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear the LEDC_OVF_CNT_CH6_INT interrupt.</description>
            <name>OVF_CNT_CH6_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear the LEDC_OVF_CNT_CH7_INT interrupt.</description>
            <name>OVF_CNT_CH7_INT_CLR</name>
          </field>
        </fields>
        <name>INT_CLR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xD0</addressOffset>
        <description>Global ledc configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>This bit is used to select clock source for the 4 timers . 1: APB_CLK. 2: RTC8M_CLK. 3: XTAL_CLK.</description>
            <name>APB_CLK_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This bit is used to control clock. 1: Force clock on for register. 0: Support clock only when application writes registers.</description>
            <name>CLK_EN</name>
          </field>
        </fields>
        <name>CONF</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xFC</addressOffset>
        <description>Version control register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>This is the version control register.</description>
            <name>DATE</name>
          </field>
        </fields>
        <name>DATE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x19072601</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x0</addressOffset>
        <description>Configuration register 0 for channel %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>This field is used to select one of timers for channel %s.
            
            0: select timer 0.
            
            1: select timer 1.
            
            2: select timer 2.
            
            3: select timer 3.</description>
            <name>TIMER_SEL_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable signal output on channel %s.</description>
            <name>SIG_OUT_EN_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This bit is used to control the output value when channel %s is inactive.</description>
            <name>IDLE_LV_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This bit is used to update register LEDC_CH%s_HPOINT and LEDC_CH%s_DUTY for channel %s.</description>
            <name>PARA_UP_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>This register is used to configure the maximum times of overflow minus 1. The LEDC_OVF_CNT_CH%s_INT interrupt will be triggered when channel %s overflows for (LEDC_OVF_NUM_CH%s + 1) times.</description>
            <name>OVF_NUM_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This bit is used to enable the ovf_cnt of channel %s.</description>
            <name>OVF_CNT_EN_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to reset the ovf_cnt of channel %s.</description>
            <name>OVF_CNT_RESET_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the status bit of LEDC_OVF_CNT_RESET_CH%s.</description>
            <name>OVF_CNT_RESET_ST_CH0</name>
          </field>
        </fields>
        <name>CH0_CONF0</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x14</addressOffset>
        <description>Configuration register 0 for channel %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>This field is used to select one of timers for channel %s.
            
            0: select timer 0.
            
            1: select timer 1.
            
            2: select timer 2.
            
            3: select timer 3.</description>
            <name>TIMER_SEL_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable signal output on channel %s.</description>
            <name>SIG_OUT_EN_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This bit is used to control the output value when channel %s is inactive.</description>
            <name>IDLE_LV_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This bit is used to update register LEDC_CH%s_HPOINT and LEDC_CH%s_DUTY for channel %s.</description>
            <name>PARA_UP_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>This register is used to configure the maximum times of overflow minus 1. The LEDC_OVF_CNT_CH%s_INT interrupt will be triggered when channel %s overflows for (LEDC_OVF_NUM_CH%s + 1) times.</description>
            <name>OVF_NUM_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This bit is used to enable the ovf_cnt of channel %s.</description>
            <name>OVF_CNT_EN_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to reset the ovf_cnt of channel %s.</description>
            <name>OVF_CNT_RESET_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the status bit of LEDC_OVF_CNT_RESET_CH%s.</description>
            <name>OVF_CNT_RESET_ST_CH0</name>
          </field>
        </fields>
        <name>CH1_CONF0</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x28</addressOffset>
        <description>Configuration register 0 for channel %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>This field is used to select one of timers for channel %s.
            
            0: select timer 0.
            
            1: select timer 1.
            
            2: select timer 2.
            
            3: select timer 3.</description>
            <name>TIMER_SEL_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable signal output on channel %s.</description>
            <name>SIG_OUT_EN_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This bit is used to control the output value when channel %s is inactive.</description>
            <name>IDLE_LV_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This bit is used to update register LEDC_CH%s_HPOINT and LEDC_CH%s_DUTY for channel %s.</description>
            <name>PARA_UP_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>This register is used to configure the maximum times of overflow minus 1. The LEDC_OVF_CNT_CH%s_INT interrupt will be triggered when channel %s overflows for (LEDC_OVF_NUM_CH%s + 1) times.</description>
            <name>OVF_NUM_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This bit is used to enable the ovf_cnt of channel %s.</description>
            <name>OVF_CNT_EN_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to reset the ovf_cnt of channel %s.</description>
            <name>OVF_CNT_RESET_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the status bit of LEDC_OVF_CNT_RESET_CH%s.</description>
            <name>OVF_CNT_RESET_ST_CH0</name>
          </field>
        </fields>
        <name>CH2_CONF0</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3C</addressOffset>
        <description>Configuration register 0 for channel %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>This field is used to select one of timers for channel %s.
            
            0: select timer 0.
            
            1: select timer 1.
            
            2: select timer 2.
            
            3: select timer 3.</description>
            <name>TIMER_SEL_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable signal output on channel %s.</description>
            <name>SIG_OUT_EN_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This bit is used to control the output value when channel %s is inactive.</description>
            <name>IDLE_LV_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This bit is used to update register LEDC_CH%s_HPOINT and LEDC_CH%s_DUTY for channel %s.</description>
            <name>PARA_UP_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>This register is used to configure the maximum times of overflow minus 1. The LEDC_OVF_CNT_CH%s_INT interrupt will be triggered when channel %s overflows for (LEDC_OVF_NUM_CH%s + 1) times.</description>
            <name>OVF_NUM_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This bit is used to enable the ovf_cnt of channel %s.</description>
            <name>OVF_CNT_EN_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to reset the ovf_cnt of channel %s.</description>
            <name>OVF_CNT_RESET_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the status bit of LEDC_OVF_CNT_RESET_CH%s.</description>
            <name>OVF_CNT_RESET_ST_CH0</name>
          </field>
        </fields>
        <name>CH3_CONF0</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x50</addressOffset>
        <description>Configuration register 0 for channel %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>This field is used to select one of timers for channel %s.
            
            0: select timer 0.
            
            1: select timer 1.
            
            2: select timer 2.
            
            3: select timer 3.</description>
            <name>TIMER_SEL_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable signal output on channel %s.</description>
            <name>SIG_OUT_EN_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This bit is used to control the output value when channel %s is inactive.</description>
            <name>IDLE_LV_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This bit is used to update register LEDC_CH%s_HPOINT and LEDC_CH%s_DUTY for channel %s.</description>
            <name>PARA_UP_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>This register is used to configure the maximum times of overflow minus 1. The LEDC_OVF_CNT_CH%s_INT interrupt will be triggered when channel %s overflows for (LEDC_OVF_NUM_CH%s + 1) times.</description>
            <name>OVF_NUM_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This bit is used to enable the ovf_cnt of channel %s.</description>
            <name>OVF_CNT_EN_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to reset the ovf_cnt of channel %s.</description>
            <name>OVF_CNT_RESET_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the status bit of LEDC_OVF_CNT_RESET_CH%s.</description>
            <name>OVF_CNT_RESET_ST_CH0</name>
          </field>
        </fields>
        <name>CH4_CONF0</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x64</addressOffset>
        <description>Configuration register 0 for channel %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>This field is used to select one of timers for channel %s.
            
            0: select timer 0.
            
            1: select timer 1.
            
            2: select timer 2.
            
            3: select timer 3.</description>
            <name>TIMER_SEL_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable signal output on channel %s.</description>
            <name>SIG_OUT_EN_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This bit is used to control the output value when channel %s is inactive.</description>
            <name>IDLE_LV_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This bit is used to update register LEDC_CH%s_HPOINT and LEDC_CH%s_DUTY for channel %s.</description>
            <name>PARA_UP_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>This register is used to configure the maximum times of overflow minus 1. The LEDC_OVF_CNT_CH%s_INT interrupt will be triggered when channel %s overflows for (LEDC_OVF_NUM_CH%s + 1) times.</description>
            <name>OVF_NUM_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This bit is used to enable the ovf_cnt of channel %s.</description>
            <name>OVF_CNT_EN_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to reset the ovf_cnt of channel %s.</description>
            <name>OVF_CNT_RESET_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the status bit of LEDC_OVF_CNT_RESET_CH%s.</description>
            <name>OVF_CNT_RESET_ST_CH0</name>
          </field>
        </fields>
        <name>CH5_CONF0</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x78</addressOffset>
        <description>Configuration register 0 for channel %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>This field is used to select one of timers for channel %s.
            
            0: select timer 0.
            
            1: select timer 1.
            
            2: select timer 2.
            
            3: select timer 3.</description>
            <name>TIMER_SEL_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable signal output on channel %s.</description>
            <name>SIG_OUT_EN_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This bit is used to control the output value when channel %s is inactive.</description>
            <name>IDLE_LV_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This bit is used to update register LEDC_CH%s_HPOINT and LEDC_CH%s_DUTY for channel %s.</description>
            <name>PARA_UP_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>This register is used to configure the maximum times of overflow minus 1. The LEDC_OVF_CNT_CH%s_INT interrupt will be triggered when channel %s overflows for (LEDC_OVF_NUM_CH%s + 1) times.</description>
            <name>OVF_NUM_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This bit is used to enable the ovf_cnt of channel %s.</description>
            <name>OVF_CNT_EN_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to reset the ovf_cnt of channel %s.</description>
            <name>OVF_CNT_RESET_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the status bit of LEDC_OVF_CNT_RESET_CH%s.</description>
            <name>OVF_CNT_RESET_ST_CH0</name>
          </field>
        </fields>
        <name>CH6_CONF0</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8C</addressOffset>
        <description>Configuration register 0 for channel %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>This field is used to select one of timers for channel %s.
            
            0: select timer 0.
            
            1: select timer 1.
            
            2: select timer 2.
            
            3: select timer 3.</description>
            <name>TIMER_SEL_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable signal output on channel %s.</description>
            <name>SIG_OUT_EN_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This bit is used to control the output value when channel %s is inactive.</description>
            <name>IDLE_LV_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This bit is used to update register LEDC_CH%s_HPOINT and LEDC_CH%s_DUTY for channel %s.</description>
            <name>PARA_UP_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>This register is used to configure the maximum times of overflow minus 1. The LEDC_OVF_CNT_CH%s_INT interrupt will be triggered when channel %s overflows for (LEDC_OVF_NUM_CH%s + 1) times.</description>
            <name>OVF_NUM_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This bit is used to enable the ovf_cnt of channel %s.</description>
            <name>OVF_CNT_EN_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to reset the ovf_cnt of channel %s.</description>
            <name>OVF_CNT_RESET_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the status bit of LEDC_OVF_CNT_RESET_CH%s.</description>
            <name>OVF_CNT_RESET_ST_CH0</name>
          </field>
        </fields>
        <name>CH7_CONF0</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4</addressOffset>
        <description>High point register for channel %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xE</bitWidth>
            <description>The output value changes to high when the selected timers has reached the value specified by this register.</description>
            <name>HPOINT_CH0</name>
          </field>
        </fields>
        <name>CH0_HPOINT</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x18</addressOffset>
        <description>High point register for channel %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xE</bitWidth>
            <description>The output value changes to high when the selected timers has reached the value specified by this register.</description>
            <name>HPOINT_CH0</name>
          </field>
        </fields>
        <name>CH1_HPOINT</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2C</addressOffset>
        <description>High point register for channel %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xE</bitWidth>
            <description>The output value changes to high when the selected timers has reached the value specified by this register.</description>
            <name>HPOINT_CH0</name>
          </field>
        </fields>
        <name>CH2_HPOINT</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x40</addressOffset>
        <description>High point register for channel %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xE</bitWidth>
            <description>The output value changes to high when the selected timers has reached the value specified by this register.</description>
            <name>HPOINT_CH0</name>
          </field>
        </fields>
        <name>CH3_HPOINT</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x54</addressOffset>
        <description>High point register for channel %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xE</bitWidth>
            <description>The output value changes to high when the selected timers has reached the value specified by this register.</description>
            <name>HPOINT_CH0</name>
          </field>
        </fields>
        <name>CH4_HPOINT</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x68</addressOffset>
        <description>High point register for channel %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xE</bitWidth>
            <description>The output value changes to high when the selected timers has reached the value specified by this register.</description>
            <name>HPOINT_CH0</name>
          </field>
        </fields>
        <name>CH5_HPOINT</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x7C</addressOffset>
        <description>High point register for channel %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xE</bitWidth>
            <description>The output value changes to high when the selected timers has reached the value specified by this register.</description>
            <name>HPOINT_CH0</name>
          </field>
        </fields>
        <name>CH6_HPOINT</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x90</addressOffset>
        <description>High point register for channel %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xE</bitWidth>
            <description>The output value changes to high when the selected timers has reached the value specified by this register.</description>
            <name>HPOINT_CH0</name>
          </field>
        </fields>
        <name>CH7_HPOINT</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8</addressOffset>
        <description>Initial duty cycle for channel %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x13</bitWidth>
            <description>This register is used to change the output duty by controlling the Lpoint. The output value turns to low when the selected timers has reached the Lpoint.</description>
            <name>DUTY_CH0</name>
          </field>
        </fields>
        <name>CH0_DUTY</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1C</addressOffset>
        <description>Initial duty cycle for channel %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x13</bitWidth>
            <description>This register is used to change the output duty by controlling the Lpoint. The output value turns to low when the selected timers has reached the Lpoint.</description>
            <name>DUTY_CH0</name>
          </field>
        </fields>
        <name>CH1_DUTY</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x30</addressOffset>
        <description>Initial duty cycle for channel %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x13</bitWidth>
            <description>This register is used to change the output duty by controlling the Lpoint. The output value turns to low when the selected timers has reached the Lpoint.</description>
            <name>DUTY_CH0</name>
          </field>
        </fields>
        <name>CH2_DUTY</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x44</addressOffset>
        <description>Initial duty cycle for channel %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x13</bitWidth>
            <description>This register is used to change the output duty by controlling the Lpoint. The output value turns to low when the selected timers has reached the Lpoint.</description>
            <name>DUTY_CH0</name>
          </field>
        </fields>
        <name>CH3_DUTY</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x58</addressOffset>
        <description>Initial duty cycle for channel %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x13</bitWidth>
            <description>This register is used to change the output duty by controlling the Lpoint. The output value turns to low when the selected timers has reached the Lpoint.</description>
            <name>DUTY_CH0</name>
          </field>
        </fields>
        <name>CH4_DUTY</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x6C</addressOffset>
        <description>Initial duty cycle for channel %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x13</bitWidth>
            <description>This register is used to change the output duty by controlling the Lpoint. The output value turns to low when the selected timers has reached the Lpoint.</description>
            <name>DUTY_CH0</name>
          </field>
        </fields>
        <name>CH5_DUTY</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x80</addressOffset>
        <description>Initial duty cycle for channel %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x13</bitWidth>
            <description>This register is used to change the output duty by controlling the Lpoint. The output value turns to low when the selected timers has reached the Lpoint.</description>
            <name>DUTY_CH0</name>
          </field>
        </fields>
        <name>CH6_DUTY</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x94</addressOffset>
        <description>Initial duty cycle for channel %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x13</bitWidth>
            <description>This register is used to change the output duty by controlling the Lpoint. The output value turns to low when the selected timers has reached the Lpoint.</description>
            <name>DUTY_CH0</name>
          </field>
        </fields>
        <name>CH7_DUTY</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xC</addressOffset>
        <description>Configuration register 1 for channel %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>This register is used to configure the changing step scale of duty on channel %s.</description>
            <name>DUTY_SCALE_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>The duty will change every LEDC_DUTY_CYCLE_CH%s on channel %s.</description>
            <name>DUTY_CYCLE_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>This register is used to control the number of times the duty cycle will be changed.</description>
            <name>DUTY_NUM_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This register is used to increase or decrease the duty of output signal on channel %s. 1: Increase. 0: Decrease.</description>
            <name>DUTY_INC_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Other configured fields in LEDC_CH%s_CONF1_REG will start to take effect when this bit is set to 1.</description>
            <name>DUTY_START_CH0</name>
          </field>
        </fields>
        <name>CH0_CONF1</name>
        <resetValue>0x40000000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x20</addressOffset>
        <description>Configuration register 1 for channel %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>This register is used to configure the changing step scale of duty on channel %s.</description>
            <name>DUTY_SCALE_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>The duty will change every LEDC_DUTY_CYCLE_CH%s on channel %s.</description>
            <name>DUTY_CYCLE_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>This register is used to control the number of times the duty cycle will be changed.</description>
            <name>DUTY_NUM_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This register is used to increase or decrease the duty of output signal on channel %s. 1: Increase. 0: Decrease.</description>
            <name>DUTY_INC_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Other configured fields in LEDC_CH%s_CONF1_REG will start to take effect when this bit is set to 1.</description>
            <name>DUTY_START_CH0</name>
          </field>
        </fields>
        <name>CH1_CONF1</name>
        <resetValue>0x40000000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x34</addressOffset>
        <description>Configuration register 1 for channel %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>This register is used to configure the changing step scale of duty on channel %s.</description>
            <name>DUTY_SCALE_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>The duty will change every LEDC_DUTY_CYCLE_CH%s on channel %s.</description>
            <name>DUTY_CYCLE_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>This register is used to control the number of times the duty cycle will be changed.</description>
            <name>DUTY_NUM_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This register is used to increase or decrease the duty of output signal on channel %s. 1: Increase. 0: Decrease.</description>
            <name>DUTY_INC_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Other configured fields in LEDC_CH%s_CONF1_REG will start to take effect when this bit is set to 1.</description>
            <name>DUTY_START_CH0</name>
          </field>
        </fields>
        <name>CH2_CONF1</name>
        <resetValue>0x40000000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x48</addressOffset>
        <description>Configuration register 1 for channel %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>This register is used to configure the changing step scale of duty on channel %s.</description>
            <name>DUTY_SCALE_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>The duty will change every LEDC_DUTY_CYCLE_CH%s on channel %s.</description>
            <name>DUTY_CYCLE_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>This register is used to control the number of times the duty cycle will be changed.</description>
            <name>DUTY_NUM_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This register is used to increase or decrease the duty of output signal on channel %s. 1: Increase. 0: Decrease.</description>
            <name>DUTY_INC_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Other configured fields in LEDC_CH%s_CONF1_REG will start to take effect when this bit is set to 1.</description>
            <name>DUTY_START_CH0</name>
          </field>
        </fields>
        <name>CH3_CONF1</name>
        <resetValue>0x40000000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5C</addressOffset>
        <description>Configuration register 1 for channel %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>This register is used to configure the changing step scale of duty on channel %s.</description>
            <name>DUTY_SCALE_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>The duty will change every LEDC_DUTY_CYCLE_CH%s on channel %s.</description>
            <name>DUTY_CYCLE_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>This register is used to control the number of times the duty cycle will be changed.</description>
            <name>DUTY_NUM_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This register is used to increase or decrease the duty of output signal on channel %s. 1: Increase. 0: Decrease.</description>
            <name>DUTY_INC_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Other configured fields in LEDC_CH%s_CONF1_REG will start to take effect when this bit is set to 1.</description>
            <name>DUTY_START_CH0</name>
          </field>
        </fields>
        <name>CH4_CONF1</name>
        <resetValue>0x40000000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x70</addressOffset>
        <description>Configuration register 1 for channel %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>This register is used to configure the changing step scale of duty on channel %s.</description>
            <name>DUTY_SCALE_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>The duty will change every LEDC_DUTY_CYCLE_CH%s on channel %s.</description>
            <name>DUTY_CYCLE_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>This register is used to control the number of times the duty cycle will be changed.</description>
            <name>DUTY_NUM_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This register is used to increase or decrease the duty of output signal on channel %s. 1: Increase. 0: Decrease.</description>
            <name>DUTY_INC_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Other configured fields in LEDC_CH%s_CONF1_REG will start to take effect when this bit is set to 1.</description>
            <name>DUTY_START_CH0</name>
          </field>
        </fields>
        <name>CH5_CONF1</name>
        <resetValue>0x40000000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x84</addressOffset>
        <description>Configuration register 1 for channel %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>This register is used to configure the changing step scale of duty on channel %s.</description>
            <name>DUTY_SCALE_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>The duty will change every LEDC_DUTY_CYCLE_CH%s on channel %s.</description>
            <name>DUTY_CYCLE_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>This register is used to control the number of times the duty cycle will be changed.</description>
            <name>DUTY_NUM_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This register is used to increase or decrease the duty of output signal on channel %s. 1: Increase. 0: Decrease.</description>
            <name>DUTY_INC_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Other configured fields in LEDC_CH%s_CONF1_REG will start to take effect when this bit is set to 1.</description>
            <name>DUTY_START_CH0</name>
          </field>
        </fields>
        <name>CH6_CONF1</name>
        <resetValue>0x40000000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x98</addressOffset>
        <description>Configuration register 1 for channel %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>This register is used to configure the changing step scale of duty on channel %s.</description>
            <name>DUTY_SCALE_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>The duty will change every LEDC_DUTY_CYCLE_CH%s on channel %s.</description>
            <name>DUTY_CYCLE_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>This register is used to control the number of times the duty cycle will be changed.</description>
            <name>DUTY_NUM_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This register is used to increase or decrease the duty of output signal on channel %s. 1: Increase. 0: Decrease.</description>
            <name>DUTY_INC_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Other configured fields in LEDC_CH%s_CONF1_REG will start to take effect when this bit is set to 1.</description>
            <name>DUTY_START_CH0</name>
          </field>
        </fields>
        <name>CH7_CONF1</name>
        <resetValue>0x40000000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x10</addressOffset>
        <description>Current duty cycle for channel %s</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x13</bitWidth>
            <description>This register stores the current duty of output signal on channel %s.</description>
            <name>DUTY_R_CH0</name>
          </field>
        </fields>
        <name>CH0_DUTY_R</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x24</addressOffset>
        <description>Current duty cycle for channel %s</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x13</bitWidth>
            <description>This register stores the current duty of output signal on channel %s.</description>
            <name>DUTY_R_CH0</name>
          </field>
        </fields>
        <name>CH1_DUTY_R</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x38</addressOffset>
        <description>Current duty cycle for channel %s</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x13</bitWidth>
            <description>This register stores the current duty of output signal on channel %s.</description>
            <name>DUTY_R_CH0</name>
          </field>
        </fields>
        <name>CH2_DUTY_R</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4C</addressOffset>
        <description>Current duty cycle for channel %s</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x13</bitWidth>
            <description>This register stores the current duty of output signal on channel %s.</description>
            <name>DUTY_R_CH0</name>
          </field>
        </fields>
        <name>CH3_DUTY_R</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x60</addressOffset>
        <description>Current duty cycle for channel %s</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x13</bitWidth>
            <description>This register stores the current duty of output signal on channel %s.</description>
            <name>DUTY_R_CH0</name>
          </field>
        </fields>
        <name>CH4_DUTY_R</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x74</addressOffset>
        <description>Current duty cycle for channel %s</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x13</bitWidth>
            <description>This register stores the current duty of output signal on channel %s.</description>
            <name>DUTY_R_CH0</name>
          </field>
        </fields>
        <name>CH5_DUTY_R</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x88</addressOffset>
        <description>Current duty cycle for channel %s</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x13</bitWidth>
            <description>This register stores the current duty of output signal on channel %s.</description>
            <name>DUTY_R_CH0</name>
          </field>
        </fields>
        <name>CH6_DUTY_R</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9C</addressOffset>
        <description>Current duty cycle for channel %s</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x13</bitWidth>
            <description>This register stores the current duty of output signal on channel %s.</description>
            <name>DUTY_R_CH0</name>
          </field>
        </fields>
        <name>CH7_DUTY_R</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA0</addressOffset>
        <description>Timer %s configuration</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>This register is used to control the range of the counter in timer %s.</description>
            <name>TIMER0_DUTY_RES</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x12</bitWidth>
            <description>This register is used to configure the divisor for the divider in timer %s. The least significant eight bits represent the fractional part.</description>
            <name>CLK_DIV_TIMER0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This bit is used to suspend the counter in timer %s.</description>
            <name>TIMER0_PAUSE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This bit is used to reset timer %s. The counter will show 0 after reset.</description>
            <name>TIMER0_RST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This bit is used to select clock for timer %s. When this bit is set to 1 LEDC_APB_CLK_SEL[1:0] should be 1, otherwise the timer clock may be not accurate. 0: LEDC_PWM_CLK. 1: REF_TICK.</description>
            <name>TICK_SEL_TIMER0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to update LEDC_CLK_DIV_TIMER%s and LEDC_TIMER%s_DUTY_RES.</description>
            <name>TIMER0_PARA_UP</name>
          </field>
        </fields>
        <name>TIMER0_CONF</name>
        <resetValue>0x800000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA8</addressOffset>
        <description>Timer %s configuration</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>This register is used to control the range of the counter in timer %s.</description>
            <name>TIMER0_DUTY_RES</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x12</bitWidth>
            <description>This register is used to configure the divisor for the divider in timer %s. The least significant eight bits represent the fractional part.</description>
            <name>CLK_DIV_TIMER0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This bit is used to suspend the counter in timer %s.</description>
            <name>TIMER0_PAUSE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This bit is used to reset timer %s. The counter will show 0 after reset.</description>
            <name>TIMER0_RST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This bit is used to select clock for timer %s. When this bit is set to 1 LEDC_APB_CLK_SEL[1:0] should be 1, otherwise the timer clock may be not accurate. 0: LEDC_PWM_CLK. 1: REF_TICK.</description>
            <name>TICK_SEL_TIMER0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to update LEDC_CLK_DIV_TIMER%s and LEDC_TIMER%s_DUTY_RES.</description>
            <name>TIMER0_PARA_UP</name>
          </field>
        </fields>
        <name>TIMER1_CONF</name>
        <resetValue>0x800000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB0</addressOffset>
        <description>Timer %s configuration</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>This register is used to control the range of the counter in timer %s.</description>
            <name>TIMER0_DUTY_RES</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x12</bitWidth>
            <description>This register is used to configure the divisor for the divider in timer %s. The least significant eight bits represent the fractional part.</description>
            <name>CLK_DIV_TIMER0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This bit is used to suspend the counter in timer %s.</description>
            <name>TIMER0_PAUSE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This bit is used to reset timer %s. The counter will show 0 after reset.</description>
            <name>TIMER0_RST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This bit is used to select clock for timer %s. When this bit is set to 1 LEDC_APB_CLK_SEL[1:0] should be 1, otherwise the timer clock may be not accurate. 0: LEDC_PWM_CLK. 1: REF_TICK.</description>
            <name>TICK_SEL_TIMER0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to update LEDC_CLK_DIV_TIMER%s and LEDC_TIMER%s_DUTY_RES.</description>
            <name>TIMER0_PARA_UP</name>
          </field>
        </fields>
        <name>TIMER2_CONF</name>
        <resetValue>0x800000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB8</addressOffset>
        <description>Timer %s configuration</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>This register is used to control the range of the counter in timer %s.</description>
            <name>TIMER0_DUTY_RES</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x12</bitWidth>
            <description>This register is used to configure the divisor for the divider in timer %s. The least significant eight bits represent the fractional part.</description>
            <name>CLK_DIV_TIMER0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This bit is used to suspend the counter in timer %s.</description>
            <name>TIMER0_PAUSE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This bit is used to reset timer %s. The counter will show 0 after reset.</description>
            <name>TIMER0_RST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This bit is used to select clock for timer %s. When this bit is set to 1 LEDC_APB_CLK_SEL[1:0] should be 1, otherwise the timer clock may be not accurate. 0: LEDC_PWM_CLK. 1: REF_TICK.</description>
            <name>TICK_SEL_TIMER0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to update LEDC_CLK_DIV_TIMER%s and LEDC_TIMER%s_DUTY_RES.</description>
            <name>TIMER0_PARA_UP</name>
          </field>
        </fields>
        <name>TIMER3_CONF</name>
        <resetValue>0x800000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA4</addressOffset>
        <description>Timer %s current counter value</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xE</bitWidth>
            <description>This register stores the current counter value of timer %s.</description>
            <name>TIMER0_CNT</name>
          </field>
        </fields>
        <name>TIMER0_VALUE</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAC</addressOffset>
        <description>Timer %s current counter value</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xE</bitWidth>
            <description>This register stores the current counter value of timer %s.</description>
            <name>TIMER0_CNT</name>
          </field>
        </fields>
        <name>TIMER1_VALUE</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB4</addressOffset>
        <description>Timer %s current counter value</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xE</bitWidth>
            <description>This register stores the current counter value of timer %s.</description>
            <name>TIMER0_CNT</name>
          </field>
        </fields>
        <name>TIMER2_VALUE</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBC</addressOffset>
        <description>Timer %s current counter value</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xE</bitWidth>
            <description>This register stores the current counter value of timer %s.</description>
            <name>TIMER0_CNT</name>
          </field>
        </fields>
        <name>TIMER3_VALUE</name>
        <size>0x20</size>
      </register>
    </registers>
    <resetMask>0xFFFFFFFF</resetMask>
    <resetValue>0x0</resetValue>
  </peripheral>
</peripherals>
<peripherals>
  <peripheral>
    <addressBlock>
      <offset>0x0</offset>
      <size>0x68</size>
      <usage>registers</usage>
    </addressBlock>
    <baseAddress>0x3F417000</baseAddress>
    <description>Pulse Count Controller</description>
    <groupName>PCNT</groupName>
    <interrupts>
      <interrupt>
        <name>PCNT</name>
        <value>0x33</value>
      </interrupt>
    </interrupts>
    <name>PCNT</name>
    <registers>
      <register>
        <addressOffset>0x40</addressOffset>
        <description>Interrupt raw status register</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt status bit for the PCNT_CNT_THR_EVENT_U0_INT interrupt.</description>
            <name>CNT_THR_EVENT_U0_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt status bit for the PCNT_CNT_THR_EVENT_U1_INT interrupt.</description>
            <name>CNT_THR_EVENT_U1_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt status bit for the PCNT_CNT_THR_EVENT_U2_INT interrupt.</description>
            <name>CNT_THR_EVENT_U2_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt status bit for the PCNT_CNT_THR_EVENT_U3_INT interrupt.</description>
            <name>CNT_THR_EVENT_U3_INT_RAW</name>
          </field>
        </fields>
        <name>INT_RAW</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x44</addressOffset>
        <description>Interrupt status register</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The masked interrupt status bit for the PCNT_CNT_THR_EVENT_U0_INT interrupt.</description>
            <name>CNT_THR_EVENT_U0_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The masked interrupt status bit for the PCNT_CNT_THR_EVENT_U1_INT interrupt.</description>
            <name>CNT_THR_EVENT_U1_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The masked interrupt status bit for the PCNT_CNT_THR_EVENT_U2_INT interrupt.</description>
            <name>CNT_THR_EVENT_U2_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The masked interrupt status bit for the PCNT_CNT_THR_EVENT_U3_INT interrupt.</description>
            <name>CNT_THR_EVENT_U3_INT_ST</name>
          </field>
        </fields>
        <name>INT_ST</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x48</addressOffset>
        <description>Interrupt enable register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt enable bit for the PCNT_CNT_THR_EVENT_U0_INT interrupt.</description>
            <name>CNT_THR_EVENT_U0_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt enable bit for the PCNT_CNT_THR_EVENT_U1_INT interrupt.</description>
            <name>CNT_THR_EVENT_U1_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt enable bit for the PCNT_CNT_THR_EVENT_U2_INT interrupt.</description>
            <name>CNT_THR_EVENT_U2_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt enable bit for the PCNT_CNT_THR_EVENT_U3_INT interrupt.</description>
            <name>CNT_THR_EVENT_U3_INT_ENA</name>
          </field>
        </fields>
        <name>INT_ENA</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4C</addressOffset>
        <description>Interrupt clear register</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear the PCNT_CNT_THR_EVENT_U0_INT interrupt.</description>
            <name>CNT_THR_EVENT_U0_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear the PCNT_CNT_THR_EVENT_U1_INT interrupt.</description>
            <name>CNT_THR_EVENT_U1_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear the PCNT_CNT_THR_EVENT_U2_INT interrupt.</description>
            <name>CNT_THR_EVENT_U2_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear the PCNT_CNT_THR_EVENT_U3_INT interrupt.</description>
            <name>CNT_THR_EVENT_U3_INT_CLR</name>
          </field>
        </fields>
        <name>INT_CLR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x60</addressOffset>
        <description>Control register for all counters</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear unit 0's counter.</description>
            <name>PULSE_CNT_RST_U0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to freeze unit 1's counter.</description>
            <name>CNT_PAUSE_U0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear unit 2's counter.</description>
            <name>PULSE_CNT_RST_U1</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to freeze unit 3's counter.</description>
            <name>CNT_PAUSE_U1</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear unit 4's counter.</description>
            <name>PULSE_CNT_RST_U2</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to freeze unit 5's counter.</description>
            <name>CNT_PAUSE_U2</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear unit 6's counter.</description>
            <name>PULSE_CNT_RST_U3</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to freeze unit 7's counter.</description>
            <name>CNT_PAUSE_U3</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The registers clock gate enable signal of PCNT module. 1: the registers can be read and written by application. 0: the registers can not be read or written by application</description>
            <name>CLK_EN</name>
          </field>
        </fields>
        <name>CTRL</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x55</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xFC</addressOffset>
        <description>PCNT version control register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>This is the PCNT version control register.</description>
            <name>DATE</name>
          </field>
        </fields>
        <name>DATE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x19072601</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x0</addressOffset>
        <description>Configuration register 0 for unit %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>This sets the maximum threshold, in APB_CLK cycles, for the filter.
            Any pulses with width less than this will be ignored when the filter is enabled.</description>
            <name>FILTER_THRES_U0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the enable bit for unit %s's input filter.</description>
            <name>FILTER_EN_U0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the enable bit for unit %s's zero comparator.</description>
            <name>THR_ZERO_EN_U0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the enable bit for unit %s's thr_h_lim comparator.</description>
            <name>THR_H_LIM_EN_U0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the enable bit for unit %s's thr_l_lim comparator.</description>
            <name>THR_L_LIM_EN_U0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the enable bit for unit %s's thres0 comparator.</description>
            <name>THR_THRES0_EN_U0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the enable bit for unit %s's thres1 comparator.</description>
            <name>THR_THRES1_EN_U0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>This register sets the behavior when the signal input of channel 0 detects a negative edge.
            1: Increase the counter. 2: Decrease the counter. 0, 3: No effect on counter.</description>
            <name>CH0_NEG_MODE_U0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>This register sets the behavior when the signal input of channel 0 detects a positive edge.
            1: Increase the counter. 2: Decrease the counter. 0, 3: No effect on counter.</description>
            <name>CH0_POS_MODE_U0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>This register configures how the CH%s_POS_MODE/CH%s_NEG_MODE settings will be modified when the control signal is high.
            0: No modification. 1: Invert behavior (increase -&gt; decrease, decrease -&gt; increase). 2, 3: Inhibit counter modification.</description>
            <name>CH0_HCTRL_MODE_U0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>This register configures how the CH%s_POS_MODE/CH%s_NEG_MODE settings will be modified when the control signal is low.
            0: No modification. 1: Invert behavior (increase -&gt; decrease, decrease -&gt; increase). 2, 3: Inhibit counter modification.</description>
            <name>CH0_LCTRL_MODE_U0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>This register sets the behavior when the signal input of channel 1 detects a negative edge.
            1: Increment the counter. 2: Decrement the counter. 0, 3: No effect on counter.</description>
            <name>CH1_NEG_MODE_U0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>This register sets the behavior when the signal input of channel 1 detects a positive edge.
            1: Increment the counter. 2: Decrement the counter. 0, 3: No effect on counter.</description>
            <name>CH1_POS_MODE_U0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>This register configures how the CH%s_POS_MODE/CH%s_NEG_MODE settings will be modified when the control signal is high.
            0: No modification. 1: Invert behavior (increase -&gt; decrease, decrease -&gt; increase). 2, 3: Inhibit counter modification.</description>
            <name>CH1_HCTRL_MODE_U0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>This register configures how the CH%s_POS_MODE/CH%s_NEG_MODE settings will be modified when the control signal is low.
            0: No modification. 1: Invert behavior (increase -&gt; decrease, decrease -&gt; increase). 2, 3: Inhibit counter modification.</description>
            <name>CH1_LCTRL_MODE_U0</name>
          </field>
        </fields>
        <name>U0_CONF0</name>
        <resetValue>0x3C10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xC</addressOffset>
        <description>Configuration register 0 for unit %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>This sets the maximum threshold, in APB_CLK cycles, for the filter.
            Any pulses with width less than this will be ignored when the filter is enabled.</description>
            <name>FILTER_THRES_U0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the enable bit for unit %s's input filter.</description>
            <name>FILTER_EN_U0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the enable bit for unit %s's zero comparator.</description>
            <name>THR_ZERO_EN_U0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the enable bit for unit %s's thr_h_lim comparator.</description>
            <name>THR_H_LIM_EN_U0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the enable bit for unit %s's thr_l_lim comparator.</description>
            <name>THR_L_LIM_EN_U0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the enable bit for unit %s's thres0 comparator.</description>
            <name>THR_THRES0_EN_U0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the enable bit for unit %s's thres1 comparator.</description>
            <name>THR_THRES1_EN_U0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>This register sets the behavior when the signal input of channel 0 detects a negative edge.
            1: Increase the counter. 2: Decrease the counter. 0, 3: No effect on counter.</description>
            <name>CH0_NEG_MODE_U0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>This register sets the behavior when the signal input of channel 0 detects a positive edge.
            1: Increase the counter. 2: Decrease the counter. 0, 3: No effect on counter.</description>
            <name>CH0_POS_MODE_U0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>This register configures how the CH%s_POS_MODE/CH%s_NEG_MODE settings will be modified when the control signal is high.
            0: No modification. 1: Invert behavior (increase -&gt; decrease, decrease -&gt; increase). 2, 3: Inhibit counter modification.</description>
            <name>CH0_HCTRL_MODE_U0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>This register configures how the CH%s_POS_MODE/CH%s_NEG_MODE settings will be modified when the control signal is low.
            0: No modification. 1: Invert behavior (increase -&gt; decrease, decrease -&gt; increase). 2, 3: Inhibit counter modification.</description>
            <name>CH0_LCTRL_MODE_U0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>This register sets the behavior when the signal input of channel 1 detects a negative edge.
            1: Increment the counter. 2: Decrement the counter. 0, 3: No effect on counter.</description>
            <name>CH1_NEG_MODE_U0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>This register sets the behavior when the signal input of channel 1 detects a positive edge.
            1: Increment the counter. 2: Decrement the counter. 0, 3: No effect on counter.</description>
            <name>CH1_POS_MODE_U0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>This register configures how the CH%s_POS_MODE/CH%s_NEG_MODE settings will be modified when the control signal is high.
            0: No modification. 1: Invert behavior (increase -&gt; decrease, decrease -&gt; increase). 2, 3: Inhibit counter modification.</description>
            <name>CH1_HCTRL_MODE_U0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>This register configures how the CH%s_POS_MODE/CH%s_NEG_MODE settings will be modified when the control signal is low.
            0: No modification. 1: Invert behavior (increase -&gt; decrease, decrease -&gt; increase). 2, 3: Inhibit counter modification.</description>
            <name>CH1_LCTRL_MODE_U0</name>
          </field>
        </fields>
        <name>U1_CONF0</name>
        <resetValue>0x3C10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x18</addressOffset>
        <description>Configuration register 0 for unit %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>This sets the maximum threshold, in APB_CLK cycles, for the filter.
            Any pulses with width less than this will be ignored when the filter is enabled.</description>
            <name>FILTER_THRES_U0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the enable bit for unit %s's input filter.</description>
            <name>FILTER_EN_U0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the enable bit for unit %s's zero comparator.</description>
            <name>THR_ZERO_EN_U0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the enable bit for unit %s's thr_h_lim comparator.</description>
            <name>THR_H_LIM_EN_U0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the enable bit for unit %s's thr_l_lim comparator.</description>
            <name>THR_L_LIM_EN_U0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the enable bit for unit %s's thres0 comparator.</description>
            <name>THR_THRES0_EN_U0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the enable bit for unit %s's thres1 comparator.</description>
            <name>THR_THRES1_EN_U0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>This register sets the behavior when the signal input of channel 0 detects a negative edge.
            1: Increase the counter. 2: Decrease the counter. 0, 3: No effect on counter.</description>
            <name>CH0_NEG_MODE_U0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>This register sets the behavior when the signal input of channel 0 detects a positive edge.
            1: Increase the counter. 2: Decrease the counter. 0, 3: No effect on counter.</description>
            <name>CH0_POS_MODE_U0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>This register configures how the CH%s_POS_MODE/CH%s_NEG_MODE settings will be modified when the control signal is high.
            0: No modification. 1: Invert behavior (increase -&gt; decrease, decrease -&gt; increase). 2, 3: Inhibit counter modification.</description>
            <name>CH0_HCTRL_MODE_U0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>This register configures how the CH%s_POS_MODE/CH%s_NEG_MODE settings will be modified when the control signal is low.
            0: No modification. 1: Invert behavior (increase -&gt; decrease, decrease -&gt; increase). 2, 3: Inhibit counter modification.</description>
            <name>CH0_LCTRL_MODE_U0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>This register sets the behavior when the signal input of channel 1 detects a negative edge.
            1: Increment the counter. 2: Decrement the counter. 0, 3: No effect on counter.</description>
            <name>CH1_NEG_MODE_U0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>This register sets the behavior when the signal input of channel 1 detects a positive edge.
            1: Increment the counter. 2: Decrement the counter. 0, 3: No effect on counter.</description>
            <name>CH1_POS_MODE_U0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>This register configures how the CH%s_POS_MODE/CH%s_NEG_MODE settings will be modified when the control signal is high.
            0: No modification. 1: Invert behavior (increase -&gt; decrease, decrease -&gt; increase). 2, 3: Inhibit counter modification.</description>
            <name>CH1_HCTRL_MODE_U0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>This register configures how the CH%s_POS_MODE/CH%s_NEG_MODE settings will be modified when the control signal is low.
            0: No modification. 1: Invert behavior (increase -&gt; decrease, decrease -&gt; increase). 2, 3: Inhibit counter modification.</description>
            <name>CH1_LCTRL_MODE_U0</name>
          </field>
        </fields>
        <name>U2_CONF0</name>
        <resetValue>0x3C10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x24</addressOffset>
        <description>Configuration register 0 for unit %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>This sets the maximum threshold, in APB_CLK cycles, for the filter.
            Any pulses with width less than this will be ignored when the filter is enabled.</description>
            <name>FILTER_THRES_U0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the enable bit for unit %s's input filter.</description>
            <name>FILTER_EN_U0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the enable bit for unit %s's zero comparator.</description>
            <name>THR_ZERO_EN_U0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the enable bit for unit %s's thr_h_lim comparator.</description>
            <name>THR_H_LIM_EN_U0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the enable bit for unit %s's thr_l_lim comparator.</description>
            <name>THR_L_LIM_EN_U0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the enable bit for unit %s's thres0 comparator.</description>
            <name>THR_THRES0_EN_U0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the enable bit for unit %s's thres1 comparator.</description>
            <name>THR_THRES1_EN_U0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>This register sets the behavior when the signal input of channel 0 detects a negative edge.
            1: Increase the counter. 2: Decrease the counter. 0, 3: No effect on counter.</description>
            <name>CH0_NEG_MODE_U0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>This register sets the behavior when the signal input of channel 0 detects a positive edge.
            1: Increase the counter. 2: Decrease the counter. 0, 3: No effect on counter.</description>
            <name>CH0_POS_MODE_U0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>This register configures how the CH%s_POS_MODE/CH%s_NEG_MODE settings will be modified when the control signal is high.
            0: No modification. 1: Invert behavior (increase -&gt; decrease, decrease -&gt; increase). 2, 3: Inhibit counter modification.</description>
            <name>CH0_HCTRL_MODE_U0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>This register configures how the CH%s_POS_MODE/CH%s_NEG_MODE settings will be modified when the control signal is low.
            0: No modification. 1: Invert behavior (increase -&gt; decrease, decrease -&gt; increase). 2, 3: Inhibit counter modification.</description>
            <name>CH0_LCTRL_MODE_U0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>This register sets the behavior when the signal input of channel 1 detects a negative edge.
            1: Increment the counter. 2: Decrement the counter. 0, 3: No effect on counter.</description>
            <name>CH1_NEG_MODE_U0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>This register sets the behavior when the signal input of channel 1 detects a positive edge.
            1: Increment the counter. 2: Decrement the counter. 0, 3: No effect on counter.</description>
            <name>CH1_POS_MODE_U0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>This register configures how the CH%s_POS_MODE/CH%s_NEG_MODE settings will be modified when the control signal is high.
            0: No modification. 1: Invert behavior (increase -&gt; decrease, decrease -&gt; increase). 2, 3: Inhibit counter modification.</description>
            <name>CH1_HCTRL_MODE_U0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>This register configures how the CH%s_POS_MODE/CH%s_NEG_MODE settings will be modified when the control signal is low.
            0: No modification. 1: Invert behavior (increase -&gt; decrease, decrease -&gt; increase). 2, 3: Inhibit counter modification.</description>
            <name>CH1_LCTRL_MODE_U0</name>
          </field>
        </fields>
        <name>U3_CONF0</name>
        <resetValue>0x3C10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4</addressOffset>
        <description>Configuration register 1 for unit %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>This register is used to configure the thres0 value for unit %s.</description>
            <name>CNT_THRES0_U0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>This register is used to configure the thres1 value for unit %s.</description>
            <name>CNT_THRES1_U0</name>
          </field>
        </fields>
        <name>U0_CONF1</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x10</addressOffset>
        <description>Configuration register 1 for unit %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>This register is used to configure the thres0 value for unit %s.</description>
            <name>CNT_THRES0_U0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>This register is used to configure the thres1 value for unit %s.</description>
            <name>CNT_THRES1_U0</name>
          </field>
        </fields>
        <name>U1_CONF1</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1C</addressOffset>
        <description>Configuration register 1 for unit %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>This register is used to configure the thres0 value for unit %s.</description>
            <name>CNT_THRES0_U0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>This register is used to configure the thres1 value for unit %s.</description>
            <name>CNT_THRES1_U0</name>
          </field>
        </fields>
        <name>U2_CONF1</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x28</addressOffset>
        <description>Configuration register 1 for unit %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>This register is used to configure the thres0 value for unit %s.</description>
            <name>CNT_THRES0_U0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>This register is used to configure the thres1 value for unit %s.</description>
            <name>CNT_THRES1_U0</name>
          </field>
        </fields>
        <name>U3_CONF1</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8</addressOffset>
        <description>Configuration register 2 for unit %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>This register is used to configure the thr_h_lim value for unit %s.</description>
            <name>CNT_H_LIM_U0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>This register is used to configure the thr_l_lim value for unit %s.</description>
            <name>CNT_L_LIM_U0</name>
          </field>
        </fields>
        <name>U0_CONF2</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x14</addressOffset>
        <description>Configuration register 2 for unit %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>This register is used to configure the thr_h_lim value for unit %s.</description>
            <name>CNT_H_LIM_U0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>This register is used to configure the thr_l_lim value for unit %s.</description>
            <name>CNT_L_LIM_U0</name>
          </field>
        </fields>
        <name>U1_CONF2</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x20</addressOffset>
        <description>Configuration register 2 for unit %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>This register is used to configure the thr_h_lim value for unit %s.</description>
            <name>CNT_H_LIM_U0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>This register is used to configure the thr_l_lim value for unit %s.</description>
            <name>CNT_L_LIM_U0</name>
          </field>
        </fields>
        <name>U2_CONF2</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2C</addressOffset>
        <description>Configuration register 2 for unit %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>This register is used to configure the thr_h_lim value for unit %s.</description>
            <name>CNT_H_LIM_U0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>This register is used to configure the thr_l_lim value for unit %s.</description>
            <name>CNT_L_LIM_U0</name>
          </field>
        </fields>
        <name>U3_CONF2</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x30</addressOffset>
        <description>Counter value for unit %s</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>This register stores the current pulse count value for unit %s.</description>
            <name>PULSE_CNT_U0</name>
          </field>
        </fields>
        <name>U0_CNT</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x34</addressOffset>
        <description>Counter value for unit %s</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>This register stores the current pulse count value for unit %s.</description>
            <name>PULSE_CNT_U0</name>
          </field>
        </fields>
        <name>U1_CNT</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x38</addressOffset>
        <description>Counter value for unit %s</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>This register stores the current pulse count value for unit %s.</description>
            <name>PULSE_CNT_U0</name>
          </field>
        </fields>
        <name>U2_CNT</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3C</addressOffset>
        <description>Counter value for unit %s</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>This register stores the current pulse count value for unit %s.</description>
            <name>PULSE_CNT_U0</name>
          </field>
        </fields>
        <name>U3_CNT</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x50</addressOffset>
        <description>PNCT UNIT%s status register</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>The pulse counter status of PCNT_U%s corresponding to 0. 0: pulse counter decreases from positive to 0. 1: pulse counter increases from negative to 0. 2: pulse counter is negative. 3: pulse counter is positive.</description>
            <name>CNT_THR_ZERO_MODE_U0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The latched value of thres1 event of PCNT_U%s when threshold event interrupt is valid. 1: the current pulse counter equals to thres1 and thres1 event is valid. 0: others.</description>
            <name>CNT_THR_THRES1_LAT_U0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The latched value of thres0 event of PCNT_U%s when threshold event interrupt is valid. 1: the current pulse counter equals to thres0 and thres0 event is valid. 0: others.</description>
            <name>CNT_THR_THRES0_LAT_U0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The latched value of low limit event of PCNT_U%s when threshold event interrupt is valid. 1: the current pulse counter equals to thr_l_lim and low limit event is valid. 0: others.</description>
            <name>CNT_THR_L_LIM_LAT_U0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The latched value of high limit event of PCNT_U%s when threshold event interrupt is valid. 1: the current pulse counter equals to thr_h_lim and high limit event is valid. 0: others.</description>
            <name>CNT_THR_H_LIM_LAT_U0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The latched value of zero threshold event of PCNT_U%s when threshold event interrupt is valid. 1: the current pulse counter equals to 0 and zero threshold event is valid. 0: others.</description>
            <name>CNT_THR_ZERO_LAT_U0</name>
          </field>
        </fields>
        <name>U0_STATUS</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x54</addressOffset>
        <description>PNCT UNIT%s status register</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>The pulse counter status of PCNT_U%s corresponding to 0. 0: pulse counter decreases from positive to 0. 1: pulse counter increases from negative to 0. 2: pulse counter is negative. 3: pulse counter is positive.</description>
            <name>CNT_THR_ZERO_MODE_U0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The latched value of thres1 event of PCNT_U%s when threshold event interrupt is valid. 1: the current pulse counter equals to thres1 and thres1 event is valid. 0: others.</description>
            <name>CNT_THR_THRES1_LAT_U0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The latched value of thres0 event of PCNT_U%s when threshold event interrupt is valid. 1: the current pulse counter equals to thres0 and thres0 event is valid. 0: others.</description>
            <name>CNT_THR_THRES0_LAT_U0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The latched value of low limit event of PCNT_U%s when threshold event interrupt is valid. 1: the current pulse counter equals to thr_l_lim and low limit event is valid. 0: others.</description>
            <name>CNT_THR_L_LIM_LAT_U0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The latched value of high limit event of PCNT_U%s when threshold event interrupt is valid. 1: the current pulse counter equals to thr_h_lim and high limit event is valid. 0: others.</description>
            <name>CNT_THR_H_LIM_LAT_U0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The latched value of zero threshold event of PCNT_U%s when threshold event interrupt is valid. 1: the current pulse counter equals to 0 and zero threshold event is valid. 0: others.</description>
            <name>CNT_THR_ZERO_LAT_U0</name>
          </field>
        </fields>
        <name>U1_STATUS</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x58</addressOffset>
        <description>PNCT UNIT%s status register</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>The pulse counter status of PCNT_U%s corresponding to 0. 0: pulse counter decreases from positive to 0. 1: pulse counter increases from negative to 0. 2: pulse counter is negative. 3: pulse counter is positive.</description>
            <name>CNT_THR_ZERO_MODE_U0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The latched value of thres1 event of PCNT_U%s when threshold event interrupt is valid. 1: the current pulse counter equals to thres1 and thres1 event is valid. 0: others.</description>
            <name>CNT_THR_THRES1_LAT_U0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The latched value of thres0 event of PCNT_U%s when threshold event interrupt is valid. 1: the current pulse counter equals to thres0 and thres0 event is valid. 0: others.</description>
            <name>CNT_THR_THRES0_LAT_U0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The latched value of low limit event of PCNT_U%s when threshold event interrupt is valid. 1: the current pulse counter equals to thr_l_lim and low limit event is valid. 0: others.</description>
            <name>CNT_THR_L_LIM_LAT_U0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The latched value of high limit event of PCNT_U%s when threshold event interrupt is valid. 1: the current pulse counter equals to thr_h_lim and high limit event is valid. 0: others.</description>
            <name>CNT_THR_H_LIM_LAT_U0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The latched value of zero threshold event of PCNT_U%s when threshold event interrupt is valid. 1: the current pulse counter equals to 0 and zero threshold event is valid. 0: others.</description>
            <name>CNT_THR_ZERO_LAT_U0</name>
          </field>
        </fields>
        <name>U2_STATUS</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5C</addressOffset>
        <description>PNCT UNIT%s status register</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>The pulse counter status of PCNT_U%s corresponding to 0. 0: pulse counter decreases from positive to 0. 1: pulse counter increases from negative to 0. 2: pulse counter is negative. 3: pulse counter is positive.</description>
            <name>CNT_THR_ZERO_MODE_U0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The latched value of thres1 event of PCNT_U%s when threshold event interrupt is valid. 1: the current pulse counter equals to thres1 and thres1 event is valid. 0: others.</description>
            <name>CNT_THR_THRES1_LAT_U0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The latched value of thres0 event of PCNT_U%s when threshold event interrupt is valid. 1: the current pulse counter equals to thres0 and thres0 event is valid. 0: others.</description>
            <name>CNT_THR_THRES0_LAT_U0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The latched value of low limit event of PCNT_U%s when threshold event interrupt is valid. 1: the current pulse counter equals to thr_l_lim and low limit event is valid. 0: others.</description>
            <name>CNT_THR_L_LIM_LAT_U0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The latched value of high limit event of PCNT_U%s when threshold event interrupt is valid. 1: the current pulse counter equals to thr_h_lim and high limit event is valid. 0: others.</description>
            <name>CNT_THR_H_LIM_LAT_U0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The latched value of zero threshold event of PCNT_U%s when threshold event interrupt is valid. 1: the current pulse counter equals to 0 and zero threshold event is valid. 0: others.</description>
            <name>CNT_THR_ZERO_LAT_U0</name>
          </field>
        </fields>
        <name>U3_STATUS</name>
        <size>0x20</size>
      </register>
    </registers>
    <resetMask>0xFFFFFFFF</resetMask>
    <resetValue>0x0</resetValue>
  </peripheral>
</peripherals>
<peripherals>
  <peripheral>
    <addressBlock>
      <offset>0x0</offset>
      <size>0x10C</size>
      <usage>registers</usage>
    </addressBlock>
    <baseAddress>0x3F4C1000</baseAddress>
    <description>Permissions Controller</description>
    <groupName>PMS</groupName>
    <interrupts>
      <interrupt>
        <name>PMS_PRO_IRAM0_ILG</name>
        <value>0x4B</value>
      </interrupt>
    </interrupts>
    <interrupts>
      <interrupt>
        <name>PMS_PRO_DRAM0_ILG</name>
        <value>0x4C</value>
      </interrupt>
    </interrupts>
    <interrupts>
      <interrupt>
        <name>PMS_PRO_DPORT_ILG</name>
        <value>0x4D</value>
      </interrupt>
    </interrupts>
    <interrupts>
      <interrupt>
        <name>PMS_PRO_AHB_ILG</name>
        <value>0x4E</value>
      </interrupt>
    </interrupts>
    <interrupts>
      <interrupt>
        <name>PMS_PRO_CACHE_ILG</name>
        <value>0x4F</value>
      </interrupt>
    </interrupts>
    <interrupts>
      <interrupt>
        <name>PMS_DMA_APB_I_ILG</name>
        <value>0x50</value>
      </interrupt>
    </interrupts>
    <interrupts>
      <interrupt>
        <name>PMS_DMA_RX_I_ILG</name>
        <value>0x51</value>
      </interrupt>
    </interrupts>
    <interrupts>
      <interrupt>
        <name>PMS_DMA_TX_I_ILG</name>
        <value>0x52</value>
      </interrupt>
    </interrupts>
    <name>PMS</name>
    <registers>
      <register>
        <addressOffset>0x0</addressOffset>
        <description>SDIO permission control register 0.</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Lock register. Setting to 1 locks SDIO permission control registers.</description>
            <name>SDIO_LOCK</name>
          </field>
        </fields>
        <name>SDIO_0</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4</addressOffset>
        <description>SDIO permission control register 1.</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 disables the SDIO function.</description>
            <name>SDIO_DISABLE</name>
          </field>
        </fields>
        <name>SDIO_1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8</addressOffset>
        <description>MAC dump permission control register 0.</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Lock register. Setting to 1 locks MAC dump permission control registers.</description>
            <name>MAC_DUMP_LOCK</name>
          </field>
        </fields>
        <name>MAC_DUMP_0</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xC</addressOffset>
        <description>MAC dump permission control register 1.</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xC</bitWidth>
            <description>Configure MAC dump connection.</description>
            <name>MAC_DUMP_CONNECT</name>
          </field>
        </fields>
        <name>MAC_DUMP_1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xE4</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x10</addressOffset>
        <description>IBUS permission control register 0.</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Lock register. Setting to 1 locks IBUS permission control registers.</description>
            <name>PRO_IRAM0_LOCK</name>
          </field>
        </fields>
        <name>PRO_IRAM0_0</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x14</addressOffset>
        <description>IBUS permission control register 1.</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 grants IBUS permission to fetch SRAM Block 0.</description>
            <name>PRO_IRAM0_SRAM_0_F</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 grants IBUS permission to read SRAM Block 0.</description>
            <name>PRO_IRAM0_SRAM_0_R</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 grants IBUS permission to write SRAM Block 0.</description>
            <name>PRO_IRAM0_SRAM_0_W</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 grants IBUS permission to fetch SRAM Block 1.</description>
            <name>PRO_IRAM0_SRAM_1_F</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 grants IBUS permission to read SRAM Block 1.</description>
            <name>PRO_IRAM0_SRAM_1_R</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 grants IBUS permission to write SRAM Block 1.</description>
            <name>PRO_IRAM0_SRAM_1_W</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 grants IBUS permission to fetch SRAM Block 2.</description>
            <name>PRO_IRAM0_SRAM_2_F</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 grants IBUS permission to read SRAM Block 2.</description>
            <name>PRO_IRAM0_SRAM_2_R</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 grants IBUS permission to write SRAM Block 2.</description>
            <name>PRO_IRAM0_SRAM_2_W</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 grants IBUS permission to fetch SRAM Block 3.</description>
            <name>PRO_IRAM0_SRAM_3_F</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 grants IBUS permission to read SRAM Block 3.</description>
            <name>PRO_IRAM0_SRAM_3_R</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 grants IBUS permission to write SRAM Block 3.</description>
            <name>PRO_IRAM0_SRAM_3_W</name>
          </field>
        </fields>
        <name>PRO_IRAM0_1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xFFF</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x18</addressOffset>
        <description>IBUS permission control register 2.</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x11</bitWidth>
            <description>Configure the split address of SRAM Block 4-21 for IBUS access.</description>
            <name>PRO_IRAM0_SRAM_4_SPLTADDR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 grants IBUS permission to fetch SRAM Block 4-21 low address region.</description>
            <name>PRO_IRAM0_SRAM_4_L_F</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 grants IBUS permission to read SRAM Block 4-21 low address region.</description>
            <name>PRO_IRAM0_SRAM_4_L_R</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 grants IBUS permission to write SRAM Block 4-21 low address region.</description>
            <name>PRO_IRAM0_SRAM_4_L_W</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 grants IBUS permission to fetch SRAM Block 4-21 high address region.</description>
            <name>PRO_IRAM0_SRAM_4_H_F</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 grants IBUS permission to read SRAM Block 4-21 high address region.</description>
            <name>PRO_IRAM0_SRAM_4_H_R</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 grants IBUS permission to write SRAM Block 4-21 high address region.</description>
            <name>PRO_IRAM0_SRAM_4_H_W</name>
          </field>
        </fields>
        <name>PRO_IRAM0_2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x7E0000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1C</addressOffset>
        <description>IBUS permission control register 3.</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xB</bitWidth>
            <description>Configure the split address of RTC FAST for IBUS access.</description>
            <name>PRO_IRAM0_RTCFAST_SPLTADDR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 grants IBUS permission to fetch RTC FAST low address region.</description>
            <name>PRO_IRAM0_RTCFAST_L_F</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 grants IBUS permission to read RTC FAST low address region.</description>
            <name>PRO_IRAM0_RTCFAST_L_R</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 grants IBUS permission to write RTC FAST low address region.</description>
            <name>PRO_IRAM0_RTCFAST_L_W</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 grants IBUS permission to fetch RTC FAST high address region.</description>
            <name>PRO_IRAM0_RTCFAST_H_F</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 grants IBUS permission to read RTC FAST high address region.</description>
            <name>PRO_IRAM0_RTCFAST_H_R</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 grants IBUS permission to write RTC FAST high address region.</description>
            <name>PRO_IRAM0_RTCFAST_H_W</name>
          </field>
        </fields>
        <name>PRO_IRAM0_3</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x1F800</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x20</addressOffset>
        <description>IBUS permission control register 4.</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The clear signal for IBUS access interrupt.</description>
            <name>PRO_IRAM0_ILG_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The enable signal for IBUS access interrupt.</description>
            <name>PRO_IRAM0_ILG_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>IBUS access interrupt signal.</description>
            <name>PRO_IRAM0_ILG_INTR</name>
          </field>
        </fields>
        <name>PRO_IRAM0_4</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x24</addressOffset>
        <description>IBUS status register.</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x16</bitWidth>
            <description>Record the illegitimate information of IBUS. [21:2]: store the bits [21:2] of IBUS address. [1]: 1 means data access, 0 means instruction access. [0]: 1 means write operation, 0 means read operation.</description>
            <name>PRO_IRAM0_ILG_ST</name>
          </field>
        </fields>
        <name>PRO_IRAM0_5</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x28</addressOffset>
        <description>DBUS permission control register 0.</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Lock register. Setting to 1 locks DBUS0 permission control registers.</description>
            <name>PRO_DRAM0_LOCK</name>
          </field>
        </fields>
        <name>PRO_DRAM0_0</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2C</addressOffset>
        <description>DBUS permission control register 1.</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 grants DBUS0 permission to read SRAM Block 0.</description>
            <name>PRO_DRAM0_SRAM_0_R</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 grants DBUS0 permission to write SRAM Block 0.</description>
            <name>PRO_DRAM0_SRAM_0_W</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 grants DBUS0 permission to read SRAM Block 1.</description>
            <name>PRO_DRAM0_SRAM_1_R</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 grants DBUS0 permission to write SRAM Block 1.</description>
            <name>PRO_DRAM0_SRAM_1_W</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 grants DBUS0 permission to read SRAM Block 2.</description>
            <name>PRO_DRAM0_SRAM_2_R</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 grants DBUS0 permission to write SRAM Block 2.</description>
            <name>PRO_DRAM0_SRAM_2_W</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 grants DBUS0 permission to read SRAM Block 3.</description>
            <name>PRO_DRAM0_SRAM_3_R</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 grants DBUS0 permission to write SRAM Block 3.</description>
            <name>PRO_DRAM0_SRAM_3_W</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x11</bitWidth>
            <description>Configure the split address of SRAM Block 4-21 for DBUS0 access.</description>
            <name>PRO_DRAM0_SRAM_4_SPLTADDR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 grants DBUS0 permission to read SRAM Block 4-21 low address region.</description>
            <name>PRO_DRAM0_SRAM_4_L_R</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 grants DBUS0 permission to write SRAM Block 4-21 low address region.</description>
            <name>PRO_DRAM0_SRAM_4_L_W</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 grants DBUS0 permission to read SRAM Block 4-21 high address region.</description>
            <name>PRO_DRAM0_SRAM_4_H_R</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 grants DBUS0 permission to write SRAM Block 4-21 high address region.</description>
            <name>PRO_DRAM0_SRAM_4_H_W</name>
          </field>
        </fields>
        <name>PRO_DRAM0_1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x1E0000FF</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x30</addressOffset>
        <description>DBUS permission control register 2.</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xB</bitWidth>
            <description>Configure the split address of RTC FAST for DBUS0 access.</description>
            <name>PRO_DRAM0_RTCFAST_SPLTADDR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 grants DBUS0 permission to read RTC FAST low address region.</description>
            <name>PRO_DRAM0_RTCFAST_L_R</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 grants DBUS0 permission to write RTC FAST low address region.</description>
            <name>PRO_DRAM0_RTCFAST_L_W</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 grants DBUS0 permission to read RTC FAST high address region.</description>
            <name>PRO_DRAM0_RTCFAST_H_R</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 grants DBUS0 permission to write RTC FAST high address region.</description>
            <name>PRO_DRAM0_RTCFAST_H_W</name>
          </field>
        </fields>
        <name>PRO_DRAM0_2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x7800</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x34</addressOffset>
        <description>DBUS permission control register 3.</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The clear signal for DBUS0 access interrupt.</description>
            <name>PRO_DRAM0_ILG_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The enable signal for DBUS0 access interrupt.</description>
            <name>PRO_DRAM0_ILG_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>DBUS0 access interrupt signal.</description>
            <name>PRO_DRAM0_ILG_INTR</name>
          </field>
        </fields>
        <name>PRO_DRAM0_3</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x38</addressOffset>
        <description>DBUS status register.</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1A</bitWidth>
            <description>Record the illegitimate information of DBUS. [25:6]: store the bits [21:2] of DBUS address. [5]: 1 means atomic access, 0 means nonatomic access. [4]: 1 means write operation, 0 means read operation. [3:0]: DBUS0 bus byte enables.</description>
            <name>PRO_DRAM0_ILG_ST</name>
          </field>
        </fields>
        <name>PRO_DRAM0_4</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3C</addressOffset>
        <description>PeriBus1 permission control register 0.</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Lock register. Setting to 1 locks PeriBus1 permission control registers.</description>
            <name>PRO_DPORT_LOCK</name>
          </field>
        </fields>
        <name>PRO_DPORT_0</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x40</addressOffset>
        <description>PeriBus1 permission control register 1.</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 denies PeriBus1 bus???s access to APB peripheral.</description>
            <name>PRO_DPORT_APB_PERIPHERAL_FORBID</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0xB</bitWidth>
            <description>Configure the split address of RTC FAST for PeriBus1 access.</description>
            <name>PRO_DPORT_RTCSLOW_SPLTADDR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 grants PeriBus1 permission to read RTC FAST low address region.</description>
            <name>PRO_DPORT_RTCSLOW_L_R</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 grants PeriBus1 permission to write RTC FAST low address region.</description>
            <name>PRO_DPORT_RTCSLOW_L_W</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 grants PeriBus1 permission to read RTC FAST high address region.</description>
            <name>PRO_DPORT_RTCSLOW_H_R</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 grants PeriBus1 permission to write RTC FAST high address region.</description>
            <name>PRO_DPORT_RTCSLOW_H_W</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Configure whether to enable read protection for user-configured FIFO address.</description>
            <name>PRO_DPORT_RESERVE_FIFO_VALID</name>
          </field>
        </fields>
        <name>PRO_DPORT_1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xF000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x44</addressOffset>
        <description>PeriBus1 permission control register 2.</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x12</bitWidth>
            <description>Configure read-protection address 0.</description>
            <name>PRO_DPORT_RESERVE_FIFO_0</name>
          </field>
        </fields>
        <name>PRO_DPORT_2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x48</addressOffset>
        <description>PeriBus1 permission control register 3.</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x12</bitWidth>
            <description>Configure read-protection address 1.</description>
            <name>PRO_DPORT_RESERVE_FIFO_1</name>
          </field>
        </fields>
        <name>PRO_DPORT_3</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4C</addressOffset>
        <description>PeriBus1 permission control register 4.</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x12</bitWidth>
            <description>Configure read-protection address 2.</description>
            <name>PRO_DPORT_RESERVE_FIFO_2</name>
          </field>
        </fields>
        <name>PRO_DPORT_4</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x50</addressOffset>
        <description>PeriBus1 permission control register 5.</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x12</bitWidth>
            <description>Configure read-protection address 3.</description>
            <name>PRO_DPORT_RESERVE_FIFO_3</name>
          </field>
        </fields>
        <name>PRO_DPORT_5</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x54</addressOffset>
        <description>PeriBus1 permission control register 6.</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The clear signal for PeriBus1 access interrupt.</description>
            <name>PRO_DPORT_ILG_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The enable signal for PeriBus1 access interrupt.</description>
            <name>PRO_DPORT_ILG_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>PeriBus1 access interrupt signal.</description>
            <name>PRO_DPORT_ILG_INTR</name>
          </field>
        </fields>
        <name>PRO_DPORT_6</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x58</addressOffset>
        <description>PeriBus1 status register.</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1A</bitWidth>
            <description>Record the illegitimate information of PeriBus1. [25:6]: store the bits [21:2] of PeriBus1 address. [5]: 1 means atomic access, 0 means nonatomic access. [4]: if bits [31:22] of PeriBus1 address are 0xfd, then the bit value is 1, otherwise it is 0. [3:0]: PeriBus1 byte enables.</description>
            <name>PRO_DPORT_ILG_ST</name>
          </field>
        </fields>
        <name>PRO_DPORT_7</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5C</addressOffset>
        <description>PeriBus2 permission control register 0.</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Lock register. Setting to 1 locks PeriBus2 permission control registers.</description>
            <name>PRO_AHB_LOCK</name>
          </field>
        </fields>
        <name>PRO_AHB_0</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x60</addressOffset>
        <description>PeriBus2 permission control register 1.</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xB</bitWidth>
            <description>Configure the split address of RTCSlow_0 for PeriBus2 access.</description>
            <name>PRO_AHB_RTCSLOW_0_SPLTADDR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 grants PeriBus2 permission to fetch RTCSlow_0 low address region.</description>
            <name>PRO_AHB_RTCSLOW_0_L_F</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 grants PeriBus2 permission to read RTCSlow_0 low address region.</description>
            <name>PRO_AHB_RTCSLOW_0_L_R</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 grants PeriBus2 permission to write RTCSlow_0 low address region.</description>
            <name>PRO_AHB_RTCSLOW_0_L_W</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 grants PeriBus2 permission to fetch RTCSlow_0 high address region.</description>
            <name>PRO_AHB_RTCSLOW_0_H_F</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 grants PeriBus2 permission to read RTCSlow_0 high address region.</description>
            <name>PRO_AHB_RTCSLOW_0_H_R</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 grants PeriBus2 permission to write RTCSlow_0 high address region.</description>
            <name>PRO_AHB_RTCSLOW_0_H_W</name>
          </field>
        </fields>
        <name>PRO_AHB_1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x1F800</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x64</addressOffset>
        <description>PeriBus2 permission control register 2.</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xB</bitWidth>
            <description>Configure the split address of RTCSlow_1 for PeriBus2 access.</description>
            <name>PRO_AHB_RTCSLOW_1_SPLTADDR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 grants PeriBus2 permission to fetch RTCSlow_1 low address region.</description>
            <name>PRO_AHB_RTCSLOW_1_L_F</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 grants PeriBus2 permission to read RTCSlow_1 low address region.</description>
            <name>PRO_AHB_RTCSLOW_1_L_R</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 grants PeriBus2 permission to write RTCSlow_1 low address region.</description>
            <name>PRO_AHB_RTCSLOW_1_L_W</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 grants PeriBus2 permission to fetch RTCSlow_1 high address region.</description>
            <name>PRO_AHB_RTCSLOW_1_H_F</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 grants PeriBus2 permission to read RTCSlow_1 high address region.</description>
            <name>PRO_AHB_RTCSLOW_1_H_R</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 grants PeriBus2 permission to write RTCSlow_1 high address region.</description>
            <name>PRO_AHB_RTCSLOW_1_H_W</name>
          </field>
        </fields>
        <name>PRO_AHB_2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x1F800</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x68</addressOffset>
        <description>PeriBus2 permission control register 3.</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The clear signal for PeriBus2 access interrupt.</description>
            <name>PRO_AHB_ILG_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The enable signal for PeriBus2 access interrupt.</description>
            <name>PRO_AHB_ILG_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>PeriBus2 access interrupt signal.</description>
            <name>PRO_AHB_ILG_INTR</name>
          </field>
        </fields>
        <name>PRO_AHB_3</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x6C</addressOffset>
        <description>PeriBus2 status register.</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Record the illegitimate information of PeriBus2. [31:2]: store the bits [31:2] of PeriBus2 address. [1]: 1 means data access, 0 means instruction access. [0]: 1 means write operation, 0 means read operation.</description>
            <name>PRO_AHB_ILG_ST</name>
          </field>
        </fields>
        <name>PRO_AHB_4</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x70</addressOffset>
        <description>Trace memory permission control register 0.</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Lock register. Setting to 1 locks trace function permission control registers.</description>
            <name>PRO_TRACE_LOCK</name>
          </field>
        </fields>
        <name>PRO_TRACE_0</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x74</addressOffset>
        <description>Trace memory permission control register 1.</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 disables the trace memory function.</description>
            <name>PRO_TRACE_DISABLE</name>
          </field>
        </fields>
        <name>PRO_TRACE_1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x78</addressOffset>
        <description>Cache permission control register 0.</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Lock register. Setting to 1 locks cache permission control registers.</description>
            <name>PRO_CACHE_LOCK</name>
          </field>
        </fields>
        <name>PRO_CACHE_0</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x7C</addressOffset>
        <description>Cache permission control register 1.</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>Configure which SRAM Block will be occupied by Icache or Dcache.</description>
            <name>PRO_CACHE_CONNECT</name>
          </field>
        </fields>
        <name>PRO_CACHE_1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x80</addressOffset>
        <description>Cache permission control register 2.</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The clear signal for cache access interrupt.</description>
            <name>PRO_CACHE_ILG_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The enable signal for cache access interrupt.</description>
            <name>PRO_CACHE_ILG_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Cache access interrupt signal.</description>
            <name>PRO_CACHE_ILG_INTR</name>
          </field>
        </fields>
        <name>PRO_CACHE_2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x84</addressOffset>
        <description>Icache status register.</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x11</bitWidth>
            <description>Record the illegitimate information of ICache to access memory. [16]: access enable, active low. [15:4]: store the bits [11:0] of address. [3:0]: Icache bus write byte enables, active low.</description>
            <name>PRO_CACHE_ILG_ST_I</name>
          </field>
        </fields>
        <name>PRO_CACHE_3</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x88</addressOffset>
        <description>Dcache status register.</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x11</bitWidth>
            <description>Record the illegitimate information of Dcache to access memory. [16]: access enable, active low. [15:4]: store the bits [11:0] of address. [3:0]: Dcache bus write byte enables, active low.</description>
            <name>PRO_CACHE_ILG_ST_D</name>
          </field>
        </fields>
        <name>PRO_CACHE_4</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8C</addressOffset>
        <description>Internal DMA permission control register 0.</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Lock register. Setting to 1 locks internal DMA permission control registers.</description>
            <name>DMA_APB_I_LOCK</name>
          </field>
        </fields>
        <name>DMA_APB_I_0</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x90</addressOffset>
        <description>Internal DMA permission control register 1.</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 grants internal DMA permission to read SRAM Block 0.</description>
            <name>DMA_APB_I_SRAM_0_R</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 grants internal DMA permission to write SRAM Block 0.</description>
            <name>DMA_APB_I_SRAM_0_W</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 grants internal DMA permission to read SRAM Block 1.</description>
            <name>DMA_APB_I_SRAM_1_R</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 grants internal DMA permission to write SRAM Block 1.</description>
            <name>DMA_APB_I_SRAM_1_W</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 grants internal DMA permission to read SRAM Block 2.</description>
            <name>DMA_APB_I_SRAM_2_R</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 grants internal DMA permission to write SRAM Block 2.</description>
            <name>DMA_APB_I_SRAM_2_W</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 grants internal DMA permission to read SRAM Block 3.</description>
            <name>DMA_APB_I_SRAM_3_R</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 grants internal DMA permission to write SRAM Block 3.</description>
            <name>DMA_APB_I_SRAM_3_W</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x11</bitWidth>
            <description>Configure the split address of SRAM Block 4-21 for internal DMA access.</description>
            <name>DMA_APB_I_SRAM_4_SPLTADDR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 grants internal DMA permission to read SRAM Block 4-21 low address region.</description>
            <name>DMA_APB_I_SRAM_4_L_R</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 grants internal DMA permission to write SRAM Block 4-21 low address region.</description>
            <name>DMA_APB_I_SRAM_4_L_W</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 grants internal DMA permission to read SRAM Block 4-21 high address region.</description>
            <name>DMA_APB_I_SRAM_4_H_R</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 grants internal DMA permission to write SRAM Block 4-21 high address region.</description>
            <name>DMA_APB_I_SRAM_4_H_W</name>
          </field>
        </fields>
        <name>DMA_APB_I_1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x1E0000FF</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x94</addressOffset>
        <description>Internal DMA permission control register 2.</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The clear signal for internal DMA access interrupt.</description>
            <name>DMA_APB_I_ILG_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The enable signal for internal DMA access interrupt.</description>
            <name>DMA_APB_I_ILG_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Internal DMA access interrupt signal.</description>
            <name>DMA_APB_I_ILG_INTR</name>
          </field>
        </fields>
        <name>DMA_APB_I_2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x98</addressOffset>
        <description>Internal DMA status register.</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x17</bitWidth>
            <description>Record the illegitimate information of Internal DMA. [22:6]: store the bits [18:2] of address. [5]: if bits [31:19] of address are 0x7ff, then the bit value is 1, otherwise it is 0. [4]: 1 means write operation, 0 means read operation. [3:0]: Internal DMA bus byte enables.</description>
            <name>DMA_APB_I_ILG_ST</name>
          </field>
        </fields>
        <name>DMA_APB_I_3</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9C</addressOffset>
        <description>RX Copy DMA permission control register 0.</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Lock register. Setting to 1 locks RX Copy DMA permission control registers.</description>
            <name>DMA_RX_I_LOCK</name>
          </field>
        </fields>
        <name>DMA_RX_I_0</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA0</addressOffset>
        <description>RX Copy DMA permission control register 1.</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 grants RX Copy DMA permission to read SRAM Block 0.</description>
            <name>DMA_RX_I_SRAM_0_R</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 grants RX Copy DMA permission to write SRAM Block 0.</description>
            <name>DMA_RX_I_SRAM_0_W</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 grants RX Copy DMA permission to read SRAM Block 1.</description>
            <name>DMA_RX_I_SRAM_1_R</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 grants RX Copy DMA permission to write SRAM Block 1.</description>
            <name>DMA_RX_I_SRAM_1_W</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 grants RX Copy DMA permission to read SRAM Block 2.</description>
            <name>DMA_RX_I_SRAM_2_R</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 grants RX Copy DMA permission to write SRAM Block 2.</description>
            <name>DMA_RX_I_SRAM_2_W</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 grants RX Copy DMA permission to read SRAM Block 3.</description>
            <name>DMA_RX_I_SRAM_3_R</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 grants RX Copy DMA permission to write SRAM Block 3.</description>
            <name>DMA_RX_I_SRAM_3_W</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x11</bitWidth>
            <description>Configure the split address of SRAM Block 4-21 for RX Copy DMA access.</description>
            <name>DMA_RX_I_SRAM_4_SPLTADDR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 grants RX Copy DMA permission to read SRAM Block 4-21 low address region.</description>
            <name>DMA_RX_I_SRAM_4_L_R</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 grants RX Copy DMA permission to write SRAM Block 4-21 low address region.</description>
            <name>DMA_RX_I_SRAM_4_L_W</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 grants RX Copy DMA permission to read SRAM Block 4-21 high address region.</description>
            <name>DMA_RX_I_SRAM_4_H_R</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 grants RX Copy DMA permission to write SRAM Block 4~21 high address region.</description>
            <name>DMA_RX_I_SRAM_4_H_W</name>
          </field>
        </fields>
        <name>DMA_RX_I_1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x1E0000FF</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA4</addressOffset>
        <description>RX Copy DMA permission control register 2.</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The clear signal for RX Copy DMA access interrupt.</description>
            <name>DMA_RX_I_ILG_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The enable signal for RX Copy DMA access interrupt.</description>
            <name>DMA_RX_I_ILG_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RX Copy DMA access interrupt signal.</description>
            <name>DMA_RX_I_ILG_INTR</name>
          </field>
        </fields>
        <name>DMA_RX_I_2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA8</addressOffset>
        <description>RX Copy DMA status register.</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x17</bitWidth>
            <description>Record the illegitimate information of RX Copy DMA. [22:6]: store the bits [18:2] of address. [5]: if bits [31:19] of address are 0x7ff, then the bit value is 1, otherwise it is 0. [4]: 1 means write operation, 0 means read operation. [3:0]: RX Copy DMA bus byte enables.</description>
            <name>DMA_RX_I_ILG_ST</name>
          </field>
        </fields>
        <name>DMA_RX_I_3</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAC</addressOffset>
        <description>TX Copy DMA permission control register 0.</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Lock register. Setting to 1 locks TX Copy DMA permission control registers.</description>
            <name>DMA_TX_I_LOCK</name>
          </field>
        </fields>
        <name>DMA_TX_I_0</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB0</addressOffset>
        <description>TX Copy DMA permission control register 1.</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 grants TX Copy DMA permission to read SRAM Block 0.</description>
            <name>DMA_TX_I_SRAM_0_R</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 grants TX Copy DMA permission to write SRAM Block 0.</description>
            <name>DMA_TX_I_SRAM_0_W</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 grants TX Copy DMA permission to read SRAM Block 1.</description>
            <name>DMA_TX_I_SRAM_1_R</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 grants TX Copy DMA permission to write SRAM Block 1.</description>
            <name>DMA_TX_I_SRAM_1_W</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 grants TX Copy DMA permission to read SRAM Block 2.</description>
            <name>DMA_TX_I_SRAM_2_R</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 grants TX Copy DMA permission to write SRAM Block 2.</description>
            <name>DMA_TX_I_SRAM_2_W</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 grants TX Copy DMA permission to read SRAM Block 3.</description>
            <name>DMA_TX_I_SRAM_3_R</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 grants TX Copy DMA permission to write SRAM Block 3.</description>
            <name>DMA_TX_I_SRAM_3_W</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x11</bitWidth>
            <description>Configure the split address of SRAM Block 4-21 for TX Copy DMA access.</description>
            <name>DMA_TX_I_SRAM_4_SPLTADDR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 grants TX Copy DMA permission to read SRAM Block 4-21 low address region.</description>
            <name>DMA_TX_I_SRAM_4_L_R</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 grants TX Copy DMA permission to write SRAM Block 4-21 low address region.</description>
            <name>DMA_TX_I_SRAM_4_L_W</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 grants TX Copy DMA permission to read SRAM Block 4-21 high address region.</description>
            <name>DMA_TX_I_SRAM_4_H_R</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 grants TX Copy DMA permission to write SRAM Block 4-21 high address region.</description>
            <name>DMA_TX_I_SRAM_4_H_W</name>
          </field>
        </fields>
        <name>DMA_TX_I_1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x1E0000FF</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB4</addressOffset>
        <description>TX Copy DMA permission control register 2.</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The clear signal for TX Copy DMA access interrupt.</description>
            <name>DMA_TX_I_ILG_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The enable signal for TX Copy DMA access interrupt.</description>
            <name>DMA_TX_I_ILG_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>TX Copy DMA access interrupt signal.</description>
            <name>DMA_TX_I_ILG_INTR</name>
          </field>
        </fields>
        <name>DMA_TX_I_2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB8</addressOffset>
        <description>TX Copy DMA status register.</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x17</bitWidth>
            <description>Record the illegitimate information of TX Copy DMA. [22:6]: store the bits [18:2] of address. [5]: if bits [31:19] of address are 0x7ff, then the bit value is 1, otherwise it is 0. [4]: 1 means write operation, 0 means read operation. [3:0]: TX Copy DMA bus byte enables.</description>
            <name>DMA_TX_I_ILG_ST</name>
          </field>
        </fields>
        <name>DMA_TX_I_3</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBC</addressOffset>
        <description>Boot permission control register 0.</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Lock register. Setting to 1 locks boot remap permission control registers.</description>
            <name>PRO_BOOT_LOCATION_LOCK</name>
          </field>
        </fields>
        <name>PRO_BOOT_LOCATION_0</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xC0</addressOffset>
        <description>Boot permission control register 1.</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>If set to 1, enable boot remap function.</description>
            <name>PRO_BOOT_REMAP</name>
          </field>
        </fields>
        <name>PRO_BOOT_LOCATION_1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xC4</addressOffset>
        <description>Cache access permission control register 0.</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Lock register. Setting to 1 locks cache access permission control registers.</description>
            <name>CACHE_SOURCE_LOCK</name>
          </field>
        </fields>
        <name>CACHE_SOURCE_0</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xC8</addressOffset>
        <description>Cache access permission control register 1.</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>xx</description>
            <name>PRO_CACHE_I_SOURCE_PRO_IRAM1</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>xx</description>
            <name>PRO_CACHE_I_SOURCE_PRO_IROM0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>xx</description>
            <name>PRO_CACHE_I_SOURCE_PRO_DROM0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>xx</description>
            <name>PRO_CACHE_D_SOURCE_PRO_DRAM0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>xx</description>
            <name>PRO_CACHE_D_SOURCE_PRO_DPORT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>xx</description>
            <name>PRO_CACHE_D_SOURCE_PRO_DROM0</name>
          </field>
        </fields>
        <name>CACHE_SOURCE_1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xCC</addressOffset>
        <description>Peripheral access permission control register 0.</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Lock register. Setting to 1 locks TX Copy DMA permission control registers.</description>
            <name>APB_PERIPHERAL_LOCK</name>
          </field>
        </fields>
        <name>APB_PERIPHERAL_0</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xD0</addressOffset>
        <description>Peripheral access permission control register 1.</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 splits the data phase of the last access and the address phase of following access.</description>
            <name>APB_PERIPHERAL_SPLIT_BURST</name>
          </field>
        </fields>
        <name>APB_PERIPHERAL_1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x1</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xD4</addressOffset>
        <description>Occupy permission control register 0.</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Lock register. Setting to 1 locks occupy permission control registers.</description>
            <name>OCCUPY_LOCK</name>
          </field>
        </fields>
        <name>OCCUPY_0</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xD8</addressOffset>
        <description>Occupy permission control register 1.</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Configure whether SRAM Block 0-3 is used as cache memory.</description>
            <name>OCCUPY_CACHE</name>
          </field>
        </fields>
        <name>OCCUPY_1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xDC</addressOffset>
        <description>Occupy permission control register 2.</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Configure whether SRAM Block 18-21 is used as mac dump.</description>
            <name>OCCUPY_MAC_DUMP</name>
          </field>
        </fields>
        <name>OCCUPY_2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xE0</addressOffset>
        <description>Occupy permission control register 3.</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x12</bitWidth>
            <description>Configure one block of SRAM Block 4-21 is used as trace memory.</description>
            <name>OCCUPY_PRO_TRACE</name>
          </field>
        </fields>
        <name>OCCUPY_3</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xE4</addressOffset>
        <description>Cache tag permission control register 0.</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Lock register. Setting to 1 locks cache tag permission control registers.</description>
            <name>CACHE_TAG_ACCESS_LOCK</name>
          </field>
        </fields>
        <name>CACHE_TAG_ACCESS_0</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xE8</addressOffset>
        <description>Cache tag permission control register 1.</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 permits read access to Icache tag memory.</description>
            <name>PRO_I_TAG_RD_ACS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 permits write access to Icache tag memory.</description>
            <name>PRO_I_TAG_WR_ACS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 permits read access to Dcache tag memory.</description>
            <name>PRO_D_TAG_RD_ACS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 permits write access to Dcache tag memory.</description>
            <name>PRO_D_TAG_WR_ACS</name>
          </field>
        </fields>
        <name>CACHE_TAG_ACCESS_1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xEC</addressOffset>
        <description>Cache MMU permission control register 0.</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Lock register. Setting to 1 locks cache MMU permission control registers.</description>
            <name>CACHE_MMU_ACCESS_LOCK</name>
          </field>
        </fields>
        <name>CACHE_MMU_ACCESS_0</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xF0</addressOffset>
        <description>Cache MMU permission control register 1.</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 permits read access to MMU memory.</description>
            <name>PRO_MMU_RD_ACS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Setting to 1 permits write access to MMU memory.</description>
            <name>PRO_MMU_WR_ACS</name>
          </field>
        </fields>
        <name>CACHE_MMU_ACCESS_1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x3</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xF4</addressOffset>
        <description>PeribBus2 permission control register.</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The clear signal for APB peripheral interrupt.</description>
            <name>APB_PERI_BYTE_ERROR_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The enable signal for APB peripheral access interrupt.</description>
            <name>APB_PERI_BYTE_ERROR_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>APB peripheral access interrupt signal.</description>
            <name>APB_PERI_BYTE_ERROR_INTR</name>
          </field>
        </fields>
        <name>APB_PERIPHERAL_INTR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xF8</addressOffset>
        <description>PeribBus2 peripheral access status register.</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Record the illegitimate address of  APB peripheral.</description>
            <name>APB_PERI_BYTE_ERROR_ADDR</name>
          </field>
        </fields>
        <name>APB_PERIPHERAL_STATUS</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xFC</addressOffset>
        <description>PeribBus1 permission control register.</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The clear signal for CPU peripheral access interrupt.</description>
            <name>CPU_PERI_BYTE_ERROR_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The enable signal for CPU peripheral access interrupt.</description>
            <name>CPU_PERI_BYTE_ERROR_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>CPU peripheral access interrupt signal.</description>
            <name>CPU_PERI_BYTE_ERROR_INTR</name>
          </field>
        </fields>
        <name>CPU_PERIPHERAL_INTR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x100</addressOffset>
        <description>PeribBus1 peripheral access status register.</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Record the illegitimate address of CPU peripheral.</description>
            <name>CPU_PERI_BYTE_ERROR_ADDR</name>
          </field>
        </fields>
        <name>CPU_PERIPHERAL_STATUS</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x104</addressOffset>
        <description>Clock gate register of permission control.</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enable the clock of permission control module when set to 1.</description>
            <name>CLK_EN</name>
          </field>
        </fields>
        <name>CLOCK_GATE_REG</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x1</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xFFC</addressOffset>
        <description>Version control register.</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1C</bitWidth>
            <description>Version control register.</description>
            <name>DATE</name>
          </field>
        </fields>
        <name>DATE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x1905090</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <resetMask>0xFFFFFFFF</resetMask>
    <resetValue>0x0</resetValue>
  </peripheral>
</peripherals>
<peripherals>
  <peripheral>
    <addressBlock>
      <offset>0x0</offset>
      <size>0xA0</size>
      <usage>registers</usage>
    </addressBlock>
    <baseAddress>0x3F416000</baseAddress>
    <description>Remote Control Peripheral</description>
    <groupName>RMT</groupName>
    <interrupts>
      <interrupt>
        <name>RMT</name>
        <value>0x32</value>
      </interrupt>
    </interrupts>
    <name>RMT</name>
    <registers>
      <register>
        <addressOffset>0x50</addressOffset>
        <description>Raw interrupt status</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt raw bit for CHANNEL0. Triggered when transmission done.</description>
            <name>CH0_TX_END_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt raw bit for CHANNEL0. Triggered when reception done.</description>
            <name>CH0_RX_END_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt raw bit for CHANNEL0. Triggered when error occurs.</description>
            <name>CH0_ERR_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt raw bit for CHANNEL1. Triggered when transmission done.</description>
            <name>CH1_TX_END_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt raw bit for CHANNEL1. Triggered when reception done.</description>
            <name>CH1_RX_END_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt raw bit for CHANNEL1. Triggered when error occurs.</description>
            <name>CH1_ERR_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt raw bit for CHANNEL2. Triggered when transmission done.</description>
            <name>CH2_TX_END_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt raw bit for CHANNEL2. Triggered when reception done.</description>
            <name>CH2_RX_END_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt raw bit for CHANNEL2. Triggered when error occurs.</description>
            <name>CH2_ERR_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt raw bit for CHANNEL3. Triggered when transmission done.</description>
            <name>CH3_TX_END_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt raw bit for CHANNEL3. Triggered when reception done.</description>
            <name>CH3_RX_END_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt raw bit for CHANNEL3. Triggered when error occurs.</description>
            <name>CH3_ERR_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt raw bit for CHANNEL0. Triggered when transmitter sent more data than configured value.</description>
            <name>CH0_TX_THR_EVENT_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt raw bit for CHANNEL1. Triggered when transmitter sent more data than configured value.</description>
            <name>CH1_TX_THR_EVENT_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt raw bit for CHANNEL2. Triggered when transmitter sent more data than configured value.</description>
            <name>CH2_TX_THR_EVENT_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt raw bit for CHANNEL3. Triggered when transmitter sent more data than configured value.</description>
            <name>CH3_TX_THR_EVENT_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt raw bit for CHANNEL0. Triggered when the loop count reaches the configured threshold value.</description>
            <name>CH0_TX_LOOP_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt raw bit for CHANNEL1. Triggered when the loop count reaches the configured threshold value.</description>
            <name>CH1_TX_LOOP_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt raw bit for CHANNEL2. Triggered when the loop count reaches the configured threshold value.</description>
            <name>CH2_TX_LOOP_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt raw bit for CHANNEL3. Triggered when the loop count reaches the configured threshold value.</description>
            <name>CH3_TX_LOOP_INT_RAW</name>
          </field>
        </fields>
        <name>INT_RAW</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x54</addressOffset>
        <description>Masked interrupt status</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The masked interrupt status bit for CH0_TX_END_INT.</description>
            <name>CH0_TX_END_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The masked interrupt status bit for CH0_RX_END_INT.</description>
            <name>CH0_RX_END_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The masked interrupt status bit for CH0_ERR_INT.</description>
            <name>CH0_ERR_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The masked interrupt status bit for CH1_TX_END_INT.</description>
            <name>CH1_TX_END_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The masked interrupt status bit for CH1_RX_END_INT.</description>
            <name>CH1_RX_END_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The masked interrupt status bit for CH1_ERR_INT.</description>
            <name>CH1_ERR_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The masked interrupt status bit for CH2_TX_END_INT.</description>
            <name>CH2_TX_END_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The masked interrupt status bit for CH2_RX_END_INT.</description>
            <name>CH2_RX_END_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The masked interrupt status bit for CH2_ERR_INT.</description>
            <name>CH2_ERR_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The masked interrupt status bit for CH3_TX_END_INT.</description>
            <name>CH3_TX_END_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The masked interrupt status bit for CH3_RX_END_INT.</description>
            <name>CH3_RX_END_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The masked interrupt status bit for CH3_ERR_INT.</description>
            <name>CH3_ERR_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The masked interrupt status bit for CH0_TX_THR_EVENT_INT.</description>
            <name>CH0_TX_THR_EVENT_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The masked interrupt status bit for CH1_TX_THR_EVENT_INT.</description>
            <name>CH1_TX_THR_EVENT_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The masked interrupt status bit for CH2_TX_THR_EVENT_INT.</description>
            <name>CH2_TX_THR_EVENT_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The masked interrupt status bit for CH3_TX_THR_EVENT_INT.</description>
            <name>CH3_TX_THR_EVENT_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The masked interrupt status bit for CH0_TX_LOOP_INT.</description>
            <name>CH0_TX_LOOP_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The masked interrupt status bit for CH1_TX_LOOP_INT.</description>
            <name>CH1_TX_LOOP_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The masked interrupt status bit for CH2_TX_LOOP_INT.</description>
            <name>CH2_TX_LOOP_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The masked interrupt status bit for CH3_TX_LOOP_INT.</description>
            <name>CH3_TX_LOOP_INT_ST</name>
          </field>
        </fields>
        <name>INT_ST</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x58</addressOffset>
        <description>Interrupt enable bits</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt enabled bit  for CH0_TX_END_INT.</description>
            <name>CH0_TX_END_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt enabled bit  for CH0_RX_END_INT.</description>
            <name>CH0_RX_END_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt enabled bit  for CH0_ERR_INT.</description>
            <name>CH0_ERR_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt enabled bit  for CH1_TX_END_INT.</description>
            <name>CH1_TX_END_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt enabled bit  for CH1_RX_END_INT.</description>
            <name>CH1_RX_END_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt enabled bit  for CH1_ERR_INT.</description>
            <name>CH1_ERR_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt enabled bit  for CH2_TX_END_INT.</description>
            <name>CH2_TX_END_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt enabled bit  for CH2_RX_END_INT.</description>
            <name>CH2_RX_END_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt enabled bit  for CH2_ERR_INT.</description>
            <name>CH2_ERR_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt enabled bit  for CH3_TX_END_INT.</description>
            <name>CH3_TX_END_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt enabled bit  for CH3_RX_END_INT.</description>
            <name>CH3_RX_END_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt enabled bit  for CH3_ERR_INT.</description>
            <name>CH3_ERR_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt enabled bit for CH0_TX_THR_EVENT_INT.</description>
            <name>CH0_TX_THR_EVENT_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt enabled bit for CH1_TX_THR_EVENT_INT.</description>
            <name>CH1_TX_THR_EVENT_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt enabled bit for CH2_TX_THR_EVENT_INT.</description>
            <name>CH2_TX_THR_EVENT_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt enabled bit for CH3_TX_THR_EVENT_INT.</description>
            <name>CH3_TX_THR_EVENT_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt enabled bit  for CH0_TX_LOOP_INT.</description>
            <name>CH0_TX_LOOP_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt enabled bit  for CH1_TX_LOOP_INT.</description>
            <name>CH1_TX_LOOP_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt enabled bit  for CH2_TX_LOOP_INT.</description>
            <name>CH2_TX_LOOP_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt enabled bit  for CH3_TX_LOOP_INT.</description>
            <name>CH3_TX_LOOP_INT_ENA</name>
          </field>
        </fields>
        <name>INT_ENA</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5C</addressOffset>
        <description>Interrupt clear bits</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear the CH0_TX_END_INT interrupt.</description>
            <name>CH0_TX_END_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear the CH0_RX_END_INT interrupt.</description>
            <name>CH0_RX_END_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear the CH0_ERR_INT interrupt.</description>
            <name>CH0_ERR_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear the CH1_TX_END_INT interrupt.</description>
            <name>CH1_TX_END_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear the CH1_RX_END_INT interrupt.</description>
            <name>CH1_RX_END_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear the CH1_ERR_INT interrupt.</description>
            <name>CH1_ERR_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear the CH2_TX_END_INT interrupt.</description>
            <name>CH2_TX_END_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear the CH2_RX_END_INT interrupt.</description>
            <name>CH2_RX_END_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear the CH2_ERR_INT interrupt.</description>
            <name>CH2_ERR_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear the CH3_TX_END_INT interrupt.</description>
            <name>CH3_TX_END_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear the CH3_RX_END_INT interrupt.</description>
            <name>CH3_RX_END_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear the CH3_ERR_INT interrupt.</description>
            <name>CH3_ERR_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear the CH0_TX_THR_EVENT_INT interrupt.</description>
            <name>CH0_TX_THR_EVENT_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear the CH1_TX_THR_EVENT_INT interrupt.</description>
            <name>CH1_TX_THR_EVENT_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear the CH2_TX_THR_EVENT_INT interrupt.</description>
            <name>CH2_TX_THR_EVENT_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear the CH3_TX_THR_EVENT_INT interrupt.</description>
            <name>CH3_TX_THR_EVENT_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear the CH0_TX_LOOP_INT interrupt.</description>
            <name>CH0_TX_LOOP_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear the CH1_TX_LOOP_INT interrupt.</description>
            <name>CH1_TX_LOOP_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear the CH2_TX_LOOP_INT interrupt.</description>
            <name>CH2_TX_LOOP_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear the CH3_TX_LOOP_INT interrupt.</description>
            <name>CH3_TX_LOOP_INT_CLR</name>
          </field>
        </fields>
        <name>INT_CLR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x80</addressOffset>
        <description>RMT apb configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1'h1: access memory directly.   1'h0: access memory by FIFO.</description>
            <name>APB_FIFO_MASK</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the enable bit for wraparound mode: it will resume sending at the start when the data to be sent is more than its memory size.</description>
            <name>MEM_TX_WRAP_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable the clock for RMT memory.</description>
            <name>MEM_CLK_FORCE_ON</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to power down RMT memory.</description>
            <name>MEM_FORCE_PD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: Disable RMT memory light sleep power down function. 0: Power down RMT memory when RMT is in light sleep mode.</description>
            <name>MEM_FORCE_PU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RMT register clock gate enable signal. 1: Power up the drive clock of registers. 0: Power down the drive clock of registers</description>
            <name>CLK_EN</name>
          </field>
        </fields>
        <name>APB_CONF</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x4</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x84</addressOffset>
        <description>RMT TX synchronous register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable CHANNEL0 to start sending data synchronously with other enabled channels.</description>
            <name>CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable CHANNEL1 to start sending data synchronously with other enabled channels.</description>
            <name>CH1</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable CHANNEL2 to start sending data synchronously with other enabled channels.</description>
            <name>CH2</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable CHANNEL3 to start sending data synchronously with other enabled channels.</description>
            <name>CH3</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This register is used to enable multiple of channels to start sending data synchronously.</description>
            <name>EN</name>
          </field>
        </fields>
        <name>TX_SIM</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x88</addressOffset>
        <description>RMT clock divider reset register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This register is used to reset the clock divider of CHANNEL0.</description>
            <name>CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This register is used to reset the clock divider of CHANNEL1.</description>
            <name>CH1</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This register is used to reset the clock divider of CHANNEL2.</description>
            <name>CH2</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This register is used to reset the clock divider of CHANNEL3.</description>
            <name>CH3</name>
          </field>
        </fields>
        <name>REF_CNT_RST</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xFC</addressOffset>
        <description>RMT version register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>This is the version register.</description>
            <name>DATE</name>
          </field>
        </fields>
        <name>DATE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x19072601</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x0</addressOffset>
        <description>The read and write  data register for CHANNEL%s by apb fifo access.</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The read and write  data register for CHANNEL%s by apb fifo access.</description>
            <name>CH_DATA</name>
          </field>
        </fields>
        <name>CH0DATA</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4</addressOffset>
        <description>The read and write  data register for CHANNEL%s by apb fifo access.</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The read and write  data register for CHANNEL%s by apb fifo access.</description>
            <name>CH_DATA</name>
          </field>
        </fields>
        <name>CH1DATA</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8</addressOffset>
        <description>The read and write  data register for CHANNEL%s by apb fifo access.</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The read and write  data register for CHANNEL%s by apb fifo access.</description>
            <name>CH_DATA</name>
          </field>
        </fields>
        <name>CH2DATA</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xC</addressOffset>
        <description>The read and write  data register for CHANNEL%s by apb fifo access.</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The read and write  data register for CHANNEL%s by apb fifo access.</description>
            <name>CH_DATA</name>
          </field>
        </fields>
        <name>CH3DATA</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x10</addressOffset>
        <description>Channel %s configure register 0</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>This register is used to configure the divider for clock of CHANNEL%s.</description>
            <name>DIV_CNT_CH</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>When no edge is detected on the input signal and continuous clock cycles is longer than this register value, received process is finished.</description>
            <name>IDLE_THRES_CH</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>This register is used to configure the maximum size of memory allocated to CHANNEL%s.</description>
            <name>MEM_SIZE_CH</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: Add carrier modulation on the output signal only at the send data state for CHANNEL%s. 0: Add carrier modulation on the output signal at all state for CHANNEL%s. Only valid when RMT_CARRIER_EN_CH%s is 1.</description>
            <name>CARRIER_EFF_EN_CH</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the carrier modulation enable-control bit for CHANNEL%s. 1: Add carrier modulation in the output signal. 0: No carrier modulation in sig_out.</description>
            <name>CARRIER_EN_CH</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This bit is used to configure the position of carrier wave for CHANNEL%s.
            
            1'h0: add carrier wave on low level.
            
            1'h1: add carrier wave on high level.</description>
            <name>CARRIER_OUT_LV_CH</name>
          </field>
        </fields>
        <name>CH0CONF0</name>
        <resetValue>0x39100002</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x18</addressOffset>
        <description>Channel %s configure register 0</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>This register is used to configure the divider for clock of CHANNEL%s.</description>
            <name>DIV_CNT_CH</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>When no edge is detected on the input signal and continuous clock cycles is longer than this register value, received process is finished.</description>
            <name>IDLE_THRES_CH</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>This register is used to configure the maximum size of memory allocated to CHANNEL%s.</description>
            <name>MEM_SIZE_CH</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: Add carrier modulation on the output signal only at the send data state for CHANNEL%s. 0: Add carrier modulation on the output signal at all state for CHANNEL%s. Only valid when RMT_CARRIER_EN_CH%s is 1.</description>
            <name>CARRIER_EFF_EN_CH</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the carrier modulation enable-control bit for CHANNEL%s. 1: Add carrier modulation in the output signal. 0: No carrier modulation in sig_out.</description>
            <name>CARRIER_EN_CH</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This bit is used to configure the position of carrier wave for CHANNEL%s.
            
            1'h0: add carrier wave on low level.
            
            1'h1: add carrier wave on high level.</description>
            <name>CARRIER_OUT_LV_CH</name>
          </field>
        </fields>
        <name>CH1CONF0</name>
        <resetValue>0x39100002</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x20</addressOffset>
        <description>Channel %s configure register 0</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>This register is used to configure the divider for clock of CHANNEL%s.</description>
            <name>DIV_CNT_CH</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>When no edge is detected on the input signal and continuous clock cycles is longer than this register value, received process is finished.</description>
            <name>IDLE_THRES_CH</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>This register is used to configure the maximum size of memory allocated to CHANNEL%s.</description>
            <name>MEM_SIZE_CH</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: Add carrier modulation on the output signal only at the send data state for CHANNEL%s. 0: Add carrier modulation on the output signal at all state for CHANNEL%s. Only valid when RMT_CARRIER_EN_CH%s is 1.</description>
            <name>CARRIER_EFF_EN_CH</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the carrier modulation enable-control bit for CHANNEL%s. 1: Add carrier modulation in the output signal. 0: No carrier modulation in sig_out.</description>
            <name>CARRIER_EN_CH</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This bit is used to configure the position of carrier wave for CHANNEL%s.
            
            1'h0: add carrier wave on low level.
            
            1'h1: add carrier wave on high level.</description>
            <name>CARRIER_OUT_LV_CH</name>
          </field>
        </fields>
        <name>CH2CONF0</name>
        <resetValue>0x39100002</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x28</addressOffset>
        <description>Channel %s configure register 0</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>This register is used to configure the divider for clock of CHANNEL%s.</description>
            <name>DIV_CNT_CH</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>When no edge is detected on the input signal and continuous clock cycles is longer than this register value, received process is finished.</description>
            <name>IDLE_THRES_CH</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>This register is used to configure the maximum size of memory allocated to CHANNEL%s.</description>
            <name>MEM_SIZE_CH</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: Add carrier modulation on the output signal only at the send data state for CHANNEL%s. 0: Add carrier modulation on the output signal at all state for CHANNEL%s. Only valid when RMT_CARRIER_EN_CH%s is 1.</description>
            <name>CARRIER_EFF_EN_CH</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the carrier modulation enable-control bit for CHANNEL%s. 1: Add carrier modulation in the output signal. 0: No carrier modulation in sig_out.</description>
            <name>CARRIER_EN_CH</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This bit is used to configure the position of carrier wave for CHANNEL%s.
            
            1'h0: add carrier wave on low level.
            
            1'h1: add carrier wave on high level.</description>
            <name>CARRIER_OUT_LV_CH</name>
          </field>
        </fields>
        <name>CH3CONF0</name>
        <resetValue>0x39100002</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x14</addressOffset>
        <description>Channel %s configure register 1</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to start sending data on CHANNEL%s.</description>
            <name>TX_START_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable receiver to receive data on CHANNEL%s.</description>
            <name>RX_EN_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to reset write ram address for CHANNEL%s by accessing receiver.</description>
            <name>MEM_WR_RST_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to reset read ram address for CHANNEL%s by accessing transmitter.</description>
            <name>MEM_RD_RST_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to reset W/R ram address for CHANNEL%s by accessing apb fifo.</description>
            <name>APB_MEM_RST_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This register marks the ownership of CHANNEL%s's ram block.
            
            1'h1: Receiver is using the ram. 
            
            1'h0: Transmitter is using the ram.</description>
            <name>MEM_OWNER_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to restart transmission  from the first data to the last data in CHANNEL%s.</description>
            <name>TX_CONTI_MODE_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the receive filter's enable bit for CHANNEL%s.</description>
            <name>RX_FILTER_EN_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>Ignores the input pulse when its width is smaller than this register value in APB clock periods (in receive mode).</description>
            <name>RX_FILTER_THRES_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable memory loop read mode when carrier modulation is enabled for channel %s.</description>
            <name>CHK_RX_CARRIER_EN_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This bit is used to select the base clock for CHANNEL%s.
            
            1'h1: clk_apb    1'h0:clk_ref</description>
            <name>REF_ALWAYS_ON_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This bit configures the level of output signal in CHANNEL%s when the latter is in IDLE state.</description>
            <name>IDLE_OUT_LV_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the output enable-control bit for CHANNEL%s in IDLE state.</description>
            <name>IDLE_OUT_EN_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to stop the transmitter of CHANNEL%s sending data out.</description>
            <name>TX_STOP_CH0</name>
          </field>
        </fields>
        <name>CH0CONF1</name>
        <resetValue>0xF20</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1C</addressOffset>
        <description>Channel %s configure register 1</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to start sending data on CHANNEL%s.</description>
            <name>TX_START_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable receiver to receive data on CHANNEL%s.</description>
            <name>RX_EN_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to reset write ram address for CHANNEL%s by accessing receiver.</description>
            <name>MEM_WR_RST_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to reset read ram address for CHANNEL%s by accessing transmitter.</description>
            <name>MEM_RD_RST_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to reset W/R ram address for CHANNEL%s by accessing apb fifo.</description>
            <name>APB_MEM_RST_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This register marks the ownership of CHANNEL%s's ram block.
            
            1'h1: Receiver is using the ram. 
            
            1'h0: Transmitter is using the ram.</description>
            <name>MEM_OWNER_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to restart transmission  from the first data to the last data in CHANNEL%s.</description>
            <name>TX_CONTI_MODE_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the receive filter's enable bit for CHANNEL%s.</description>
            <name>RX_FILTER_EN_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>Ignores the input pulse when its width is smaller than this register value in APB clock periods (in receive mode).</description>
            <name>RX_FILTER_THRES_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable memory loop read mode when carrier modulation is enabled for channel %s.</description>
            <name>CHK_RX_CARRIER_EN_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This bit is used to select the base clock for CHANNEL%s.
            
            1'h1: clk_apb    1'h0:clk_ref</description>
            <name>REF_ALWAYS_ON_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This bit configures the level of output signal in CHANNEL%s when the latter is in IDLE state.</description>
            <name>IDLE_OUT_LV_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the output enable-control bit for CHANNEL%s in IDLE state.</description>
            <name>IDLE_OUT_EN_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to stop the transmitter of CHANNEL%s sending data out.</description>
            <name>TX_STOP_CH0</name>
          </field>
        </fields>
        <name>CH1CONF1</name>
        <resetValue>0xF20</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x24</addressOffset>
        <description>Channel %s configure register 1</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to start sending data on CHANNEL%s.</description>
            <name>TX_START_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable receiver to receive data on CHANNEL%s.</description>
            <name>RX_EN_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to reset write ram address for CHANNEL%s by accessing receiver.</description>
            <name>MEM_WR_RST_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to reset read ram address for CHANNEL%s by accessing transmitter.</description>
            <name>MEM_RD_RST_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to reset W/R ram address for CHANNEL%s by accessing apb fifo.</description>
            <name>APB_MEM_RST_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This register marks the ownership of CHANNEL%s's ram block.
            
            1'h1: Receiver is using the ram. 
            
            1'h0: Transmitter is using the ram.</description>
            <name>MEM_OWNER_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to restart transmission  from the first data to the last data in CHANNEL%s.</description>
            <name>TX_CONTI_MODE_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the receive filter's enable bit for CHANNEL%s.</description>
            <name>RX_FILTER_EN_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>Ignores the input pulse when its width is smaller than this register value in APB clock periods (in receive mode).</description>
            <name>RX_FILTER_THRES_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable memory loop read mode when carrier modulation is enabled for channel %s.</description>
            <name>CHK_RX_CARRIER_EN_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This bit is used to select the base clock for CHANNEL%s.
            
            1'h1: clk_apb    1'h0:clk_ref</description>
            <name>REF_ALWAYS_ON_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This bit configures the level of output signal in CHANNEL%s when the latter is in IDLE state.</description>
            <name>IDLE_OUT_LV_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the output enable-control bit for CHANNEL%s in IDLE state.</description>
            <name>IDLE_OUT_EN_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to stop the transmitter of CHANNEL%s sending data out.</description>
            <name>TX_STOP_CH0</name>
          </field>
        </fields>
        <name>CH2CONF1</name>
        <resetValue>0xF20</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2C</addressOffset>
        <description>Channel %s configure register 1</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to start sending data on CHANNEL%s.</description>
            <name>TX_START_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable receiver to receive data on CHANNEL%s.</description>
            <name>RX_EN_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to reset write ram address for CHANNEL%s by accessing receiver.</description>
            <name>MEM_WR_RST_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to reset read ram address for CHANNEL%s by accessing transmitter.</description>
            <name>MEM_RD_RST_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to reset W/R ram address for CHANNEL%s by accessing apb fifo.</description>
            <name>APB_MEM_RST_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This register marks the ownership of CHANNEL%s's ram block.
            
            1'h1: Receiver is using the ram. 
            
            1'h0: Transmitter is using the ram.</description>
            <name>MEM_OWNER_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to restart transmission  from the first data to the last data in CHANNEL%s.</description>
            <name>TX_CONTI_MODE_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the receive filter's enable bit for CHANNEL%s.</description>
            <name>RX_FILTER_EN_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>Ignores the input pulse when its width is smaller than this register value in APB clock periods (in receive mode).</description>
            <name>RX_FILTER_THRES_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable memory loop read mode when carrier modulation is enabled for channel %s.</description>
            <name>CHK_RX_CARRIER_EN_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This bit is used to select the base clock for CHANNEL%s.
            
            1'h1: clk_apb    1'h0:clk_ref</description>
            <name>REF_ALWAYS_ON_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This bit configures the level of output signal in CHANNEL%s when the latter is in IDLE state.</description>
            <name>IDLE_OUT_LV_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the output enable-control bit for CHANNEL%s in IDLE state.</description>
            <name>IDLE_OUT_EN_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to stop the transmitter of CHANNEL%s sending data out.</description>
            <name>TX_STOP_CH0</name>
          </field>
        </fields>
        <name>CH3CONF1</name>
        <resetValue>0xF20</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x30</addressOffset>
        <description>Channel %s status register</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>This register records the memory address offset when receiver of CHANNEL%s is using the RAM.</description>
            <name>MEM_WADDR_EX_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>This register records the memory address offset when transmitter of CHANNEL%s is using the RAM.</description>
            <name>MEM_RADDR_EX_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>This register records the FSM status of CHANNEL%s.</description>
            <name>STATE_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This status bit will be set when the ownership of memory block is wrong.</description>
            <name>MEM_OWNER_ERR_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This status bit will be set if the receiver receives more data than the memory size.</description>
            <name>MEM_FULL_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This status bit will be set when the data to be set is more than memory size and the wraparound mode is disabled.</description>
            <name>MEM_EMPTY_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This status bit will be set if the offset address out of memory size when writes via APB bus.</description>
            <name>APB_MEM_WR_ERR_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This status bit will be set if the offset address out of memory size when reads via APB bus.</description>
            <name>APB_MEM_RD_ERR_CH0</name>
          </field>
        </fields>
        <name>CH0STATUS</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x34</addressOffset>
        <description>Channel %s status register</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>This register records the memory address offset when receiver of CHANNEL%s is using the RAM.</description>
            <name>MEM_WADDR_EX_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>This register records the memory address offset when transmitter of CHANNEL%s is using the RAM.</description>
            <name>MEM_RADDR_EX_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>This register records the FSM status of CHANNEL%s.</description>
            <name>STATE_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This status bit will be set when the ownership of memory block is wrong.</description>
            <name>MEM_OWNER_ERR_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This status bit will be set if the receiver receives more data than the memory size.</description>
            <name>MEM_FULL_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This status bit will be set when the data to be set is more than memory size and the wraparound mode is disabled.</description>
            <name>MEM_EMPTY_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This status bit will be set if the offset address out of memory size when writes via APB bus.</description>
            <name>APB_MEM_WR_ERR_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This status bit will be set if the offset address out of memory size when reads via APB bus.</description>
            <name>APB_MEM_RD_ERR_CH0</name>
          </field>
        </fields>
        <name>CH1STATUS</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x38</addressOffset>
        <description>Channel %s status register</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>This register records the memory address offset when receiver of CHANNEL%s is using the RAM.</description>
            <name>MEM_WADDR_EX_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>This register records the memory address offset when transmitter of CHANNEL%s is using the RAM.</description>
            <name>MEM_RADDR_EX_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>This register records the FSM status of CHANNEL%s.</description>
            <name>STATE_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This status bit will be set when the ownership of memory block is wrong.</description>
            <name>MEM_OWNER_ERR_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This status bit will be set if the receiver receives more data than the memory size.</description>
            <name>MEM_FULL_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This status bit will be set when the data to be set is more than memory size and the wraparound mode is disabled.</description>
            <name>MEM_EMPTY_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This status bit will be set if the offset address out of memory size when writes via APB bus.</description>
            <name>APB_MEM_WR_ERR_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This status bit will be set if the offset address out of memory size when reads via APB bus.</description>
            <name>APB_MEM_RD_ERR_CH0</name>
          </field>
        </fields>
        <name>CH2STATUS</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3C</addressOffset>
        <description>Channel %s status register</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>This register records the memory address offset when receiver of CHANNEL%s is using the RAM.</description>
            <name>MEM_WADDR_EX_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>This register records the memory address offset when transmitter of CHANNEL%s is using the RAM.</description>
            <name>MEM_RADDR_EX_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>This register records the FSM status of CHANNEL%s.</description>
            <name>STATE_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This status bit will be set when the ownership of memory block is wrong.</description>
            <name>MEM_OWNER_ERR_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This status bit will be set if the receiver receives more data than the memory size.</description>
            <name>MEM_FULL_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This status bit will be set when the data to be set is more than memory size and the wraparound mode is disabled.</description>
            <name>MEM_EMPTY_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This status bit will be set if the offset address out of memory size when writes via APB bus.</description>
            <name>APB_MEM_WR_ERR_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This status bit will be set if the offset address out of memory size when reads via APB bus.</description>
            <name>APB_MEM_RD_ERR_CH0</name>
          </field>
        </fields>
        <name>CH3STATUS</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x40</addressOffset>
        <description>Channel %s address register</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>This register records the memory address offset when writes RAM over APB bus.</description>
            <name>APB_MEM_WADDR_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>This register records the memory address offset when reads RAM over APB bus.</description>
            <name>APB_MEM_RADDR_CH0</name>
          </field>
        </fields>
        <name>CH0ADDR</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x44</addressOffset>
        <description>Channel %s address register</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>This register records the memory address offset when writes RAM over APB bus.</description>
            <name>APB_MEM_WADDR_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>This register records the memory address offset when reads RAM over APB bus.</description>
            <name>APB_MEM_RADDR_CH0</name>
          </field>
        </fields>
        <name>CH1ADDR</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x48</addressOffset>
        <description>Channel %s address register</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>This register records the memory address offset when writes RAM over APB bus.</description>
            <name>APB_MEM_WADDR_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>This register records the memory address offset when reads RAM over APB bus.</description>
            <name>APB_MEM_RADDR_CH0</name>
          </field>
        </fields>
        <name>CH2ADDR</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4C</addressOffset>
        <description>Channel %s address register</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>This register records the memory address offset when writes RAM over APB bus.</description>
            <name>APB_MEM_WADDR_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>This register records the memory address offset when reads RAM over APB bus.</description>
            <name>APB_MEM_RADDR_CH0</name>
          </field>
        </fields>
        <name>CH3ADDR</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x60</addressOffset>
        <description>Channel %s duty cycle configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>This register is used to configure carrier wave 's low level clock period for CHANNEL%s.</description>
            <name>CARRIER_LOW_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>This register is used to configure carrier wave 's high level clock period for CHANNEL%s.</description>
            <name>CARRIER_HIGH_CH0</name>
          </field>
        </fields>
        <name>CH0CARRIER_DUTY</name>
        <resetValue>0x400040</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x64</addressOffset>
        <description>Channel %s duty cycle configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>This register is used to configure carrier wave 's low level clock period for CHANNEL%s.</description>
            <name>CARRIER_LOW_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>This register is used to configure carrier wave 's high level clock period for CHANNEL%s.</description>
            <name>CARRIER_HIGH_CH0</name>
          </field>
        </fields>
        <name>CH1CARRIER_DUTY</name>
        <resetValue>0x400040</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x68</addressOffset>
        <description>Channel %s duty cycle configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>This register is used to configure carrier wave 's low level clock period for CHANNEL%s.</description>
            <name>CARRIER_LOW_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>This register is used to configure carrier wave 's high level clock period for CHANNEL%s.</description>
            <name>CARRIER_HIGH_CH0</name>
          </field>
        </fields>
        <name>CH2CARRIER_DUTY</name>
        <resetValue>0x400040</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x6C</addressOffset>
        <description>Channel %s duty cycle configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>This register is used to configure carrier wave 's low level clock period for CHANNEL%s.</description>
            <name>CARRIER_LOW_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>This register is used to configure carrier wave 's high level clock period for CHANNEL%s.</description>
            <name>CARRIER_HIGH_CH0</name>
          </field>
        </fields>
        <name>CH3CARRIER_DUTY</name>
        <resetValue>0x400040</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x70</addressOffset>
        <description>Channel %s Tx event configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>This register is used to configure the maximum entries that CHANNEL%s can send out.</description>
            <name>TX_LIM_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>This register is used to configure the maximum loop count when tx_conti_mode is valid.</description>
            <name>TX_LOOP_NUM_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This register is the enabled bit for loop count.</description>
            <name>TX_LOOP_CNT_EN_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This register is used to reset the loop count when tx_conti_mode is valid.</description>
            <name>LOOP_COUNT_RESET_CH0</name>
          </field>
        </fields>
        <name>CH0_TX_LIM</name>
        <resetValue>0x80</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x74</addressOffset>
        <description>Channel %s Tx event configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>This register is used to configure the maximum entries that CHANNEL%s can send out.</description>
            <name>TX_LIM_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>This register is used to configure the maximum loop count when tx_conti_mode is valid.</description>
            <name>TX_LOOP_NUM_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This register is the enabled bit for loop count.</description>
            <name>TX_LOOP_CNT_EN_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This register is used to reset the loop count when tx_conti_mode is valid.</description>
            <name>LOOP_COUNT_RESET_CH0</name>
          </field>
        </fields>
        <name>CH1_TX_LIM</name>
        <resetValue>0x80</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x78</addressOffset>
        <description>Channel %s Tx event configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>This register is used to configure the maximum entries that CHANNEL%s can send out.</description>
            <name>TX_LIM_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>This register is used to configure the maximum loop count when tx_conti_mode is valid.</description>
            <name>TX_LOOP_NUM_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This register is the enabled bit for loop count.</description>
            <name>TX_LOOP_CNT_EN_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This register is used to reset the loop count when tx_conti_mode is valid.</description>
            <name>LOOP_COUNT_RESET_CH0</name>
          </field>
        </fields>
        <name>CH2_TX_LIM</name>
        <resetValue>0x80</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x7C</addressOffset>
        <description>Channel %s Tx event configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>This register is used to configure the maximum entries that CHANNEL%s can send out.</description>
            <name>TX_LIM_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>This register is used to configure the maximum loop count when tx_conti_mode is valid.</description>
            <name>TX_LOOP_NUM_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This register is the enabled bit for loop count.</description>
            <name>TX_LOOP_CNT_EN_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This register is used to reset the loop count when tx_conti_mode is valid.</description>
            <name>LOOP_COUNT_RESET_CH0</name>
          </field>
        </fields>
        <name>CH3_TX_LIM</name>
        <resetValue>0x80</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8C</addressOffset>
        <description>Channel %s carrier remove register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>The low level period in a carrier modulation mode is (REG_RMT_REG_CARRIER_LOW_THRES_CH%s + 1) for channel %s.</description>
            <name>CARRIER_LOW_THRES_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>The high level period in a carrier modulation mode is (REG_RMT_REG_CARRIER_HIGH_THRES_CH%s + 1) for channel %s.</description>
            <name>CARRIER_HIGH_THRES_CH0</name>
          </field>
        </fields>
        <name>CH0_RX_CARRIER_RM</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x90</addressOffset>
        <description>Channel %s carrier remove register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>The low level period in a carrier modulation mode is (REG_RMT_REG_CARRIER_LOW_THRES_CH%s + 1) for channel %s.</description>
            <name>CARRIER_LOW_THRES_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>The high level period in a carrier modulation mode is (REG_RMT_REG_CARRIER_HIGH_THRES_CH%s + 1) for channel %s.</description>
            <name>CARRIER_HIGH_THRES_CH0</name>
          </field>
        </fields>
        <name>CH1_RX_CARRIER_RM</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x94</addressOffset>
        <description>Channel %s carrier remove register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>The low level period in a carrier modulation mode is (REG_RMT_REG_CARRIER_LOW_THRES_CH%s + 1) for channel %s.</description>
            <name>CARRIER_LOW_THRES_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>The high level period in a carrier modulation mode is (REG_RMT_REG_CARRIER_HIGH_THRES_CH%s + 1) for channel %s.</description>
            <name>CARRIER_HIGH_THRES_CH0</name>
          </field>
        </fields>
        <name>CH2_RX_CARRIER_RM</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x98</addressOffset>
        <description>Channel %s carrier remove register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>The low level period in a carrier modulation mode is (REG_RMT_REG_CARRIER_LOW_THRES_CH%s + 1) for channel %s.</description>
            <name>CARRIER_LOW_THRES_CH0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>The high level period in a carrier modulation mode is (REG_RMT_REG_CARRIER_HIGH_THRES_CH%s + 1) for channel %s.</description>
            <name>CARRIER_HIGH_THRES_CH0</name>
          </field>
        </fields>
        <name>CH3_RX_CARRIER_RM</name>
        <size>0x20</size>
      </register>
    </registers>
    <resetMask>0xFFFFFFFF</resetMask>
    <resetValue>0x0</resetValue>
  </peripheral>
</peripherals>
<peripherals>
  <peripheral>
    <addressBlock>
      <offset>0x0</offset>
      <size>0x34</size>
      <usage>registers</usage>
    </addressBlock>
    <baseAddress>0x6003C000</baseAddress>
    <description>RSA (Rivest Shamir Adleman) Accelerator</description>
    <groupName>RSA</groupName>
    <interrupts>
      <interrupt>
        <name>RSA</name>
        <value>0x36</value>
      </interrupt>
    </interrupts>
    <name>RSA</name>
    <registers>
      <register>
        <addressOffset>0x800</addressOffset>
        <description>Register to store M'</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores M'</description>
            <name>M_PRIME</name>
          </field>
        </fields>
        <name>M_PRIME</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x804</addressOffset>
        <description>RSA length mode</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x7</bitWidth>
            <description>Stores the mode of modular exponentiation.</description>
            <name>MODE</name>
          </field>
        </fields>
        <name>MODE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x808</addressOffset>
        <description>RSA clean register</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The content of this bit is 1 when memories complete initialization.</description>
            <name>CLEAN</name>
          </field>
        </fields>
        <name>CLEAN</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x80C</addressOffset>
        <description>Modular exponentiation starting bit</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to 1 to start the modular exponentiation.</description>
            <name>MODEXP_START</name>
          </field>
        </fields>
        <name>MODEXP_START</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x810</addressOffset>
        <description>Modular multiplication starting bit</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to 1 to start the modular multiplication.</description>
            <name>MODMULT_START</name>
          </field>
        </fields>
        <name>MODMULT_START</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x814</addressOffset>
        <description>Normal multiplicaiton starting bit</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to 1 to start the multiplication.</description>
            <name>MULT_START</name>
          </field>
        </fields>
        <name>MULT_START</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x818</addressOffset>
        <description>RSA idle register</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The content of this bit is 1 when the RSA accelerator is idle.</description>
            <name>IDLE</name>
          </field>
        </fields>
        <name>IDLE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x81C</addressOffset>
        <description>RSA clear interrupt register</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to 1 to clear the RSA interrupts.</description>
            <name>CLEAR_INTERRUPT</name>
          </field>
        </fields>
        <name>CLEAR_INTERRUPT</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x820</addressOffset>
        <description>The constant_time option</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to 0 to enable the acceleration option of constant_time for modular exponentiation. Set to 1 to disable the acceleration (by default).</description>
            <name>CONSTANT_TIME</name>
          </field>
        </fields>
        <name>CONSTANT_TIME</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x1</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x824</addressOffset>
        <description>The search option</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to 1 to enable the acceleration option of search for modular exponentiation. Set to 0 to disable the acceleration (by default).</description>
            <name>SEARCH_ENABLE</name>
          </field>
        </fields>
        <name>SEARCH_ENABLE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x828</addressOffset>
        <description>The search position</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xC</bitWidth>
            <description>Is used to configure the starting address when the acceleration option of search is used.</description>
            <name>SEARCH_POS</name>
          </field>
        </fields>
        <name>SEARCH_POS</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x82C</addressOffset>
        <description>RSA interrupt enable register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to 1 to enable the RSA interrupt. This option is enabled by default.</description>
            <name>INTERRUPT_ENA</name>
          </field>
        </fields>
        <name>INTERRUPT_ENA</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x830</addressOffset>
        <description>Version control register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1E</bitWidth>
            <description>Version control register</description>
            <name>DATE</name>
          </field>
        </fields>
        <name>DATE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x20190425</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <resetMask>0xFFFFFFFF</resetMask>
    <resetValue>0x0</resetValue>
  </peripheral>
</peripherals>
<peripherals>
  <peripheral>
    <addressBlock>
      <offset>0x0</offset>
      <size>0xF0</size>
      <usage>registers</usage>
    </addressBlock>
    <baseAddress>0x3F408400</baseAddress>
    <description>Peripheral RTCIO</description>
    <groupName>RTCIO</groupName>
    <interrupts></interrupts>
    <name>RTCIO</name>
    <registers>
      <register>
        <addressOffset>0x0</addressOffset>
        <description>RTC GPIO output register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x16</bitWidth>
            <description>GPIO0 ~ 21 output register. Bit10 corresponds to GPIO0, bit11 corre- sponds to GPIO1, etc.</description>
            <name>GPIO_OUT_DATA</name>
          </field>
        </fields>
        <name>RTC_GPIO_OUT</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4</addressOffset>
        <description>RTC GPIO output bit set register</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x16</bitWidth>
            <description>GPIO0 ~ 21 output set register. If the value 1 is written to a bit here, the corresponding bit in RTCIO_RTC_GPIO_OUT_REG will be set to 1. Recommended operation: use this register to set RTCIO_RTC_GPIO_OUT_REG.</description>
            <name>GPIO_OUT_DATA_W1TS</name>
          </field>
        </fields>
        <name>RTC_GPIO_OUT_W1TS</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8</addressOffset>
        <description>RTC GPIO output bit clear register</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x16</bitWidth>
            <description>GPIO0 ~ 21 output clear register. If the value 1 is written to a bit here, the corresponding bit in RTCIO_RTC_GPIO_OUT_REG will be cleared. Recommended operation: use this register to clear RTCIO_RTC_GPIO_OUT_REG.</description>
            <name>GPIO_OUT_DATA_W1TC</name>
          </field>
        </fields>
        <name>RTC_GPIO_OUT_W1TC</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xC</addressOffset>
        <description>RTC GPIO output enable register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x16</bitWidth>
            <description>GPIO0 ~ 21 output enable. Bit10 corresponds to GPIO0, bit11 corresponds to GPIO1, etc. If the bit is set to 1, it means this GPIO pad is output.</description>
            <name>REG_RTCIO_REG_GPIO_ENABLE</name>
          </field>
        </fields>
        <name>RTC_GPIO_ENABLE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x10</addressOffset>
        <description>RTC GPIO output enable bit set register</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x16</bitWidth>
            <description>GPIO0 ~ 21 output enable set register. If the value 1 is written to a bit here, the corresponding bit in RTCIO_RTC_GPIO_ENABLE_REG will be set to 1. Recommended operation: use this register to set RTCIO_RTC_GPIO_ENABLE_REG.</description>
            <name>REG_RTCIO_REG_GPIO_ENABLE_W1TS</name>
          </field>
        </fields>
        <name>RTC_GPIO_ENABLE_W1TS</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x14</addressOffset>
        <description>RTC GPIO output enable bit clear register</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x16</bitWidth>
            <description>GPIO0 ~ 21 output enable clear register. If the value 1 is written to a bit here, the corresponding bit in RTCIO_RTC_GPIO_ENABLE_REG will be cleared. Recom- mended operation: use this register to clear RTCIO_RTC_GPIO_ENABLE_REG.</description>
            <name>REG_RTCIO_REG_GPIO_ENABLE_W1TC</name>
          </field>
        </fields>
        <name>RTC_GPIO_ENABLE_W1TC</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x18</addressOffset>
        <description>RTC GPIO interrupt status register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x16</bitWidth>
            <description>GPIO0 ~ 21 interrupt status register. Bit10 corresponds to GPIO0, bit11 corresponds to GPIO1, etc. This register should be used together with RT- CIO_RTC_GPIO_PINn_INT_TYPE in RTCIO_RTC_GPIO_PINn_REG. 0: no interrupt; 1: corresponding interrupt.</description>
            <name>GPIO_STATUS_INT</name>
          </field>
        </fields>
        <name>RTC_GPIO_STATUS</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1C</addressOffset>
        <description>RTC GPIO interrupt status bit set register</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x16</bitWidth>
            <description>GPIO0 ~ 21 interrupt set register. If the value 1 is written to a bit here, the corresponding bit in RTCIO_GPIO_STATUS_INT will be set to 1. Recommended operation: use this register to set RTCIO_GPIO_STATUS_INT.</description>
            <name>GPIO_STATUS_INT_W1TS</name>
          </field>
        </fields>
        <name>RTC_GPIO_STATUS_W1TS</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x20</addressOffset>
        <description>RTC GPIO interrupt status bit clear register</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x16</bitWidth>
            <description>GPIO0 ~ 21 interrupt clear register. If the value 1 is written to a bit here, the corresponding bit in RTCIO_GPIO_STATUS_INT will be cleared. Recommended operation: use this register to clear RTCIO_GPIO_STATUS_INT.</description>
            <name>GPIO_STATUS_INT_W1TC</name>
          </field>
        </fields>
        <name>RTC_GPIO_STATUS_W1TC</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x24</addressOffset>
        <description>RTC GPIO input register</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x16</bitWidth>
            <description>GPIO0 ~ 21 input value. Bit10 corresponds to GPIO0, bit11 corresponds to GPIO1, etc. Each bit represents a pad input value, 1 for high level, and 0 for low level.</description>
            <name>GPIO_IN_NEXT</name>
          </field>
        </fields>
        <name>RTC_GPIO_IN</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x80</addressOffset>
        <description>RTC debug select register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <name>RTC_DEBUG_SEL0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x5</bitWidth>
            <name>RTC_DEBUG_SEL1</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x5</bitWidth>
            <name>RTC_DEBUG_SEL2</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x5</bitWidth>
            <name>RTC_DEBUG_SEL3</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x5</bitWidth>
            <name>RTC_DEBUG_SEL4</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x1</bitWidth>
            <name>RTC_DEBUG_12M_NO_GATING</name>
          </field>
        </fields>
        <name>RTC_DEBUG_SEL</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xC0</addressOffset>
        <description>32KHz crystal P-pad configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable in normal execution.</description>
            <name>X32P_FUN_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>output enable in sleep mode</description>
            <name>X32P_SLP_OE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>input enable in sleep mode</description>
            <name>X32P_SLP_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: enable sleep mode, 0: no sleep mode</description>
            <name>X32P_SLP_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Function selection.</description>
            <name>X32P_FUN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: use RTC GPIO,0: use digital GPIO</description>
            <name>X32P_MUX_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad. 1: internal pull-down enabled, 0: internal pull-down disabled.</description>
            <name>X32P_RUE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad. 1: internal pull-up enabled; 0: internal pull-up disabled.</description>
            <name>X32P_RDE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Select the drive strength of the pad. 0: ~5 mA: 1: ~10 mA: 2: ~20 mA; 3: ~40 mA.</description>
            <name>X32P_DRV</name>
          </field>
        </fields>
        <name>XTAL_32P_PAD</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x40000000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xC4</addressOffset>
        <description>32KHz crystal N-pad configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable in normal execution.</description>
            <name>X32N_FUN_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>output enable in sleep mode</description>
            <name>X32N_SLP_OE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>input enable in sleep mode</description>
            <name>X32N_SLP_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: enable sleep mode, 0: no sleep mode</description>
            <name>X32N_SLP_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Function selection.</description>
            <name>X32N_FUN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: use RTC GPIO,0: use digital GPIO</description>
            <name>X32N_MUX_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad. 1: internal pull-down enabled, 0: internal pull-down disabled.</description>
            <name>X32N_RUE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad. 1: internal pull-up enabled; 0: internal pull-up disabled.</description>
            <name>X32N_RDE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Select the drive strength of the pad. 0: ~5 mA: 1: ~10 mA: 2: ~20 mA; 3: ~40 mA.</description>
            <name>X32N_DRV</name>
          </field>
        </fields>
        <name>XTAL_32N_PAD</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x40000000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xC8</addressOffset>
        <description>DAC1 configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>Configure DAC_1 output when RTCIO_PDAC1_DAC_XPD_FORCE is set to 1.</description>
            <name>PDAC1_DAC</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When RTCIO_PDAC1_DAC_XPD_FORCE is set to 1, 1: enable DAC_1 output; 0: disable DAC_1 output.</description>
            <name>PDAC1_XPD_DAC</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: use RTCIO_PDAC1_XPD_DAC to control DAC_1 output; 0: use SAR ADC FSM to control DAC_1 output.</description>
            <name>PDAC1_DAC_XPD_FORCE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable in normal execution.</description>
            <name>PDAC1_FUN_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>output enable in sleep mode</description>
            <name>PDAC1_SLP_OE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>input enable in sleep mode</description>
            <name>PDAC1_SLP_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: enable sleep mode, 0: no sleep mode</description>
            <name>PDAC1_SLP_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>DAC_1 function selection.</description>
            <name>PDAC1_FUN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: use RTC GPIO, 0: use digital GPIO</description>
            <name>PDAC1_MUX_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad. 1: internal pull-down enabled, 0: internal pull-down disabled.</description>
            <name>PDAC1_RUE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad. 1: internal pull-up enabled; 0: internal pull-up disabled.</description>
            <name>PDAC1_RDE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Select the drive strength of the pad. 0: ~5 mA: 1: ~10 mA: 2: ~20 mA; 3: ~40 mA.</description>
            <name>PDAC1_DRV</name>
          </field>
        </fields>
        <name>PAD_DAC1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x40000000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xCC</addressOffset>
        <description>DAC2 configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>Configure DAC_2 output when RTCIO_PDAC2_DAC_XPD_FORCE is set to 1.</description>
            <name>PDAC2_DAC</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When RTCIO_PDAC2_DAC_XPD_FORCE is set to 1, 1: enable DAC_2 output; 0: disable DAC_2 output.</description>
            <name>PDAC2_XPD_DAC</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: use RTCIO_PDAC2_XPD_DAC to control DAC_2 output; 0: use SAR ADC FSM to control DAC_2 output.</description>
            <name>PDAC2_DAC_XPD_FORCE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable in normal execution.</description>
            <name>PDAC2_FUN_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>output enable in sleep mode</description>
            <name>PDAC2_SLP_OE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>input enable in sleep mode</description>
            <name>PDAC2_SLP_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: enable sleep mode, 0: no sleep mode</description>
            <name>PDAC2_SLP_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>DAC_2 function selection.</description>
            <name>PDAC2_FUN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: use RTC GPIO, 0: use digital GPIO</description>
            <name>PDAC2_MUX_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad. 1: internal pull-down enabled, 0: internal pull-down disabled.</description>
            <name>PDAC2_RUE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad. 1: internal pull-up enabled; 0: internal pull-up disabled.</description>
            <name>PDAC2_RDE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Select the drive strength of the pad. 0: ~5 mA: 1: ~10 mA: 2: ~20 mA; 3: ~40 mA.</description>
            <name>PDAC2_DRV</name>
          </field>
        </fields>
        <name>PAD_DAC2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x40000000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xD0</addressOffset>
        <description>Touch pad 19 configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable in normal execution.</description>
            <name>FUN_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>output enable in sleep mode</description>
            <name>SLP_OE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>input enable in sleep mode</description>
            <name>SLP_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: enable sleep mode, 0: no sleep mode</description>
            <name>SLP_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Function selection.</description>
            <name>FUN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: use RTC GPIO, 0: use digital GPIO</description>
            <name>MUX_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad. 1: internal pull-down enabled, 0: internal pull-down disabled.</description>
            <name>RUE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad. 1: internal pull-up enabled; 0: internal pull-up disabled.</description>
            <name>RDE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Select the drive strength of the pad. 0: ~5 mA: 1: ~10 mA: 2: ~20 mA; 3: ~40 mA.</description>
            <name>DRV</name>
          </field>
        </fields>
        <name>RTC_PAD19</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x50000000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xD4</addressOffset>
        <description>Touch pad 20 configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable in normal execution.</description>
            <name>FUN_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>output enable in sleep mode</description>
            <name>SLP_OE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>input enable in sleep mode</description>
            <name>SLP_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: enable sleep mode, 0: no sleep mode</description>
            <name>SLP_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Function selection.</description>
            <name>FUN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: use RTC GPIO, 0: use digital GPIO</description>
            <name>MUX_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad. 1: internal pull-down enabled, 0: internal pull-down disabled.</description>
            <name>RUE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad. 1: internal pull-up enabled; 0: internal pull-up disabled.</description>
            <name>RDE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Select the drive strength of the pad. 0: ~5 mA: 1: ~10 mA: 2: ~20 mA; 3: ~40 mA.</description>
            <name>DRV</name>
          </field>
        </fields>
        <name>RTC_PAD20</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x50000000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xD8</addressOffset>
        <description>Touch pad 21 configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable in normal execution.</description>
            <name>FUN_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>output enable in sleep mode</description>
            <name>SLP_OE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>input enable in sleep mode</description>
            <name>SLP_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: enable sleep mode, 0: no sleep mode</description>
            <name>SLP_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Function selection.</description>
            <name>FUN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: use RTC GPIO, 0: use digital GPIO</description>
            <name>MUX_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad. 1: internal pull-down enabled, 0: internal pull-down disabled.</description>
            <name>RUE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad. 1: internal pull-up enabled; 0: internal pull-up disabled.</description>
            <name>RDE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Select the drive strength of the pad. 0: ~5 mA: 1: ~10 mA: 2: ~20 mA; 3: ~40 mA.</description>
            <name>DRV</name>
          </field>
        </fields>
        <name>RTC_PAD21</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x50000000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xDC</addressOffset>
        <description>External wake up configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>GPIO[0-17] can be used to wake up the chip when the chip is in the sleep mode. This register prompts the pad source to wake up the chip when the latter is indeep/light sleep mode. 
            0: select GPIO0; 1: select GPIO2, etc</description>
            <name>SEL</name>
          </field>
        </fields>
        <name>EXT_WAKEUP0</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xE0</addressOffset>
        <description>Crystal power down enable GPIO source</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Select the external crystal power down enable source to get into sleep mode. 0: select GPIO0; 1: select GPIO1, etc. The input value on this pin XOR RTC_CNTL_EXT_XTL_CONF_REG[30] is the crystal power down enable signal.</description>
            <name>SEL</name>
          </field>
        </fields>
        <name>XTL_EXT_CTR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xE4</addressOffset>
        <description>RTC I²C pad selection</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x5</bitWidth>
            <name>SAR_DEBUG_BIT_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Selects a pad the RTC I2C SCL signal connects to. 0: use TOUCH PAD0; 1: use TOUCH PAD2.</description>
            <name>SAR_I2C_SCL_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Selects a pad the RTC I2C SDA signal connects to. 0: use TOUCH PAD1; 1: use TOUCH PAD3.</description>
            <name>SAR_I2C_SDA_SEL</name>
          </field>
        </fields>
        <name>SAR_I2C_IO</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xE8</addressOffset>
        <description>Touch Control register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x4</bitWidth>
            <name>IO_TOUCH_BUFSEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <name>IO_TOUCH_BUFMODE</name>
          </field>
        </fields>
        <name>RTC_IO_TOUCH_CTRL</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1FC</addressOffset>
        <description>Version control register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1C</bitWidth>
            <description>Version control register</description>
            <name>IO_DATE</name>
          </field>
        </fields>
        <name>RTC_IO_DATE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x1903170</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x28</addressOffset>
        <description>RTC configuration for pin %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pad driver selection. 0: normal output; 1: open drain.</description>
            <name>GPIO_PIN0_PAD_DRIVER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>GPIO interrupt type selection. 0: GPIO interrupt disabled; 1: rising edge trigger; 2: falling edge trigger; 3: any edge trigger; 4: low level trigger; 5: high level trigger.</description>
            <name>GPIO_PIN0_INT_TYPE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>GPIO wake-up enable. This will only wake up ESP32-S2 from Light-sleep.</description>
            <name>GPIO_PIN0_WAKEUP_ENABLE</name>
          </field>
        </fields>
        <name>RTC_GPIO_PIN0</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2C</addressOffset>
        <description>RTC configuration for pin %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pad driver selection. 0: normal output; 1: open drain.</description>
            <name>GPIO_PIN0_PAD_DRIVER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>GPIO interrupt type selection. 0: GPIO interrupt disabled; 1: rising edge trigger; 2: falling edge trigger; 3: any edge trigger; 4: low level trigger; 5: high level trigger.</description>
            <name>GPIO_PIN0_INT_TYPE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>GPIO wake-up enable. This will only wake up ESP32-S2 from Light-sleep.</description>
            <name>GPIO_PIN0_WAKEUP_ENABLE</name>
          </field>
        </fields>
        <name>RTC_GPIO_PIN1</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x30</addressOffset>
        <description>RTC configuration for pin %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pad driver selection. 0: normal output; 1: open drain.</description>
            <name>GPIO_PIN0_PAD_DRIVER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>GPIO interrupt type selection. 0: GPIO interrupt disabled; 1: rising edge trigger; 2: falling edge trigger; 3: any edge trigger; 4: low level trigger; 5: high level trigger.</description>
            <name>GPIO_PIN0_INT_TYPE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>GPIO wake-up enable. This will only wake up ESP32-S2 from Light-sleep.</description>
            <name>GPIO_PIN0_WAKEUP_ENABLE</name>
          </field>
        </fields>
        <name>RTC_GPIO_PIN2</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x34</addressOffset>
        <description>RTC configuration for pin %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pad driver selection. 0: normal output; 1: open drain.</description>
            <name>GPIO_PIN0_PAD_DRIVER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>GPIO interrupt type selection. 0: GPIO interrupt disabled; 1: rising edge trigger; 2: falling edge trigger; 3: any edge trigger; 4: low level trigger; 5: high level trigger.</description>
            <name>GPIO_PIN0_INT_TYPE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>GPIO wake-up enable. This will only wake up ESP32-S2 from Light-sleep.</description>
            <name>GPIO_PIN0_WAKEUP_ENABLE</name>
          </field>
        </fields>
        <name>RTC_GPIO_PIN3</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x38</addressOffset>
        <description>RTC configuration for pin %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pad driver selection. 0: normal output; 1: open drain.</description>
            <name>GPIO_PIN0_PAD_DRIVER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>GPIO interrupt type selection. 0: GPIO interrupt disabled; 1: rising edge trigger; 2: falling edge trigger; 3: any edge trigger; 4: low level trigger; 5: high level trigger.</description>
            <name>GPIO_PIN0_INT_TYPE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>GPIO wake-up enable. This will only wake up ESP32-S2 from Light-sleep.</description>
            <name>GPIO_PIN0_WAKEUP_ENABLE</name>
          </field>
        </fields>
        <name>RTC_GPIO_PIN4</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3C</addressOffset>
        <description>RTC configuration for pin %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pad driver selection. 0: normal output; 1: open drain.</description>
            <name>GPIO_PIN0_PAD_DRIVER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>GPIO interrupt type selection. 0: GPIO interrupt disabled; 1: rising edge trigger; 2: falling edge trigger; 3: any edge trigger; 4: low level trigger; 5: high level trigger.</description>
            <name>GPIO_PIN0_INT_TYPE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>GPIO wake-up enable. This will only wake up ESP32-S2 from Light-sleep.</description>
            <name>GPIO_PIN0_WAKEUP_ENABLE</name>
          </field>
        </fields>
        <name>RTC_GPIO_PIN5</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x40</addressOffset>
        <description>RTC configuration for pin %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pad driver selection. 0: normal output; 1: open drain.</description>
            <name>GPIO_PIN0_PAD_DRIVER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>GPIO interrupt type selection. 0: GPIO interrupt disabled; 1: rising edge trigger; 2: falling edge trigger; 3: any edge trigger; 4: low level trigger; 5: high level trigger.</description>
            <name>GPIO_PIN0_INT_TYPE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>GPIO wake-up enable. This will only wake up ESP32-S2 from Light-sleep.</description>
            <name>GPIO_PIN0_WAKEUP_ENABLE</name>
          </field>
        </fields>
        <name>RTC_GPIO_PIN6</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x44</addressOffset>
        <description>RTC configuration for pin %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pad driver selection. 0: normal output; 1: open drain.</description>
            <name>GPIO_PIN0_PAD_DRIVER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>GPIO interrupt type selection. 0: GPIO interrupt disabled; 1: rising edge trigger; 2: falling edge trigger; 3: any edge trigger; 4: low level trigger; 5: high level trigger.</description>
            <name>GPIO_PIN0_INT_TYPE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>GPIO wake-up enable. This will only wake up ESP32-S2 from Light-sleep.</description>
            <name>GPIO_PIN0_WAKEUP_ENABLE</name>
          </field>
        </fields>
        <name>RTC_GPIO_PIN7</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x48</addressOffset>
        <description>RTC configuration for pin %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pad driver selection. 0: normal output; 1: open drain.</description>
            <name>GPIO_PIN0_PAD_DRIVER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>GPIO interrupt type selection. 0: GPIO interrupt disabled; 1: rising edge trigger; 2: falling edge trigger; 3: any edge trigger; 4: low level trigger; 5: high level trigger.</description>
            <name>GPIO_PIN0_INT_TYPE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>GPIO wake-up enable. This will only wake up ESP32-S2 from Light-sleep.</description>
            <name>GPIO_PIN0_WAKEUP_ENABLE</name>
          </field>
        </fields>
        <name>RTC_GPIO_PIN8</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4C</addressOffset>
        <description>RTC configuration for pin %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pad driver selection. 0: normal output; 1: open drain.</description>
            <name>GPIO_PIN0_PAD_DRIVER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>GPIO interrupt type selection. 0: GPIO interrupt disabled; 1: rising edge trigger; 2: falling edge trigger; 3: any edge trigger; 4: low level trigger; 5: high level trigger.</description>
            <name>GPIO_PIN0_INT_TYPE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>GPIO wake-up enable. This will only wake up ESP32-S2 from Light-sleep.</description>
            <name>GPIO_PIN0_WAKEUP_ENABLE</name>
          </field>
        </fields>
        <name>RTC_GPIO_PIN9</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x50</addressOffset>
        <description>RTC configuration for pin %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pad driver selection. 0: normal output; 1: open drain.</description>
            <name>GPIO_PIN0_PAD_DRIVER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>GPIO interrupt type selection. 0: GPIO interrupt disabled; 1: rising edge trigger; 2: falling edge trigger; 3: any edge trigger; 4: low level trigger; 5: high level trigger.</description>
            <name>GPIO_PIN0_INT_TYPE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>GPIO wake-up enable. This will only wake up ESP32-S2 from Light-sleep.</description>
            <name>GPIO_PIN0_WAKEUP_ENABLE</name>
          </field>
        </fields>
        <name>RTC_GPIO_PIN10</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x54</addressOffset>
        <description>RTC configuration for pin %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pad driver selection. 0: normal output; 1: open drain.</description>
            <name>GPIO_PIN0_PAD_DRIVER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>GPIO interrupt type selection. 0: GPIO interrupt disabled; 1: rising edge trigger; 2: falling edge trigger; 3: any edge trigger; 4: low level trigger; 5: high level trigger.</description>
            <name>GPIO_PIN0_INT_TYPE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>GPIO wake-up enable. This will only wake up ESP32-S2 from Light-sleep.</description>
            <name>GPIO_PIN0_WAKEUP_ENABLE</name>
          </field>
        </fields>
        <name>RTC_GPIO_PIN11</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x58</addressOffset>
        <description>RTC configuration for pin %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pad driver selection. 0: normal output; 1: open drain.</description>
            <name>GPIO_PIN0_PAD_DRIVER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>GPIO interrupt type selection. 0: GPIO interrupt disabled; 1: rising edge trigger; 2: falling edge trigger; 3: any edge trigger; 4: low level trigger; 5: high level trigger.</description>
            <name>GPIO_PIN0_INT_TYPE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>GPIO wake-up enable. This will only wake up ESP32-S2 from Light-sleep.</description>
            <name>GPIO_PIN0_WAKEUP_ENABLE</name>
          </field>
        </fields>
        <name>RTC_GPIO_PIN12</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5C</addressOffset>
        <description>RTC configuration for pin %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pad driver selection. 0: normal output; 1: open drain.</description>
            <name>GPIO_PIN0_PAD_DRIVER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>GPIO interrupt type selection. 0: GPIO interrupt disabled; 1: rising edge trigger; 2: falling edge trigger; 3: any edge trigger; 4: low level trigger; 5: high level trigger.</description>
            <name>GPIO_PIN0_INT_TYPE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>GPIO wake-up enable. This will only wake up ESP32-S2 from Light-sleep.</description>
            <name>GPIO_PIN0_WAKEUP_ENABLE</name>
          </field>
        </fields>
        <name>RTC_GPIO_PIN13</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x60</addressOffset>
        <description>RTC configuration for pin %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pad driver selection. 0: normal output; 1: open drain.</description>
            <name>GPIO_PIN0_PAD_DRIVER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>GPIO interrupt type selection. 0: GPIO interrupt disabled; 1: rising edge trigger; 2: falling edge trigger; 3: any edge trigger; 4: low level trigger; 5: high level trigger.</description>
            <name>GPIO_PIN0_INT_TYPE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>GPIO wake-up enable. This will only wake up ESP32-S2 from Light-sleep.</description>
            <name>GPIO_PIN0_WAKEUP_ENABLE</name>
          </field>
        </fields>
        <name>RTC_GPIO_PIN14</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x64</addressOffset>
        <description>RTC configuration for pin %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pad driver selection. 0: normal output; 1: open drain.</description>
            <name>GPIO_PIN0_PAD_DRIVER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>GPIO interrupt type selection. 0: GPIO interrupt disabled; 1: rising edge trigger; 2: falling edge trigger; 3: any edge trigger; 4: low level trigger; 5: high level trigger.</description>
            <name>GPIO_PIN0_INT_TYPE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>GPIO wake-up enable. This will only wake up ESP32-S2 from Light-sleep.</description>
            <name>GPIO_PIN0_WAKEUP_ENABLE</name>
          </field>
        </fields>
        <name>RTC_GPIO_PIN15</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x68</addressOffset>
        <description>RTC configuration for pin %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pad driver selection. 0: normal output; 1: open drain.</description>
            <name>GPIO_PIN0_PAD_DRIVER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>GPIO interrupt type selection. 0: GPIO interrupt disabled; 1: rising edge trigger; 2: falling edge trigger; 3: any edge trigger; 4: low level trigger; 5: high level trigger.</description>
            <name>GPIO_PIN0_INT_TYPE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>GPIO wake-up enable. This will only wake up ESP32-S2 from Light-sleep.</description>
            <name>GPIO_PIN0_WAKEUP_ENABLE</name>
          </field>
        </fields>
        <name>RTC_GPIO_PIN16</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x6C</addressOffset>
        <description>RTC configuration for pin %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pad driver selection. 0: normal output; 1: open drain.</description>
            <name>GPIO_PIN0_PAD_DRIVER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>GPIO interrupt type selection. 0: GPIO interrupt disabled; 1: rising edge trigger; 2: falling edge trigger; 3: any edge trigger; 4: low level trigger; 5: high level trigger.</description>
            <name>GPIO_PIN0_INT_TYPE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>GPIO wake-up enable. This will only wake up ESP32-S2 from Light-sleep.</description>
            <name>GPIO_PIN0_WAKEUP_ENABLE</name>
          </field>
        </fields>
        <name>RTC_GPIO_PIN17</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x70</addressOffset>
        <description>RTC configuration for pin %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pad driver selection. 0: normal output; 1: open drain.</description>
            <name>GPIO_PIN0_PAD_DRIVER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>GPIO interrupt type selection. 0: GPIO interrupt disabled; 1: rising edge trigger; 2: falling edge trigger; 3: any edge trigger; 4: low level trigger; 5: high level trigger.</description>
            <name>GPIO_PIN0_INT_TYPE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>GPIO wake-up enable. This will only wake up ESP32-S2 from Light-sleep.</description>
            <name>GPIO_PIN0_WAKEUP_ENABLE</name>
          </field>
        </fields>
        <name>RTC_GPIO_PIN18</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x74</addressOffset>
        <description>RTC configuration for pin %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pad driver selection. 0: normal output; 1: open drain.</description>
            <name>GPIO_PIN0_PAD_DRIVER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>GPIO interrupt type selection. 0: GPIO interrupt disabled; 1: rising edge trigger; 2: falling edge trigger; 3: any edge trigger; 4: low level trigger; 5: high level trigger.</description>
            <name>GPIO_PIN0_INT_TYPE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>GPIO wake-up enable. This will only wake up ESP32-S2 from Light-sleep.</description>
            <name>GPIO_PIN0_WAKEUP_ENABLE</name>
          </field>
        </fields>
        <name>RTC_GPIO_PIN19</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x78</addressOffset>
        <description>RTC configuration for pin %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pad driver selection. 0: normal output; 1: open drain.</description>
            <name>GPIO_PIN0_PAD_DRIVER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>GPIO interrupt type selection. 0: GPIO interrupt disabled; 1: rising edge trigger; 2: falling edge trigger; 3: any edge trigger; 4: low level trigger; 5: high level trigger.</description>
            <name>GPIO_PIN0_INT_TYPE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>GPIO wake-up enable. This will only wake up ESP32-S2 from Light-sleep.</description>
            <name>GPIO_PIN0_WAKEUP_ENABLE</name>
          </field>
        </fields>
        <name>RTC_GPIO_PIN20</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x7C</addressOffset>
        <description>RTC configuration for pin %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pad driver selection. 0: normal output; 1: open drain.</description>
            <name>GPIO_PIN0_PAD_DRIVER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>GPIO interrupt type selection. 0: GPIO interrupt disabled; 1: rising edge trigger; 2: falling edge trigger; 3: any edge trigger; 4: low level trigger; 5: high level trigger.</description>
            <name>GPIO_PIN0_INT_TYPE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>GPIO wake-up enable. This will only wake up ESP32-S2 from Light-sleep.</description>
            <name>GPIO_PIN0_WAKEUP_ENABLE</name>
          </field>
        </fields>
        <name>RTC_GPIO_PIN21</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x84</addressOffset>
        <description>Touch pad %s configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable in normal execution.</description>
            <name>TOUCH_PAD0_FUN_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output enable in sleep mode.</description>
            <name>TOUCH_PAD0_SLP_OE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable in sleep mode.</description>
            <name>TOUCH_PAD0_SLP_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: no sleep mode; 1: enable sleep mode.</description>
            <name>TOUCH_PAD0_SLP_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Function selection.</description>
            <name>TOUCH_PAD0_FUN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Connect the RTC pad input to digital pad input.  0 is available.</description>
            <name>TOUCH_PAD0_MUX_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Touch sensor power on.</description>
            <name>TOUCH_PAD0_XPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The tie option of touch sensor. 0: tie low; 1: tie high.</description>
            <name>TOUCH_PAD0_TIE_OPT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Start touch sensor.</description>
            <name>TOUCH_PAD0_START</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Touch sensor slope control. 3-bit for each touch pad, defaults to 0x4.</description>
            <name>TOUCH_PAD0_DAC</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad. 1: internal pull-down enabled, 0: internal pull-down disabled.</description>
            <name>TOUCH_PAD0_RUE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad. 1: internal pull-up enabled; 0: internal pull-up disabled.</description>
            <name>TOUCH_PAD0_RDE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Select the drive strength of the pad. 0: ~5 mA: 1: ~10 mA: 2: ~20 mA; 3: ~40 mA.</description>
            <name>TOUCH_PAD0_DRV</name>
          </field>
        </fields>
        <name>TOUCH_PAD0</name>
        <resetValue>0x52000000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x88</addressOffset>
        <description>Touch pad %s configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable in normal execution.</description>
            <name>TOUCH_PAD0_FUN_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output enable in sleep mode.</description>
            <name>TOUCH_PAD0_SLP_OE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable in sleep mode.</description>
            <name>TOUCH_PAD0_SLP_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: no sleep mode; 1: enable sleep mode.</description>
            <name>TOUCH_PAD0_SLP_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Function selection.</description>
            <name>TOUCH_PAD0_FUN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Connect the RTC pad input to digital pad input.  0 is available.</description>
            <name>TOUCH_PAD0_MUX_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Touch sensor power on.</description>
            <name>TOUCH_PAD0_XPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The tie option of touch sensor. 0: tie low; 1: tie high.</description>
            <name>TOUCH_PAD0_TIE_OPT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Start touch sensor.</description>
            <name>TOUCH_PAD0_START</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Touch sensor slope control. 3-bit for each touch pad, defaults to 0x4.</description>
            <name>TOUCH_PAD0_DAC</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad. 1: internal pull-down enabled, 0: internal pull-down disabled.</description>
            <name>TOUCH_PAD0_RUE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad. 1: internal pull-up enabled; 0: internal pull-up disabled.</description>
            <name>TOUCH_PAD0_RDE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Select the drive strength of the pad. 0: ~5 mA: 1: ~10 mA: 2: ~20 mA; 3: ~40 mA.</description>
            <name>TOUCH_PAD0_DRV</name>
          </field>
        </fields>
        <name>TOUCH_PAD1</name>
        <resetValue>0x52000000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8C</addressOffset>
        <description>Touch pad %s configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable in normal execution.</description>
            <name>TOUCH_PAD0_FUN_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output enable in sleep mode.</description>
            <name>TOUCH_PAD0_SLP_OE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable in sleep mode.</description>
            <name>TOUCH_PAD0_SLP_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: no sleep mode; 1: enable sleep mode.</description>
            <name>TOUCH_PAD0_SLP_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Function selection.</description>
            <name>TOUCH_PAD0_FUN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Connect the RTC pad input to digital pad input.  0 is available.</description>
            <name>TOUCH_PAD0_MUX_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Touch sensor power on.</description>
            <name>TOUCH_PAD0_XPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The tie option of touch sensor. 0: tie low; 1: tie high.</description>
            <name>TOUCH_PAD0_TIE_OPT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Start touch sensor.</description>
            <name>TOUCH_PAD0_START</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Touch sensor slope control. 3-bit for each touch pad, defaults to 0x4.</description>
            <name>TOUCH_PAD0_DAC</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad. 1: internal pull-down enabled, 0: internal pull-down disabled.</description>
            <name>TOUCH_PAD0_RUE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad. 1: internal pull-up enabled; 0: internal pull-up disabled.</description>
            <name>TOUCH_PAD0_RDE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Select the drive strength of the pad. 0: ~5 mA: 1: ~10 mA: 2: ~20 mA; 3: ~40 mA.</description>
            <name>TOUCH_PAD0_DRV</name>
          </field>
        </fields>
        <name>TOUCH_PAD2</name>
        <resetValue>0x52000000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x90</addressOffset>
        <description>Touch pad %s configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable in normal execution.</description>
            <name>TOUCH_PAD0_FUN_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output enable in sleep mode.</description>
            <name>TOUCH_PAD0_SLP_OE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable in sleep mode.</description>
            <name>TOUCH_PAD0_SLP_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: no sleep mode; 1: enable sleep mode.</description>
            <name>TOUCH_PAD0_SLP_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Function selection.</description>
            <name>TOUCH_PAD0_FUN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Connect the RTC pad input to digital pad input.  0 is available.</description>
            <name>TOUCH_PAD0_MUX_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Touch sensor power on.</description>
            <name>TOUCH_PAD0_XPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The tie option of touch sensor. 0: tie low; 1: tie high.</description>
            <name>TOUCH_PAD0_TIE_OPT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Start touch sensor.</description>
            <name>TOUCH_PAD0_START</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Touch sensor slope control. 3-bit for each touch pad, defaults to 0x4.</description>
            <name>TOUCH_PAD0_DAC</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad. 1: internal pull-down enabled, 0: internal pull-down disabled.</description>
            <name>TOUCH_PAD0_RUE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad. 1: internal pull-up enabled; 0: internal pull-up disabled.</description>
            <name>TOUCH_PAD0_RDE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Select the drive strength of the pad. 0: ~5 mA: 1: ~10 mA: 2: ~20 mA; 3: ~40 mA.</description>
            <name>TOUCH_PAD0_DRV</name>
          </field>
        </fields>
        <name>TOUCH_PAD3</name>
        <resetValue>0x52000000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x94</addressOffset>
        <description>Touch pad %s configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable in normal execution.</description>
            <name>TOUCH_PAD0_FUN_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output enable in sleep mode.</description>
            <name>TOUCH_PAD0_SLP_OE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable in sleep mode.</description>
            <name>TOUCH_PAD0_SLP_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: no sleep mode; 1: enable sleep mode.</description>
            <name>TOUCH_PAD0_SLP_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Function selection.</description>
            <name>TOUCH_PAD0_FUN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Connect the RTC pad input to digital pad input.  0 is available.</description>
            <name>TOUCH_PAD0_MUX_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Touch sensor power on.</description>
            <name>TOUCH_PAD0_XPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The tie option of touch sensor. 0: tie low; 1: tie high.</description>
            <name>TOUCH_PAD0_TIE_OPT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Start touch sensor.</description>
            <name>TOUCH_PAD0_START</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Touch sensor slope control. 3-bit for each touch pad, defaults to 0x4.</description>
            <name>TOUCH_PAD0_DAC</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad. 1: internal pull-down enabled, 0: internal pull-down disabled.</description>
            <name>TOUCH_PAD0_RUE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad. 1: internal pull-up enabled; 0: internal pull-up disabled.</description>
            <name>TOUCH_PAD0_RDE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Select the drive strength of the pad. 0: ~5 mA: 1: ~10 mA: 2: ~20 mA; 3: ~40 mA.</description>
            <name>TOUCH_PAD0_DRV</name>
          </field>
        </fields>
        <name>TOUCH_PAD4</name>
        <resetValue>0x52000000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x98</addressOffset>
        <description>Touch pad %s configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable in normal execution.</description>
            <name>TOUCH_PAD0_FUN_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output enable in sleep mode.</description>
            <name>TOUCH_PAD0_SLP_OE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable in sleep mode.</description>
            <name>TOUCH_PAD0_SLP_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: no sleep mode; 1: enable sleep mode.</description>
            <name>TOUCH_PAD0_SLP_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Function selection.</description>
            <name>TOUCH_PAD0_FUN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Connect the RTC pad input to digital pad input.  0 is available.</description>
            <name>TOUCH_PAD0_MUX_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Touch sensor power on.</description>
            <name>TOUCH_PAD0_XPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The tie option of touch sensor. 0: tie low; 1: tie high.</description>
            <name>TOUCH_PAD0_TIE_OPT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Start touch sensor.</description>
            <name>TOUCH_PAD0_START</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Touch sensor slope control. 3-bit for each touch pad, defaults to 0x4.</description>
            <name>TOUCH_PAD0_DAC</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad. 1: internal pull-down enabled, 0: internal pull-down disabled.</description>
            <name>TOUCH_PAD0_RUE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad. 1: internal pull-up enabled; 0: internal pull-up disabled.</description>
            <name>TOUCH_PAD0_RDE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Select the drive strength of the pad. 0: ~5 mA: 1: ~10 mA: 2: ~20 mA; 3: ~40 mA.</description>
            <name>TOUCH_PAD0_DRV</name>
          </field>
        </fields>
        <name>TOUCH_PAD5</name>
        <resetValue>0x52000000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9C</addressOffset>
        <description>Touch pad %s configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable in normal execution.</description>
            <name>TOUCH_PAD0_FUN_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output enable in sleep mode.</description>
            <name>TOUCH_PAD0_SLP_OE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable in sleep mode.</description>
            <name>TOUCH_PAD0_SLP_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: no sleep mode; 1: enable sleep mode.</description>
            <name>TOUCH_PAD0_SLP_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Function selection.</description>
            <name>TOUCH_PAD0_FUN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Connect the RTC pad input to digital pad input.  0 is available.</description>
            <name>TOUCH_PAD0_MUX_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Touch sensor power on.</description>
            <name>TOUCH_PAD0_XPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The tie option of touch sensor. 0: tie low; 1: tie high.</description>
            <name>TOUCH_PAD0_TIE_OPT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Start touch sensor.</description>
            <name>TOUCH_PAD0_START</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Touch sensor slope control. 3-bit for each touch pad, defaults to 0x4.</description>
            <name>TOUCH_PAD0_DAC</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad. 1: internal pull-down enabled, 0: internal pull-down disabled.</description>
            <name>TOUCH_PAD0_RUE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad. 1: internal pull-up enabled; 0: internal pull-up disabled.</description>
            <name>TOUCH_PAD0_RDE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Select the drive strength of the pad. 0: ~5 mA: 1: ~10 mA: 2: ~20 mA; 3: ~40 mA.</description>
            <name>TOUCH_PAD0_DRV</name>
          </field>
        </fields>
        <name>TOUCH_PAD6</name>
        <resetValue>0x52000000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA0</addressOffset>
        <description>Touch pad %s configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable in normal execution.</description>
            <name>TOUCH_PAD0_FUN_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output enable in sleep mode.</description>
            <name>TOUCH_PAD0_SLP_OE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable in sleep mode.</description>
            <name>TOUCH_PAD0_SLP_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: no sleep mode; 1: enable sleep mode.</description>
            <name>TOUCH_PAD0_SLP_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Function selection.</description>
            <name>TOUCH_PAD0_FUN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Connect the RTC pad input to digital pad input.  0 is available.</description>
            <name>TOUCH_PAD0_MUX_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Touch sensor power on.</description>
            <name>TOUCH_PAD0_XPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The tie option of touch sensor. 0: tie low; 1: tie high.</description>
            <name>TOUCH_PAD0_TIE_OPT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Start touch sensor.</description>
            <name>TOUCH_PAD0_START</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Touch sensor slope control. 3-bit for each touch pad, defaults to 0x4.</description>
            <name>TOUCH_PAD0_DAC</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad. 1: internal pull-down enabled, 0: internal pull-down disabled.</description>
            <name>TOUCH_PAD0_RUE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad. 1: internal pull-up enabled; 0: internal pull-up disabled.</description>
            <name>TOUCH_PAD0_RDE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Select the drive strength of the pad. 0: ~5 mA: 1: ~10 mA: 2: ~20 mA; 3: ~40 mA.</description>
            <name>TOUCH_PAD0_DRV</name>
          </field>
        </fields>
        <name>TOUCH_PAD7</name>
        <resetValue>0x52000000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA4</addressOffset>
        <description>Touch pad %s configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable in normal execution.</description>
            <name>TOUCH_PAD0_FUN_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output enable in sleep mode.</description>
            <name>TOUCH_PAD0_SLP_OE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable in sleep mode.</description>
            <name>TOUCH_PAD0_SLP_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: no sleep mode; 1: enable sleep mode.</description>
            <name>TOUCH_PAD0_SLP_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Function selection.</description>
            <name>TOUCH_PAD0_FUN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Connect the RTC pad input to digital pad input.  0 is available.</description>
            <name>TOUCH_PAD0_MUX_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Touch sensor power on.</description>
            <name>TOUCH_PAD0_XPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The tie option of touch sensor. 0: tie low; 1: tie high.</description>
            <name>TOUCH_PAD0_TIE_OPT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Start touch sensor.</description>
            <name>TOUCH_PAD0_START</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Touch sensor slope control. 3-bit for each touch pad, defaults to 0x4.</description>
            <name>TOUCH_PAD0_DAC</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad. 1: internal pull-down enabled, 0: internal pull-down disabled.</description>
            <name>TOUCH_PAD0_RUE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad. 1: internal pull-up enabled; 0: internal pull-up disabled.</description>
            <name>TOUCH_PAD0_RDE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Select the drive strength of the pad. 0: ~5 mA: 1: ~10 mA: 2: ~20 mA; 3: ~40 mA.</description>
            <name>TOUCH_PAD0_DRV</name>
          </field>
        </fields>
        <name>TOUCH_PAD8</name>
        <resetValue>0x52000000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA8</addressOffset>
        <description>Touch pad %s configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable in normal execution.</description>
            <name>TOUCH_PAD0_FUN_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output enable in sleep mode.</description>
            <name>TOUCH_PAD0_SLP_OE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable in sleep mode.</description>
            <name>TOUCH_PAD0_SLP_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: no sleep mode; 1: enable sleep mode.</description>
            <name>TOUCH_PAD0_SLP_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Function selection.</description>
            <name>TOUCH_PAD0_FUN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Connect the RTC pad input to digital pad input.  0 is available.</description>
            <name>TOUCH_PAD0_MUX_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Touch sensor power on.</description>
            <name>TOUCH_PAD0_XPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The tie option of touch sensor. 0: tie low; 1: tie high.</description>
            <name>TOUCH_PAD0_TIE_OPT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Start touch sensor.</description>
            <name>TOUCH_PAD0_START</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Touch sensor slope control. 3-bit for each touch pad, defaults to 0x4.</description>
            <name>TOUCH_PAD0_DAC</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad. 1: internal pull-down enabled, 0: internal pull-down disabled.</description>
            <name>TOUCH_PAD0_RUE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad. 1: internal pull-up enabled; 0: internal pull-up disabled.</description>
            <name>TOUCH_PAD0_RDE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Select the drive strength of the pad. 0: ~5 mA: 1: ~10 mA: 2: ~20 mA; 3: ~40 mA.</description>
            <name>TOUCH_PAD0_DRV</name>
          </field>
        </fields>
        <name>TOUCH_PAD9</name>
        <resetValue>0x52000000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAC</addressOffset>
        <description>Touch pad %s configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable in normal execution.</description>
            <name>TOUCH_PAD0_FUN_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output enable in sleep mode.</description>
            <name>TOUCH_PAD0_SLP_OE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable in sleep mode.</description>
            <name>TOUCH_PAD0_SLP_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: no sleep mode; 1: enable sleep mode.</description>
            <name>TOUCH_PAD0_SLP_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Function selection.</description>
            <name>TOUCH_PAD0_FUN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Connect the RTC pad input to digital pad input.  0 is available.</description>
            <name>TOUCH_PAD0_MUX_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Touch sensor power on.</description>
            <name>TOUCH_PAD0_XPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The tie option of touch sensor. 0: tie low; 1: tie high.</description>
            <name>TOUCH_PAD0_TIE_OPT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Start touch sensor.</description>
            <name>TOUCH_PAD0_START</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Touch sensor slope control. 3-bit for each touch pad, defaults to 0x4.</description>
            <name>TOUCH_PAD0_DAC</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad. 1: internal pull-down enabled, 0: internal pull-down disabled.</description>
            <name>TOUCH_PAD0_RUE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad. 1: internal pull-up enabled; 0: internal pull-up disabled.</description>
            <name>TOUCH_PAD0_RDE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Select the drive strength of the pad. 0: ~5 mA: 1: ~10 mA: 2: ~20 mA; 3: ~40 mA.</description>
            <name>TOUCH_PAD0_DRV</name>
          </field>
        </fields>
        <name>TOUCH_PAD10</name>
        <resetValue>0x52000000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB0</addressOffset>
        <description>Touch pad %s configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable in normal execution.</description>
            <name>TOUCH_PAD0_FUN_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output enable in sleep mode.</description>
            <name>TOUCH_PAD0_SLP_OE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable in sleep mode.</description>
            <name>TOUCH_PAD0_SLP_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: no sleep mode; 1: enable sleep mode.</description>
            <name>TOUCH_PAD0_SLP_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Function selection.</description>
            <name>TOUCH_PAD0_FUN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Connect the RTC pad input to digital pad input.  0 is available.</description>
            <name>TOUCH_PAD0_MUX_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Touch sensor power on.</description>
            <name>TOUCH_PAD0_XPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The tie option of touch sensor. 0: tie low; 1: tie high.</description>
            <name>TOUCH_PAD0_TIE_OPT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Start touch sensor.</description>
            <name>TOUCH_PAD0_START</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Touch sensor slope control. 3-bit for each touch pad, defaults to 0x4.</description>
            <name>TOUCH_PAD0_DAC</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad. 1: internal pull-down enabled, 0: internal pull-down disabled.</description>
            <name>TOUCH_PAD0_RUE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad. 1: internal pull-up enabled; 0: internal pull-up disabled.</description>
            <name>TOUCH_PAD0_RDE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Select the drive strength of the pad. 0: ~5 mA: 1: ~10 mA: 2: ~20 mA; 3: ~40 mA.</description>
            <name>TOUCH_PAD0_DRV</name>
          </field>
        </fields>
        <name>TOUCH_PAD11</name>
        <resetValue>0x52000000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB4</addressOffset>
        <description>Touch pad %s configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable in normal execution.</description>
            <name>TOUCH_PAD0_FUN_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output enable in sleep mode.</description>
            <name>TOUCH_PAD0_SLP_OE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable in sleep mode.</description>
            <name>TOUCH_PAD0_SLP_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: no sleep mode; 1: enable sleep mode.</description>
            <name>TOUCH_PAD0_SLP_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Function selection.</description>
            <name>TOUCH_PAD0_FUN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Connect the RTC pad input to digital pad input.  0 is available.</description>
            <name>TOUCH_PAD0_MUX_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Touch sensor power on.</description>
            <name>TOUCH_PAD0_XPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The tie option of touch sensor. 0: tie low; 1: tie high.</description>
            <name>TOUCH_PAD0_TIE_OPT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Start touch sensor.</description>
            <name>TOUCH_PAD0_START</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Touch sensor slope control. 3-bit for each touch pad, defaults to 0x4.</description>
            <name>TOUCH_PAD0_DAC</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad. 1: internal pull-down enabled, 0: internal pull-down disabled.</description>
            <name>TOUCH_PAD0_RUE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad. 1: internal pull-up enabled; 0: internal pull-up disabled.</description>
            <name>TOUCH_PAD0_RDE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Select the drive strength of the pad. 0: ~5 mA: 1: ~10 mA: 2: ~20 mA; 3: ~40 mA.</description>
            <name>TOUCH_PAD0_DRV</name>
          </field>
        </fields>
        <name>TOUCH_PAD12</name>
        <resetValue>0x52000000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB8</addressOffset>
        <description>Touch pad %s configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable in normal execution.</description>
            <name>TOUCH_PAD0_FUN_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output enable in sleep mode.</description>
            <name>TOUCH_PAD0_SLP_OE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable in sleep mode.</description>
            <name>TOUCH_PAD0_SLP_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: no sleep mode; 1: enable sleep mode.</description>
            <name>TOUCH_PAD0_SLP_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Function selection.</description>
            <name>TOUCH_PAD0_FUN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Connect the RTC pad input to digital pad input.  0 is available.</description>
            <name>TOUCH_PAD0_MUX_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Touch sensor power on.</description>
            <name>TOUCH_PAD0_XPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The tie option of touch sensor. 0: tie low; 1: tie high.</description>
            <name>TOUCH_PAD0_TIE_OPT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Start touch sensor.</description>
            <name>TOUCH_PAD0_START</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Touch sensor slope control. 3-bit for each touch pad, defaults to 0x4.</description>
            <name>TOUCH_PAD0_DAC</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad. 1: internal pull-down enabled, 0: internal pull-down disabled.</description>
            <name>TOUCH_PAD0_RUE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad. 1: internal pull-up enabled; 0: internal pull-up disabled.</description>
            <name>TOUCH_PAD0_RDE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Select the drive strength of the pad. 0: ~5 mA: 1: ~10 mA: 2: ~20 mA; 3: ~40 mA.</description>
            <name>TOUCH_PAD0_DRV</name>
          </field>
        </fields>
        <name>TOUCH_PAD13</name>
        <resetValue>0x52000000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBC</addressOffset>
        <description>Touch pad %s configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable in normal execution.</description>
            <name>TOUCH_PAD0_FUN_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output enable in sleep mode.</description>
            <name>TOUCH_PAD0_SLP_OE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Input enable in sleep mode.</description>
            <name>TOUCH_PAD0_SLP_IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: no sleep mode; 1: enable sleep mode.</description>
            <name>TOUCH_PAD0_SLP_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Function selection.</description>
            <name>TOUCH_PAD0_FUN_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Connect the RTC pad input to digital pad input.  0 is available.</description>
            <name>TOUCH_PAD0_MUX_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Touch sensor power on.</description>
            <name>TOUCH_PAD0_XPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The tie option of touch sensor. 0: tie low; 1: tie high.</description>
            <name>TOUCH_PAD0_TIE_OPT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Start touch sensor.</description>
            <name>TOUCH_PAD0_START</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Touch sensor slope control. 3-bit for each touch pad, defaults to 0x4.</description>
            <name>TOUCH_PAD0_DAC</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-down enable of the pad. 1: internal pull-down enabled, 0: internal pull-down disabled.</description>
            <name>TOUCH_PAD0_RUE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Pull-up enable of the pad. 1: internal pull-up enabled; 0: internal pull-up disabled.</description>
            <name>TOUCH_PAD0_RDE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Select the drive strength of the pad. 0: ~5 mA: 1: ~10 mA: 2: ~20 mA; 3: ~40 mA.</description>
            <name>TOUCH_PAD0_DRV</name>
          </field>
        </fields>
        <name>TOUCH_PAD14</name>
        <resetValue>0x52000000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <resetMask>0xFFFFFFFF</resetMask>
    <resetValue>0x0</resetValue>
  </peripheral>
</peripherals>
<peripherals>
  <peripheral>
    <addressBlock>
      <offset>0x0</offset>
      <size>0x138</size>
      <usage>registers</usage>
    </addressBlock>
    <baseAddress>0x3F408000</baseAddress>
    <description>Real Time Controller</description>
    <groupName>RTC_CNTL</groupName>
    <interrupts>
      <interrupt>
        <name>RTC_CORE</name>
        <value>0x31</value>
      </interrupt>
    </interrupts>
    <name>RTC_CNTL</name>
    <registers>
      <register>
        <addressOffset>0x0</addressOffset>
        <description>Sets the power options of crystal and PLL clocks, and initiates reset by software</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>{reg_sw_stall_appcpu_c1[5:0] , reg_sw_stall_appcpu_c0[1:0]} == 0x86 will stall APP CPU</description>
            <name>SW_STALL_APPCPU_C0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>[RTC\_CNTL\_REG\_SW\_STALL\_PROCPU\_C0] [{reg\_sw\_stall\_procpu\_c1[5:0] , reg\_sw\_stall\_procpu\_c0[1:0]}] == 0x86 will stall the CPU.</description>
            <name>SW_STALL_PROCPU_C0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>APP CPU SW reset. (Note, we don’t have APP CPU for ESP32-S2)</description>
            <name>SW_APPCPU_RST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to reset the CPU by SW.</description>
            <name>SW_PROCPU_RST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to FPD BB_I2C.</description>
            <name>BB_I2C_FORCE_PD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to FPU BB\_I2C.</description>
            <name>BB_I2C_FORCE_PU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to FPD BB_PLL _I2C.</description>
            <name>BBPLL_I2C_FORCE_PD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to FPU BB_PLL _I2C.</description>
            <name>BBPLL_I2C_FORCE_PU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to FPD BB_PLL.</description>
            <name>BBPLL_FORCE_PD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to FPU BB_PLL.</description>
            <name>BBPLL_FORCE_PU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to FPD the crystal oscillator.</description>
            <name>XTL_FORCE_PD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to FPU the crystal oscillator.</description>
            <name>XTL_FORCE_PU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x1</bitWidth>
            <name>XTL_FORCE_ISO</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <name>PLL_FORCE_ISO</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x1</bitWidth>
            <name>ANALOG_FORCE_ISO</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x1</bitWidth>
            <name>XTL_FORCE_NOISO</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x1</bitWidth>
            <name>PLL_FORCE_NOISO</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <name>ANALOG_FORCE_NOISO</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to force reset the digital system in deep-sleep.</description>
            <name>DG_WRAP_FORCE_RST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to disable force reset to digital system in deep-sleep.</description>
            <name>DG_WRAP_FORCE_NORST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to reset the system via SW.</description>
            <name>SW_SYS_RST</name>
          </field>
        </fields>
        <name>OPTIONS0</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x1C002000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4</addressOffset>
        <description>RTC timer threshold register 0</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Sets the lower 32 bits of the trigger threshold for the RTC timer.</description>
            <name>SLP_VAL_LO</name>
          </field>
        </fields>
        <name>SLP_TIMER0</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8</addressOffset>
        <description>RTC timer threshold register 1</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>Sets the higher 16 bits of the trigger threshold for the RTC timer.</description>
            <name>SLP_VAL_HI</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Sets this bit to enable the timer alarm.</description>
            <name>MAIN_TIMER_ALARM_EN</name>
          </field>
        </fields>
        <name>SLP_TIMER1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xC</addressOffset>
        <description>RTC timer update control register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Selects the triggering condition for the RTC timer. See details in Table 1-2.</description>
            <name>TIMER_SYS_STALL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Selects the triggering condition for the RTC timer. See details in Table 1-2.</description>
            <name>TIMER_XTL_OFF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Selects the triggering condition for the RTC timer. See details in Table 1-2.</description>
            <name>TIMER_SYS_RST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Selects the triggering condition for the RTC timer. See details in Table 1-2.</description>
            <name>TIME_UPDATE</name>
          </field>
        </fields>
        <name>TIME_UPDATE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x10</addressOffset>
        <description>Stores the lower 32 bits of RTC timer 0</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the lower 32 bits of RTC timer 0</description>
            <name>TIMER_VALUE0_LOW</name>
          </field>
        </fields>
        <name>TIME_LOW0</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x14</addressOffset>
        <description>Stores the higher 16 bits of RTC timer 0</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>Stores the higher 16 bits of RTC timer 0</description>
            <name>TIMER_VALUE0_HIGH</name>
          </field>
        </fields>
        <name>TIME_HIGH0</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x18</addressOffset>
        <description>Configures the sleep / reject / wakeup state</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Sends a SW RTC interrupt to CPU</description>
            <name>SW_CPU_INT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Clears the RTC reject-to-sleep cause.</description>
            <name>SLP_REJECT_CAUSE_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: APB to RTC using bridge    0: APB to RTC using sync</description>
            <name>APB2RTC_BRIDGE_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Indicates the SDIO is active.</description>
            <name>SDIO_ACTIVE_IND</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>sleep wakeup bit</description>
            <name>SLP_WAKEUP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>sleep reject bit</description>
            <name>SLP_REJECT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Sends the chip to sleep.</description>
            <name>SLEEP_EN</name>
          </field>
        </fields>
        <name>STATE0</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1C</addressOffset>
        <description>Configures CPU stall options</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enables CPU stalling.</description>
            <name>CPU_STALL_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Sets the CPU stall waiting cycle (using the RTC fast clock).</description>
            <name>CPU_STALL_WAIT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>Sets the 8 MHz clock  waiting (using the RTC slow clock).</description>
            <name>CK8M_WAIT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>Sets the XTAL waiting cycle (using the RTC slow clock).</description>
            <name>XTL_BUF_WAIT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>Sets the PLL waiting cycle (using the RTC slow clock).</description>
            <name>PLL_BUF_WAIT</name>
          </field>
        </fields>
        <name>TIMER1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x28140403</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x20</addressOffset>
        <description>Configures RTC slow clock and touch controller</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>Sets the waiting cycle (usingg the RTC slow clock) before the ULP co-processor / touch controller start to work.</description>
            <name>ULPCP_TOUCH_START_WAIT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>Sets the minimal cycle for  8 MHz clock (using the RTC slow clock) when powered down.</description>
            <name>MIN_TIME_CK8M_OFF</name>
          </field>
        </fields>
        <name>TIMER2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x1080000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x24</addressOffset>
        <description>configure some wait time for power on</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x9</bitWidth>
            <name>WIFI_WAIT_TIMER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x7</bitWidth>
            <name>WIFI_POWERUP_TIMER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x9</bitWidth>
            <name>ROM_RAM_WAIT_TIMER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x7</bitWidth>
            <name>ROM_RAM_POWERUP_TIMER</name>
          </field>
        </fields>
        <name>TIMER3</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x14160A08</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x28</addressOffset>
        <description>configure some wait time for power on</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x9</bitWidth>
            <name>WAIT_TIMER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x7</bitWidth>
            <name>POWERUP_TIMER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x9</bitWidth>
            <name>DG_WRAP_WAIT_TIMER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x7</bitWidth>
            <name>DG_WRAP_POWERUP_TIMER</name>
          </field>
        </fields>
        <name>TIMER4</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10200A08</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2C</addressOffset>
        <description>Configures the minimal sleep cycles</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>Sets the minimal sleep cycles (using the RTC slow clock).</description>
            <name>MIN_SLP_VAL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x9</bitWidth>
            <name>RTCMEM_WAIT_TIMER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x7</bitWidth>
            <name>RTCMEM_POWERUP_TIMER</name>
          </field>
        </fields>
        <name>TIMER5</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x12148000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x30</addressOffset>
        <description>Configure minimal sleep cycles register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x9</bitWidth>
            <name>DG_DCDC_WAIT_TIMER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x7</bitWidth>
            <name>DG_DCDC_POWERUP_TIMER</name>
          </field>
        </fields>
        <name>TIMER6</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10200000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x34</addressOffset>
        <description>Configures the power options for I2C and PLLA</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SLEEP_I2CPOR force pd</description>
            <name>I2C_RESET_POR_FORCE_PD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SLEEP_I2CPOR force pu</description>
            <name>I2C_RESET_POR_FORCE_PU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable a reset when the system detects a glitch.</description>
            <name>GLITCH_RST_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Sets this bit to FPD the SAR_I2C.</description>
            <name>SAR_I2C_FORCE_PD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Sets this bit to FPU the SAR_I2C.</description>
            <name>SAR_I2C_FORCE_PU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Sets this bit to FPD the PLLA.</description>
            <name>PLLA_FORCE_PD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Sets this bit to FPU the PLLA.</description>
            <name>PLLA_FORCE_PU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>start BBPLL calibration during sleep</description>
            <name>BBPLL_CAL_SLP_START</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: PVTMON power up    ,  otherwise power down</description>
            <name>PVTMON_PU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: TXRF_I2C power up    ,    otherwise power down</description>
            <name>TXRF_I2C_PU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: RFRX_PBUS power up   ,   otherwise power down</description>
            <name>RFRX_PBUS_PU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: CKGEN_I2C power up   , otherwise power down</description>
            <name>CKGEN_I2C_PU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1. PLL_I2C power up ,otherwise power down</description>
            <name>PLL_I2C_PU</name>
          </field>
        </fields>
        <name>ANA_CONF</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xA40000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x38</addressOffset>
        <description>Indicates the CPU reset source. For more information about the reset cause, please refer to Table \ref{table:resetreasons} in Chapter \ref{module:ResetandClock} \textit{\nameref{module:ResetandClock}}.</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Stores the CPU reset cause.</description>
            <name>RESET_CAUSE_PROCPU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>reset cause of APP CPU</description>
            <name>RESET_CAUSE_APPCPU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>APP CPU state vector sel</description>
            <name>APPCPU_STAT_VECTOR_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Selects the CPU state vector.</description>
            <name>PROCPU_STAT_VECTOR_SEL</name>
          </field>
        </fields>
        <name>RESET_STATE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x3000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3C</addressOffset>
        <description>Wakeup bitmap enabling register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x11</bitWidth>
            <description>Enables the wakeup bitmap</description>
            <name>WAKEUP_ENA</name>
          </field>
        </fields>
        <name>WAKEUP_STATE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x60000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x40</addressOffset>
        <description>RTC interrupt enabling register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enables interruption when the chip wakes up from sleep.</description>
            <name>SLP_WAKEUP_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enables interruption when the chip rejects to go to sleep.</description>
            <name>SLP_REJECT_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enables interruption when the SDIO idles.</description>
            <name>SDIO_IDLE_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enables the RTC watchdog interrupt.</description>
            <name>WDT_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enables interruption upon the completion of a touch scaning.</description>
            <name>TOUCH_SCAN_DONE_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enables the ULP co-processor interrupt.</description>
            <name>ULP_CP_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enables interruption upon the completion of a single touch.</description>
            <name>TOUCH_DONE_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enables interruption when a touch is detected.</description>
            <name>TOUCH_ACTIVE_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enables interruption when a touch is released.</description>
            <name>TOUCH_INACTIVE_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enables the brown out interrupt.</description>
            <name>BROWN_OUT_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enables the RTC main timer interrupt.</description>
            <name>MAIN_TIMER_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enables the SAR ADC 1 interrupt.</description>
            <name>SARADC1_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enables the touch sensor interrupt.</description>
            <name>TSENS_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enables the ULP-RISCV interrupt.</description>
            <name>COCPU_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enables the SAR ADC 2 interrupt.</description>
            <name>SARADC2_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enables the super watchdog interrupt.</description>
            <name>SWD_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enables interruption when the 32 kHz crystal is dead.</description>
            <name>XTAL32K_DEAD_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enables interruption when the ULP-RISCV is trapped.</description>
            <name>COCPU_TRAP_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enables interruption when touch sensor times out.</description>
            <name>TOUCH_TIMEOUT_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enables interruption when a gitch is detected.</description>
            <name>GLITCH_DET_INT_ENA</name>
          </field>
        </fields>
        <name>INT_ENA_RTC</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x44</addressOffset>
        <description>RTC interrupt raw register</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Stores the raw interrupt triggered when the chip wakes up from sleep.</description>
            <name>SLP_WAKEUP_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Stores the raw interrupt triggered when the chip rejects to go to sleep.</description>
            <name>SLP_REJECT_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Stores the raw interrupt triggered when the SDIO idles.</description>
            <name>SDIO_IDLE_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Stores the raw RTC watchdog interrupt.</description>
            <name>WDT_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Stores the raw interrupt triggered upon the completion of a touch scaning.</description>
            <name>TOUCH_SCAN_DONE_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Stores the raw ULP co-processor interrupt.</description>
            <name>ULP_CP_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Stores the raw interrupt triggered upon the completion of a single touch.</description>
            <name>TOUCH_DONE_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Stores the raw interrupt triggered when a touch is detected.</description>
            <name>TOUCH_ACTIVE_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Stores the raw interrupt triggered when a touch is released.</description>
            <name>TOUCH_INACTIVE_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Stores the raw brown out interrupt.</description>
            <name>BROWN_OUT_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Stores the raw RTC main timer interrupt.</description>
            <name>MAIN_TIMER_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Stores the raw SAR ADC 1 interrupt.</description>
            <name>SARADC1_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Stores the raw touch sensor interrupt.</description>
            <name>TSENS_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Stores the raw ULP-RISCV interrupt.</description>
            <name>COCPU_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Stores the raw SAR ADC 2 interrupt.</description>
            <name>SARADC2_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Stores the raw super watchdog interrupt.</description>
            <name>SWD_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Stores the raw interrupt triggered when the 32 kHz crystal is dead.</description>
            <name>XTAL32K_DEAD_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Stores the raw interrupt triggered when the ULP-RISCV is trapped.</description>
            <name>COCPU_TRAP_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Stores the raw interrupt triggered when touch sensor times out.</description>
            <name>TOUCH_TIMEOUT_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Stores the raw interrupt triggered when a gitch is detected.</description>
            <name>GLITCH_DET_INT_RAW</name>
          </field>
        </fields>
        <name>INT_RAW_RTC</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x48</addressOffset>
        <description>RTC interrupt state register</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Stores the status of the interrupt triggered when the chip wakes up from sleep.</description>
            <name>SLP_WAKEUP_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Stores the status of the interrupt triggered when the chip rejects to go to sleep.</description>
            <name>SLP_REJECT_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Stores the status of the interrupt triggered when the SDIO idles.</description>
            <name>SDIO_IDLE_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Stores the status of the RTC watchdog interrupt.</description>
            <name>WDT_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Stores the status of the interrupt triggered upon the completion of a touch scaning.</description>
            <name>TOUCH_SCAN_DONE_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Stores the status of the ULP co-processor interrupt.</description>
            <name>ULP_CP_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Stores the status of the interrupt triggered upon the completion of a single touch.</description>
            <name>TOUCH_DONE_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Stores the status of the interrupt triggered when a touch is detected.</description>
            <name>TOUCH_ACTIVE_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Stores the status of the interrupt triggered when a touch is released.</description>
            <name>TOUCH_INACTIVE_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Stores the status of the brown out interrupt.</description>
            <name>BROWN_OUT_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Stores the status of the RTC main timer interrupt.</description>
            <name>MAIN_TIMER_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Stores the status of the SAR ADC 1 interrupt.</description>
            <name>SARADC1_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Stores the status of the touch sensor interrupt.</description>
            <name>TSENS_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Stores the status of the ULP-RISCV interrupt.</description>
            <name>COCPU_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Stores the status of the SAR ADC 2 interrupt.</description>
            <name>SARADC2_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Stores the status of the super watchdog interrupt.</description>
            <name>SWD_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Stores the status of the interrupt triggered when the 32 kHz crystal is dead.</description>
            <name>XTAL32K_DEAD_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Stores the status of the interrupt triggered when the ULP-RISCV is trapped.</description>
            <name>COCPU_TRAP_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Stores the status of the interrupt triggered when touch sensor times out.</description>
            <name>TOUCH_TIMEOUT_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Stores the status of the interrupt triggered when a gitch is detected.</description>
            <name>GLITCH_DET_INT_ST</name>
          </field>
        </fields>
        <name>INT_ST_RTC</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4C</addressOffset>
        <description>RTC interrupt clear register</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Clears the interrupt triggered when the chip wakes up from sleep.</description>
            <name>SLP_WAKEUP_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Clears the interrupt triggered when the chip rejects to go to sleep.</description>
            <name>SLP_REJECT_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Clears the interrupt triggered when the SDIO idles.</description>
            <name>SDIO_IDLE_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enables the RTC watchdog interrupt.</description>
            <name>WDT_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Clears the interrupt triggered upon the completion of a touch scaning.</description>
            <name>TOUCH_SCAN_DONE_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enables the ULP co-processor interrupt.</description>
            <name>ULP_CP_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Clears the interrupt triggered upon the completion of a single touch.</description>
            <name>TOUCH_DONE_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Clears the interrupt triggered when a touch is detected.</description>
            <name>TOUCH_ACTIVE_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Clears the interrupt triggered when a touch is released.</description>
            <name>TOUCH_INACTIVE_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Clears the brown out interrupt.</description>
            <name>BROWN_OUT_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Clears the RTC main timer interrupt.</description>
            <name>MAIN_TIMER_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Clears the SAR ADC 1 interrupt.</description>
            <name>SARADC1_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Clears the touch sensor interrupt.</description>
            <name>TSENS_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Clears the ULP-RISCV interrupt.</description>
            <name>COCPU_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Clears the SAR ADC 2 interrupt.</description>
            <name>SARADC2_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Clears the super watchdog interrupt.</description>
            <name>SWD_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Clears the interrupt triggered when the 32 kHz crystal is dead.</description>
            <name>XTAL32K_DEAD_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Clears the interrupt triggered when the ULP-RISCV is trapped.</description>
            <name>COCPU_TRAP_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Clears the interrupt triggered when touch sensor times out.</description>
            <name>TOUCH_TIMEOUT_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Clears the interrupt triggered when a gitch is detected.</description>
            <name>GLITCH_DET_INT_CLR</name>
          </field>
        </fields>
        <name>INT_CLR_RTC</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x50</addressOffset>
        <description>Reservation register 0</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Reservation register 0</description>
            <name>SCRATCH0</name>
          </field>
        </fields>
        <name>STORE0</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x54</addressOffset>
        <description>Reservation register 1</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Reservation register 1</description>
            <name>SCRATCH1</name>
          </field>
        </fields>
        <name>STORE1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x58</addressOffset>
        <description>Reservation register 2</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Reservation register 2</description>
            <name>SCRATCH2</name>
          </field>
        </fields>
        <name>STORE2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5C</addressOffset>
        <description>Reservation register 3</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Reservation register 3</description>
            <name>SCRATCH3</name>
          </field>
        </fields>
        <name>STORE3</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x60</addressOffset>
        <description>32 kHz crystal oscillator configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable the 32 kHz crystal watchdog.</description>
            <name>XTAL32K_WDT_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to FPU the 32 kHz crystal watchdog clock.</description>
            <name>XTAL32K_WDT_CLK_FO</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to reset the 32 kHz crystal watchdog by SW.</description>
            <name>XTAL32K_WDT_RESET</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to FPU the external clock of 32 kHz crystal.</description>
            <name>XTAL32K_EXT_CLK_FO</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to switch to the backup clock when the 32 kHz crystal is dead.</description>
            <name>XTAL32K_AUTO_BACKUP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to restart the 32 kHz crystal automatically when the 32 kHz crystal is dead.</description>
            <name>XTAL32K_AUTO_RESTART</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to switch back to 32 kHz crystal when the 32 kHz crystal is restarted.</description>
            <name>XTAL32K_AUTO_RETURN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set 1 to allow the software to FPD the 32 kHz crystal</description>
            <name>XTAL32K_XPD_FORCE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Applies an internal clock to help the 32 kHz crystal to start.</description>
            <name>ENCKINIT_XTAL_32K</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: single-end buffer 1: differential buffer</description>
            <name>DBUF_XTAL_32K</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>xtal_32k gm control</description>
            <name>DGM_XTAL_32K</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>DRES_XTAL_32K</description>
            <name>DRES_XTAL_32K</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>XPD_XTAL_32K</description>
            <name>XPD_XTAL_32K</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>DAC_XTAL_32K</description>
            <name>DAC_XTAL_32K</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Stores the status of the 32 kHz watchdog.</description>
            <name>WDT_STATE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Selects the 32 kHz crystal clock. 0: selects the external 32 kHz clock</description>
            <name>XTAL32K_GPIO_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: powers down XTAL at high level</description>
            <name>XTL_EXT_CTR_LV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enables the GPIO to power down the crystal oscillator.</description>
            <name>XTL_EXT_CTR_EN</name>
          </field>
        </fields>
        <name>EXT_XTL_CONF</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x66C80</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x64</addressOffset>
        <description>GPIO wakeup configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable the GPIO wakeup event filter.</description>
            <name>GPIO_WAKEUP_FILTER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: external wakeup 0 at low level     1: external wakeup 0 at high level</description>
            <name>EXT_WAKEUP0_LV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: external wakeup 1 at low level     1: external wakeup 1 at high level</description>
            <name>EXT_WAKEUP1_LV</name>
          </field>
        </fields>
        <name>EXT_WAKEUP_CONF</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x68</addressOffset>
        <description>Configures sleep / reject options</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x11</bitWidth>
            <description>Set this bit to enable reject-to-sleep.</description>
            <name>SLEEP_REJECT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable reject-to-light-sleep.</description>
            <name>LIGHT_SLP_REJECT_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable reject-to-deep-sleep.</description>
            <name>DEEP_SLP_REJECT_EN</name>
          </field>
        </fields>
        <name>SLP_REJECT_CONF</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x6C</addressOffset>
        <description>CPU sel option</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>CPU sel option</description>
            <name>CPUSEL_CONF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x2</bitWidth>
            <name>CPUPERIOD_SEL</name>
          </field>
        </fields>
        <name>CPU_PERIOD_CONF</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x70</addressOffset>
        <description>configure sdio active register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>configure sdio act dnum</description>
            <name>SDIO_ACT_DNUM</name>
          </field>
        </fields>
        <name>SDIO_ACT_CONF</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x74</addressOffset>
        <description>RTC clock configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Synchronizes the reg_ck8m_div_sel. Not that you have to invalidate the bus before switching clock, and validate the new clock.</description>
            <name>CK8M_DIV_SEL_VLD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Set the CK8M_D256_OUT divider. 00: divided by 128   01: divided by 256   10: divided by 512  11: divided by 1024.</description>
            <name>CK8M_DIV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to disable CK8M and CK8M_D256_OUT.</description>
            <name>ENB_CK8M</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Selects the CK8M_D256_OUT. 1: CK8M 0: CK8M divided by 256.</description>
            <name>ENB_CK8M_DIV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable CK_XTAL_32K clock for the digital core.</description>
            <name>DIG_XTAL32K_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable CK8M_D256_OUT clock for the digital core.</description>
            <name>DIG_CLK8M_D256_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable 8 MHz clock for the digital core.</description>
            <name>DIG_CLK8M_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Stores the 8 MHz divider, which is reg_ck8m_div_sel + 1</description>
            <name>CK8M_DIV_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to force no gating to cystal during sleep</description>
            <name>XTAL_FORCE_NOGATING</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to disable force gating to 8 MHz crystal during sleep.</description>
            <name>CK8M_FORCE_NOGATING</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>CK8M_DFREQ</description>
            <name>CK8M_DFREQ</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to FPD the 8 MHz clock.</description>
            <name>CK8M_FORCE_PD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to FPU the 8 MHz clock.</description>
            <name>CK8M_FORCE_PU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to select the RTC fast clock. 0: XTAL div 4, 1: CK8M.</description>
            <name>FAST_CLK_RTC_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Set this bit to select the RTC slow clock. 0: 90K rtc_clk  1: 32k XTAL  2: 8md256</description>
            <name>ANA_CLK_RTC_SEL</name>
          </field>
        </fields>
        <name>CLK_CONF</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x1583218</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x78</addressOffset>
        <description>RTC slow clock configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Synchronizes the reg\_rtc\_ana\_clk\_div bus. Note that you have to invalidate the bus before switching clock, and validate the new clock.</description>
            <name>ANA_CLK_DIV_VLD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>Set the rtc_clk divider.</description>
            <name>ANA_CLK_DIV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <name>SLOW_CLK_NEXT_EDGE</name>
          </field>
        </fields>
        <name>SLOW_CLK_CONF</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x400000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x7C</addressOffset>
        <description>configure vddsdio register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>timer count to apply reg_sdio_dcap after sdio power on</description>
            <name>SDIO_TIMER_TARGET</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Tieh = 1 mode drive ability. Initially set to 0 to limit charge current  set to 3 after several us.</description>
            <name>SDIO_DTHDRV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>ability to prevent LDO from overshoot</description>
            <name>SDIO_DCAP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>add resistor from ldo output to ground. 0: no res  1: 6k  2: 4k   3: 2k</description>
            <name>SDIO_INITI</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0 to set init[1:0]=0</description>
            <name>SDIO_EN_INITI</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>tune current limit threshold when tieh = 0. About 800mA/(8+d)</description>
            <name>SDIO_DCURLIM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>select current limit mode</description>
            <name>SDIO_MODECURLIM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>enable current limit</description>
            <name>SDIO_ENCURLIM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>power down SDIO_REG in sleep. Only active when reg_sdio_force = 0</description>
            <name>SDIO_REG_PD_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: use SW option to control SDIO_REG   0: use state machine</description>
            <name>SDIO_FORCE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SW option for SDIO_TIEH. Only active when reg_sdio_force = 1</description>
            <name>SDIO_TIEH</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>read only register for REG1P8_READY</description>
            <name>REG1P8_READY</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>SW option for DREFL_SDIO. Only active when reg_sdio_force = 1</description>
            <name>DREFL_SDIO</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>SW option for DREFM_SDIO. Only active when reg_sdio_force = 1</description>
            <name>DREFM_SDIO</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>SW option for DREFH_SDIO. Only active when reg_sdio_force = 1</description>
            <name>DREFH_SDIO</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SW option for XPD_VOOSDIO. Only active when reg_sdio_force = 1</description>
            <name>XPD_SDIO</name>
          </field>
        </fields>
        <name>SDIO_CONF</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x2B0BE0A</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x80</addressOffset>
        <description>configure power register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>open bias buf when system in active</description>
            <name>BIAS_BUF_IDLE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>open bias buf when rtc in wakeup</description>
            <name>BIAS_BUF_WAKE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>open bias buf when rtc in deep sleep</description>
            <name>BIAS_BUF_DEEP_SLP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>open bias buf when rtc in monitor state</description>
            <name>BIAS_BUF_MONITOR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>xpd cur when rtc in sleep_state</description>
            <name>PD_CUR_DEEP_SLP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>xpd cur when rtc in monitor state</description>
            <name>PD_CUR_MONITOR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>bias_sleep when rtc in sleep_state</description>
            <name>BIAS_SLEEP_DEEP_SLP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>bias_sleep when rtc in monitor state</description>
            <name>BIAS_SLEEP_MONITOR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>DBG_ATTEN when rtc in sleep state</description>
            <name>DBG_ATTEN_DEEP_SLP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>DBG_ATTEN when rtc in monitor state</description>
            <name>DBG_ATTEN_MONITOR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>ENB_SCK_XTAL</description>
            <name>ENB_SCK_XTAL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>INC_HEARTBEAT_REFRESH</description>
            <name>INC_HEARTBEAT_REFRESH</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>DEC_HEARTBEAT_PERIOD</description>
            <name>DEC_HEARTBEAT_PERIOD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>INC_HEARTBEAT_PERIOD</description>
            <name>INC_HEARTBEAT_PERIOD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>DEC_HEARTBEAT_WIDTH</description>
            <name>DEC_HEARTBEAT_WIDTH</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <name>RST_BIAS_I2C</name>
          </field>
        </fields>
        <name>BIAS_CONF</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10800</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x84</addressOffset>
        <description>RTC/DIG regulator configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>DIG_REG_DBIAS during sleep</description>
            <name>DIG_DBIAS_SLP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>DIG_REG_DBIAS during wakeup</description>
            <name>DIG_DBIAS_WAK</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>SCK_DCAP</description>
            <name>SCK_DCAP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>RTC_DBIAS during sleep</description>
            <name>DBIAS_SLP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>RTC_DBIAS during wakeup</description>
            <name>DBIAS_WAK</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RTC_DBOOST force power down</description>
            <name>DBOOST_FORCE_PD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RTC_DBOOST force power up</description>
            <name>DBOOST_FORCE_PU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to FPD the RTC_REG, which means decreasing its voltage to 0.8 V or lower.</description>
            <name>REGULATOR_FORCE_PD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to FPU the RTC_REG.</description>
            <name>REGULATOR_FORCE_PU</name>
          </field>
        </fields>
        <name>BIAS</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xA9002400</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x88</addressOffset>
        <description>RTC power configuraiton register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to disable the force isolatation to the RTC fast memory.</description>
            <name>FASTMEM_FORCE_NOISO</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to force isolate the RTC fast memory.</description>
            <name>FASTMEM_FORCE_ISO</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to disable the force isolatation to the RTC slow memory.</description>
            <name>SLOWMEM_FORCE_NOISO</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to force isolate the RTC slow memory.</description>
            <name>SLOWMEM_FORCE_ISO</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to force isolate the RTC peripherals.</description>
            <name>FORCE_ISO</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to disable the force isolatation to the RTC peripherals.</description>
            <name>FORCE_NOISO</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set 1 to FPD the RTC fast memory when the CPU is powered down</description>
            <name>FASTMEM_FOLW_CPU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to force not retain the RTC fast memory.</description>
            <name>FASTMEM_FORCE_LPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to force retain the RTC fast memory.</description>
            <name>FASTMEM_FORCE_LPU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set 1 to FPD the RTC slow memory when the CPU is powered down</description>
            <name>SLOWMEM_FOLW_CPU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to force not retain the RTC slow memory.</description>
            <name>SLOWMEM_FORCE_LPD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to force retain the RTC slow memory.</description>
            <name>SLOWMEM_FORCE_LPU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to FPD the RTC fast memory.</description>
            <name>FASTMEM_FORCE_PD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to FPU the RTC fast memory.</description>
            <name>FASTMEM_FORCE_PU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable PD for the RTC fast memory in sleep.</description>
            <name>FASTMEM_PD_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to FPD the RTC slow memory.</description>
            <name>SLOWMEM_FORCE_PD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to FPU the RTC slow memory.</description>
            <name>SLOWMEM_FORCE_PU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable PD for the RTC slow memory in sleep.</description>
            <name>SLOWMEM_PD_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to FPD the RTC peripherals.</description>
            <name>FORCE_PD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to FPU the RTC peripherals.</description>
            <name>FORCE_PU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable PD for the RTC peripherals in sleep.</description>
            <name>PD_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit the force hold the RTC GPIOs.</description>
            <name>PAD_FORCE_HOLD</name>
          </field>
        </fields>
        <name>PWC</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x12925</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8C</addressOffset>
        <description>Digital system power configuraiton register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to FPD the memories in the digital system in sleep.</description>
            <name>LSLP_MEM_FORCE_PD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to FPU the memories in the digital system.</description>
            <name>LSLP_MEM_FORCE_PU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>ROM force power down</description>
            <name>ROM0_FORCE_PD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>ROM force power up</description>
            <name>ROM0_FORCE_PU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>internal SRAM 0 force power down</description>
            <name>INTER_RAM0_FORCE_PD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>internal SRAM 0 force power up</description>
            <name>INTER_RAM0_FORCE_PU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>internal SRAM 1 force power down</description>
            <name>INTER_RAM1_FORCE_PD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>internal SRAM 1 force power up</description>
            <name>INTER_RAM1_FORCE_PU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>internal SRAM 2 force power down</description>
            <name>INTER_RAM2_FORCE_PD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>internal SRAM 2 force power up</description>
            <name>INTER_RAM2_FORCE_PU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>internal SRAM 3 force power down</description>
            <name>INTER_RAM3_FORCE_PD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>internal SRAM 3 force power up</description>
            <name>INTER_RAM3_FORCE_PU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>internal SRAM 4 force power down</description>
            <name>INTER_RAM4_FORCE_PD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>internal SRAM 4 force power up</description>
            <name>INTER_RAM4_FORCE_PU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to FPD the Wi-Fi circuit.</description>
            <name>WIFI_FORCE_PD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to FPU the Wi-Fi circuit.</description>
            <name>WIFI_FORCE_PU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to FPD the digital system.</description>
            <name>DG_WRAP_FORCE_PD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to FPD the DC-DC convertor in the digital system.</description>
            <name>DG_WRAP_FORCE_PU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to FPD the DC-DC convertor in the digital system.</description>
            <name>DG_DCDC_FORCE_PD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to FPU the DC-DC convertor in the digital system.</description>
            <name>DG_DCDC_FORCE_PU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable PD for the DC-DC convertor in the digital system.</description>
            <name>DG_DCDC_PD_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>enable power down ROM in sleep</description>
            <name>ROM0_PD_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>enable power down internal SRAM 0 in sleep</description>
            <name>INTER_RAM0_PD_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>enable power down internal SRAM 1 in sleep</description>
            <name>INTER_RAM1_PD_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>enable power down internal SRAM 2 in sleep</description>
            <name>INTER_RAM2_PD_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>enable power down internal SRAM 3 in sleep</description>
            <name>INTER_RAM3_PD_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>enable power down internal SRAM 4 in sleep</description>
            <name>INTER_RAM4_PD_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable PD for the Wi-Fi circuit in sleep.</description>
            <name>WIFI_PD_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable PD for the digital system in sleep.</description>
            <name>DG_WRAP_PD_EN</name>
          </field>
        </fields>
        <name>DIG_PWC</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x555550</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x90</addressOffset>
        <description>Digital system ISO configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <name>FORCE_OFF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <name>FORCE_ON</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Indicates the autu-hold status of the digital GPIOs.</description>
            <name>DG_PAD_AUTOHOLD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Se this bit to clear the auto-hold enabler for the digital GPIOs.</description>
            <name>CLR_DG_PAD_AUTOHOLD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Se this bit to allow the digital GPIOs to enter the autohold status.</description>
            <name>DG_PAD_AUTOHOLD_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to disable the force isolatation to the digital GPIOs.</description>
            <name>DG_PAD_FORCE_NOISO</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to force isolate the digital GPIOs.</description>
            <name>DG_PAD_FORCE_ISO</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit the force unhold the digital GPIOs.</description>
            <name>DG_PAD_FORCE_UNHOLD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit the force hold the digital GPIOs.</description>
            <name>DG_PAD_FORCE_HOLD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>ROM force ISO</description>
            <name>ROM0_FORCE_ISO</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>ROM force no ISO</description>
            <name>ROM0_FORCE_NOISO</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>internal SRAM 0 force ISO</description>
            <name>INTER_RAM0_FORCE_ISO</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>internal SRAM 0 force no ISO</description>
            <name>INTER_RAM0_FORCE_NOISO</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>internal SRAM 1 force ISO</description>
            <name>INTER_RAM1_FORCE_ISO</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>internal SRAM 1 force no ISO</description>
            <name>INTER_RAM1_FORCE_NOISO</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>internal SRAM 2 force ISO</description>
            <name>INTER_RAM2_FORCE_ISO</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>internal SRAM 2 force no ISO</description>
            <name>INTER_RAM2_FORCE_NOISO</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>internal SRAM 3 force ISO</description>
            <name>INTER_RAM3_FORCE_ISO</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>internal SRAM 3 force no ISO</description>
            <name>INTER_RAM3_FORCE_NOISO</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>internal SRAM 4 force ISO</description>
            <name>INTER_RAM4_FORCE_ISO</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>internal SRAM 4 force no ISO</description>
            <name>INTER_RAM4_FORCE_NOISO</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to force isolate the Wi-Fi circuits.</description>
            <name>WIFI_FORCE_ISO</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to disable the force isolatation to the Wi-Fi circuits.</description>
            <name>WIFI_FORCE_NOISO</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to force isolate the digital system.</description>
            <name>DG_WRAP_FORCE_ISO</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to disable the force isolatation to the digital system.</description>
            <name>DG_WRAP_FORCE_NOISO</name>
          </field>
        </fields>
        <name>DIG_ISO</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xAAAA5000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x94</addressOffset>
        <description>RTC watchdog configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>chip reset siginal pulse width</description>
            <name>WDT_CHIP_RESET_WIDTH</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>wdt reset whole chip enable</description>
            <name>WDT_CHIP_RESET_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to pause the watchdog in sleep.</description>
            <name>WDT_PAUSE_IN_SLP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>enable WDT reset APP CPU</description>
            <name>WDT_APPCPU_RESET_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to allow the watchdog to be able to reset CPU.</description>
            <name>WDT_PROCPU_RESET_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable watchdog when the chip boots from flash.</description>
            <name>WDT_FLASHBOOT_MOD_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Sets the length of the system reset counter.</description>
            <name>WDT_SYS_RESET_LENGTH</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Sets the length of the CPU reset counter.</description>
            <name>WDT_CPU_RESET_LENGTH</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>1: enable at the interrupt stage 2: enable at the CPU stage  3: enable at the system stage 4: enable at the system and RTC stage.</description>
            <name>WDT_STG3</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>1: enable at the interrupt stage 2: enable at the CPU stage  3: enable at the system stage 4: enable at the system and RTC stage.</description>
            <name>WDT_STG2</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>1: enable at the interrupt stage 2: enable at the CPU stage  3: enable at the system stage 4: enable at the system and RTC stage.</description>
            <name>WDT_STG1</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>1: enable at the interrupt stage 2: enable at the CPU stage  3: enable at the system stage 4: enable at the system and RTC stage.</description>
            <name>WDT_STG0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable the RTC watchdog.</description>
            <name>WDT_EN</name>
          </field>
        </fields>
        <name>WDTCONFIG0</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x13214</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x98</addressOffset>
        <description>Configures the hold time of RTC watchdog at level 1</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Configures the hold time of RTC watchdog at level 1</description>
            <name>WDT_STG0_HOLD</name>
          </field>
        </fields>
        <name>WDTCONFIG1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x30D40</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9C</addressOffset>
        <description>Configures the hold time of RTC watchdog at level 2</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Configures the hold time of RTC watchdog at level 2</description>
            <name>WDT_STG1_HOLD</name>
          </field>
        </fields>
        <name>WDTCONFIG2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x13880</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA0</addressOffset>
        <description>Configures the hold time of RTC watchdog at level 3</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Configures the hold time of RTC watchdog at level 3</description>
            <name>WDT_STG2_HOLD</name>
          </field>
        </fields>
        <name>WDTCONFIG3</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xFFF</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA4</addressOffset>
        <description>Configures the hold time of RTC watchdog at level 4</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Configures the hold time of RTC watchdog at level 4</description>
            <name>WDT_STG3_HOLD</name>
          </field>
        </fields>
        <name>WDTCONFIG4</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xFFF</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA8</addressOffset>
        <description>RTC watchdog SW feed configuration register</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set 1 to feed the RTC watchdog</description>
            <name>WDT_FEED</name>
          </field>
        </fields>
        <name>WDTFEED</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAC</addressOffset>
        <description>RTC watchdog write protection configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Sets the write protection key of the watchdog.</description>
            <name>WDT_WKEY</name>
          </field>
        </fields>
        <name>WDTWPROTECT</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x50D83AA1</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB0</addressOffset>
        <description>Super watchdog configuration register</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Indicates the super watchdog reset flag.</description>
            <name>SWD_RESET_FLAG</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Reciving this interrupt leads to feeding the super watchdog via SW.</description>
            <name>SWD_FEED_INT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>Adjusts the signal width sent to the super watchdog.</description>
            <name>SWD_SIGNAL_WIDTH</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set to reset the supwer watchdog reset flag.</description>
            <name>SWD_RST_FLAG_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set to feed the super watchdog via SW.</description>
            <name>SWD_FEED</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to disable super watchdong.</description>
            <name>SWD_DISABLE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable automatic watchdog feeding upon interrupts.</description>
            <name>SWD_AUTO_FEED_EN</name>
          </field>
        </fields>
        <name>SWD_CONF</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x4B00000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB4</addressOffset>
        <description>Super watchdog write protection configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Sets the write protection key of the super watchdog.</description>
            <name>SWD_WKEY</name>
          </field>
        </fields>
        <name>SWD_WPROTECT</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x8F1D312A</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB8</addressOffset>
        <description>CPU stall configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>{reg_sw_stall_appcpu_c1[5:0]  reg_sw_stall_appcpu_c0[1:0]} == 0x86 will stall APP CPU</description>
            <name>SW_STALL_APPCPU_C1</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Set this bit to allow the SW to be able to send the CPU into stalling.</description>
            <name>SW_STALL_PROCPU_C1</name>
          </field>
        </fields>
        <name>SW_CPU_STALL</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBC</addressOffset>
        <description>Reservation register 4</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Reservation register 4</description>
            <name>SCRATCH4</name>
          </field>
        </fields>
        <name>STORE4</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xC0</addressOffset>
        <description>Reservation register 5</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Reservation register 5</description>
            <name>SCRATCH5</name>
          </field>
        </fields>
        <name>STORE5</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xC4</addressOffset>
        <description>Reservation register 6</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Reservation register 6</description>
            <name>SCRATCH6</name>
          </field>
        </fields>
        <name>STORE6</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xC8</addressOffset>
        <description>Reservation register 7</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Reservation register 7</description>
            <name>SCRATCH7</name>
          </field>
        </fields>
        <name>STORE7</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xCC</addressOffset>
        <description>RTC main state machine status register</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>rom0 power down</description>
            <name>XPD_ROM0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>External DCDC power down</description>
            <name>XPD_DIG_DCDC</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>rtc peripheral iso</description>
            <name>PERI_ISO</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>rtc peripheral power down</description>
            <name>XPD_RTC_PERI</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>wifi iso</description>
            <name>WIFI_ISO</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>wifi wrap power down</description>
            <name>XPD_WIFI</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>digital wrap iso</description>
            <name>DIG_ISO</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>digital wrap power down</description>
            <name>XPD_DIG</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>touch should start to work</description>
            <name>TOUCH_STATE_START</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>touch is about to working. Switch rtc main state</description>
            <name>TOUCH_STATE_SWITCH</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>touch is in sleep state</description>
            <name>TOUCH_STATE_SLP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>touch is done</description>
            <name>TOUCH_STATE_DONE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>ulp/cocpu should start to work</description>
            <name>COCPU_STATE_START</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>ulp/cocpu is about to working. Switch rtc main state</description>
            <name>COCPU_STATE_SWITCH</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>ulp/cocpu is in sleep state</description>
            <name>COCPU_STATE_SLP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>ulp/cocpu is done</description>
            <name>COCPU_STATE_DONE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>no use any more</description>
            <name>MAIN_STATE_XTAL_ISO</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>rtc main state machine is in states that pll should be running</description>
            <name>MAIN_STATE_PLL_ON</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Indicates the RTC is ready to be triggered by any wakeup source.</description>
            <name>RDY_FOR_WAKEUP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>rtc main state machine has been waited for some cycles</description>
            <name>MAIN_STATE_WAIT_END</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>rtc main state machine is in the states of wakeup process</description>
            <name>IN_WAKEUP_STATE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>rtc main state machine is in the states of low power</description>
            <name>IN_LOW_POWER_STATE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>rtc main state machine is in wait 8m state</description>
            <name>MAIN_STATE_IN_WAIT_8M</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>rtc main state machine is in wait pll state</description>
            <name>MAIN_STATE_IN_WAIT_PLL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>rtc main state machine is in wait xtal state</description>
            <name>MAIN_STATE_IN_WAIT_XTL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>rtc main state machine is in sleep state</description>
            <name>MAIN_STATE_IN_SLP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>rtc main state machine is in idle state</description>
            <name>MAIN_STATE_IN_IDLE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>rtc main state machine status</description>
            <name>MAIN_STATE</name>
          </field>
        </fields>
        <name>LOW_POWER_ST</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xD0</addressOffset>
        <description>debug register</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <name>LOW_POWER_DIAG1</name>
          </field>
        </fields>
        <name>DIAG0</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xD4</addressOffset>
        <description>Configures the hold options for RTC GPIOs</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Sets the touch GPIO 0 to hold.</description>
            <name>TOUCH_PAD0_HOLD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Sets the touch GPIO 1 to hold.</description>
            <name>TOUCH_PAD1_HOLD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Sets the touch GPIO 2 to hold.</description>
            <name>TOUCH_PAD2_HOLD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Sets the touch GPIO 3 to hold.</description>
            <name>TOUCH_PAD3_HOLD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Sets the touch GPIO 4 to hold.</description>
            <name>TOUCH_PAD4_HOLD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Sets the touch GPIO 5 to hold.</description>
            <name>TOUCH_PAD5_HOLD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Sets the touch GPIO 6 to hold.</description>
            <name>TOUCH_PAD6_HOLD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Sets the touch GPIO 7 to hold.</description>
            <name>TOUCH_PAD7_HOLD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Sets the touch GPIO 8 to hold.</description>
            <name>TOUCH_PAD8_HOLD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Sets the touch GPIO 9 to hold.</description>
            <name>TOUCH_PAD9_HOLD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Sets the touch GPIO 10 to hold.</description>
            <name>TOUCH_PAD10_HOLD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Sets the touch GPIO 11 to hold.</description>
            <name>TOUCH_PAD11_HOLD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Sets the touch GPIO 12 to hold.</description>
            <name>TOUCH_PAD12_HOLD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Sets the touch GPIO 13 to hold.</description>
            <name>TOUCH_PAD13_HOLD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Sets the touch GPIO 14 to hold.</description>
            <name>TOUCH_PAD14_HOLD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Sets the x32p to hold.</description>
            <name>X32P_HOLD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Sets the x32n to hold.</description>
            <name>X32N_HOLD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Sets the pdac1 to hold.</description>
            <name>PDAC1_HOLD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Sets the pdac2 to hold.</description>
            <name>PDAC2_HOLD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Sets the RTG GPIO 19 to hold.</description>
            <name>PAD19_HOLD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Sets the RTG GPIO 20 to hold.</description>
            <name>PAD20_HOLD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Sets the RTG GPIO 21 to hold.</description>
            <name>PAD21_HOLD</name>
          </field>
        </fields>
        <name>PAD_HOLD</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xD8</addressOffset>
        <description>Configures the hold option for digital GPIOs</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Set GPIO 21 to GPIO 45 to hold. (See bitmap to locate any GPIO).</description>
            <name>DIG_PAD_HOLD</name>
          </field>
        </fields>
        <name>DIG_PAD_HOLD</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xDC</addressOffset>
        <description>EXT1 wakeup configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x16</bitWidth>
            <description>Selects a RTC GPIO to be the EXT1 wakeup source.</description>
            <name>SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Clears the EXT1 wakeup status.</description>
            <name>STATUS_CLR</name>
          </field>
        </fields>
        <name>EXT_WAKEUP1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xE0</addressOffset>
        <description>EXT1 wakeup source register</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x16</bitWidth>
            <description>Indicates the EXT1 wakeup status.</description>
            <name>EXT_WAKEUP1_STATUS</name>
          </field>
        </fields>
        <name>EXT_WAKEUP1_STATUS</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xE4</addressOffset>
        <description>Brownout configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>enable brown_out2 to start chip reset</description>
            <name>BROWN_OUT2_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>Configures the waiting cycle before sending an interrupt.</description>
            <name>INT_WAIT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable PD the flash when a brown-out happens.</description>
            <name>CLOSE_FLASH_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable PD the RF circuits when a brown-out happens.</description>
            <name>PD_RF_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>Configures the waiting cycle before the reset after a brown-out.</description>
            <name>RST_WAIT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enables to reset brown-out.</description>
            <name>RST_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Selects the reset type when a brown-out happens. 1: chip reset</description>
            <name>RST_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Clears the brown-out counter.</description>
            <name>CNT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable brown-out detection.</description>
            <name>ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Indicates the status of the brown-out signal.</description>
            <name>DET</name>
          </field>
        </fields>
        <name>BROWN_OUT</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x3FF2FF1</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xE8</addressOffset>
        <description>Stores the lower 32 bits of RTC timer 1</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>RTC timer low 32 bits</description>
            <name>TIMER_VALUE1_LOW</name>
          </field>
        </fields>
        <name>TIME_LOW1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xEC</addressOffset>
        <description>Stores the higher 16 bits of RTC timer 1</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>RTC timer high 16 bits</description>
            <name>TIMER_VALUE1_HIGH</name>
          </field>
        </fields>
        <name>TIME_HIGH1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xF0</addressOffset>
        <description>Configures the divider factor for the backup clock of 32 kHz crystal oscillator</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Configures the divider factor for the 32 kHz crystal oscillator.</description>
            <name>XTAL32K_CLK_FACTOR</name>
          </field>
        </fields>
        <name>XTAL32K_CLK_FACTOR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xF4</addressOffset>
        <description>32 kHz crystal oscillator configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>cycles to wait to return noral xtal 32k</description>
            <name>XTAL32K_RETURN_WAIT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>Defines the maximum waiting cycle before restarting the 32 kHz crystal oscillator.</description>
            <name>XTAL32K_RESTART_WAIT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>Defines the maximum waiting period for clock detection. If no clock is dected after this period, the 32 kHz crystal oscillator can be regarded as dead.</description>
            <name>XTAL32K_WDT_TIMEOUT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Defines the maximum allowed restarting period, within which the 32 kHz crystal oscillator can be regarded as stable.</description>
            <name>XTAL32K_STABLE_THRES</name>
          </field>
        </fields>
        <name>XTAL32K_CONF</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xFF00000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xF8</addressOffset>
        <description>Configure coprocessor timer</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xB</bitWidth>
            <description>ULP coprocessor PC initial address</description>
            <name>ULP_CP_PC_INIT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enable the option of ULP coprocessor woken up by
            RTC GPIO</description>
            <name>ULP_CP_GPIO_WAKEUP_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Disable the option of ULP coprocessor woken up by
            RTC GPIO</description>
            <name>ULP_CP_GPIO_WAKEUP_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>ULP coprocessor timer enable bit. 0: Disable hardware
            Timer. 1: Enable hardware timer</description>
            <name>ULP_CP_SLP_TIMER_EN</name>
          </field>
        </fields>
        <name>ULP_CP_TIMER</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xFC</addressOffset>
        <description>ULP-FSM configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xB</bitWidth>
            <name>ULP_CP_MEM_ADDR_INIT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0xB</bitWidth>
            <name>ULP_CP_MEM_ADDR_SIZE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <name>ULP_CP_MEM_OFFSET_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>ULP-FSM clock force on</description>
            <name>ULP_CP_CLK_FO</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>ULP-FSM clock software reset</description>
            <name>ULP_CP_RESET</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Write 1 to start ULP-FSM by software</description>
            <name>ULP_CP_FORCE_START_TOP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Write 1 to start ULP-FSM</description>
            <name>ULP_CP_START_TOP</name>
          </field>
        </fields>
        <name>ULP_CP_CTRL</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x100200</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x100</addressOffset>
        <description>ULP-RISCV configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>ULP-RISCV clock force on</description>
            <name>COCPU_CLK_FO</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Time from ULP-RISCV startup to pull down reset</description>
            <name>COCPU_START_2_RESET_DIS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Time from ULP-RISCV startup to send out
            RISCV_START_INT interrupt</description>
            <name>COCPU_START_2_INTR_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Shut down ULP-RISCV</description>
            <name>COCPU_SHUT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>Time from shut down ULP-RISCV to disable clock</description>
            <name>COCPU_SHUT_2_CLK_DIS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This bit is used to reset ULP-RISCV</description>
            <name>COCPU_SHUT_RESET_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: select ULP-RISCV. 1: select ULP-FSM</description>
            <name>COCPU_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: select ULP-FSM DONE signal. 1: select ULP-RISCV DONE
            signal</description>
            <name>COCPU_DONE_FORCE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>DONE signal. Write 1 to this bit, ULP-RISCV will go to HALT and the
            timer starts counting</description>
            <name>COCPU_DONE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Trigger ULP-RISCV register interrupt</description>
            <name>COCPU_SW_INT_TRIGGER</name>
          </field>
        </fields>
        <name>COCPU_CTRL</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x8A0810</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x104</addressOffset>
        <description>Touch control register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>Set sleep cycles for touch timer.</description>
            <name>TOUCH_SLEEP_CYCLES</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>Configure measurement length (in 8 MHz), i.e., charge/discharge times.</description>
            <name>TOUCH_MEAS_NUM</name>
          </field>
        </fields>
        <name>TOUCH_CTRL1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10000100</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x108</addressOffset>
        <description>Touch control register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>TOUCH attenuation.</description>
            <name>TOUCH_DRANGE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>TOUCH reference voltage low. 0: 0.5 V 1: 0.6 V 2: 0.7 V 3: 0.8 V.</description>
            <name>TOUCH_DREFL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>TOUCH reference voltage high. 0: 2.4 V 1: 2.5 V 2: 2.6 V 3: 2.7 V.</description>
            <name>TOUCH_DREFH</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>TOUCH BIAS power switch.</description>
            <name>TOUCH_XPD_BIAS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Touch pad 0 reference capacitance.</description>
            <name>TOUCH_REFC</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Use bandgap bias. 1: Use self bias.</description>
            <name>TOUCH_DBIAS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Touch timer enable bit.</description>
            <name>TOUCH_SLP_TIMER_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: TOUCH_START and TOUCH_XPD are controlled by soft- ware. 1: TOUCH_START and TOUCH_XPD are controlled by the Touch FSM.</description>
            <name>TOUCH_START_FSM_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: Start the Touch FSM, only valid when RTC_CNTL_TOUCH_START_FORCE = 1.</description>
            <name>TOUCH_START_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: Start the Touch FSM by timer. 1: Start Touch FSM by software.</description>
            <name>TOUCH_START_FORCE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>The waiting cycles (in 8MHz) between TOUCH_START and TOUCH_XPD.</description>
            <name>TOUCH_XPD_WAIT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>When a touch pad is active, sleep cycle could be divided by this number.</description>
            <name>TOUCH_SLP_CYC_DIV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Force touch timer done.</description>
            <name>TOUCH_TIMER_FORCE_DONE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Reset TOUCH FSM via software.</description>
            <name>TOUCH_RESET</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Touch clock force on.</description>
            <name>TOUCH_CLK_FO</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Touch clock enable bit.</description>
            <name>TOUCH_CLKGATE_EN</name>
          </field>
        </fields>
        <name>TOUCH_CTRL2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x840CC</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x10C</addressOffset>
        <description>Configure touch scan settings</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Denoise resolution. 0: 12-bit; 1: 10-bit; 2: 8-bit; 3: 4-bit.</description>
            <name>TOUCH_DENOISE_RES</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Touch pad 0 will be used to denoise.</description>
            <name>TOUCH_DENOISE_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Inactive touch pads connect to 0: HighZ, 1: GND.</description>
            <name>TOUCH_INACTIVE_CONNECTION</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Touch pad 14 will be used as shield_pad.</description>
            <name>TOUCH_SHIELD_PAD_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0xF</bitWidth>
            <description>Pad enable map for touch scan mode.</description>
            <name>TOUCH_SCAN_PAD_MAP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Touch 14 buffer driver strength.</description>
            <name>TOUCH_BUFDRV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Select out one pad as guard_ring.</description>
            <name>TOUCH_OUT_RING</name>
          </field>
        </fields>
        <name>TOUCH_SCAN_CTRL</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xF0000102</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x110</addressOffset>
        <description>Configure the settings of touch sleep pad</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x16</bitWidth>
            <description>Set the threshold for touch sleep pad.</description>
            <name>TOUCH_SLP_TH</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enable the proximity mode of touch sleep pad.</description>
            <name>TOUCH_SLP_APPROACH_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Select sleep pad.</description>
            <name>TOUCH_SLP_PAD</name>
          </field>
        </fields>
        <name>TOUCH_SLP_THRES</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x78000000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x114</addressOffset>
        <description>Configure touch approach settings</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Clear touch sleep channel.</description>
            <name>TOUCH_SLP_CHANNEL_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>Set the total measurement times for the pads in
            proximity mode. Range: 0 – 255.</description>
            <name>MEAS_TIME</name>
          </field>
        </fields>
        <name>TOUCH_APPROACH</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x50000000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x118</addressOffset>
        <description>Configure touch filter settings</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>0: Raw data. 1: IIR1/2. 2: IIR1/4. 3: IIR1/8.</description>
            <name>TOUCH_SMOOTH_LVL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Touch jitter step. Range: 0 – 15.</description>
            <name>TOUCH_JITTER_STEP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Negative threshold counter limit.</description>
            <name>TOUCH_NEG_NOISE_LIMIT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Negative noise threshold.</description>
            <name>TOUCH_NEG_NOISE_THRES</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Active noise threshold.</description>
            <name>TOUCH_NOISE_THRES</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Touch hysteresis.</description>
            <name>TOUCH_HYSTERESIS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Debounce counter.</description>
            <name>TOUCH_DEBOUNCE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Set filter mode. 0: IIR 1/2; 1: IIR 1/4; 2: IIR 1/8; 3: IIR 1/16; 4: IIR 1/32; 5: IIR 1/64; 6: IIR 1/128; 7: Jitter.</description>
            <name>TOUCH_FILTER_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enable touch filter.</description>
            <name>TOUCH_FILTER_EN</name>
          </field>
        </fields>
        <name>TOUCH_FILTER_CTRL</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x96AA8800</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x11C</addressOffset>
        <description>configure usb control register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <name>USB_VREFH</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x2</bitWidth>
            <name>USB_VREFL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <name>USB_VREF_OVERRIDE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <name>USB_PAD_PULL_OVERRIDE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <name>USB_DP_PULLUP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <name>USB_DP_PULLDOWN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <name>USB_DM_PULLUP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <name>USB_DM_PULLDOWN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <name>USB_PULLUP_VALUE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <name>USB_PAD_ENABLE_OVERRIDE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <name>USB_PAD_ENABLE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <name>USB_TXM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <name>USB_TXP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <name>USB_TX_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <name>USB_TX_EN_OVERRIDE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <name>USB_RESET_DISABLE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <name>IO_MUX_RESET_DISABLE</name>
          </field>
        </fields>
        <name>USB_CONF</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x120</addressOffset>
        <description>Configure touch timeout settings</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x16</bitWidth>
            <description>Set touch timeout threshold.</description>
            <name>TOUCH_TIMEOUT_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enable touch timeout.</description>
            <name>TOUCH_TIMEOUT_EN</name>
          </field>
        </fields>
        <name>TOUCH_TIMEOUT_CTRL</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x7FFFFF</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x124</addressOffset>
        <description>Stores the reject-to-sleep cause.</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x11</bitWidth>
            <description>Stores the reject-to-sleep cause.</description>
            <name>REJECT_CAUSE</name>
          </field>
        </fields>
        <name>SLP_REJECT_CAUSE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x128</addressOffset>
        <description>RTC option register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to force the chip to boot from the download mode.</description>
            <name>FORCE_DOWNLOAD_BOOT</name>
          </field>
        </fields>
        <name>OPTIONS1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x12C</addressOffset>
        <description>Stores the sleep-to-wakeup cause.</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x11</bitWidth>
            <description>Stores the wakeup cause.</description>
            <name>WAKEUP_CAUSE</name>
          </field>
        </fields>
        <name>SLP_WAKEUP_CAUSE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x130</addressOffset>
        <description>Configure sleep cycle of the timer</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x18</bitWidth>
            <description>Set sleep cycles for ULP coprocessor timer</description>
            <name>ULP_CP_TIMER_SLP_CYCLE</name>
          </field>
        </fields>
        <name>ULP_CP_TIMER_1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xC800</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x138</addressOffset>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1C</bitWidth>
            <name>CNTL_DATE</name>
          </field>
        </fields>
        <name>DATE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x1906191</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <resetMask>0xFFFFFFFF</resetMask>
    <resetValue>0x0</resetValue>
  </peripheral>
</peripherals>
<peripherals>
  <peripheral>
    <addressBlock>
      <offset>0x0</offset>
      <size>0x7C</size>
      <usage>registers</usage>
    </addressBlock>
    <baseAddress>0x3F408C00</baseAddress>
    <description>Peripheral RTC_I2C</description>
    <groupName>RTC_I2C</groupName>
    <interrupts></interrupts>
    <name>RTC_I2C</name>
    <registers>
      <register>
        <addressOffset>0x0</addressOffset>
        <description>Configure the low level width of SCL</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x14</bitWidth>
            <description>This register is used to configure how many clock cycles SCL
            remains low.</description>
            <name>PERIOD</name>
          </field>
        </fields>
        <name>SCL_LOW</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x100</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4</addressOffset>
        <description>Transmission setting</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SDA output mode. 0: open drain. 1: push pull.</description>
            <name>SDA_FORCE_OUT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SCL output mode. 0: open drain. 1: push pull.</description>
            <name>SCL_FORCE_OUT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to configure RTC I²C as a master.</description>
            <name>MS_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to 1, RTC I2C starts sending data.</description>
            <name>TRANS_START</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This bit is used to control the sending mode. 0: send data from the most
            significant bit. 1: send data from the least significant bit.</description>
            <name>TX_LSB_FIRST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This bit is used to control the storage mode for received data. 0: receive
            data from the most significant bit. 1: receive data from the least significant bit.</description>
            <name>RX_LSB_FIRST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RTC I²C controller clock gate.</description>
            <name>CLK_GATE_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RTC I²C software reset.</description>
            <name>RESET</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>rtc i2c reg clk gating</description>
            <name>CLK_EN</name>
          </field>
        </fields>
        <name>CTRL</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8</addressOffset>
        <description>RTC I2C status</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The received ACK value. 0: ACK. 1: NACK.</description>
            <name>ACK_REC</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: master writes to slave. 1: master reads from slave.</description>
            <name>SLAVE_RW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When the RTC I2C loses control of SCL line, the register changes to 1.</description>
            <name>ARB_LOST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: RTC I2C bus is in idle state. 1: RTC I2C bus is busy transferring data.</description>
            <name>BUS_BUSY</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When the address sent by the master matches the address of the
            slave, then this bit will be set.</description>
            <name>SLAVE_ADDRESSED</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This field changes to 1 when one byte is transferred.</description>
            <name>BYTE_TRANS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Indicate which operation is working.</description>
            <name>OP_CNT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>shifter content</description>
            <name>SHIFT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>i2c last main status</description>
            <name>SCL_MAIN_STATE_LAST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>scl last status</description>
            <name>SCL_STATE_LAST</name>
          </field>
        </fields>
        <name>STATUS</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xC</addressOffset>
        <description>Configure RTC I2C timeout</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x14</bitWidth>
            <description>Timeout threshold</description>
            <name>TIME_OUT</name>
          </field>
        </fields>
        <name>TO</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x10</addressOffset>
        <description>Configure slave address</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xF</bitWidth>
            <description>slave address</description>
            <name>SLAVE_ADDR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This field is used to enable the slave 10-bit addressing mode.</description>
            <name>ADDR_10BIT_EN</name>
          </field>
        </fields>
        <name>SLAVE_ADDR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x14</addressOffset>
        <description>Configure the high level width of SCL</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x14</bitWidth>
            <description>This register is used to configure how many cycles SCL remains high.</description>
            <name>PERIOD</name>
          </field>
        </fields>
        <name>SCL_HIGH</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x100</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x18</addressOffset>
        <description>Configure the SDA hold time after a negative
        SCL edge</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x14</bitWidth>
            <description>The number of clock cycles between the SDA switch and the falling
            edge of SCL.</description>
            <name>NUM</name>
          </field>
        </fields>
        <name>SDA_DUTY</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1C</addressOffset>
        <description>Configure the delay between the SDA and SCL
        negative edge for a start condition</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x14</bitWidth>
            <description>Number of clock cycles to wait after generating a start condition.</description>
            <name>SCL_START_PERIOD</name>
          </field>
        </fields>
        <name>SCL_START_PERIOD</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x8</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x20</addressOffset>
        <description>Configure the delay between SDA and SCL positive edge for a stop condition</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x14</bitWidth>
            <description>Number of clock cycles to wait before generating a stop condition.</description>
            <name>SCL_STOP_PERIOD</name>
          </field>
        </fields>
        <name>SCL_STOP_PERIOD</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x8</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x24</addressOffset>
        <description>Clear RTC I2C interrupt</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RTC_I2C_SLAVE_TRAN_COMP_INT interrupt clear bit</description>
            <name>SLAVE_TRAN_COMP_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RTC_I2C_ARBITRATION_LOST_INT interrupt clear bit</description>
            <name>ARBITRATION_LOST_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RTC_I2C_MASTER_TRAN_COMP_INT interrupt
            clear bit</description>
            <name>MASTER_TRAN_COMP_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RTC_I2C_TRANS_COMPLETE_INT interrupt clear bit</description>
            <name>TRANS_COMPLETE_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RTC_I2C_TIME_OUT_INT interrupt clear bit</description>
            <name>TIME_OUT_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RTC_I2C_ACK_ERR_INT interrupt clear bit</description>
            <name>ACK_ERR_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RTC_I2C_RX_DATA_INT interrupt clear bit</description>
            <name>RX_DATA_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RTC_I2C_TX_DATA_INT interrupt clear bit</description>
            <name>TX_DATA_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RTC_I2C_DETECT_START_INT interrupt clear bit</description>
            <name>DETECT_START_INT_CLR</name>
          </field>
        </fields>
        <name>INT_CLR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x28</addressOffset>
        <description>RTC I2C raw interrupt</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RTC_I2C_SLAVE_TRAN_COMP_INT interrupt raw bit</description>
            <name>SLAVE_TRAN_COMP_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RTC_I2C_ARBITRATION_LOST_INT interrupt raw bit</description>
            <name>ARBITRATION_LOST_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RTC_I2C_MASTER_TRAN_COMP_INT interrupt raw bit</description>
            <name>MASTER_TRAN_COMP_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RTC_I2C_TRANS_COMPLETE_INT interrupt raw bit</description>
            <name>TRANS_COMPLETE_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RTC_I2C_TIME_OUT_INT interrupt raw bit</description>
            <name>TIME_OUT_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RTC_I2C_ACK_ERR_INT interrupt raw bit</description>
            <name>ACK_ERR_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RTC_I2C_RX_DATA_INT interrupt raw bit</description>
            <name>RX_DATA_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RTC_I2C_TX_DATA_INT interrupt raw bit</description>
            <name>TX_DATA_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RTC_I2C_DETECT_START_INT interrupt raw bit</description>
            <name>DETECT_START_INT_RAW</name>
          </field>
        </fields>
        <name>INT_RAW</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2C</addressOffset>
        <description>RTC I2C interrupt status</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RTC_I2C_SLAVE_TRAN_COMP_INT interrupt status bit</description>
            <name>SLAVE_TRAN_COMP_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RTC_I2C_ARBITRATION_LOST_INT interrupt status bit</description>
            <name>ARBITRATION_LOST_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RTC_I2C_MASTER_TRAN_COMP_INT interrupt status bit</description>
            <name>MASTER_TRAN_COMP_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RTC_I2C_TRANS_COMPLETE_INT interrupt status bit</description>
            <name>TRANS_COMPLETE_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RTC_I2C_TIME_OUT_INT interrupt status bit</description>
            <name>TIME_OUT_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RTC_I2C_ACK_ERR_INT interrupt status bit</description>
            <name>ACK_ERR_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RTC_I2C_RX_DATA_INT interrupt status bit</description>
            <name>RX_DATA_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RTC_I2C_TX_DATA_INT interrupt status bit</description>
            <name>TX_DATA_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RTC_I2C_DETECT_START_INT interrupt status bit</description>
            <name>DETECT_START_INT_ST</name>
          </field>
        </fields>
        <name>INT_ST</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x30</addressOffset>
        <description>Enable RTC I2C interrupt</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RTC_I2C_SLAVE_TRAN_COMP_INT interrupt enable bit</description>
            <name>SLAVE_TRAN_COMP_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RTC_I2C_ARBITRATION_LOST_INT interrupt enable bit</description>
            <name>ARBITRATION_LOST_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RTC_I2C_MASTER_TRAN_COMP_INT interrupt enable bit</description>
            <name>MASTER_TRAN_COMP_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RTC_I2C_TRANS_COMPLETE_INT interrupt enable bit</description>
            <name>TRANS_COMPLETE_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RTC_I2C_TIME_OUT_INT interrupt enable bit</description>
            <name>TIME_OUT_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RTC_I2C_ACK_ERR_INT interrupt enable bit</description>
            <name>ACK_ERR_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RTC_I2C_RX_DATA_INT interrupt enable bit</description>
            <name>RX_DATA_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RTC_I2C_TX_DATA_INT interrupt enable bit</description>
            <name>TX_DATA_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RTC_I2C_DETECT_START_INT interrupt enable bit</description>
            <name>DETECT_START_INT_ENA</name>
          </field>
        </fields>
        <name>INT_ENA</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x34</addressOffset>
        <description>RTC I2C read data</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>Data received</description>
            <name>RDATA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>The data sent by slave</description>
            <name>SLAVE_TX_DATA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RTC I2C transmission is done.</description>
            <name>DONE</name>
          </field>
        </fields>
        <name>DATA</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x38</addressOffset>
        <description>RTC I2C Command 0</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xE</bitWidth>
            <description>Content of command 0. For more information, please refer to the register
            I2C_COMD0_REG in Chapter I²C Controller</description>
            <name>COMMAND0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When command 0 is done, this bit changes to 1.</description>
            <name>COMMAND0_DONE</name>
          </field>
        </fields>
        <name>CMD0</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x903</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3C</addressOffset>
        <description>RTC I2C Command 1</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xE</bitWidth>
            <description>Content of command 1. For more information, please refer to the register
            I2C_COMD1_REG in Chapter I²C Controller.</description>
            <name>COMMAND1</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When command 1 is done, this bit changes to 1.</description>
            <name>COMMAND1_DONE</name>
          </field>
        </fields>
        <name>CMD1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x1901</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x40</addressOffset>
        <description>RTC I2C Command 2</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xE</bitWidth>
            <description>Content of command 2. For more information, please refer to the register
            I2C_COMD2_REG in Chapter I²C Controller.</description>
            <name>COMMAND2</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When command 2 is done, this bit changes to 1.</description>
            <name>COMMAND2_DONE</name>
          </field>
        </fields>
        <name>CMD2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x902</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x44</addressOffset>
        <description>RTC I2C Command 3</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xE</bitWidth>
            <description>Content of command 3. For more information, please refer to the register
            I2C_COMD3_REG in Chapter I²C Controller.</description>
            <name>COMMAND3</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When command 3 is done, this bit changes to 1.</description>
            <name>COMMAND3_DONE</name>
          </field>
        </fields>
        <name>CMD3</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x101</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x48</addressOffset>
        <description>RTC I2C Command 4</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xE</bitWidth>
            <description>Content of command 4. For more information, please refer to the register
            I2C_COMD4_REG in Chapter I²C Controller.</description>
            <name>COMMAND4</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When command 4 is done, this bit changes to 1.</description>
            <name>COMMAND4_DONE</name>
          </field>
        </fields>
        <name>CMD4</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x901</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4C</addressOffset>
        <description>RTC I2C Command 5</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xE</bitWidth>
            <description>Content of command 5. For more information, please refer to the register
            I2C_COMD5_REG in Chapter I²C Controller.</description>
            <name>COMMAND5</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When command 5 is done, this bit changes to 1.</description>
            <name>COMMAND5_DONE</name>
          </field>
        </fields>
        <name>CMD5</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x1701</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x50</addressOffset>
        <description>RTC I2C Command 6</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xE</bitWidth>
            <description>Content of command 6. For more information, please refer to the register
            I2C_COMD6_REG in Chapter I²C Controller.</description>
            <name>COMMAND6</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When command 6 is done, this bit changes to 1.</description>
            <name>COMMAND6_DONE</name>
          </field>
        </fields>
        <name>CMD6</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x1901</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x54</addressOffset>
        <description>RTC I2C Command 7</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xE</bitWidth>
            <description>Content of command 7. For more information, please refer to the register
            I2C_COMD7_REG in Chapter I²C Controller.</description>
            <name>COMMAND7</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When command 7 is done, this bit changes to 1.</description>
            <name>COMMAND7_DONE</name>
          </field>
        </fields>
        <name>CMD7</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x904</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x58</addressOffset>
        <description>RTC I2C Command 8</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xE</bitWidth>
            <description>Content of command 8. For more information, please refer to the register
            I2C_COMD8_REG in Chapter I²C Controller.</description>
            <name>COMMAND8</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When command 8 is done, this bit changes to 1.</description>
            <name>COMMAND8_DONE</name>
          </field>
        </fields>
        <name>CMD8</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x1901</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5C</addressOffset>
        <description>RTC I2C Command 9</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xE</bitWidth>
            <description>Content of command 9. For more information, please refer to the register
            I2C_COMD9_REG in Chapter I²C Controller</description>
            <name>COMMAND9</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When command 9 is done, this bit changes to 1.</description>
            <name>COMMAND9_DONE</name>
          </field>
        </fields>
        <name>CMD9</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x903</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x60</addressOffset>
        <description>RTC I2C Command 10</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xE</bitWidth>
            <description>Content of command 10. For more information, please refer to the register
            I2C_COMD10_REG in Chapter I²C Controller.</description>
            <name>COMMAND10</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When command 10 is done, this bit changes to 1.</description>
            <name>COMMAND10_DONE</name>
          </field>
        </fields>
        <name>CMD10</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x101</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x64</addressOffset>
        <description>RTC I2C Command 11</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xE</bitWidth>
            <description>Content of command 11. For more information, please refer to the register
            I2C_COMD11_REG in Chapter I²C Controller.</description>
            <name>COMMAND11</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When command 11 is done, this bit changes to 1.</description>
            <name>COMMAND11_DONE</name>
          </field>
        </fields>
        <name>CMD11</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x901</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x68</addressOffset>
        <description>RTC I2C Command 12</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xE</bitWidth>
            <description>Content of command 12. For more information, please refer to the register
            I2C_COMD12_REG in Chapter I²C Controller.</description>
            <name>COMMAND12</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When command 12 is done, this bit changes to 1.</description>
            <name>COMMAND12_DONE</name>
          </field>
        </fields>
        <name>CMD12</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x1701</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x6C</addressOffset>
        <description>RTC I2C Command 13</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xE</bitWidth>
            <description>Content of command 13. For more information, please refer to the register
            I2C_COMD13_REG in Chapter I²C Controller.</description>
            <name>COMMAND13</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When command 13 is done, this bit changes to 1.</description>
            <name>COMMAND13_DONE</name>
          </field>
        </fields>
        <name>CMD13</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x1901</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x70</addressOffset>
        <description>RTC I2C Command 14</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xE</bitWidth>
            <description>Content of command 14. For more information, please refer to the register
            I2C_COMD14_REG in Chapter I²C Controller.</description>
            <name>COMMAND14</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When command 14 is done, this bit changes to 1.</description>
            <name>COMMAND14_DONE</name>
          </field>
        </fields>
        <name>CMD14</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x74</addressOffset>
        <description>RTC I2C Command 15</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xE</bitWidth>
            <description>Content of command 15. For more information, please refer to the register
            I2C_COMD15_REG in Chapter I²C Controller.</description>
            <name>COMMAND15</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When command 15 is done, this bit changes to 1.</description>
            <name>COMMAND15_DONE</name>
          </field>
        </fields>
        <name>CMD15</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xFC</addressOffset>
        <description>Version control register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1C</bitWidth>
            <description>Version control register</description>
            <name>DATE</name>
          </field>
        </fields>
        <name>DATE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x1905310</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <resetMask>0xFFFFFFFF</resetMask>
    <resetValue>0x0</resetValue>
  </peripheral>
</peripherals>
<peripherals>
  <peripheral>
    <addressBlock>
      <offset>0x0</offset>
      <size>0x110</size>
      <usage>registers</usage>
    </addressBlock>
    <baseAddress>0x3F408800</baseAddress>
    <description>Peripheral SENS</description>
    <groupName>SENS</groupName>
    <interrupts></interrupts>
    <name>SENS</name>
    <registers>
      <register>
        <addressOffset>0x0</addressOffset>
        <description>RTC ADC1 data and sampling control</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>Clock divider.</description>
            <name>SAR1_CLK_DIV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <name>SAR1_CLK_GATED</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x8</bitWidth>
            <name>SAR1_SAMPLE_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert SAR ADC1 data.</description>
            <name>SAR1_DATA_INV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enable SAR ADC1 to send out interrupt.</description>
            <name>SAR1_INT_EN</name>
          </field>
        </fields>
        <name>SAR_READER1_CTRL</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x20040002</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4</addressOffset>
        <description>saradc1 status for debug</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <name>SAR1_READER_STATUS</name>
          </field>
        </fields>
        <name>SAR_READER1_STATUS</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8</addressOffset>
        <description>Configure RTC ADC1 controller</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SAR ADC software reset.</description>
            <name>RTC_SARADC_RESET</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enable bit of SAR ADC clock gate.</description>
            <name>RTC_SARADC_CLKGATE_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x2</bitWidth>
            <name>FORCE_XPD_AMP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x2</bitWidth>
            <name>AMP_RST_FB_FORCE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x2</bitWidth>
            <name>AMP_SHORT_REF_FORCE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x2</bitWidth>
            <name>AMP_SHORT_REF_GND_FORCE</name>
          </field>
        </fields>
        <name>SAR_MEAS1_CTRL1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xC</addressOffset>
        <description>Control RTC ADC1 conversion and status</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>SAR ADC1 data</description>
            <name>MEAS1_DATA_SAR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Indicate SAR ADC1 conversion is done.</description>
            <name>MEAS1_DONE_SAR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SAR ADC1 controller (in RTC) starts conversion, active only when SENS_MEAS1_START_FORCE = 1.</description>
            <name>MEAS1_START_SAR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: SAR ADC1 controller (in RTC) is started by software. 0: SAR ADC1 controller is started by ULP coprocessor.</description>
            <name>MEAS1_START_FORCE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0xC</bitWidth>
            <description>SAR ADC1 pad enable bitmap, active only when SENS_SAR1_EN_PAD_FORCE = 1.</description>
            <name>SAR1_EN_PAD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: SAR ADC1 pad enable bitmap is controlled by software. 0: SAR ADC1 pad enable bitmap is controlled by ULP coprocessor.</description>
            <name>SAR1_EN_PAD_FORCE</name>
          </field>
        </fields>
        <name>SAR_MEAS1_CTRL2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x10</addressOffset>
        <description>Select the controller for SAR ADC1</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: SAR ADC1 controlled by DIG ADC1 CTRL</description>
            <name>SAR1_DIG_FORCE</name>
          </field>
        </fields>
        <name>SAR_MEAS1_MUX</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x14</addressOffset>
        <description>Configure SAR ADC1 attenuation</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>2-bit attenuation for each pad. [1:0] is used for channel 0, [3:2] is used for channel 1, etc.</description>
            <name>SAR1_ATTEN</name>
          </field>
        </fields>
        <name>SAR_ATTEN1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xFFFFFFFF</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x18</addressOffset>
        <description>AMP control</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <name>SAR_AMP_WAIT1</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x10</bitWidth>
            <name>SAR_AMP_WAIT2</name>
          </field>
        </fields>
        <name>SAR_AMP_CTRL1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xA000A</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1C</addressOffset>
        <description>AMP control</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <name>SAR1_DAC_XPD_FSM_IDLE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <name>XPD_SAR_AMP_FSM_IDLE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <name>AMP_RST_FB_FSM_IDLE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <name>AMP_SHORT_REF_FSM_IDLE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <name>AMP_SHORT_REF_GND_FSM_IDLE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <name>XPD_SAR_FSM_IDLE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <name>SAR_RSTB_FSM_IDLE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x10</bitWidth>
            <name>SAR_AMP_WAIT3</name>
          </field>
        </fields>
        <name>SAR_AMP_CTRL2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xA0000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x20</addressOffset>
        <description>AMP control register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Control of DAC. 4’b0010: disable DAC. 4’b0000: power up DAC by FSM. 4’b0011: power up DAC by software.</description>
            <name>SAR1_DAC_XPD_FSM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x4</bitWidth>
            <name>XPD_SAR_AMP_FSM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x4</bitWidth>
            <name>AMP_RST_FB_FSM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x4</bitWidth>
            <name>AMP_SHORT_REF_FSM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x4</bitWidth>
            <name>AMP_SHORT_REF_GND_FSM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x4</bitWidth>
            <name>XPD_SAR_FSM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x4</bitWidth>
            <name>SAR_RSTB_FSM</name>
          </field>
        </fields>
        <name>SAR_AMP_CTRL3</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x7338F3</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x24</addressOffset>
        <description>RTC ADC2 data and sampling control</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>clock divider</description>
            <name>SAR2_CLK_DIV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>wait arbit stable after sar_done</description>
            <name>SAR2_WAIT_ARB_CYCLE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <name>SAR2_CLK_GATED</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x8</bitWidth>
            <name>SAR2_SAMPLE_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert SAR ADC2 data</description>
            <name>SAR2_DATA_INV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>enable saradc2 to send out interrupt</description>
            <name>SAR2_INT_EN</name>
          </field>
        </fields>
        <name>SAR_READER2_CTRL</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x40050002</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x28</addressOffset>
        <description>saradc2 status for debug</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <name>SAR2_READER_STATUS</name>
          </field>
        </fields>
        <name>SAR_READER2_STATUS</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2C</addressOffset>
        <description>configure rtc saradc2</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>saradc2_cntl_fsm</description>
            <name>SAR2_CNTL_STATE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>rtc control pwdet enable</description>
            <name>SAR2_PWDET_CAL_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>rtc control pkdet enable</description>
            <name>SAR2_PKDET_CAL_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SAR2_EN_TEST</description>
            <name>SAR2_EN_TEST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x2</bitWidth>
            <name>SAR2_RSTB_FORCE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x8</bitWidth>
            <name>SAR2_STANDBY_WAIT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x8</bitWidth>
            <name>SAR2_RSTB_WAIT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x8</bitWidth>
            <name>SAR2_XPD_WAIT</name>
          </field>
        </fields>
        <name>SAR_MEAS2_CTRL1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x7020200</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x30</addressOffset>
        <description>Control RTC ADC2 conversion and status</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>SAR ADC2 data.</description>
            <name>MEAS2_DATA_SAR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Indicate SAR ADC2 conversion is done.</description>
            <name>MEAS2_DONE_SAR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SAR ADC2 controller (in RTC) starts conversion, active only when SENS_MEAS2_START_FORCE = 1.</description>
            <name>MEAS2_START_SAR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: SAR ADC2 controller (in RTC) is started by software. 0: SAR ADC2 controller is started by ULP coprocessor.</description>
            <name>MEAS2_START_FORCE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0xC</bitWidth>
            <description>SAR ADC2 pad enable bitmap, active only whenSENS_SAR2_EN_PAD_FORCE = 1.</description>
            <name>SAR2_EN_PAD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: SAR ADC2 pad enable bitmap is controlled by software. 0: SAR ADC2 pad enable bitmap is controlled by ULP coprocessor.</description>
            <name>SAR2_EN_PAD_FORCE</name>
          </field>
        </fields>
        <name>SAR_MEAS2_CTRL2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x34</addressOffset>
        <description>Select the controller for SAR ADC2</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>SAR2_PWDET_CCT, PA power detector capacitance tuning.</description>
            <name>SAR2_PWDET_CCT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>In sleep, force to use RTC to control ADC.</description>
            <name>SAR2_RTC_FORCE</name>
          </field>
        </fields>
        <name>SAR_MEAS2_MUX</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x38</addressOffset>
        <description>Configure SAR ADC2 attenuation</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>2-bit attenuation for each pad. [1:0] is used for channel 0, [3:2] is used for channel 1, etc.</description>
            <name>SAR2_ATTEN</name>
          </field>
        </fields>
        <name>SAR_ATTEN2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xFFFFFFFF</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3C</addressOffset>
        <description>configure saradc’s power by sw</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x2</bitWidth>
            <name>FORCE_XPD_SAR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <name>SARCLK_EN</name>
          </field>
        </fields>
        <name>SAR_POWER_XPD_SAR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x40</addressOffset>
        <description>Configure slave addresses 0-1 of RTC I2C</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xB</bitWidth>
            <description>RTC I2C slave address 1</description>
            <name>I2C_SLAVE_ADDR1</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0xB</bitWidth>
            <description>RTC I2C slave address 0</description>
            <name>I2C_SLAVE_ADDR0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x8</bitWidth>
            <name>MEAS_STATUS</name>
          </field>
        </fields>
        <name>SAR_SLAVE_ADDR1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x44</addressOffset>
        <description>Configure slave addresses 2-3 of RTC I2C</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xB</bitWidth>
            <description>RTC I2C slave address 3</description>
            <name>I2C_SLAVE_ADDR3</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0xB</bitWidth>
            <description>RTC I2C slave address 2</description>
            <name>I2C_SLAVE_ADDR2</name>
          </field>
        </fields>
        <name>SAR_SLAVE_ADDR2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x48</addressOffset>
        <description>Configure slave addresses 4-5 of RTC I2C</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xB</bitWidth>
            <description>RTC I2C slave address 5</description>
            <name>I2C_SLAVE_ADDR5</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0xB</bitWidth>
            <description>RTC I2C slave address 4</description>
            <name>I2C_SLAVE_ADDR4</name>
          </field>
        </fields>
        <name>SAR_SLAVE_ADDR3</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4C</addressOffset>
        <description>Configure slave addresses 6-7 of RTC I2C</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xB</bitWidth>
            <description>RTC I2C slave address 7</description>
            <name>I2C_SLAVE_ADDR7</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0xB</bitWidth>
            <description>RTC I2C slave address 6</description>
            <name>I2C_SLAVE_ADDR6</name>
          </field>
        </fields>
        <name>SAR_SLAVE_ADDR4</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x50</addressOffset>
        <description>Temperature sensor data control</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>Temperature sensor data out.</description>
            <name>TSENS_OUT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Indicate temperature sensor out ready.</description>
            <name>TSENS_READY</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enable temperature sensor to send out interrupt.</description>
            <name>TSENS_INT_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Invert temperature sensor data.</description>
            <name>TSENS_IN_INV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>Temperature sensor clock divider.</description>
            <name>TSENS_CLK_DIV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Temperature sensor power up.</description>
            <name>TSENS_POWER_UP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: dump out and power up controlled by software. 0: by FSM.</description>
            <name>TSENS_POWER_UP_FORCE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Temperature sensor dump out only active when SENS_TSENS_POWER_UP_FORCE = 1.</description>
            <name>TSENS_DUMP_OUT</name>
          </field>
        </fields>
        <name>SAR_TSENS_CTRL</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x19000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x54</addressOffset>
        <description>Temperature sensor control</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xC</bitWidth>
            <name>TSENS_XPD_WAIT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x2</bitWidth>
            <name>TSENS_XPD_FORCE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <name>TSENS_CLK_INV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enable temperature sensor clock.</description>
            <name>TSENS_CLKGATE_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Reset temperature sensor.</description>
            <name>TSENS_RESET</name>
          </field>
        </fields>
        <name>SAR_TSENS_CTRL2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x4002</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x58</addressOffset>
        <description>Configure RTC I2C transmission</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1C</bitWidth>
            <description>RTC I2C control data. Active only when SENS_SAR_I2C_START_FORCE =
            1.</description>
            <name>SAR_I2C_CTRL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Start RTC I2C. Active only when SENS_SAR_I2C_START_FORCE = 1</description>
            <name>SAR_I2C_START</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: RTC I2C started by FSM. 1: RTC I2C started by software.</description>
            <name>SAR_I2C_START_FORCE</name>
          </field>
        </fields>
        <name>SAR_I2C_CTRL</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5C</addressOffset>
        <description>Touch sensor configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xF</bitWidth>
            <description>Enable touch controller output.</description>
            <name>TOUCH_OUTEN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Clear all touch active status.</description>
            <name>TOUCH_STATUS_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>0 and 1: touch_raw_data; 2: base_line; 3: touch_smooth_data.</description>
            <name>TOUCH_DATA_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Touch denoise done.</description>
            <name>TOUCH_DENOISE_END</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Indicate the completion of sampling.</description>
            <name>TOUCH_UNIT_END</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Indicate which pad is selected as proximity pad2</description>
            <name>TOUCH_APPROACH_PAD2</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Indicate which pad is selected as proximity pad1</description>
            <name>TOUCH_APPROACH_PAD1</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Indicate which pad is selected as proximity pad0</description>
            <name>TOUCH_APPROACH_PAD0</name>
          </field>
        </fields>
        <name>SAR_TOUCH_CONF</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xFFF07FFF</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x60</addressOffset>
        <description>Finger threshold for touch pad 1</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x16</bitWidth>
            <description>Finger threshold for touch pad 1</description>
            <name>TOUCH_OUT_TH1</name>
          </field>
        </fields>
        <name>SAR_TOUCH_THRES1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x64</addressOffset>
        <description>Finger threshold for touch pad 2</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x16</bitWidth>
            <description>Finger threshold for touch pad 2</description>
            <name>TOUCH_OUT_TH2</name>
          </field>
        </fields>
        <name>SAR_TOUCH_THRES2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x68</addressOffset>
        <description>Finger threshold for touch pad 3</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x16</bitWidth>
            <description>Finger threshold for touch pad 3</description>
            <name>TOUCH_OUT_TH3</name>
          </field>
        </fields>
        <name>SAR_TOUCH_THRES3</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x6C</addressOffset>
        <description>Finger threshold for touch pad 4</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x16</bitWidth>
            <description>Finger threshold for touch pad 4</description>
            <name>TOUCH_OUT_TH4</name>
          </field>
        </fields>
        <name>SAR_TOUCH_THRES4</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x70</addressOffset>
        <description>Finger threshold for touch pad 5</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x16</bitWidth>
            <description>Finger threshold for touch pad 5</description>
            <name>TOUCH_OUT_TH5</name>
          </field>
        </fields>
        <name>SAR_TOUCH_THRES5</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x74</addressOffset>
        <description>Finger threshold for touch pad 6</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x16</bitWidth>
            <description>Finger threshold for touch pad 6</description>
            <name>TOUCH_OUT_TH6</name>
          </field>
        </fields>
        <name>SAR_TOUCH_THRES6</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x78</addressOffset>
        <description>Finger threshold for touch pad 7</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x16</bitWidth>
            <description>Finger threshold for touch pad 7</description>
            <name>TOUCH_OUT_TH7</name>
          </field>
        </fields>
        <name>SAR_TOUCH_THRES7</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x7C</addressOffset>
        <description>Finger threshold for touch pad 8</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x16</bitWidth>
            <description>Finger threshold for touch pad 8</description>
            <name>TOUCH_OUT_TH8</name>
          </field>
        </fields>
        <name>SAR_TOUCH_THRES8</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x80</addressOffset>
        <description>Finger threshold for touch pad 9</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x16</bitWidth>
            <description>Finger threshold for touch pad 9</description>
            <name>TOUCH_OUT_TH9</name>
          </field>
        </fields>
        <name>SAR_TOUCH_THRES9</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x84</addressOffset>
        <description>Finger threshold for touch pad 10</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x16</bitWidth>
            <description>Finger threshold for touch pad 10</description>
            <name>TOUCH_OUT_TH10</name>
          </field>
        </fields>
        <name>SAR_TOUCH_THRES10</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x88</addressOffset>
        <description>Finger threshold for touch pad 11</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x16</bitWidth>
            <description>Finger threshold for touch pad 11</description>
            <name>TOUCH_OUT_TH11</name>
          </field>
        </fields>
        <name>SAR_TOUCH_THRES11</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8C</addressOffset>
        <description>Finger threshold for touch pad 12</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x16</bitWidth>
            <description>Finger threshold for touch pad 12</description>
            <name>TOUCH_OUT_TH12</name>
          </field>
        </fields>
        <name>SAR_TOUCH_THRES12</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x90</addressOffset>
        <description>Finger threshold for touch pad 13</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x16</bitWidth>
            <description>Finger threshold for touch pad 13</description>
            <name>TOUCH_OUT_TH13</name>
          </field>
        </fields>
        <name>SAR_TOUCH_THRES13</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x94</addressOffset>
        <description>Finger threshold for touch pad 14</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x16</bitWidth>
            <description>Finger threshold for touch pad 14</description>
            <name>TOUCH_OUT_TH14</name>
          </field>
        </fields>
        <name>SAR_TOUCH_THRES14</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xD4</addressOffset>
        <description>Touch channel status register</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xF</bitWidth>
            <description>Touch active status</description>
            <name>TOUCH_PAD_ACTIVE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0xF</bitWidth>
            <description>Clear touch channel</description>
            <name>TOUCH_CHANNEL_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Signal flag that indicates one touch pad is done.</description>
            <name>TOUCH_MEAS_DONE</name>
          </field>
        </fields>
        <name>SAR_TOUCH_CHN_ST</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xD8</addressOffset>
        <description>Status of touch controller</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x16</bitWidth>
            <description>Denoise measure value from touch sensor 0.</description>
            <name>TOUCH_DENOISE_DATA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Current pad in scan status</description>
            <name>TOUCH_SCAN_CURR</name>
          </field>
        </fields>
        <name>SAR_TOUCH_STATUS0</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xDC</addressOffset>
        <description>Touch pad 1 status</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x16</bitWidth>
            <description>The data of touch pad 1, depending on the setting of SENS_TOUCH_DATA_SEL.</description>
            <name>TOUCH_PAD1_DATA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Touch pad 1 debounce value.</description>
            <name>TOUCH_PAD1_DEBOUNCE</name>
          </field>
        </fields>
        <name>SAR_TOUCH_STATUS1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xE0</addressOffset>
        <description>Touch pad 2 status</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x16</bitWidth>
            <description>The data of touch pad 2, depending on the setting of SENS_TOUCH_DATA_SEL.</description>
            <name>TOUCH_PAD2_DATA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Touch pad 2 debounce value.</description>
            <name>TOUCH_PAD2_DEBOUNCE</name>
          </field>
        </fields>
        <name>SAR_TOUCH_STATUS2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xE4</addressOffset>
        <description>Touch pad 3 status</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x16</bitWidth>
            <description>The data of touch pad 3, depending on the setting of SENS_TOUCH_DATA_SEL.</description>
            <name>TOUCH_PAD3_DATA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Touch pad 3 debounce value.</description>
            <name>TOUCH_PAD3_DEBOUNCE</name>
          </field>
        </fields>
        <name>SAR_TOUCH_STATUS3</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xE8</addressOffset>
        <description>Touch pad 4 status</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x16</bitWidth>
            <description>The data of touch pad 4, depending on the setting of SENS_TOUCH_DATA_SEL.</description>
            <name>TOUCH_PAD4_DATA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Touch pad 4 debounce value.</description>
            <name>TOUCH_PAD4_DEBOUNCE</name>
          </field>
        </fields>
        <name>SAR_TOUCH_STATUS4</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xEC</addressOffset>
        <description>Touch pad 5 status</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x16</bitWidth>
            <description>The data of touch pad 5, depending on the setting of SENS_TOUCH_DATA_SEL.</description>
            <name>TOUCH_PAD5_DATA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Touch pad 5 debounce value.</description>
            <name>TOUCH_PAD5_DEBOUNCE</name>
          </field>
        </fields>
        <name>SAR_TOUCH_STATUS5</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xF0</addressOffset>
        <description>Touch pad 6 status</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x16</bitWidth>
            <description>The data of touch pad 6, depending on the setting of SENS_TOUCH_DATA_SEL.</description>
            <name>TOUCH_PAD6_DATA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Touch pad 6 debounce value.</description>
            <name>TOUCH_PAD6_DEBOUNCE</name>
          </field>
        </fields>
        <name>SAR_TOUCH_STATUS6</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xF4</addressOffset>
        <description>Touch pad 7 status</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x16</bitWidth>
            <description>The data of touch pad 7, depending on the setting of SENS_TOUCH_DATA_SEL.</description>
            <name>TOUCH_PAD7_DATA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Touch pad 7 debounce value.</description>
            <name>TOUCH_PAD7_DEBOUNCE</name>
          </field>
        </fields>
        <name>SAR_TOUCH_STATUS7</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xF8</addressOffset>
        <description>Touch pad 8 status</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x16</bitWidth>
            <description>The data of touch pad 8, depending on the setting of SENS_TOUCH_DATA_SEL.</description>
            <name>TOUCH_PAD8_DATA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Touch pad 8 debounce value.</description>
            <name>TOUCH_PAD8_DEBOUNCE</name>
          </field>
        </fields>
        <name>SAR_TOUCH_STATUS8</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xFC</addressOffset>
        <description>Touch pad 9 status</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x16</bitWidth>
            <description>The data of touch pad 9, depending on the setting of SENS_TOUCH_DATA_SEL.</description>
            <name>TOUCH_PAD9_DATA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Touch pad 9 debounce value.</description>
            <name>TOUCH_PAD9_DEBOUNCE</name>
          </field>
        </fields>
        <name>SAR_TOUCH_STATUS9</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x100</addressOffset>
        <description>Touch pad 10 status</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x16</bitWidth>
            <description>The data of touch pad 10, depending on the setting of SENS_TOUCH_DATA_SEL.</description>
            <name>TOUCH_PAD10_DATA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Touch pad 10 debounce value.</description>
            <name>TOUCH_PAD10_DEBOUNCE</name>
          </field>
        </fields>
        <name>SAR_TOUCH_STATUS10</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x104</addressOffset>
        <description>Touch pad 11 status</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x16</bitWidth>
            <description>The data of touch pad 11, depending on the setting of SENS_TOUCH_DATA_SEL.</description>
            <name>TOUCH_PAD11_DATA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Touch pad 11 debounce value.</description>
            <name>TOUCH_PAD11_DEBOUNCE</name>
          </field>
        </fields>
        <name>SAR_TOUCH_STATUS11</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x108</addressOffset>
        <description>Touch pad 12 status</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x16</bitWidth>
            <description>The data of touch pad 12, depending on the setting of SENS_TOUCH_DATA_SEL.</description>
            <name>TOUCH_PAD12_DATA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Touch pad 12 debounce value.</description>
            <name>TOUCH_PAD12_DEBOUNCE</name>
          </field>
        </fields>
        <name>SAR_TOUCH_STATUS12</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x10C</addressOffset>
        <description>Touch pad 13 status</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x16</bitWidth>
            <description>The data of touch pad 13, depending on the setting of SENS_TOUCH_DATA_SEL.</description>
            <name>TOUCH_PAD13_DATA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Touch pad 13 debounce value.</description>
            <name>TOUCH_PAD13_DEBOUNCE</name>
          </field>
        </fields>
        <name>SAR_TOUCH_STATUS13</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x110</addressOffset>
        <description>Touch pad 14 status</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x16</bitWidth>
            <description>The data of touch pad 14, depending on the setting of SENS_TOUCH_DATA_SEL.</description>
            <name>TOUCH_PAD14_DATA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Touch pad 14 debounce value.</description>
            <name>TOUCH_PAD14_DEBOUNCE</name>
          </field>
        </fields>
        <name>SAR_TOUCH_STATUS14</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x114</addressOffset>
        <description>Touch sleep pad status</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x16</bitWidth>
            <description>The data of touch sleep pad, depending on the setting of SENS_TOUCH_DATA_SEL.</description>
            <name>TOUCH_SLP_DATA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Touch sleep pad debouce value.</description>
            <name>TOUCH_SLP_DEBOUNCE</name>
          </field>
        </fields>
        <name>SAR_TOUCH_STATUS15</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x118</addressOffset>
        <description>Touch approach count status</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>Count status of proximity pad 2.</description>
            <name>TOUCH_APPROACH_PAD2_CNT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>Count status of proximity pad 1.</description>
            <name>TOUCH_APPROACH_PAD1_CNT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>Count status of proximity pad 0.</description>
            <name>TOUCH_APPROACH_PAD0_CNT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>Count status of sleep pad in proximity mode.</description>
            <name>TOUCH_SLP_APPROACH_CNT</name>
          </field>
        </fields>
        <name>SAR_TOUCH_STATUS16</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x11C</addressOffset>
        <description>DAC control</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>Frequency step for CW generator can be used to adjust the frequency.</description>
            <name>SW_FSTEP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: disable CW generator. 1: enable CW generator.</description>
            <name>SW_TONE_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x5</bitWidth>
            <name>DEBUG_BIT_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>0: DAC1 and DAC2 do not use DMA. 1: DAC1 and DAC2 use DMA.</description>
            <name>DAC_DIG_FORCE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: force PDAC_CLK to low</description>
            <name>DAC_CLK_FORCE_LOW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: force PDAC_CLK to high</description>
            <name>DAC_CLK_FORCE_HIGH</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: invert PDAC_CLK.</description>
            <name>DAC_CLK_INV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Reset DAC by software.</description>
            <name>DAC_RESET</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>DAC clock gate enable bit.</description>
            <name>DAC_CLKGATE_EN</name>
          </field>
        </fields>
        <name>SAR_DAC_CTRL1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x120</addressOffset>
        <description>DAC output control</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>DC offset for DAC1 CW generator.</description>
            <name>DAC_DC1</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>DC offset for DAC2 CW generator.</description>
            <name>DAC_DC2</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>DAC1 scaling. 00: no scale. 01: scale to 1/2. 10: scale to 1/4. 11: scale to 1/8.</description>
            <name>DAC_SCALE1</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>DAC2 scaling. 00: no scale. 01: scale to 1/2. 10: scale to 1/4. 11: scale to 1/8.</description>
            <name>DAC_SCALE2</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Invert DAC1. 00: do not invert any bits. 01: invert all bits. 10: invert MSB. 11: invert all bits except MSB.</description>
            <name>DAC_INV1</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Invert DAC2. 00: do not invert any bits. 01: invert all bits. 10: invert MSB. 11: invert all bits except MSB.</description>
            <name>DAC_INV2</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: select CW generator as source for PDAC1_DAC. 0: select register RT- CIO_PDAC1_DAC as source for PDAC1_DAC.</description>
            <name>DAC_CW_EN1</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: select CW generator as source for PDAC2_DAC. 0: select register RT- CIO_PDAC2_DAC as source for PDAC2_DAC.</description>
            <name>DAC_CW_EN2</name>
          </field>
        </fields>
        <name>SAR_DAC_CTRL2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x3000000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x124</addressOffset>
        <description>ULP-RISCV status</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Trigger ULP-RISCV debug registers</description>
            <name>COCPU_DBG_TRIGGER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Check ULP-RISCV whether clk on</description>
            <name>COCPU_CLK_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Check ULP-RISCV whether in reset state</description>
            <name>COCPU_RESET_N</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Check ULP-RISCV whether in interrupt state</description>
            <name>COCPU_EOI</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Check ULP-RISCV whether in trap state</description>
            <name>COCPU_TRAP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Check ULP-RISCV whether in ebreak</description>
            <name>COCPU_EBREAK</name>
          </field>
        </fields>
        <name>SAR_COCPU_STATE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x128</addressOffset>
        <description>Interrupt raw bit of ULP-RISCV</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>TOUCH_DONE_INT interrupt raw bit</description>
            <name>COCPU_TOUCH_DONE_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>TOUCH_INACTIVE_INT interrupt raw bit</description>
            <name>COCPU_TOUCH_INACTIVE_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>TOUCH_ACTIVE_INT interrupt raw bit</description>
            <name>COCPU_TOUCH_ACTIVE_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SARADC1_DONE_INT interrupt raw bit</description>
            <name>COCPU_SARADC1_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SARADC2_DONE_INT interrupt raw bit</description>
            <name>COCPU_SARADC2_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>TSENS_DONE_INT interrupt raw bit</description>
            <name>COCPU_TSENS_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RISCV_START_INT interrupt raw bit</description>
            <name>COCPU_START_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SW_INT interrupt raw bit</description>
            <name>COCPU_SW_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SWD_INT interrupt raw bit</description>
            <name>COCPU_SWD_INT_RAW</name>
          </field>
        </fields>
        <name>SAR_COCPU_INT_RAW</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x12C</addressOffset>
        <description>Interrupt enable bit of ULP-RISCV</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>TOUCH_DONE_INT interrupt enable bit</description>
            <name>COCPU_TOUCH_DONE_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>TOUCH_INACTIVE_INT interrupt enable bit</description>
            <name>COCPU_TOUCH_INACTIVE_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>TOUCH_ACTIVE_INT interrupt enable bit</description>
            <name>COCPU_TOUCH_ACTIVE_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SARADC1_DONE_INT interrupt enable bit</description>
            <name>COCPU_SARADC1_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SARADC2_DONE_INT interrupt enable bit</description>
            <name>COCPU_SARADC2_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>TSENS_DONE_INT interrupt enable bit</description>
            <name>COCPU_TSENS_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RISCV_START_INT interrupt enable bit</description>
            <name>COCPU_START_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SW_INT interrupt enable bit</description>
            <name>COCPU_SW_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SWD_INT interrupt enable bit</description>
            <name>COCPU_SWD_INT_ENA</name>
          </field>
        </fields>
        <name>SAR_COCPU_INT_ENA</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x130</addressOffset>
        <description>Interrupt status bit of ULP-RISCV</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>TOUCH_DONE_INT interrupt status bit</description>
            <name>COCPU_TOUCH_DONE_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>TOUCH_INACTIVE_INT interrupt status bit</description>
            <name>COCPU_TOUCH_INACTIVE_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>TOUCH_ACTIVE_INT interrupt status bit</description>
            <name>COCPU_TOUCH_ACTIVE_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SARADC1_DONE_INT interrupt status bit</description>
            <name>COCPU_SARADC1_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SARADC2_DONE_INT interrupt status bit</description>
            <name>COCPU_SARADC2_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>TSENS_DONE_INT interrupt status bit</description>
            <name>COCPU_TSENS_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RISCV_START_INT interrupt status bit</description>
            <name>COCPU_START_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SW_INT interrupt status bit</description>
            <name>COCPU_SW_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SWD_INT interrupt status bit</description>
            <name>COCPU_SWD_INT_ST</name>
          </field>
        </fields>
        <name>SAR_COCPU_INT_ST</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x134</addressOffset>
        <description>Interrupt clear bit of ULP-RISCV</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>TOUCH_DONE_INT interrupt clear bit</description>
            <name>COCPU_TOUCH_DONE_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>TOUCH_INACTIVE_INT interrupt clear bit</description>
            <name>COCPU_TOUCH_INACTIVE_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>TOUCH_ACTIVE_INT interrupt clear bit</description>
            <name>COCPU_TOUCH_ACTIVE_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SARADC1_DONE_INT interrupt clear bit</description>
            <name>COCPU_SARADC1_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SARADC2_DONE_INT interrupt clear bit</description>
            <name>COCPU_SARADC2_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>TSENS_DONE_INT interrupt clear bit</description>
            <name>COCPU_TSENS_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RISCV_START_INT interrupt clear bit</description>
            <name>COCPU_START_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SW_INT interrupt clear bit</description>
            <name>COCPU_SW_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SWD_INT interrupt clear bit</description>
            <name>COCPU_SWD_INT_CLR</name>
          </field>
        </fields>
        <name>SAR_COCPU_INT_CLR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x138</addressOffset>
        <description>ULP-RISCV debug register</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xD</bitWidth>
            <description>ULP-RISCV Program counter</description>
            <name>COCPU_PC</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>ULP-RISCV memory valid output</description>
            <name>COCPU_MEM_VLD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>ULP-RISCV memory ready input</description>
            <name>COCPU_MEM_RDY</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>ULP-RISCV memory write enable output</description>
            <name>COCPU_MEM_WEN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0xD</bitWidth>
            <description>ULP-RISCV memory address output</description>
            <name>COCPU_MEM_ADDR</name>
          </field>
        </fields>
        <name>SAR_COCPU_DEBUG</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x13C</addressOffset>
        <description>hall control</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Power on hall sensor and connect to VP and VN</description>
            <name>XPD_HALL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: XPD HALL is controlled by SW. 0: XPD HALL is controlled by FSM in ULP-coprocessor</description>
            <name>XPD_HALL_FORCE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Reverse phase of hall sensor</description>
            <name>HALL_PHASE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: HALL PHASE is controlled by SW  0: HALL PHASE is controlled by FSM in ULP-coprocessor</description>
            <name>HALL_PHASE_FORCE</name>
          </field>
        </fields>
        <name>SAR_HALL_CTRL</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xA0000000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x140</addressOffset>
        <description>sar nouse</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>sar nouse</description>
            <name>SAR_NOUSE</name>
          </field>
        </fields>
        <name>SAR_NOUSE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x144</addressOffset>
        <description>Configure and reset IO MUX</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Reset IO MUX by software</description>
            <name>IOMUX_RESET</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>IO MUX clock gate enable bit</description>
            <name>IOMUX_CLK_GATE_EN</name>
          </field>
        </fields>
        <name>SAR_IO_MUX_CONF</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x148</addressOffset>
        <description>Version Control Register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1C</bitWidth>
            <description>Version Control Register</description>
            <name>SAR_DATE</name>
          </field>
        </fields>
        <name>SARDATE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x1906140</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <resetMask>0xFFFFFFFF</resetMask>
    <resetValue>0x0</resetValue>
  </peripheral>
</peripherals>
<peripherals>
  <peripheral>
    <addressBlock>
      <offset>0x0</offset>
      <size>0xF0</size>
      <usage>registers</usage>
    </addressBlock>
    <baseAddress>0x6003B000</baseAddress>
    <description>SHA (Secure Hash Algorithm) Accelerator</description>
    <groupName>SHA</groupName>
    <interrupts>
      <interrupt>
        <name>SHA</name>
        <value>0x37</value>
      </interrupt>
    </interrupts>
    <name>SHA</name>
    <registers>
      <register>
        <addressOffset>0x0</addressOffset>
        <description>Defines the algorithm of SHA accelerator</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Defines the SHA algorithm.</description>
            <name>MODE</name>
          </field>
        </fields>
        <name>MODE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4</addressOffset>
        <description>String content register for calculating initial Hash Value (only effective for SHA-512/t)</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Defines t_string for calculating the initial Hash value for SHA-512/t.</description>
            <name>T_STRING</name>
          </field>
        </fields>
        <name>T_STRING</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8</addressOffset>
        <description>String length register for calculating initial Hash Value (only effective for SHA-512/t)</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Defines t_string for calculating the initial Hash value for SHA-512/t.</description>
            <name>T_LENGTH</name>
          </field>
        </fields>
        <name>T_LENGTH</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xC</addressOffset>
        <description>Block number register (only effective for DMA-SHA)</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Defines the DMA-SHA block number.</description>
            <name>DMA_BLOCK_NUM</name>
          </field>
        </fields>
        <name>DMA_BLOCK_NUM</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x10</addressOffset>
        <description>Starts the SHA accelerator for Typical SHA operation</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Write 1 to start Typical SHA calculation.</description>
            <name>START</name>
          </field>
        </fields>
        <name>START</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x14</addressOffset>
        <description>Continues SHA operation (only effective in Typical SHA mode)</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Write 1 to continue Typical SHA calculation.</description>
            <name>CONTINUE_OP</name>
          </field>
        </fields>
        <name>CONTINUE_OP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x18</addressOffset>
        <description>Indicates if SHA Accelerator is busy or not</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Indicates the states of SHA accelerator.
            #1'h0: idle
            #1'h1: busy</description>
            <name>STATE</name>
          </field>
        </fields>
        <name>BUSY</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1C</addressOffset>
        <description>Starts the SHA accelerator for DMA-SHA operation</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Write 1 to start DMA-SHA calculation.</description>
            <name>DMA_START</name>
          </field>
        </fields>
        <name>DMA_START</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x20</addressOffset>
        <description>Continues SHA operation (only effective in DMA-SHA mode)</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Write 1 to continue DMA-SHA calculation.</description>
            <name>DMA_CONTINUE</name>
          </field>
        </fields>
        <name>DMA_CONTINUE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x24</addressOffset>
        <description>DMA-SHA interrupt clear register</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Clears DMA-SHA interrupt.</description>
            <name>CLEAR_INTERRUPT</name>
          </field>
        </fields>
        <name>INT_CLEAR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x28</addressOffset>
        <description>DMA-SHA interrupt enable register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enables DMA-SHA interrupt.</description>
            <name>INTERRUPT_ENA</name>
          </field>
        </fields>
        <name>INT_ENA</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2C</addressOffset>
        <description>Version control register.</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1E</bitWidth>
            <description>Version control register</description>
            <name>DATE</name>
          </field>
        </fields>
        <name>DATE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x20190402</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x40</addressOffset>
        <description>Hash value</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32-bit piece of the Hash value.</description>
            <name>H_0</name>
          </field>
        </fields>
        <name>H_0</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x44</addressOffset>
        <description>Hash value</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32-bit piece of the Hash value.</description>
            <name>H_0</name>
          </field>
        </fields>
        <name>H_1</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x48</addressOffset>
        <description>Hash value</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32-bit piece of the Hash value.</description>
            <name>H_0</name>
          </field>
        </fields>
        <name>H_2</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4C</addressOffset>
        <description>Hash value</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32-bit piece of the Hash value.</description>
            <name>H_0</name>
          </field>
        </fields>
        <name>H_3</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x50</addressOffset>
        <description>Hash value</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32-bit piece of the Hash value.</description>
            <name>H_0</name>
          </field>
        </fields>
        <name>H_4</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x54</addressOffset>
        <description>Hash value</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32-bit piece of the Hash value.</description>
            <name>H_0</name>
          </field>
        </fields>
        <name>H_5</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x58</addressOffset>
        <description>Hash value</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32-bit piece of the Hash value.</description>
            <name>H_0</name>
          </field>
        </fields>
        <name>H_6</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5C</addressOffset>
        <description>Hash value</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32-bit piece of the Hash value.</description>
            <name>H_0</name>
          </field>
        </fields>
        <name>H_7</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x60</addressOffset>
        <description>Hash value</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32-bit piece of the Hash value.</description>
            <name>H_0</name>
          </field>
        </fields>
        <name>H_8</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x64</addressOffset>
        <description>Hash value</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32-bit piece of the Hash value.</description>
            <name>H_0</name>
          </field>
        </fields>
        <name>H_9</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x68</addressOffset>
        <description>Hash value</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32-bit piece of the Hash value.</description>
            <name>H_0</name>
          </field>
        </fields>
        <name>H_10</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x6C</addressOffset>
        <description>Hash value</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32-bit piece of the Hash value.</description>
            <name>H_0</name>
          </field>
        </fields>
        <name>H_11</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x70</addressOffset>
        <description>Hash value</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32-bit piece of the Hash value.</description>
            <name>H_0</name>
          </field>
        </fields>
        <name>H_12</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x74</addressOffset>
        <description>Hash value</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32-bit piece of the Hash value.</description>
            <name>H_0</name>
          </field>
        </fields>
        <name>H_13</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x78</addressOffset>
        <description>Hash value</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32-bit piece of the Hash value.</description>
            <name>H_0</name>
          </field>
        </fields>
        <name>H_14</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x7C</addressOffset>
        <description>Hash value</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32-bit piece of the Hash value.</description>
            <name>H_0</name>
          </field>
        </fields>
        <name>H_15</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x80</addressOffset>
        <description>Message</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32-bit piece of the message.</description>
            <name>M_0</name>
          </field>
        </fields>
        <name>M_0</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x84</addressOffset>
        <description>Message</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32-bit piece of the message.</description>
            <name>M_0</name>
          </field>
        </fields>
        <name>M_1</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x88</addressOffset>
        <description>Message</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32-bit piece of the message.</description>
            <name>M_0</name>
          </field>
        </fields>
        <name>M_2</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8C</addressOffset>
        <description>Message</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32-bit piece of the message.</description>
            <name>M_0</name>
          </field>
        </fields>
        <name>M_3</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x90</addressOffset>
        <description>Message</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32-bit piece of the message.</description>
            <name>M_0</name>
          </field>
        </fields>
        <name>M_4</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x94</addressOffset>
        <description>Message</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32-bit piece of the message.</description>
            <name>M_0</name>
          </field>
        </fields>
        <name>M_5</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x98</addressOffset>
        <description>Message</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32-bit piece of the message.</description>
            <name>M_0</name>
          </field>
        </fields>
        <name>M_6</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9C</addressOffset>
        <description>Message</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32-bit piece of the message.</description>
            <name>M_0</name>
          </field>
        </fields>
        <name>M_7</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA0</addressOffset>
        <description>Message</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32-bit piece of the message.</description>
            <name>M_0</name>
          </field>
        </fields>
        <name>M_8</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA4</addressOffset>
        <description>Message</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32-bit piece of the message.</description>
            <name>M_0</name>
          </field>
        </fields>
        <name>M_9</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA8</addressOffset>
        <description>Message</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32-bit piece of the message.</description>
            <name>M_0</name>
          </field>
        </fields>
        <name>M_10</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAC</addressOffset>
        <description>Message</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32-bit piece of the message.</description>
            <name>M_0</name>
          </field>
        </fields>
        <name>M_11</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB0</addressOffset>
        <description>Message</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32-bit piece of the message.</description>
            <name>M_0</name>
          </field>
        </fields>
        <name>M_12</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB4</addressOffset>
        <description>Message</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32-bit piece of the message.</description>
            <name>M_0</name>
          </field>
        </fields>
        <name>M_13</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB8</addressOffset>
        <description>Message</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32-bit piece of the message.</description>
            <name>M_0</name>
          </field>
        </fields>
        <name>M_14</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBC</addressOffset>
        <description>Message</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32-bit piece of the message.</description>
            <name>M_0</name>
          </field>
        </fields>
        <name>M_15</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xC0</addressOffset>
        <description>Message</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32-bit piece of the message.</description>
            <name>M_0</name>
          </field>
        </fields>
        <name>M_16</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xC4</addressOffset>
        <description>Message</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32-bit piece of the message.</description>
            <name>M_0</name>
          </field>
        </fields>
        <name>M_17</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xC8</addressOffset>
        <description>Message</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32-bit piece of the message.</description>
            <name>M_0</name>
          </field>
        </fields>
        <name>M_18</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xCC</addressOffset>
        <description>Message</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32-bit piece of the message.</description>
            <name>M_0</name>
          </field>
        </fields>
        <name>M_19</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xD0</addressOffset>
        <description>Message</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32-bit piece of the message.</description>
            <name>M_0</name>
          </field>
        </fields>
        <name>M_20</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xD4</addressOffset>
        <description>Message</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32-bit piece of the message.</description>
            <name>M_0</name>
          </field>
        </fields>
        <name>M_21</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xD8</addressOffset>
        <description>Message</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32-bit piece of the message.</description>
            <name>M_0</name>
          </field>
        </fields>
        <name>M_22</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xDC</addressOffset>
        <description>Message</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32-bit piece of the message.</description>
            <name>M_0</name>
          </field>
        </fields>
        <name>M_23</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xE0</addressOffset>
        <description>Message</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32-bit piece of the message.</description>
            <name>M_0</name>
          </field>
        </fields>
        <name>M_24</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xE4</addressOffset>
        <description>Message</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32-bit piece of the message.</description>
            <name>M_0</name>
          </field>
        </fields>
        <name>M_25</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xE8</addressOffset>
        <description>Message</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32-bit piece of the message.</description>
            <name>M_0</name>
          </field>
        </fields>
        <name>M_26</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xEC</addressOffset>
        <description>Message</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32-bit piece of the message.</description>
            <name>M_0</name>
          </field>
        </fields>
        <name>M_27</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xF0</addressOffset>
        <description>Message</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32-bit piece of the message.</description>
            <name>M_0</name>
          </field>
        </fields>
        <name>M_28</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xF4</addressOffset>
        <description>Message</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32-bit piece of the message.</description>
            <name>M_0</name>
          </field>
        </fields>
        <name>M_29</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xF8</addressOffset>
        <description>Message</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32-bit piece of the message.</description>
            <name>M_0</name>
          </field>
        </fields>
        <name>M_30</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xFC</addressOffset>
        <description>Message</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the %sth 32-bit piece of the message.</description>
            <name>M_0</name>
          </field>
        </fields>
        <name>M_31</name>
        <size>0x20</size>
      </register>
    </registers>
    <resetMask>0xFFFFFFFF</resetMask>
    <resetValue>0x0</resetValue>
  </peripheral>
</peripherals>
<peripherals>
  <peripheral>
    <addressBlock>
      <offset>0x0</offset>
      <size>0x108</size>
      <usage>registers</usage>
    </addressBlock>
    <baseAddress>0x3F403000</baseAddress>
    <description>SPI (Serial Peripheral Interface) Controller</description>
    <groupName>SPI</groupName>
    <interrupts>
      <interrupt>
        <name>SPI0_REJECT_CACHE</name>
        <value>0x53</value>
      </interrupt>
    </interrupts>
    <name>SPI0</name>
    <registers>
      <register>
        <addressOffset>0x0</addressOffset>
        <description>Command control register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x17</bitWidth>
            <description>Define the spi_clk cycles of  SPI_CONF state. Can be configured in CONF state.</description>
            <name>CONF_BITLEN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>User define command enable.  An operation will be triggered when the bit is set. The bit will be cleared once the operation done.1: enable 0: disable. Can not be changed by CONF_buf.</description>
            <name>USR</name>
          </field>
        </fields>
        <name>CMD</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4</addressOffset>
        <description>Address value</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>[31:8]:address to slave, [7:0]:Reserved. Can be configured in CONF state.</description>
            <name>USR_ADDR_VALUE</name>
          </field>
        </fields>
        <name>ADDR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8</addressOffset>
        <description>SPI control register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set the bit to hold spi. The bit is combined with SPI_USR_PREP_HOLD,SPI_USR_CMD_HOLD,SPI_USR_ADDR_HOLD,SPI_USR_DUMMY_HOLD,SPI_USR_DIN_HOLD,SPI_USR_DOUT_HOLD and SPI_USR_HOLD_POL. Can be configured in CONF state.</description>
            <name>EXT_HOLD_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>In the dummy phase the signal level of spi is output by the spi controller. Can be configured in CONF state.</description>
            <name>DUMMY_OUT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Apply 2-bit mode during addr phase 1:enable 0: disable. Can be configured in CONF state.</description>
            <name>FADDR_DUAL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Apply 4-bit mode during addr phase 1:enable 0: disable. Can be configured in CONF state.</description>
            <name>FADDR_QUAD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Apply 8-bit mode during addr phase 1:enable 0: disable. Can be configured in CONF state.</description>
            <name>FADDR_OCT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Apply 2-bit mode during command phase 1:enable 0: disable. Can be configured in CONF state.</description>
            <name>FCMD_DUAL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Apply 4-bit mode during command phase 1:enable 0: disable. Can be configured in CONF state.</description>
            <name>FCMD_QUAD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Apply 8-bit mode during command phase 1:enable 0: disable. Can be configured in CONF state.</description>
            <name>FCMD_OCT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>In the read operations, read-data phase is in 2-bit mode. 1: enable 0: disable. Can be configured in CONF state.</description>
            <name>FREAD_DUAL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>In the read operations read-data phase is in 4-bit mode. 1: enable 0: disable.  Can be configured in CONF state.</description>
            <name>FREAD_QUAD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>In the read operations read-data phase is in 8-bit mode. 1: enable 0: disable.  Can be configured in CONF state.</description>
            <name>FREAD_OCT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to set MISO line polarity, 1: high 0, low. Can be configured in CONF state.</description>
            <name>Q_POL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to set MOSI line polarity, 1: high 0, low. Can be configured in CONF state.</description>
            <name>D_POL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Write protect signal output when SPI is idle.  1: output high, 0: output low.  Can be configured in CONF state.</description>
            <name>WP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>In read-data (MISO) phase 1: LSB first 0: MSB first. Can be configured in CONF state.</description>
            <name>RD_BIT_ORDER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>In command address write-data (MOSI) phases 1: LSB firs 0: MSB first. Can be configured in CONF state.</description>
            <name>WR_BIT_ORDER</name>
          </field>
        </fields>
        <name>CTRL</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x2C0000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xC</addressOffset>
        <description>SPI control register 1</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>SPI clock mode bits. 0: SPI clock is off when CS inactive 1: SPI clock is delayed one cycle after CS inactive 2: SPI clock is delayed two cycles after CS inactive 3: SPI clock is alwasy on. Can be configured in CONF state.</description>
            <name>CLK_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>{CPOL, CPHA},1: support spi clk mode 1 and 3, first edge output data B[0]/B[7].  0: support spi clk mode 0 and 2, first edge output data B[1]/B[6].</description>
            <name>CLK_MODE_13</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>It saves half a cycle when tsck is the same as rsck. 1: output data at rsck posedge   0: output data at tsck posedge</description>
            <name>RSCK_DATA_OUT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1:SPI_BUF16~SPI_BUF17 can be written   0:SPI_BUF16~SPI_BUF17 can not  be written. Can be configured in CONF state.</description>
            <name>W16_17_WR_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>SPI cs signal is delayed by spi clock cycles. Can be configured in CONF state.</description>
            <name>CS_HOLD_DELAY</name>
          </field>
        </fields>
        <name>CTRL1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x4010</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x10</addressOffset>
        <description>SPI control register 2</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xD</bitWidth>
            <description>(cycles+1) of prepare phase by spi clock this bits are combined with SPI_CS_SETUP bit. Can be configured in CONF state.</description>
            <name>CS_SETUP_TIME</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0xD</bitWidth>
            <description>delay cycles of cs pin by spi clock this bits are combined with SPI_CS_HOLD bit. Can be configured in CONF state.</description>
            <name>CS_HOLD_TIME</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>spi_cs signal is delayed by spi_clk . 0: zero 1: if SPI_CK_OUT_EDGE or SPI_CK_IDLE_EDGE is set 1 delayed by half cycle  else delayed by one cycle 2: if SPI_CK_OUT_EDGE or  SPI_CK_IDLE_EDGE is set 1 delayed by one cycle, else delayed by half cycle 3: delayed one cycle. Can be configured in CONF state.</description>
            <name>CS_DELAY_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>spi_cs signal is delayed by system clock cycles. Can be configured in CONF state.</description>
            <name>CS_DELAY_NUM</name>
          </field>
        </fields>
        <name>CTRL2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x2000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x14</addressOffset>
        <description>SPI clock control register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>In the master mode it must be equal to SPI_CLKCNT_N. In the slave mode it must be 0. Can be configured in CONF state.</description>
            <name>CLKCNT_L</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>In the master mode it must be floor((SPI_CLKCNT_N+1)/2-1). In the slave mode it must be 0. Can be configured in CONF state.</description>
            <name>CLKCNT_H</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>In the master mode it is the divider of spi_clk. So spi_clk frequency is system/(SPI_CLKDIV_PRE+1)/(SPI_CLKCNT_N+1). Can be configured in CONF state.</description>
            <name>CLKCNT_N</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0xD</bitWidth>
            <description>In the master mode it is pre-divider of spi_clk.  Can be configured in CONF state.</description>
            <name>CLKDIV_PRE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>In the master mode 1: spi_clk is eqaul to system 0: spi_clk is divided from system clock. Can be configured in CONF state.</description>
            <name>CLK_EQU_SYSCLK</name>
          </field>
        </fields>
        <name>CLOCK</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x80003043</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x18</addressOffset>
        <description>SPI USER control register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set the bit to enable full duplex communication. 1: enable 0: disable. Can be configured in CONF state.</description>
            <name>DOUTDIN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Both for master mode and slave mode. 1: spi controller is in QPI mode. 0: others. Can be configured in CONF state.</description>
            <name>QPI_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Just for master mode. 1: spi controller is in OPI mode (all in 8-bit mode). 0: others. Can be configured in CONF state.</description>
            <name>OPI_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>In the slave mode, this bit can be used to change the polarity of tsck. 0: tsck = spi_ck_i. 1:tsck = !spi_ck_i.</description>
            <name>TSCK_I_EDGE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>spi cs keep low when spi is in  done  phase. 1: enable 0: disable. Can be configured in CONF state.</description>
            <name>CS_HOLD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>spi cs is enable when spi is in  prepare  phase. 1: enable 0: disable. Can be configured in CONF state.</description>
            <name>CS_SETUP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>In the slave mode, this bit can be used to change the polarity of rsck. 0: rsck = !spi_ck_i. 1:rsck = spi_ck_i.</description>
            <name>RSCK_I_EDGE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>the bit combined with SPI_DOUT_MODE register to set mosi signal delay mode. Can be configured in CONF state.</description>
            <name>CK_OUT_EDGE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>In read-data (MISO) phase 1: big-endian 0: little_endian. Can be configured in CONF state.</description>
            <name>RD_BYTE_ORDER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>In command address write-data (MOSI) phases 1: big-endian 0: litte_endian. Can be configured in CONF state.</description>
            <name>WR_BYTE_ORDER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>In the write operations read-data phase is in 2-bit mode. Can be configured in CONF state.</description>
            <name>FWRITE_DUAL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>In the write operations read-data phase is in 4-bit mode. Can be configured in CONF state.</description>
            <name>FWRITE_QUAD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>In the write operations read-data phase is in 8-bit mode. Can be configured in CONF state.</description>
            <name>FWRITE_OCT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: Enable the DMA CONF phase of next seg-trans operation, which means seg-trans will continue. 0: The seg-trans will end after the current SPI seg-trans or this is not seg-trans mode. Can be configured in CONF state.</description>
            <name>USR_CONF_NXT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set the bit to enable 3-line half duplex communication mosi and miso signals share the same pin. 1: enable 0: disable. Can be configured in CONF state.</description>
            <name>SIO</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>It is combined with hold bits to set the polarity of spi hold line 1: spi will be held when spi hold line is high 0: spi will be held when spi hold line is low. Can be configured in CONF state.</description>
            <name>USR_HOLD_POL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>spi is hold at data out state the bit are combined with SPI_USR_HOLD_POL bit. Can be configured in CONF state.</description>
            <name>USR_DOUT_HOLD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>spi is hold at data in state the bit are combined with SPI_USR_HOLD_POL bit. Can be configured in CONF state.</description>
            <name>USR_DIN_HOLD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>spi is hold at dummy state the bit are combined with SPI_USR_HOLD_POL bit. Can be configured in CONF state.</description>
            <name>USR_DUMMY_HOLD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>spi is hold at address state the bit are combined with SPI_USR_HOLD_POL bit. Can be configured in CONF state.</description>
            <name>USR_ADDR_HOLD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>spi is hold at command state the bit are combined with SPI_USR_HOLD_POL bit. Can be configured in CONF state.</description>
            <name>USR_CMD_HOLD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>spi is hold at prepare state the bit are combined with SPI_USR_HOLD_POL bit. Can be configured in CONF state.</description>
            <name>USR_PREP_HOLD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>read-data phase only access to high-part of the buffer SPI_BUF8~SPI_BUF17. 1: enable 0: disable. Can be configured in CONF state.</description>
            <name>USR_MISO_HIGHPART</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>write-data phase only access to high-part of the buffer SPI_BUF8~SPI_BUF17. 1: enable 0: disable.  Can be configured in CONF state.</description>
            <name>USR_MOSI_HIGHPART</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>spi clock is disable in dummy phase when the bit is enable. Can be configured in CONF state.</description>
            <name>USR_DUMMY_IDLE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This bit enable the write-data phase of an operation. Can be configured in CONF state.</description>
            <name>USR_MOSI</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This bit enable the read-data phase of an operation. Can be configured in CONF state.</description>
            <name>USR_MISO</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This bit enable the dummy phase of an operation. Can be configured in CONF state.</description>
            <name>USR_DUMMY</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This bit enable the address phase of an operation. Can be configured in CONF state.</description>
            <name>USR_ADDR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This bit enable the command phase of an operation. Can be configured in CONF state.</description>
            <name>USR_COMMAND</name>
          </field>
        </fields>
        <name>USER</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x800000C0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1C</addressOffset>
        <description>SPI USER control register 1</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>The length in spi_clk cycles of dummy phase. The register value shall be (cycle_num-1). Can be configured in CONF state.</description>
            <name>USR_DUMMY_CYCLELEN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>The length in bits of address phase. The register value shall be (bit_num-1). Can be configured in CONF state.</description>
            <name>USR_ADDR_BITLEN</name>
          </field>
        </fields>
        <name>USER1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xB8000007</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x20</addressOffset>
        <description>SPI USER control register 2</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>The value of  command. Can be configured in CONF state.</description>
            <name>USR_COMMAND_VALUE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>The length in bits of command phase. The register value shall be (bit_num-1). Can be configured in CONF state.</description>
            <name>USR_COMMAND_BITLEN</name>
          </field>
        </fields>
        <name>USER2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x70000000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x24</addressOffset>
        <description>MOSI length</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x17</bitWidth>
            <description>The length in bits of write-data. The register value shall be (bit_num-1). Can be configured in CONF state.</description>
            <name>USR_MOSI_DBITLEN</name>
          </field>
        </fields>
        <name>MOSI_DLEN</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x28</addressOffset>
        <description>MISO length</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x17</bitWidth>
            <description>The length in bits of  read-data. The register value shall be (bit_num-1). Can be configured in CONF state.</description>
            <name>USR_MISO_DBITLEN</name>
          </field>
        </fields>
        <name>MISO_DLEN</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2C</addressOffset>
        <description>SPI misc register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI CS0 pin enable, 1: disable CS0, 0: SPI_CS0 signal is from/to CS0 pin. Can be configured in CONF state.</description>
            <name>CS0_DIS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI CS1 pin enable, 1: disable CS1, 0: SPI_CS1 signal is from/to CS1 pin. Can be configured in CONF state.</description>
            <name>CS1_DIS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI CS2 pin enable, 1: disable CS2, 0: SPI_CS2 signal is from/to CS2 pin. Can be configured in CONF state.</description>
            <name>CS2_DIS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI CS3 pin enable, 1: disable CS3, 0: SPI_CS3 signal is from/to CS3 pin. Can be configured in CONF state.</description>
            <name>CS3_DIS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI CS4 pin enable, 1: disable CS4, 0: SPI_CS4 signal is from/to CS4 pin. Can be configured in CONF state.</description>
            <name>CS4_DIS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI CS5 pin enable, 1: disable CS5, 0: SPI_CS5 signal is from/to CS5 pin. Can be configured in CONF state.</description>
            <name>CS5_DIS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: spi clk out disable,  0: spi clk out enable. Can be configured in CONF state.</description>
            <name>CK_DIS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>In the master mode the bits are the polarity of spi cs line, the value is equivalent to spi_cs ^ SPI_MASTER_CS_POL. Can be configured in CONF state.</description>
            <name>MASTER_CS_POL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: SPI master DTR mode is applied to SPI clk, data and spi_dqs.  0: SPI master DTR mode is  only applied to spi_dqs. This bit should be used with bit 17/18/19.</description>
            <name>CLK_DATA_DTR_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: SPI clk and data of SPI_DOUT and SPI_DIN state are in DTR mode, including master 1/2/4/8-bm.  0:  SPI clk and data of SPI_DOUT and SPI_DIN state are in STR mode. Can be configured in CONF state.</description>
            <name>DATA_DTR_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: SPI clk and data of SPI_SEND_ADDR state are in DTR mode, including master 1/2/4/8-bm.  0:  SPI clk and data of SPI_SEND_ADDR state are in STR mode. Can be configured in CONF state.</description>
            <name>ADDR_DTR_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: SPI clk and data of SPI_SEND_CMD state are in DTR mode, including master 1/2/4/8-bm.  0:  SPI clk and data of SPI_SEND_CMD state are in STR mode. Can be configured in CONF state.</description>
            <name>CMD_DTR_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: spi_cd = !SPI_CD_IDLE_EDGE when SPI_ST[3:0] is in SPI_DOUT or SPI_DIN state.  0: spi_cd = SPI_CD_IDLE_EDGE. Can be configured in CONF state.</description>
            <name>CD_DATA_SET</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: spi_cd = !SPI_CD_IDLE_EDGE when SPI_ST[3:0] is in SPI_DUMMY state.  0: spi_cd = SPI_CD_IDLE_EDGE. Can be configured in CONF state.</description>
            <name>CD_DUMMY_SET</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: spi_cd = !SPI_CD_IDLE_EDGE when SPI_ST[3:0] is in SPI_SEND_ADDR state.  0: spi_cd = SPI_CD_IDLE_EDGE. Can be configured in CONF state.</description>
            <name>CD_ADDR_SET</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>spi slave input cs polarity select. 1: inv  0: not change. Can be configured in CONF state.</description>
            <name>SLAVE_CS_POL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The default value of spi_dqs. Can be configured in CONF state.</description>
            <name>DQS_IDLE_EDGE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: spi_cd = !SPI_CD_IDLE_EDGE when SPI_ST[3:0] is in SPI_SEND_CMD state.  0: spi_cd = SPI_CD_IDLE_EDGE. Can be configured in CONF state.</description>
            <name>CD_CMD_SET</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The default value of spi_cd. Can be configured in CONF state.</description>
            <name>CD_IDLE_EDGE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: spi clk line is high when idle     0: spi clk line is low when idle. Can be configured in CONF state.</description>
            <name>CK_IDLE_EDGE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>spi cs line keep low when the bit is set. Can be configured in CONF state.</description>
            <name>CS_KEEP_ACTIVE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1:  spi quad input swap enable  0:  spi quad input swap disable. Can be configured in CONF state.</description>
            <name>QUAD_DIN_PIN_SWAP</name>
          </field>
        </fields>
        <name>MISC</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x3E</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x30</addressOffset>
        <description>SPI slave control register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt raw bit for the completion of any operation in both the master mode and the slave mode.  Can not be changed by CONF_buf.</description>
            <name>TRANS_DONE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI_SLV_RD_BUF_DONE Interrupt enable. 1: enable 0: disable. Can be configured in CONF state.</description>
            <name>INT_RD_BUF_DONE_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI_SLV_WR_BUF_DONE Interrupt enable. 1: enable 0: disable. Can be configured in CONF state.</description>
            <name>INT_WR_BUF_DONE_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI_SLV_RD_DMA_DONE Interrupt enable. 1: enable 0: disable. Can be configured in CONF state.</description>
            <name>INT_RD_DMA_DONE_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI_SLV_WR_DMA_DONE Interrupt enable. 1: enable 0: disable. Can be configured in CONF state.</description>
            <name>INT_WR_DMA_DONE_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI_TRANS_DONE Interrupt enable. 1: enable 0: disable. Can be configured in CONF state.</description>
            <name>INT_TRANS_DONE_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI_DMA_SEG_TRANS_DONE Interrupt enable. 1: enable 0: disable. Can be configured in CONF state.</description>
            <name>INT_DMA_SEG_TRANS_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: Enable seg magic value error interrupt. 0: Others. Can be configured in CONF state.</description>
            <name>SEG_MAGIC_ERR_INT_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>The operations counter in both the master mode and the slave mode.</description>
            <name>TRANS_CNT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI_TRANS_DONE auto clear enable, clear it 3 apb cycles after the pos edge of SPI_TRANS_DONE.  0:disable. 1: enable. Can be configured in CONF state.</description>
            <name>TRANS_DONE_AUTO_CLR_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set SPI work mode. 1: slave mode 0: master mode.</description>
            <name>MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Software reset enable, reset the spi clock line cs line and data lines. Can be configured in CONF state.</description>
            <name>SOFT_RESET</name>
          </field>
        </fields>
        <name>SLAVE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x200</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x34</addressOffset>
        <description>SPI slave control register 1</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: Clear SPI_SLV_ADDR_ERR. 0: not valid. Can be changed by CONF_buf.</description>
            <name>SLV_ADDR_ERR_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: Clear SPI_SLV_CMD_ERR. 0: not valid.  Can be changed by CONF_buf.</description>
            <name>SLV_CMD_ERR_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: spi slave QPI mode is not supported. 0: spi slave QPI mode is supported.</description>
            <name>SLV_NO_QPI_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: The address value of the last SPI transfer is not supported by SPI slave. 0: The address value is supported or no address value is received.</description>
            <name>SLV_ADDR_ERR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: The command value of the last SPI transfer is not supported by SPI slave. 0: The command value is supported or no command value is received.</description>
            <name>SLV_CMD_ERR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt raw bit for the completion of dma write operation in the slave mode.  Can not be changed by CONF_buf.</description>
            <name>SLV_WR_DMA_DONE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>In the slave mode it is the value of command.</description>
            <name>SLV_LAST_COMMAND</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>In the slave mode it is the value of address.</description>
            <name>SLV_LAST_ADDR</name>
          </field>
        </fields>
        <name>SLAVE1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x38</addressOffset>
        <description>SPI slave Wr_BUF interrupt and CONF control register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt raw bit for the completion of write-buffer operation in the slave mode.  Can not be changed by CONF_buf.</description>
            <name>SLV_WR_BUF_DONE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x7</bitWidth>
            <description>The basic spi_clk cycles of CONF state. The real cycle length of CONF state, if SPI_USR_CONF is enabled, is SPI_CONF_BASE_BITLEN[6:0] + SPI_CONF_BITLEN[23:0].</description>
            <name>CONF_BASE_BITLEN</name>
          </field>
        </fields>
        <name>SLV_WRBUF_DLEN</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xD8000000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3C</addressOffset>
        <description>SPI magic error and slave control register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x14</bitWidth>
            <description>In the slave mode it is the length in bytes for read operations. The register value shall be byte_num.</description>
            <name>SLV_DMA_RD_BYTELEN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt raw bit for the completion of read-buffer operation in the slave mode.  Can not be changed by CONF_buf.</description>
            <name>SLV_RD_BUF_DONE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: The recent magic value in CONF buffer is not right in master DMA seg-trans mode. 0: others.</description>
            <name>SEG_MAGIC_ERR</name>
          </field>
        </fields>
        <name>SLV_RDBUF_DLEN</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x40</addressOffset>
        <description>SPI interrupt control register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x14</bitWidth>
            <description>The full-duplex or half-duplex data byte length of the last SPI transfer in slave mode. In half-duplex mode, this value is controlled by bits [23:20].</description>
            <name>SLV_DATA_BYTELEN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: SPI_SLV_DATA_BYTELEN stores data byte length of master-read-slave data length in DMA controlled mode(Rd_DMA). 0: others</description>
            <name>SLV_RDDMA_BYTELEN_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: SPI_SLV_DATA_BYTELEN stores data byte length of master-write-to-slave data length in DMA controlled mode(Wr_DMA). 0: others</description>
            <name>SLV_WRDMA_BYTELEN_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: SPI_SLV_DATA_BYTELEN stores data byte length of master-read-slave data length in CPU controlled mode(Rd_BUF). 0: others</description>
            <name>SLV_RDBUF_BYTELEN_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: SPI_SLV_DATA_BYTELEN stores data byte length of master-write-to-slave data length in CPU controlled mode(Wr_BUF). 0: others</description>
            <name>SLV_WRBUF_BYTELEN_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>The magic value of BM table in master DMA seg-trans.</description>
            <name>DMA_SEG_MAGIC_VALUE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt raw bit for the completion of Rd-DMA operation in the slave mode.  Can not be changed by CONF_buf.</description>
            <name>SLV_RD_DMA_DONE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: Enable the DMA CONF phase of current seg-trans operation, which means seg-trans will start. 0: This is not seg-trans mode.</description>
            <name>USR_CONF</name>
          </field>
        </fields>
        <name>SLV_RD_BYTE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xA000000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x44</addressOffset>
        <description>SPI master status and DMA read byte control register</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>The status of spi state machine. 0: idle state, 1: preparation state, 2: send command state, 3: send data state, 4: red data state, 5:write data state, 6: wait state, 7: done state.</description>
            <name>ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x14</bitWidth>
            <description>Define the master DMA read byte length in non seg-conf-trans or seg-conf-trans mode. Invalid when SPI_RX_EOF_EN is 0. Can be configured in CONF state..</description>
            <name>MST_DMA_RD_BYTELEN</name>
          </field>
        </fields>
        <name>FSM</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x48</addressOffset>
        <description>SPI hold register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>This register is for two SPI masters to share the same cs clock and data signals. The bits of one SPI are set, if the other SPI is busy, the SPI will be hold. 1(3): hold at  idle  phase 2: hold at  prepare  phase. Can be configured in CONF state.</description>
            <name>INT_HOLD_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>spi hold output value, which should be used with SPI_HOLD_OUT_EN. Can be configured in CONF state.</description>
            <name>VAL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enable set spi output hold value to spi_hold_reg. It can be used to hold spi state machine with SPI_EXT_HOLD_EN and other usr hold signals. Can be configured in CONF state.</description>
            <name>OUT_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>set the hold cycles of output spi_hold signal when SPI_HOLD_OUT_EN is enable. Can be configured in CONF state.</description>
            <name>OUT_TIME</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1:  spi master DMA full-duplex/half-duplex seg-trans ends or slave half-duplex seg-trans ends. And data has been pushed to corresponding memory.  0:  seg-trans is not ended or not occurred.  Can not be changed by CONF_buf.</description>
            <name>DMA_SEG_TRANS_DONE</name>
          </field>
        </fields>
        <name>HOLD</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4C</addressOffset>
        <description>SPI DMA control register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to reset in dma fsm and in data fifo pointer.</description>
            <name>IN_RST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to reset out dma fsm and out data fifo pointer.</description>
            <name>OUT_RST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Reset spi dma ahb master fifo pointer.</description>
            <name>AHBM_FIFO_RST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Reset spi dma ahb master.</description>
            <name>AHBM_RST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set bit to test in link.</description>
            <name>IN_LOOP_TEST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set bit to test out link.</description>
            <name>OUT_LOOP_TEST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>when the bit is set, DMA continue to use the next inlink node when the length of inlink is 0.</description>
            <name>OUT_AUTO_WRBACK</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>out eof flag generation mode . 1: when dma pop all data from fifo  0:when ahb push all data to fifo.</description>
            <name>OUT_EOF_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>read descriptor use burst mode when read data for memory.</description>
            <name>OUTDSCR_BURST_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>read descriptor use burst mode when write data to memory.</description>
            <name>INDSCR_BURST_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>spi dma read data from memory in burst mode.</description>
            <name>OUT_DATA_BURST_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: Internal memory data transfer enable bit. Send SPI DMA RX buffer data to SPI DMA TX buffer. 0: Disable this function.</description>
            <name>MEM_TRANS_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>spi dma read data stop  when in continue tx/rx mode.</description>
            <name>DMA_RX_STOP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>spi dma write data stop when in continue tx/rx mode.</description>
            <name>DMA_TX_STOP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>spi dma continue tx/rx data.</description>
            <name>DMA_CONTINUE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: Clear spi_slv_seg_frt_pop_mask. 0 : others</description>
            <name>SLV_LAST_SEG_POP_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enable dma segment transfer in spi dma half slave mode. 1: enable. 0: disable.</description>
            <name>DMA_SLV_SEG_TRANS_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: spi_dma_infifo_full_vld is cleared by spi slave CMD5. 0: spi_dma_infifo_full_vld is cleared by SPI_TRANS_DONE.</description>
            <name>SLV_RX_SEG_TRANS_CLR_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: spi_dma_outfifo_empty_vld is cleared by spi slave CMD6. 0: spi_dma_outfifo_empty_vld is cleared by SPI_TRANS_DONE.</description>
            <name>SLV_TX_SEG_TRANS_CLR_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: SPI_IN_SUC_EOF_INT_RAW is set when the number of dma pushed data bytes is equal to the value of SPI_SLV_DMA_RD_BYTELEN[19:0]/ SPI_MST_DMA_RD_BYTELEN[19:0] in spi dma transition.  0: SPI_IN_SUC_EOF_INT_RAW is set by SPI_TRANS_DONE in non-seg-trans or SPI_DMA_SEG_TRANS_DONE in seg-trans.</description>
            <name>RX_EOF_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1:Clear spi_dma_infifo_full_vld. 0: Do not control it.</description>
            <name>DMA_INFIFO_FULL_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1:Clear spi_dma_outfifo_empty_vld. 0: Do not control it.</description>
            <name>DMA_OUTFIFO_EMPTY_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Select the external memory block size.</description>
            <name>EXT_MEM_BK_SIZE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: End slave seg-trans, which acts as 0x05 command. 2 or more end seg-trans signals will induce error in DMA RX.  0: others. Will be cleared in 1 APB CLK cycles by hardware..</description>
            <name>DMA_SEG_TRANS_CLR</name>
          </field>
        </fields>
        <name>DMA_CONF</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x200</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x50</addressOffset>
        <description>SPI DMA TX link configuration</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x14</bitWidth>
            <description>The address of the first outlink descriptor.</description>
            <name>OUTLINK_ADDR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set the bit to stop to use outlink descriptor.</description>
            <name>OUTLINK_STOP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set the bit to start to use outlink descriptor.</description>
            <name>OUTLINK_START</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set the bit to mount on new outlink descriptors.</description>
            <name>OUTLINK_RESTART</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>spi dma write data status bit.</description>
            <name>DMA_TX_ENA</name>
          </field>
        </fields>
        <name>DMA_OUT_LINK</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x54</addressOffset>
        <description>SPI DMA RX link configuration</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x14</bitWidth>
            <description>The address of the first inlink descriptor.</description>
            <name>INLINK_ADDR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>when the bit is set, the inlink descriptor returns to the first link node when a packet is error.</description>
            <name>INLINK_AUTO_RET</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set the bit to stop to use inlink descriptor.</description>
            <name>INLINK_STOP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set the bit to start to use inlink descriptor.</description>
            <name>INLINK_START</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set the bit to mount on new inlink descriptors.</description>
            <name>INLINK_RESTART</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI DMA read data status bit.</description>
            <name>DMA_RX_ENA</name>
          </field>
        </fields>
        <name>DMA_IN_LINK</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x58</addressOffset>
        <description>SPI DMA interrupt enable register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The enable bit for lack of enough inlink descriptors. Can be configured in CONF state.</description>
            <name>INLINK_DSCR_EMPTY_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The enable bit for outlink descriptor error. Can be configured in CONF state.</description>
            <name>OUTLINK_DSCR_ERROR_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The enable bit for inlink descriptor error. Can be configured in CONF state.</description>
            <name>INLINK_DSCR_ERROR_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The enable bit for completing usage of a inlink descriptor. Can be configured in CONF state.</description>
            <name>IN_DONE_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The enable bit for receiving error. Can be configured in CONF state.</description>
            <name>IN_ERR_EOF_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The enable bit for completing receiving all the packets from host. Can be configured in CONF state.</description>
            <name>IN_SUC_EOF_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The enable bit for completing usage of a outlink descriptor . Can be configured in CONF state.</description>
            <name>OUT_DONE_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The enable bit for sending a packet to host done. Can be configured in CONF state.</description>
            <name>OUT_EOF_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The enable bit for sending all the packets to host done. Can be configured in CONF state.</description>
            <name>OUT_TOTAL_EOF_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The enable bit for infifo full error interrupt.</description>
            <name>INFIFO_FULL_ERR_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The enable bit for outfifo empty error interrupt.</description>
            <name>OUTFIFO_EMPTY_ERR_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The enable bit for SPI slave CMD6 interrupt.</description>
            <name>SLV_CMD6_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The enable bit for SPI slave CMD7 interrupt.</description>
            <name>SLV_CMD7_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The enable bit for SPI slave CMD8 interrupt.</description>
            <name>SLV_CMD8_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The enable bit for SPI slave CMD9 interrupt.</description>
            <name>SLV_CMD9_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The enable bit for SPI slave CMDA interrupt.</description>
            <name>SLV_CMDA_INT_ENA</name>
          </field>
        </fields>
        <name>DMA_INT_ENA</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5C</addressOffset>
        <description>SPI DMA interrupt raw register</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw bit for lack of enough inlink descriptors. Can be configured in CONF state.</description>
            <name>INLINK_DSCR_EMPTY_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw bit for outlink descriptor error. Can be configured in CONF state.</description>
            <name>OUTLINK_DSCR_ERROR_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw bit for inlink descriptor error. Can be configured in CONF state.</description>
            <name>INLINK_DSCR_ERROR_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw bit for completing usage of a inlink descriptor. Can be configured in CONF state.</description>
            <name>IN_DONE_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw bit for receiving error. Can be configured in CONF state.</description>
            <name>IN_ERR_EOF_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw bit for completing receiving all the packets from host. Can be configured in CONF state.</description>
            <name>IN_SUC_EOF_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw bit for completing usage of a outlink descriptor. Can be configured in CONF state.</description>
            <name>OUT_DONE_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw bit for sending a packet to host done. Can be configured in CONF state.</description>
            <name>OUT_EOF_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw bit for sending all the packets to host done. Can be configured in CONF state.</description>
            <name>OUT_TOTAL_EOF_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1:SPI_DMA_INFIFO_FULL and spi_push_data_prep are valid, which means that DMA Rx buffer is full but push is valid.  0: Others.  Can not be changed by CONF_buf.</description>
            <name>INFIFO_FULL_ERR_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1:SPI_DMA_OUTFIFO_EMPTY and spi_pop_data_prep are valid, which means that there is no data to pop but pop is valid.  0: Others.  Can not be changed by CONF_buf.</description>
            <name>OUTFIFO_EMPTY_ERR_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw bit for SPI slave CMD6 interrupt.</description>
            <name>SLV_CMD6_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw bit for SPI slave CMD7 interrupt.</description>
            <name>SLV_CMD7_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw bit for SPI slave CMD8 interrupt.</description>
            <name>SLV_CMD8_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw bit for SPI slave CMD9 interrupt.</description>
            <name>SLV_CMD9_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw bit for SPI slave CMDA interrupt.</description>
            <name>SLV_CMDA_INT_RAW</name>
          </field>
        </fields>
        <name>DMA_INT_RAW</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x60</addressOffset>
        <description>SPI DMA interrupt status register</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The status bit for lack of enough inlink descriptors.</description>
            <name>INLINK_DSCR_EMPTY_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The status bit for outlink descriptor error.</description>
            <name>OUTLINK_DSCR_ERROR_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The status bit for inlink descriptor error.</description>
            <name>INLINK_DSCR_ERROR_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The status bit for completing usage of a inlink descriptor.</description>
            <name>IN_DONE_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The status bit for receiving error.</description>
            <name>IN_ERR_EOF_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The status bit for completing receiving all the packets from host.</description>
            <name>IN_SUC_EOF_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The status bit for completing usage of a outlink descriptor.</description>
            <name>OUT_DONE_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The status bit for sending a packet to host done.</description>
            <name>OUT_EOF_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The status bit for sending all the packets to host done.</description>
            <name>OUT_TOTAL_EOF_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The status bit for infifo full error.</description>
            <name>INFIFO_FULL_ERR_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The status bit for outfifo empty error.</description>
            <name>OUTFIFO_EMPTY_ERR_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The status bit for SPI slave CMD6 interrupt.</description>
            <name>SLV_CMD6_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The status bit for SPI slave CMD7 interrupt.</description>
            <name>SLV_CMD7_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The status bit for SPI slave CMD8 interrupt.</description>
            <name>SLV_CMD8_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The status bit for SPI slave CMD9 interrupt.</description>
            <name>SLV_CMD9_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The status bit for SPI slave CMDA interrupt.</description>
            <name>SLV_CMDA_INT_ST</name>
          </field>
        </fields>
        <name>DMA_INT_ST</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x64</addressOffset>
        <description>SPI DMA interrupt clear register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The clear bit for lack of enough inlink descriptors. Can be configured in CONF state.</description>
            <name>INLINK_DSCR_EMPTY_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The clear bit for outlink descriptor error. Can be configured in CONF state.</description>
            <name>OUTLINK_DSCR_ERROR_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The clear bit for inlink descriptor error. Can be configured in CONF state.</description>
            <name>INLINK_DSCR_ERROR_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The clear bit for completing usage of a inlink descriptor. Can be configured in CONF state.</description>
            <name>IN_DONE_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The clear bit for receiving error. Can be configured in CONF state.</description>
            <name>IN_ERR_EOF_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The clear bit for completing receiving all the packets from host. Can be configured in CONF state.</description>
            <name>IN_SUC_EOF_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The clear bit for completing usage of a outlink descriptor. Can be configured in CONF state.</description>
            <name>OUT_DONE_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The clear bit for sending a packet to host done. Can be configured in CONF state.</description>
            <name>OUT_EOF_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The clear bit for sending all the packets to host done. Can be configured in CONF state.</description>
            <name>OUT_TOTAL_EOF_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: Clear SPI_INFIFO_FULL_ERR_INT_RAW. 0: not valid. Can be changed by CONF_buf.</description>
            <name>INFIFO_FULL_ERR_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: Clear SPI_OUTFIFO_EMPTY_ERR_INT_RAW signal. 0: not valid. Can be changed by CONF_buf.</description>
            <name>OUTFIFO_EMPTY_ERR_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The clear bit for SPI slave CMD6 interrupt.</description>
            <name>SLV_CMD6_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The clear bit for SPI slave CMD7 interrupt.</description>
            <name>SLV_CMD7_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The clear bit for SPI slave CMD8 interrupt.</description>
            <name>SLV_CMD8_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The clear bit for SPI slave CMD9 interrupt.</description>
            <name>SLV_CMD9_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The clear bit for SPI slave CMDA interrupt.</description>
            <name>SLV_CMDA_INT_CLR</name>
          </field>
        </fields>
        <name>DMA_INT_CLR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x68</addressOffset>
        <description>The latest SPI DMA  RX descriptor address receiving error</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The inlink descriptor address when spi dma produce receiving error.</description>
            <name>DMA_IN_ERR_EOF_DES_ADDR</name>
          </field>
        </fields>
        <name>IN_ERR_EOF_DES_ADDR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x6C</addressOffset>
        <description>The latest SPI DMA  eof RX descriptor address</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The last inlink descriptor address when spi dma produce from_suc_eof.</description>
            <name>DMA_IN_SUC_EOF_DES_ADDR</name>
          </field>
        </fields>
        <name>IN_SUC_EOF_DES_ADDR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x70</addressOffset>
        <description>Current SPI DMA RX descriptor pointer</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The content of current in descriptor pointer.</description>
            <name>DMA_INLINK_DSCR</name>
          </field>
        </fields>
        <name>INLINK_DSCR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x74</addressOffset>
        <description>Next SPI DMA RX descriptor pointer</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The content of next in descriptor pointer.</description>
            <name>DMA_INLINK_DSCR_BF0</name>
          </field>
        </fields>
        <name>INLINK_DSCR_BF0</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x78</addressOffset>
        <description>Current SPI DMA RX buffer pointer</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The content of current in descriptor data buffer pointer.</description>
            <name>DMA_INLINK_DSCR_BF1</name>
          </field>
        </fields>
        <name>INLINK_DSCR_BF1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x7C</addressOffset>
        <description>The latest SPI DMA  eof TX buffer address</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The address of buffer relative to the outlink descriptor that produce eof.</description>
            <name>DMA_OUT_EOF_BFR_DES_ADDR</name>
          </field>
        </fields>
        <name>OUT_EOF_BFR_DES_ADDR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x80</addressOffset>
        <description>The latest SPI DMA  eof TX descriptor address</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The last outlink descriptor address when spi dma produce to_eof.</description>
            <name>DMA_OUT_EOF_DES_ADDR</name>
          </field>
        </fields>
        <name>OUT_EOF_DES_ADDR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x84</addressOffset>
        <description>Current SPI DMA TX descriptor pointer</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The content of current out descriptor pointer.</description>
            <name>DMA_OUTLINK_DSCR</name>
          </field>
        </fields>
        <name>OUTLINK_DSCR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x88</addressOffset>
        <description>Next SPI DMA TX descriptor pointer</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The content of next out descriptor pointer.</description>
            <name>DMA_OUTLINK_DSCR_BF0</name>
          </field>
        </fields>
        <name>OUTLINK_DSCR_BF0</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8C</addressOffset>
        <description>Current SPI DMA TX buffer pointer</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The content of current out descriptor data buffer pointer.</description>
            <name>DMA_OUTLINK_DSCR_BF1</name>
          </field>
        </fields>
        <name>OUTLINK_DSCR_BF1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x90</addressOffset>
        <description>SPI DMA TX status</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x12</bitWidth>
            <description>SPI dma out descriptor address.</description>
            <name>DMA_OUTDSCR_ADDR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>SPI dma out descriptor state.</description>
            <name>DMA_OUTDSCR_STATE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>SPI dma out data state.</description>
            <name>DMA_OUT_STATE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x7</bitWidth>
            <description>The remains of SPI dma outfifo data.</description>
            <name>DMA_OUTFIFO_CNT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI dma outfifo is full.</description>
            <name>DMA_OUTFIFO_FULL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI dma outfifo is empty.</description>
            <name>DMA_OUTFIFO_EMPTY</name>
          </field>
        </fields>
        <name>DMA_OUTSTATUS</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x80000000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x94</addressOffset>
        <description>SPI DMA RX status</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x12</bitWidth>
            <description>SPI dma in descriptor address.</description>
            <name>DMA_INDSCR_ADDR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>SPI dma in descriptor state.</description>
            <name>DMA_INDSCR_STATE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>SPI dma in data state.</description>
            <name>DMA_IN_STATE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x7</bitWidth>
            <description>The remains of SPI dma infifo data.</description>
            <name>DMA_INFIFO_CNT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI dma infifo is full.</description>
            <name>DMA_INFIFO_FULL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI dma infifo is empty.</description>
            <name>DMA_INFIFO_EMPTY</name>
          </field>
        </fields>
        <name>DMA_INSTATUS</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x80000000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x98</addressOffset>
        <description>Data buffer 0</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>32 bits data buffer 0, transferred in the unit of byte. Byte addressable in slave half-duplex mode.</description>
            <name>BUF0</name>
          </field>
        </fields>
        <name>W0</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9C</addressOffset>
        <description>Data buffer 1</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>32 bits data buffer 1, transferred in the unit of byte. Byte addressable in slave half-duplex mode.</description>
            <name>BUF1</name>
          </field>
        </fields>
        <name>W1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA0</addressOffset>
        <description>Data buffer 2</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>32 bits data buffer 2, transferred in the unit of byte. Byte addressable in slave half-duplex mode.</description>
            <name>BUF2</name>
          </field>
        </fields>
        <name>W2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA4</addressOffset>
        <description>Data buffer 3</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>32 bits data buffer 3, transferred in the unit of byte. Byte addressable in slave half-duplex mode.</description>
            <name>BUF3</name>
          </field>
        </fields>
        <name>W3</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA8</addressOffset>
        <description>Data buffer 4</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>32 bits data buffer 4, transferred in the unit of byte. Byte addressable in slave half-duplex mode.</description>
            <name>BUF4</name>
          </field>
        </fields>
        <name>W4</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAC</addressOffset>
        <description>Data buffer 5</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>32 bits data buffer 5, transferred in the unit of byte. Byte addressable in slave half-duplex mode.</description>
            <name>BUF5</name>
          </field>
        </fields>
        <name>W5</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB0</addressOffset>
        <description>Data buffer 6</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>32 bits data buffer 6, transferred in the unit of byte. Byte addressable in slave half-duplex mode.</description>
            <name>BUF6</name>
          </field>
        </fields>
        <name>W6</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB4</addressOffset>
        <description>Data buffer 7</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>32 bits data buffer 7, transferred in the unit of byte. Byte addressable in slave half-duplex mode.</description>
            <name>BUF7</name>
          </field>
        </fields>
        <name>W7</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB8</addressOffset>
        <description>Data buffer 8</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>32 bits data buffer 8, transferred in the unit of byte. Byte addressable in slave half-duplex mode.</description>
            <name>BUF8</name>
          </field>
        </fields>
        <name>W8</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBC</addressOffset>
        <description>Data buffer 9</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>32 bits data buffer 9, transferred in the unit of byte. Byte addressable in slave half-duplex mode.</description>
            <name>BUF9</name>
          </field>
        </fields>
        <name>W9</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xC0</addressOffset>
        <description>Data buffer 10</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>32 bits data buffer 10, transferred in the unit of byte. Byte addressable in slave half-duplex mode.</description>
            <name>BUF10</name>
          </field>
        </fields>
        <name>W10</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xC4</addressOffset>
        <description>Data buffer 11</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>32 bits data buffer 11, transferred in the unit of byte. Byte addressable in slave half-duplex mode.</description>
            <name>BUF11</name>
          </field>
        </fields>
        <name>W11</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xC8</addressOffset>
        <description>Data buffer 12</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>32 bits data buffer 12, transferred in the unit of byte. Byte addressable in slave half-duplex mode.</description>
            <name>BUF12</name>
          </field>
        </fields>
        <name>W12</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xCC</addressOffset>
        <description>Data buffer 13</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>32 bits data buffer 13, transferred in the unit of byte. Byte addressable in slave half-duplex mode.</description>
            <name>BUF13</name>
          </field>
        </fields>
        <name>W13</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xD0</addressOffset>
        <description>Data buffer 14</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>32 bits data buffer 14, transferred in the unit of byte. Byte addressable in slave half-duplex mode.</description>
            <name>BUF14</name>
          </field>
        </fields>
        <name>W14</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xD4</addressOffset>
        <description>Data buffer 15</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>32 bits data buffer 15, transferred in the unit of byte. Byte addressable in slave half-duplex mode.</description>
            <name>BUF15</name>
          </field>
        </fields>
        <name>W15</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xD8</addressOffset>
        <description>Data buffer 16</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>32 bits data buffer 16, transferred in the unit of byte. Byte addressable in slave half-duplex mode.</description>
            <name>BUF16</name>
          </field>
        </fields>
        <name>W16</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xDC</addressOffset>
        <description>Data buffer 17</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>32 bits data buffer 17, transferred in the unit of byte. Byte addressable in slave half-duplex mode.</description>
            <name>BUF17</name>
          </field>
        </fields>
        <name>W17</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xE0</addressOffset>
        <description>SPI input delay mode configuration</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the input signals are delayed by system clock cycles, 0: input without delayed, 1: input with the posedge of clk_apb,2 input with the negedge of clk_apb, 3: input with the spi_clk. Can be configured in CONF state.</description>
            <name>DIN0_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the input signals are delayed by system clock cycles, 0: input without delayed, 1: input with the posedge of clk_apb,2 input with the negedge of clk_apb, 3: input with the spi_clk. Can be configured in CONF state.</description>
            <name>DIN1_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the input signals are delayed by system clock cycles, 0: input without delayed, 1: input with the posedge of clk_apb,2 input with the negedge of clk_apb, 3: input with the spi_clk. Can be configured in CONF state.</description>
            <name>DIN2_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the input signals are delayed by system clock cycles, 0: input without delayed, 1: input with the posedge of clk_apb,2 input with the negedge of clk_apb, 3: input with the spi_clk. Can be configured in CONF state.</description>
            <name>DIN3_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the input signals are delayed by system clock cycles, 0: input without delayed, 1: input with the posedge of clk_apb,2 input with the negedge of clk_apb, 3: input with the spi_clk. Can be configured in CONF state.</description>
            <name>DIN4_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the input signals are delayed by system clock cycles, 0: input without delayed, 1: input with the posedge of clk_apb,2 input with the negedge of clk_apb, 3: input with the spi_clk. Can be configured in CONF state.</description>
            <name>DIN5_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the input signals are delayed by system clock cycles, 0: input without delayed, 1: input with the posedge of clk_apb,2 input with the negedge of clk_apb, 3: input with the spi_clk. Can be configured in CONF state.</description>
            <name>DIN6_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the input signals are delayed by system clock cycles, 0: input without delayed, 1: input with the posedge of clk_apb,2 input with the negedge of clk_apb, 3: input with the spi_clk. Can be configured in CONF state.</description>
            <name>DIN7_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1:enable hclk in spi_timing.v.  0: disable it. Can be configured in CONF state.</description>
            <name>TIMING_CLK_ENA</name>
          </field>
        </fields>
        <name>DIN_MODE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xE4</addressOffset>
        <description>SPI input delay number configuration</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the input signals are delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,...  Can be configured in CONF state.</description>
            <name>DIN0_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the input signals are delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,...  Can be configured in CONF state.</description>
            <name>DIN1_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the input signals are delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,...  Can be configured in CONF state.</description>
            <name>DIN2_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the input signals are delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,...  Can be configured in CONF state.</description>
            <name>DIN3_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the input signals are delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,...  Can be configured in CONF state.</description>
            <name>DIN4_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the input signals are delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,...  Can be configured in CONF state.</description>
            <name>DIN5_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the input signals are delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,...  Can be configured in CONF state.</description>
            <name>DIN6_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the input signals are delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,...  Can be configured in CONF state.</description>
            <name>DIN7_NUM</name>
          </field>
        </fields>
        <name>DIN_NUM</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xE8</addressOffset>
        <description>SPI output delay mode configuration</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the output signals are delayed by system clock cycles, 0: output without delayed, 1: output with the posedge of clk_apb,2 output with the negedge of clk_apb, 3: output with the spi_clk. Can be configured in CONF state.</description>
            <name>DOUT0_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the output signals are delayed by system clock cycles, 0: output without delayed, 1: output with the posedge of clk_apb,2 output with the negedge of clk_apb, 3: output with the spi_clk. Can be configured in CONF state.</description>
            <name>DOUT1_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the output signals are delayed by system clock cycles, 0: output without delayed, 1: output with the posedge of clk_apb,2 output with the negedge of clk_apb, 3: output with the spi_clk. Can be configured in CONF state.</description>
            <name>DOUT2_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the output signals are delayed by system clock cycles, 0: output without delayed, 1: output with the posedge of clk_apb,2 output with the negedge of clk_apb, 3: output with the spi_clk. Can be configured in CONF state.</description>
            <name>DOUT3_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the output signals are delayed by system clock cycles, 0: output without delayed, 1: output with the posedge of clk_apb,2 output with the negedge of clk_apb, 3: output with the spi_clk. Can be configured in CONF state.</description>
            <name>DOUT4_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the output signals are delayed by system clock cycles, 0: output without delayed, 1: output with the posedge of clk_apb,2 output with the negedge of clk_apb, 3: output with the spi_clk. Can be configured in CONF state.</description>
            <name>DOUT5_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the output signals are delayed by system clock cycles, 0: output without delayed, 1: output with the posedge of clk_apb,2 output with the negedge of clk_apb, 3: output with the spi_clk. Can be configured in CONF state.</description>
            <name>DOUT6_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the output signals are delayed by system clock cycles, 0: output without delayed, 1: output with the posedge of clk_apb,2 output with the negedge of clk_apb, 3: output with the spi_clk. Can be configured in CONF state.</description>
            <name>DOUT7_MODE</name>
          </field>
        </fields>
        <name>DOUT_MODE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xEC</addressOffset>
        <description>SPI output delay number configuration</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the output signals are delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,... Can be configured in CONF state.</description>
            <name>DOUT0_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the output signals are delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,... Can be configured in CONF state.</description>
            <name>DOUT1_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the output signals are delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,... Can be configured in CONF state.</description>
            <name>DOUT2_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the output signals are delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,... Can be configured in CONF state.</description>
            <name>DOUT3_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the output signals are delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,... Can be configured in CONF state.</description>
            <name>DOUT4_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the output signals are delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,... Can be configured in CONF state.</description>
            <name>DOUT5_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the output signals are delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,... Can be configured in CONF state.</description>
            <name>DOUT6_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the output signals are delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,... Can be configured in CONF state.</description>
            <name>DOUT7_NUM</name>
          </field>
        </fields>
        <name>DOUT_NUM</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xF0</addressOffset>
        <description>LCD frame control register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xB</bitWidth>
            <description>It is the horizontal blank front porch of a frame. Can be configured in CONF state.</description>
            <name>LCD_HB_FRONT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>It is the vertical active height of a frame. Can be configured in CONF state.</description>
            <name>LCD_VA_HEIGHT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>It is the vertical total height of a frame. Can be configured in CONF state.</description>
            <name>LCD_VT_HEIGHT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: Enable LCD mode output vsync, hsync, de. 0: Disable. Can be configured in CONF state.</description>
            <name>LCD_MODE_EN</name>
          </field>
        </fields>
        <name>LCD_CTRL</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xF4</addressOffset>
        <description>LCD frame control1 register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>It is the vertical blank front porch of a frame. Can be configured in CONF state.</description>
            <name>LCD_VB_FRONT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0xC</bitWidth>
            <description>It is the horizontal active width of a frame. Can be configured in CONF state.</description>
            <name>LCD_HA_WIDTH</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0xC</bitWidth>
            <description>It is the horizontal total width of a frame. Can be configured in CONF state.</description>
            <name>LCD_HT_WIDTH</name>
          </field>
        </fields>
        <name>LCD_CTRL1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xF8</addressOffset>
        <description>LCD frame control2 register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x7</bitWidth>
            <description>It is the position of spi_vsync active pulse in a line. Can be configured in CONF state.</description>
            <name>LCD_VSYNC_WIDTH</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>It is the idle value of spi_vsync. Can be configured in CONF state.</description>
            <name>VSYNC_IDLE_POL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x7</bitWidth>
            <description>It is the position of spi_hsync active pulse in a line. Can be configured in CONF state.</description>
            <name>LCD_HSYNC_WIDTH</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>It is the idle value of spi_hsync. Can be configured in CONF state.</description>
            <name>HSYNC_IDLE_POL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>It is the position of spi_hsync active pulse in a line. Can be configured in CONF state.</description>
            <name>LCD_HSYNC_POSITION</name>
          </field>
        </fields>
        <name>LCD_CTRL2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10001</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xFC</addressOffset>
        <description>LCD delay number</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the output spi_dqs is delayed by system clock cycles, 0: output without delayed, 1: output with the posedge of clk_apb,2 output with the negedge of clk_apb, 3: output with the spi_clk. Can be configured in CONF state.</description>
            <name>D_DQS_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the output spi_cd is delayed by system clock cycles, 0: output without delayed, 1: output with the posedge of clk_apb,2 output with the negedge of clk_apb, 3: output with the spi_clk. Can be configured in CONF state.</description>
            <name>D_CD_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the output spi_de is delayed by system clock cycles, 0: output without delayed, 1: output with the posedge of clk_apb,2 output with the negedge of clk_apb, 3: output with the spi_clk. Can be configured in CONF state.</description>
            <name>D_DE_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the output spi_hsync is delayed by system clock cycles, 0: output without delayed, 1: output with the posedge of clk_apb,2 output with the negedge of clk_apb, 3: output with the spi_clk. Can be configured in CONF state.</description>
            <name>D_HSYNC_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the output spi_vsync is delayed by system clock cycles, 0: output without delayed, 1: output with the posedge of clk_apb,2 output with the negedge of clk_apb, 3: output with the spi_clk. Can be configured in CONF state.</description>
            <name>D_VSYNC_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>It is the idle value of spi_de.</description>
            <name>DE_IDLE_POL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: The pulse of spi_hsync is out in vertical blanking lines in seg-trans or one trans. 0: spi_hsync pulse is valid only in active region lines in seg-trans.</description>
            <name>HS_BLANK_EN</name>
          </field>
        </fields>
        <name>LCD_D_MODE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x100</addressOffset>
        <description>LCD delay mode</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the output spi_dqs is delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,... Can be configured in CONF state.</description>
            <name>D_DQS_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the output spi_cd is delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,... Can be configured in CONF state.</description>
            <name>D_CD_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the output spi_de is delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,... Can be configured in CONF state.</description>
            <name>D_DE_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the output spi_hsync is delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,... Can be configured in CONF state.</description>
            <name>D_HSYNC_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the output spi_vsync is delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,... Can be configured in CONF state.</description>
            <name>D_VSYNC_NUM</name>
          </field>
        </fields>
        <name>LCD_D_NUM</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3FC</addressOffset>
        <description>SPI version control</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1C</bitWidth>
            <description>SPI register version.</description>
            <name>DATE</name>
          </field>
        </fields>
        <name>REG_DATE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x1907240</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <resetMask>0xFFFFFFFF</resetMask>
    <resetValue>0x0</resetValue>
  </peripheral>
</peripherals>
<peripherals>
  <peripheral>
    <addressBlock>
      <offset>0x0</offset>
      <size>0x108</size>
      <usage>registers</usage>
    </addressBlock>
    <baseAddress>0x3F402000</baseAddress>
    <derivedFrom>SPI0</derivedFrom>
    <description>SPI (Serial Peripheral Interface) Controller</description>
    <groupName>SPI</groupName>
    <interrupts>
      <interrupt>
        <name>SPI1</name>
        <value>0x20</value>
      </interrupt>
    </interrupts>
    <name>SPI1</name>
    <registers>
      <register>
        <addressOffset>0x0</addressOffset>
        <description>Command control register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x17</bitWidth>
            <description>Define the spi_clk cycles of  SPI_CONF state. Can be configured in CONF state.</description>
            <name>CONF_BITLEN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>User define command enable.  An operation will be triggered when the bit is set. The bit will be cleared once the operation done.1: enable 0: disable. Can not be changed by CONF_buf.</description>
            <name>USR</name>
          </field>
        </fields>
        <name>CMD</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4</addressOffset>
        <description>Address value</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>[31:8]:address to slave, [7:0]:Reserved. Can be configured in CONF state.</description>
            <name>USR_ADDR_VALUE</name>
          </field>
        </fields>
        <name>ADDR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8</addressOffset>
        <description>SPI control register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set the bit to hold spi. The bit is combined with SPI_USR_PREP_HOLD,SPI_USR_CMD_HOLD,SPI_USR_ADDR_HOLD,SPI_USR_DUMMY_HOLD,SPI_USR_DIN_HOLD,SPI_USR_DOUT_HOLD and SPI_USR_HOLD_POL. Can be configured in CONF state.</description>
            <name>EXT_HOLD_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>In the dummy phase the signal level of spi is output by the spi controller. Can be configured in CONF state.</description>
            <name>DUMMY_OUT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Apply 2-bit mode during addr phase 1:enable 0: disable. Can be configured in CONF state.</description>
            <name>FADDR_DUAL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Apply 4-bit mode during addr phase 1:enable 0: disable. Can be configured in CONF state.</description>
            <name>FADDR_QUAD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Apply 8-bit mode during addr phase 1:enable 0: disable. Can be configured in CONF state.</description>
            <name>FADDR_OCT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Apply 2-bit mode during command phase 1:enable 0: disable. Can be configured in CONF state.</description>
            <name>FCMD_DUAL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Apply 4-bit mode during command phase 1:enable 0: disable. Can be configured in CONF state.</description>
            <name>FCMD_QUAD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Apply 8-bit mode during command phase 1:enable 0: disable. Can be configured in CONF state.</description>
            <name>FCMD_OCT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>In the read operations, read-data phase is in 2-bit mode. 1: enable 0: disable. Can be configured in CONF state.</description>
            <name>FREAD_DUAL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>In the read operations read-data phase is in 4-bit mode. 1: enable 0: disable.  Can be configured in CONF state.</description>
            <name>FREAD_QUAD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>In the read operations read-data phase is in 8-bit mode. 1: enable 0: disable.  Can be configured in CONF state.</description>
            <name>FREAD_OCT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to set MISO line polarity, 1: high 0, low. Can be configured in CONF state.</description>
            <name>Q_POL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to set MOSI line polarity, 1: high 0, low. Can be configured in CONF state.</description>
            <name>D_POL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Write protect signal output when SPI is idle.  1: output high, 0: output low.  Can be configured in CONF state.</description>
            <name>WP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>In read-data (MISO) phase 1: LSB first 0: MSB first. Can be configured in CONF state.</description>
            <name>RD_BIT_ORDER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>In command address write-data (MOSI) phases 1: LSB firs 0: MSB first. Can be configured in CONF state.</description>
            <name>WR_BIT_ORDER</name>
          </field>
        </fields>
        <name>CTRL</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x2C0000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xC</addressOffset>
        <description>SPI control register 1</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>SPI clock mode bits. 0: SPI clock is off when CS inactive 1: SPI clock is delayed one cycle after CS inactive 2: SPI clock is delayed two cycles after CS inactive 3: SPI clock is alwasy on. Can be configured in CONF state.</description>
            <name>CLK_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>{CPOL, CPHA},1: support spi clk mode 1 and 3, first edge output data B[0]/B[7].  0: support spi clk mode 0 and 2, first edge output data B[1]/B[6].</description>
            <name>CLK_MODE_13</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>It saves half a cycle when tsck is the same as rsck. 1: output data at rsck posedge   0: output data at tsck posedge</description>
            <name>RSCK_DATA_OUT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1:SPI_BUF16~SPI_BUF17 can be written   0:SPI_BUF16~SPI_BUF17 can not  be written. Can be configured in CONF state.</description>
            <name>W16_17_WR_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>SPI cs signal is delayed by spi clock cycles. Can be configured in CONF state.</description>
            <name>CS_HOLD_DELAY</name>
          </field>
        </fields>
        <name>CTRL1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x4010</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x10</addressOffset>
        <description>SPI control register 2</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xD</bitWidth>
            <description>(cycles+1) of prepare phase by spi clock this bits are combined with SPI_CS_SETUP bit. Can be configured in CONF state.</description>
            <name>CS_SETUP_TIME</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0xD</bitWidth>
            <description>delay cycles of cs pin by spi clock this bits are combined with SPI_CS_HOLD bit. Can be configured in CONF state.</description>
            <name>CS_HOLD_TIME</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>spi_cs signal is delayed by spi_clk . 0: zero 1: if SPI_CK_OUT_EDGE or SPI_CK_IDLE_EDGE is set 1 delayed by half cycle  else delayed by one cycle 2: if SPI_CK_OUT_EDGE or  SPI_CK_IDLE_EDGE is set 1 delayed by one cycle, else delayed by half cycle 3: delayed one cycle. Can be configured in CONF state.</description>
            <name>CS_DELAY_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>spi_cs signal is delayed by system clock cycles. Can be configured in CONF state.</description>
            <name>CS_DELAY_NUM</name>
          </field>
        </fields>
        <name>CTRL2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x2000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x14</addressOffset>
        <description>SPI clock control register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>In the master mode it must be equal to SPI_CLKCNT_N. In the slave mode it must be 0. Can be configured in CONF state.</description>
            <name>CLKCNT_L</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>In the master mode it must be floor((SPI_CLKCNT_N+1)/2-1). In the slave mode it must be 0. Can be configured in CONF state.</description>
            <name>CLKCNT_H</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>In the master mode it is the divider of spi_clk. So spi_clk frequency is system/(SPI_CLKDIV_PRE+1)/(SPI_CLKCNT_N+1). Can be configured in CONF state.</description>
            <name>CLKCNT_N</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0xD</bitWidth>
            <description>In the master mode it is pre-divider of spi_clk.  Can be configured in CONF state.</description>
            <name>CLKDIV_PRE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>In the master mode 1: spi_clk is eqaul to system 0: spi_clk is divided from system clock. Can be configured in CONF state.</description>
            <name>CLK_EQU_SYSCLK</name>
          </field>
        </fields>
        <name>CLOCK</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x80003043</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x18</addressOffset>
        <description>SPI USER control register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set the bit to enable full duplex communication. 1: enable 0: disable. Can be configured in CONF state.</description>
            <name>DOUTDIN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Both for master mode and slave mode. 1: spi controller is in QPI mode. 0: others. Can be configured in CONF state.</description>
            <name>QPI_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Just for master mode. 1: spi controller is in OPI mode (all in 8-bit mode). 0: others. Can be configured in CONF state.</description>
            <name>OPI_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>In the slave mode, this bit can be used to change the polarity of tsck. 0: tsck = spi_ck_i. 1:tsck = !spi_ck_i.</description>
            <name>TSCK_I_EDGE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>spi cs keep low when spi is in  done  phase. 1: enable 0: disable. Can be configured in CONF state.</description>
            <name>CS_HOLD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>spi cs is enable when spi is in  prepare  phase. 1: enable 0: disable. Can be configured in CONF state.</description>
            <name>CS_SETUP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>In the slave mode, this bit can be used to change the polarity of rsck. 0: rsck = !spi_ck_i. 1:rsck = spi_ck_i.</description>
            <name>RSCK_I_EDGE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>the bit combined with SPI_DOUT_MODE register to set mosi signal delay mode. Can be configured in CONF state.</description>
            <name>CK_OUT_EDGE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>In read-data (MISO) phase 1: big-endian 0: little_endian. Can be configured in CONF state.</description>
            <name>RD_BYTE_ORDER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>In command address write-data (MOSI) phases 1: big-endian 0: litte_endian. Can be configured in CONF state.</description>
            <name>WR_BYTE_ORDER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>In the write operations read-data phase is in 2-bit mode. Can be configured in CONF state.</description>
            <name>FWRITE_DUAL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>In the write operations read-data phase is in 4-bit mode. Can be configured in CONF state.</description>
            <name>FWRITE_QUAD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>In the write operations read-data phase is in 8-bit mode. Can be configured in CONF state.</description>
            <name>FWRITE_OCT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: Enable the DMA CONF phase of next seg-trans operation, which means seg-trans will continue. 0: The seg-trans will end after the current SPI seg-trans or this is not seg-trans mode. Can be configured in CONF state.</description>
            <name>USR_CONF_NXT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set the bit to enable 3-line half duplex communication mosi and miso signals share the same pin. 1: enable 0: disable. Can be configured in CONF state.</description>
            <name>SIO</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>It is combined with hold bits to set the polarity of spi hold line 1: spi will be held when spi hold line is high 0: spi will be held when spi hold line is low. Can be configured in CONF state.</description>
            <name>USR_HOLD_POL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>spi is hold at data out state the bit are combined with SPI_USR_HOLD_POL bit. Can be configured in CONF state.</description>
            <name>USR_DOUT_HOLD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>spi is hold at data in state the bit are combined with SPI_USR_HOLD_POL bit. Can be configured in CONF state.</description>
            <name>USR_DIN_HOLD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>spi is hold at dummy state the bit are combined with SPI_USR_HOLD_POL bit. Can be configured in CONF state.</description>
            <name>USR_DUMMY_HOLD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>spi is hold at address state the bit are combined with SPI_USR_HOLD_POL bit. Can be configured in CONF state.</description>
            <name>USR_ADDR_HOLD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>spi is hold at command state the bit are combined with SPI_USR_HOLD_POL bit. Can be configured in CONF state.</description>
            <name>USR_CMD_HOLD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>spi is hold at prepare state the bit are combined with SPI_USR_HOLD_POL bit. Can be configured in CONF state.</description>
            <name>USR_PREP_HOLD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>read-data phase only access to high-part of the buffer SPI_BUF8~SPI_BUF17. 1: enable 0: disable. Can be configured in CONF state.</description>
            <name>USR_MISO_HIGHPART</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>write-data phase only access to high-part of the buffer SPI_BUF8~SPI_BUF17. 1: enable 0: disable.  Can be configured in CONF state.</description>
            <name>USR_MOSI_HIGHPART</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>spi clock is disable in dummy phase when the bit is enable. Can be configured in CONF state.</description>
            <name>USR_DUMMY_IDLE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This bit enable the write-data phase of an operation. Can be configured in CONF state.</description>
            <name>USR_MOSI</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This bit enable the read-data phase of an operation. Can be configured in CONF state.</description>
            <name>USR_MISO</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This bit enable the dummy phase of an operation. Can be configured in CONF state.</description>
            <name>USR_DUMMY</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This bit enable the address phase of an operation. Can be configured in CONF state.</description>
            <name>USR_ADDR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This bit enable the command phase of an operation. Can be configured in CONF state.</description>
            <name>USR_COMMAND</name>
          </field>
        </fields>
        <name>USER</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x800000C0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1C</addressOffset>
        <description>SPI USER control register 1</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>The length in spi_clk cycles of dummy phase. The register value shall be (cycle_num-1). Can be configured in CONF state.</description>
            <name>USR_DUMMY_CYCLELEN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>The length in bits of address phase. The register value shall be (bit_num-1). Can be configured in CONF state.</description>
            <name>USR_ADDR_BITLEN</name>
          </field>
        </fields>
        <name>USER1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xB8000007</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x20</addressOffset>
        <description>SPI USER control register 2</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>The value of  command. Can be configured in CONF state.</description>
            <name>USR_COMMAND_VALUE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>The length in bits of command phase. The register value shall be (bit_num-1). Can be configured in CONF state.</description>
            <name>USR_COMMAND_BITLEN</name>
          </field>
        </fields>
        <name>USER2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x70000000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x24</addressOffset>
        <description>MOSI length</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x17</bitWidth>
            <description>The length in bits of write-data. The register value shall be (bit_num-1). Can be configured in CONF state.</description>
            <name>USR_MOSI_DBITLEN</name>
          </field>
        </fields>
        <name>MOSI_DLEN</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x28</addressOffset>
        <description>MISO length</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x17</bitWidth>
            <description>The length in bits of  read-data. The register value shall be (bit_num-1). Can be configured in CONF state.</description>
            <name>USR_MISO_DBITLEN</name>
          </field>
        </fields>
        <name>MISO_DLEN</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2C</addressOffset>
        <description>SPI misc register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI CS0 pin enable, 1: disable CS0, 0: SPI_CS0 signal is from/to CS0 pin. Can be configured in CONF state.</description>
            <name>CS0_DIS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI CS1 pin enable, 1: disable CS1, 0: SPI_CS1 signal is from/to CS1 pin. Can be configured in CONF state.</description>
            <name>CS1_DIS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI CS2 pin enable, 1: disable CS2, 0: SPI_CS2 signal is from/to CS2 pin. Can be configured in CONF state.</description>
            <name>CS2_DIS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI CS3 pin enable, 1: disable CS3, 0: SPI_CS3 signal is from/to CS3 pin. Can be configured in CONF state.</description>
            <name>CS3_DIS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI CS4 pin enable, 1: disable CS4, 0: SPI_CS4 signal is from/to CS4 pin. Can be configured in CONF state.</description>
            <name>CS4_DIS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI CS5 pin enable, 1: disable CS5, 0: SPI_CS5 signal is from/to CS5 pin. Can be configured in CONF state.</description>
            <name>CS5_DIS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: spi clk out disable,  0: spi clk out enable. Can be configured in CONF state.</description>
            <name>CK_DIS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>In the master mode the bits are the polarity of spi cs line, the value is equivalent to spi_cs ^ SPI_MASTER_CS_POL. Can be configured in CONF state.</description>
            <name>MASTER_CS_POL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: SPI master DTR mode is applied to SPI clk, data and spi_dqs.  0: SPI master DTR mode is  only applied to spi_dqs. This bit should be used with bit 17/18/19.</description>
            <name>CLK_DATA_DTR_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: SPI clk and data of SPI_DOUT and SPI_DIN state are in DTR mode, including master 1/2/4/8-bm.  0:  SPI clk and data of SPI_DOUT and SPI_DIN state are in STR mode. Can be configured in CONF state.</description>
            <name>DATA_DTR_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: SPI clk and data of SPI_SEND_ADDR state are in DTR mode, including master 1/2/4/8-bm.  0:  SPI clk and data of SPI_SEND_ADDR state are in STR mode. Can be configured in CONF state.</description>
            <name>ADDR_DTR_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: SPI clk and data of SPI_SEND_CMD state are in DTR mode, including master 1/2/4/8-bm.  0:  SPI clk and data of SPI_SEND_CMD state are in STR mode. Can be configured in CONF state.</description>
            <name>CMD_DTR_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: spi_cd = !SPI_CD_IDLE_EDGE when SPI_ST[3:0] is in SPI_DOUT or SPI_DIN state.  0: spi_cd = SPI_CD_IDLE_EDGE. Can be configured in CONF state.</description>
            <name>CD_DATA_SET</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: spi_cd = !SPI_CD_IDLE_EDGE when SPI_ST[3:0] is in SPI_DUMMY state.  0: spi_cd = SPI_CD_IDLE_EDGE. Can be configured in CONF state.</description>
            <name>CD_DUMMY_SET</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: spi_cd = !SPI_CD_IDLE_EDGE when SPI_ST[3:0] is in SPI_SEND_ADDR state.  0: spi_cd = SPI_CD_IDLE_EDGE. Can be configured in CONF state.</description>
            <name>CD_ADDR_SET</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>spi slave input cs polarity select. 1: inv  0: not change. Can be configured in CONF state.</description>
            <name>SLAVE_CS_POL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The default value of spi_dqs. Can be configured in CONF state.</description>
            <name>DQS_IDLE_EDGE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: spi_cd = !SPI_CD_IDLE_EDGE when SPI_ST[3:0] is in SPI_SEND_CMD state.  0: spi_cd = SPI_CD_IDLE_EDGE. Can be configured in CONF state.</description>
            <name>CD_CMD_SET</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The default value of spi_cd. Can be configured in CONF state.</description>
            <name>CD_IDLE_EDGE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: spi clk line is high when idle     0: spi clk line is low when idle. Can be configured in CONF state.</description>
            <name>CK_IDLE_EDGE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>spi cs line keep low when the bit is set. Can be configured in CONF state.</description>
            <name>CS_KEEP_ACTIVE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1:  spi quad input swap enable  0:  spi quad input swap disable. Can be configured in CONF state.</description>
            <name>QUAD_DIN_PIN_SWAP</name>
          </field>
        </fields>
        <name>MISC</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x3E</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x30</addressOffset>
        <description>SPI slave control register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt raw bit for the completion of any operation in both the master mode and the slave mode.  Can not be changed by CONF_buf.</description>
            <name>TRANS_DONE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI_SLV_RD_BUF_DONE Interrupt enable. 1: enable 0: disable. Can be configured in CONF state.</description>
            <name>INT_RD_BUF_DONE_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI_SLV_WR_BUF_DONE Interrupt enable. 1: enable 0: disable. Can be configured in CONF state.</description>
            <name>INT_WR_BUF_DONE_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI_SLV_RD_DMA_DONE Interrupt enable. 1: enable 0: disable. Can be configured in CONF state.</description>
            <name>INT_RD_DMA_DONE_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI_SLV_WR_DMA_DONE Interrupt enable. 1: enable 0: disable. Can be configured in CONF state.</description>
            <name>INT_WR_DMA_DONE_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI_TRANS_DONE Interrupt enable. 1: enable 0: disable. Can be configured in CONF state.</description>
            <name>INT_TRANS_DONE_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI_DMA_SEG_TRANS_DONE Interrupt enable. 1: enable 0: disable. Can be configured in CONF state.</description>
            <name>INT_DMA_SEG_TRANS_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: Enable seg magic value error interrupt. 0: Others. Can be configured in CONF state.</description>
            <name>SEG_MAGIC_ERR_INT_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>The operations counter in both the master mode and the slave mode.</description>
            <name>TRANS_CNT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI_TRANS_DONE auto clear enable, clear it 3 apb cycles after the pos edge of SPI_TRANS_DONE.  0:disable. 1: enable. Can be configured in CONF state.</description>
            <name>TRANS_DONE_AUTO_CLR_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set SPI work mode. 1: slave mode 0: master mode.</description>
            <name>MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Software reset enable, reset the spi clock line cs line and data lines. Can be configured in CONF state.</description>
            <name>SOFT_RESET</name>
          </field>
        </fields>
        <name>SLAVE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x200</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x34</addressOffset>
        <description>SPI slave control register 1</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: Clear SPI_SLV_ADDR_ERR. 0: not valid. Can be changed by CONF_buf.</description>
            <name>SLV_ADDR_ERR_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: Clear SPI_SLV_CMD_ERR. 0: not valid.  Can be changed by CONF_buf.</description>
            <name>SLV_CMD_ERR_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: spi slave QPI mode is not supported. 0: spi slave QPI mode is supported.</description>
            <name>SLV_NO_QPI_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: The address value of the last SPI transfer is not supported by SPI slave. 0: The address value is supported or no address value is received.</description>
            <name>SLV_ADDR_ERR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: The command value of the last SPI transfer is not supported by SPI slave. 0: The command value is supported or no command value is received.</description>
            <name>SLV_CMD_ERR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt raw bit for the completion of dma write operation in the slave mode.  Can not be changed by CONF_buf.</description>
            <name>SLV_WR_DMA_DONE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>In the slave mode it is the value of command.</description>
            <name>SLV_LAST_COMMAND</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>In the slave mode it is the value of address.</description>
            <name>SLV_LAST_ADDR</name>
          </field>
        </fields>
        <name>SLAVE1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x38</addressOffset>
        <description>SPI slave Wr_BUF interrupt and CONF control register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt raw bit for the completion of write-buffer operation in the slave mode.  Can not be changed by CONF_buf.</description>
            <name>SLV_WR_BUF_DONE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x7</bitWidth>
            <description>The basic spi_clk cycles of CONF state. The real cycle length of CONF state, if SPI_USR_CONF is enabled, is SPI_CONF_BASE_BITLEN[6:0] + SPI_CONF_BITLEN[23:0].</description>
            <name>CONF_BASE_BITLEN</name>
          </field>
        </fields>
        <name>SLV_WRBUF_DLEN</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xD8000000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3C</addressOffset>
        <description>SPI magic error and slave control register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x14</bitWidth>
            <description>In the slave mode it is the length in bytes for read operations. The register value shall be byte_num.</description>
            <name>SLV_DMA_RD_BYTELEN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt raw bit for the completion of read-buffer operation in the slave mode.  Can not be changed by CONF_buf.</description>
            <name>SLV_RD_BUF_DONE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: The recent magic value in CONF buffer is not right in master DMA seg-trans mode. 0: others.</description>
            <name>SEG_MAGIC_ERR</name>
          </field>
        </fields>
        <name>SLV_RDBUF_DLEN</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x40</addressOffset>
        <description>SPI interrupt control register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x14</bitWidth>
            <description>The full-duplex or half-duplex data byte length of the last SPI transfer in slave mode. In half-duplex mode, this value is controlled by bits [23:20].</description>
            <name>SLV_DATA_BYTELEN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: SPI_SLV_DATA_BYTELEN stores data byte length of master-read-slave data length in DMA controlled mode(Rd_DMA). 0: others</description>
            <name>SLV_RDDMA_BYTELEN_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: SPI_SLV_DATA_BYTELEN stores data byte length of master-write-to-slave data length in DMA controlled mode(Wr_DMA). 0: others</description>
            <name>SLV_WRDMA_BYTELEN_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: SPI_SLV_DATA_BYTELEN stores data byte length of master-read-slave data length in CPU controlled mode(Rd_BUF). 0: others</description>
            <name>SLV_RDBUF_BYTELEN_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: SPI_SLV_DATA_BYTELEN stores data byte length of master-write-to-slave data length in CPU controlled mode(Wr_BUF). 0: others</description>
            <name>SLV_WRBUF_BYTELEN_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>The magic value of BM table in master DMA seg-trans.</description>
            <name>DMA_SEG_MAGIC_VALUE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt raw bit for the completion of Rd-DMA operation in the slave mode.  Can not be changed by CONF_buf.</description>
            <name>SLV_RD_DMA_DONE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: Enable the DMA CONF phase of current seg-trans operation, which means seg-trans will start. 0: This is not seg-trans mode.</description>
            <name>USR_CONF</name>
          </field>
        </fields>
        <name>SLV_RD_BYTE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xA000000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x44</addressOffset>
        <description>SPI master status and DMA read byte control register</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>The status of spi state machine. 0: idle state, 1: preparation state, 2: send command state, 3: send data state, 4: red data state, 5:write data state, 6: wait state, 7: done state.</description>
            <name>ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x14</bitWidth>
            <description>Define the master DMA read byte length in non seg-conf-trans or seg-conf-trans mode. Invalid when SPI_RX_EOF_EN is 0. Can be configured in CONF state..</description>
            <name>MST_DMA_RD_BYTELEN</name>
          </field>
        </fields>
        <name>FSM</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x48</addressOffset>
        <description>SPI hold register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>This register is for two SPI masters to share the same cs clock and data signals. The bits of one SPI are set, if the other SPI is busy, the SPI will be hold. 1(3): hold at  idle  phase 2: hold at  prepare  phase. Can be configured in CONF state.</description>
            <name>INT_HOLD_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>spi hold output value, which should be used with SPI_HOLD_OUT_EN. Can be configured in CONF state.</description>
            <name>VAL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enable set spi output hold value to spi_hold_reg. It can be used to hold spi state machine with SPI_EXT_HOLD_EN and other usr hold signals. Can be configured in CONF state.</description>
            <name>OUT_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>set the hold cycles of output spi_hold signal when SPI_HOLD_OUT_EN is enable. Can be configured in CONF state.</description>
            <name>OUT_TIME</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1:  spi master DMA full-duplex/half-duplex seg-trans ends or slave half-duplex seg-trans ends. And data has been pushed to corresponding memory.  0:  seg-trans is not ended or not occurred.  Can not be changed by CONF_buf.</description>
            <name>DMA_SEG_TRANS_DONE</name>
          </field>
        </fields>
        <name>HOLD</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4C</addressOffset>
        <description>SPI DMA control register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to reset in dma fsm and in data fifo pointer.</description>
            <name>IN_RST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to reset out dma fsm and out data fifo pointer.</description>
            <name>OUT_RST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Reset spi dma ahb master fifo pointer.</description>
            <name>AHBM_FIFO_RST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Reset spi dma ahb master.</description>
            <name>AHBM_RST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set bit to test in link.</description>
            <name>IN_LOOP_TEST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set bit to test out link.</description>
            <name>OUT_LOOP_TEST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>when the bit is set, DMA continue to use the next inlink node when the length of inlink is 0.</description>
            <name>OUT_AUTO_WRBACK</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>out eof flag generation mode . 1: when dma pop all data from fifo  0:when ahb push all data to fifo.</description>
            <name>OUT_EOF_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>read descriptor use burst mode when read data for memory.</description>
            <name>OUTDSCR_BURST_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>read descriptor use burst mode when write data to memory.</description>
            <name>INDSCR_BURST_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>spi dma read data from memory in burst mode.</description>
            <name>OUT_DATA_BURST_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: Internal memory data transfer enable bit. Send SPI DMA RX buffer data to SPI DMA TX buffer. 0: Disable this function.</description>
            <name>MEM_TRANS_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>spi dma read data stop  when in continue tx/rx mode.</description>
            <name>DMA_RX_STOP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>spi dma write data stop when in continue tx/rx mode.</description>
            <name>DMA_TX_STOP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>spi dma continue tx/rx data.</description>
            <name>DMA_CONTINUE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: Clear spi_slv_seg_frt_pop_mask. 0 : others</description>
            <name>SLV_LAST_SEG_POP_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enable dma segment transfer in spi dma half slave mode. 1: enable. 0: disable.</description>
            <name>DMA_SLV_SEG_TRANS_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: spi_dma_infifo_full_vld is cleared by spi slave CMD5. 0: spi_dma_infifo_full_vld is cleared by SPI_TRANS_DONE.</description>
            <name>SLV_RX_SEG_TRANS_CLR_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: spi_dma_outfifo_empty_vld is cleared by spi slave CMD6. 0: spi_dma_outfifo_empty_vld is cleared by SPI_TRANS_DONE.</description>
            <name>SLV_TX_SEG_TRANS_CLR_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: SPI_IN_SUC_EOF_INT_RAW is set when the number of dma pushed data bytes is equal to the value of SPI_SLV_DMA_RD_BYTELEN[19:0]/ SPI_MST_DMA_RD_BYTELEN[19:0] in spi dma transition.  0: SPI_IN_SUC_EOF_INT_RAW is set by SPI_TRANS_DONE in non-seg-trans or SPI_DMA_SEG_TRANS_DONE in seg-trans.</description>
            <name>RX_EOF_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1:Clear spi_dma_infifo_full_vld. 0: Do not control it.</description>
            <name>DMA_INFIFO_FULL_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1:Clear spi_dma_outfifo_empty_vld. 0: Do not control it.</description>
            <name>DMA_OUTFIFO_EMPTY_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Select the external memory block size.</description>
            <name>EXT_MEM_BK_SIZE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: End slave seg-trans, which acts as 0x05 command. 2 or more end seg-trans signals will induce error in DMA RX.  0: others. Will be cleared in 1 APB CLK cycles by hardware..</description>
            <name>DMA_SEG_TRANS_CLR</name>
          </field>
        </fields>
        <name>DMA_CONF</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x200</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x50</addressOffset>
        <description>SPI DMA TX link configuration</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x14</bitWidth>
            <description>The address of the first outlink descriptor.</description>
            <name>OUTLINK_ADDR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set the bit to stop to use outlink descriptor.</description>
            <name>OUTLINK_STOP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set the bit to start to use outlink descriptor.</description>
            <name>OUTLINK_START</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set the bit to mount on new outlink descriptors.</description>
            <name>OUTLINK_RESTART</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>spi dma write data status bit.</description>
            <name>DMA_TX_ENA</name>
          </field>
        </fields>
        <name>DMA_OUT_LINK</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x54</addressOffset>
        <description>SPI DMA RX link configuration</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x14</bitWidth>
            <description>The address of the first inlink descriptor.</description>
            <name>INLINK_ADDR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>when the bit is set, the inlink descriptor returns to the first link node when a packet is error.</description>
            <name>INLINK_AUTO_RET</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set the bit to stop to use inlink descriptor.</description>
            <name>INLINK_STOP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set the bit to start to use inlink descriptor.</description>
            <name>INLINK_START</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set the bit to mount on new inlink descriptors.</description>
            <name>INLINK_RESTART</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI DMA read data status bit.</description>
            <name>DMA_RX_ENA</name>
          </field>
        </fields>
        <name>DMA_IN_LINK</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x58</addressOffset>
        <description>SPI DMA interrupt enable register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The enable bit for lack of enough inlink descriptors. Can be configured in CONF state.</description>
            <name>INLINK_DSCR_EMPTY_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The enable bit for outlink descriptor error. Can be configured in CONF state.</description>
            <name>OUTLINK_DSCR_ERROR_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The enable bit for inlink descriptor error. Can be configured in CONF state.</description>
            <name>INLINK_DSCR_ERROR_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The enable bit for completing usage of a inlink descriptor. Can be configured in CONF state.</description>
            <name>IN_DONE_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The enable bit for receiving error. Can be configured in CONF state.</description>
            <name>IN_ERR_EOF_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The enable bit for completing receiving all the packets from host. Can be configured in CONF state.</description>
            <name>IN_SUC_EOF_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The enable bit for completing usage of a outlink descriptor . Can be configured in CONF state.</description>
            <name>OUT_DONE_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The enable bit for sending a packet to host done. Can be configured in CONF state.</description>
            <name>OUT_EOF_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The enable bit for sending all the packets to host done. Can be configured in CONF state.</description>
            <name>OUT_TOTAL_EOF_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The enable bit for infifo full error interrupt.</description>
            <name>INFIFO_FULL_ERR_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The enable bit for outfifo empty error interrupt.</description>
            <name>OUTFIFO_EMPTY_ERR_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The enable bit for SPI slave CMD6 interrupt.</description>
            <name>SLV_CMD6_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The enable bit for SPI slave CMD7 interrupt.</description>
            <name>SLV_CMD7_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The enable bit for SPI slave CMD8 interrupt.</description>
            <name>SLV_CMD8_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The enable bit for SPI slave CMD9 interrupt.</description>
            <name>SLV_CMD9_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The enable bit for SPI slave CMDA interrupt.</description>
            <name>SLV_CMDA_INT_ENA</name>
          </field>
        </fields>
        <name>DMA_INT_ENA</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5C</addressOffset>
        <description>SPI DMA interrupt raw register</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw bit for lack of enough inlink descriptors. Can be configured in CONF state.</description>
            <name>INLINK_DSCR_EMPTY_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw bit for outlink descriptor error. Can be configured in CONF state.</description>
            <name>OUTLINK_DSCR_ERROR_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw bit for inlink descriptor error. Can be configured in CONF state.</description>
            <name>INLINK_DSCR_ERROR_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw bit for completing usage of a inlink descriptor. Can be configured in CONF state.</description>
            <name>IN_DONE_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw bit for receiving error. Can be configured in CONF state.</description>
            <name>IN_ERR_EOF_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw bit for completing receiving all the packets from host. Can be configured in CONF state.</description>
            <name>IN_SUC_EOF_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw bit for completing usage of a outlink descriptor. Can be configured in CONF state.</description>
            <name>OUT_DONE_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw bit for sending a packet to host done. Can be configured in CONF state.</description>
            <name>OUT_EOF_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw bit for sending all the packets to host done. Can be configured in CONF state.</description>
            <name>OUT_TOTAL_EOF_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1:SPI_DMA_INFIFO_FULL and spi_push_data_prep are valid, which means that DMA Rx buffer is full but push is valid.  0: Others.  Can not be changed by CONF_buf.</description>
            <name>INFIFO_FULL_ERR_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1:SPI_DMA_OUTFIFO_EMPTY and spi_pop_data_prep are valid, which means that there is no data to pop but pop is valid.  0: Others.  Can not be changed by CONF_buf.</description>
            <name>OUTFIFO_EMPTY_ERR_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw bit for SPI slave CMD6 interrupt.</description>
            <name>SLV_CMD6_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw bit for SPI slave CMD7 interrupt.</description>
            <name>SLV_CMD7_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw bit for SPI slave CMD8 interrupt.</description>
            <name>SLV_CMD8_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw bit for SPI slave CMD9 interrupt.</description>
            <name>SLV_CMD9_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw bit for SPI slave CMDA interrupt.</description>
            <name>SLV_CMDA_INT_RAW</name>
          </field>
        </fields>
        <name>DMA_INT_RAW</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x60</addressOffset>
        <description>SPI DMA interrupt status register</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The status bit for lack of enough inlink descriptors.</description>
            <name>INLINK_DSCR_EMPTY_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The status bit for outlink descriptor error.</description>
            <name>OUTLINK_DSCR_ERROR_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The status bit for inlink descriptor error.</description>
            <name>INLINK_DSCR_ERROR_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The status bit for completing usage of a inlink descriptor.</description>
            <name>IN_DONE_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The status bit for receiving error.</description>
            <name>IN_ERR_EOF_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The status bit for completing receiving all the packets from host.</description>
            <name>IN_SUC_EOF_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The status bit for completing usage of a outlink descriptor.</description>
            <name>OUT_DONE_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The status bit for sending a packet to host done.</description>
            <name>OUT_EOF_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The status bit for sending all the packets to host done.</description>
            <name>OUT_TOTAL_EOF_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The status bit for infifo full error.</description>
            <name>INFIFO_FULL_ERR_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The status bit for outfifo empty error.</description>
            <name>OUTFIFO_EMPTY_ERR_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The status bit for SPI slave CMD6 interrupt.</description>
            <name>SLV_CMD6_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The status bit for SPI slave CMD7 interrupt.</description>
            <name>SLV_CMD7_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The status bit for SPI slave CMD8 interrupt.</description>
            <name>SLV_CMD8_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The status bit for SPI slave CMD9 interrupt.</description>
            <name>SLV_CMD9_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The status bit for SPI slave CMDA interrupt.</description>
            <name>SLV_CMDA_INT_ST</name>
          </field>
        </fields>
        <name>DMA_INT_ST</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x64</addressOffset>
        <description>SPI DMA interrupt clear register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The clear bit for lack of enough inlink descriptors. Can be configured in CONF state.</description>
            <name>INLINK_DSCR_EMPTY_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The clear bit for outlink descriptor error. Can be configured in CONF state.</description>
            <name>OUTLINK_DSCR_ERROR_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The clear bit for inlink descriptor error. Can be configured in CONF state.</description>
            <name>INLINK_DSCR_ERROR_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The clear bit for completing usage of a inlink descriptor. Can be configured in CONF state.</description>
            <name>IN_DONE_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The clear bit for receiving error. Can be configured in CONF state.</description>
            <name>IN_ERR_EOF_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The clear bit for completing receiving all the packets from host. Can be configured in CONF state.</description>
            <name>IN_SUC_EOF_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The clear bit for completing usage of a outlink descriptor. Can be configured in CONF state.</description>
            <name>OUT_DONE_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The clear bit for sending a packet to host done. Can be configured in CONF state.</description>
            <name>OUT_EOF_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The clear bit for sending all the packets to host done. Can be configured in CONF state.</description>
            <name>OUT_TOTAL_EOF_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: Clear SPI_INFIFO_FULL_ERR_INT_RAW. 0: not valid. Can be changed by CONF_buf.</description>
            <name>INFIFO_FULL_ERR_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: Clear SPI_OUTFIFO_EMPTY_ERR_INT_RAW signal. 0: not valid. Can be changed by CONF_buf.</description>
            <name>OUTFIFO_EMPTY_ERR_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The clear bit for SPI slave CMD6 interrupt.</description>
            <name>SLV_CMD6_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The clear bit for SPI slave CMD7 interrupt.</description>
            <name>SLV_CMD7_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The clear bit for SPI slave CMD8 interrupt.</description>
            <name>SLV_CMD8_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The clear bit for SPI slave CMD9 interrupt.</description>
            <name>SLV_CMD9_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The clear bit for SPI slave CMDA interrupt.</description>
            <name>SLV_CMDA_INT_CLR</name>
          </field>
        </fields>
        <name>DMA_INT_CLR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x68</addressOffset>
        <description>The latest SPI DMA  RX descriptor address receiving error</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The inlink descriptor address when spi dma produce receiving error.</description>
            <name>DMA_IN_ERR_EOF_DES_ADDR</name>
          </field>
        </fields>
        <name>IN_ERR_EOF_DES_ADDR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x6C</addressOffset>
        <description>The latest SPI DMA  eof RX descriptor address</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The last inlink descriptor address when spi dma produce from_suc_eof.</description>
            <name>DMA_IN_SUC_EOF_DES_ADDR</name>
          </field>
        </fields>
        <name>IN_SUC_EOF_DES_ADDR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x70</addressOffset>
        <description>Current SPI DMA RX descriptor pointer</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The content of current in descriptor pointer.</description>
            <name>DMA_INLINK_DSCR</name>
          </field>
        </fields>
        <name>INLINK_DSCR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x74</addressOffset>
        <description>Next SPI DMA RX descriptor pointer</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The content of next in descriptor pointer.</description>
            <name>DMA_INLINK_DSCR_BF0</name>
          </field>
        </fields>
        <name>INLINK_DSCR_BF0</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x78</addressOffset>
        <description>Current SPI DMA RX buffer pointer</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The content of current in descriptor data buffer pointer.</description>
            <name>DMA_INLINK_DSCR_BF1</name>
          </field>
        </fields>
        <name>INLINK_DSCR_BF1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x7C</addressOffset>
        <description>The latest SPI DMA  eof TX buffer address</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The address of buffer relative to the outlink descriptor that produce eof.</description>
            <name>DMA_OUT_EOF_BFR_DES_ADDR</name>
          </field>
        </fields>
        <name>OUT_EOF_BFR_DES_ADDR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x80</addressOffset>
        <description>The latest SPI DMA  eof TX descriptor address</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The last outlink descriptor address when spi dma produce to_eof.</description>
            <name>DMA_OUT_EOF_DES_ADDR</name>
          </field>
        </fields>
        <name>OUT_EOF_DES_ADDR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x84</addressOffset>
        <description>Current SPI DMA TX descriptor pointer</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The content of current out descriptor pointer.</description>
            <name>DMA_OUTLINK_DSCR</name>
          </field>
        </fields>
        <name>OUTLINK_DSCR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x88</addressOffset>
        <description>Next SPI DMA TX descriptor pointer</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The content of next out descriptor pointer.</description>
            <name>DMA_OUTLINK_DSCR_BF0</name>
          </field>
        </fields>
        <name>OUTLINK_DSCR_BF0</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8C</addressOffset>
        <description>Current SPI DMA TX buffer pointer</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The content of current out descriptor data buffer pointer.</description>
            <name>DMA_OUTLINK_DSCR_BF1</name>
          </field>
        </fields>
        <name>OUTLINK_DSCR_BF1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x90</addressOffset>
        <description>SPI DMA TX status</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x12</bitWidth>
            <description>SPI dma out descriptor address.</description>
            <name>DMA_OUTDSCR_ADDR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>SPI dma out descriptor state.</description>
            <name>DMA_OUTDSCR_STATE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>SPI dma out data state.</description>
            <name>DMA_OUT_STATE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x7</bitWidth>
            <description>The remains of SPI dma outfifo data.</description>
            <name>DMA_OUTFIFO_CNT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI dma outfifo is full.</description>
            <name>DMA_OUTFIFO_FULL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI dma outfifo is empty.</description>
            <name>DMA_OUTFIFO_EMPTY</name>
          </field>
        </fields>
        <name>DMA_OUTSTATUS</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x80000000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x94</addressOffset>
        <description>SPI DMA RX status</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x12</bitWidth>
            <description>SPI dma in descriptor address.</description>
            <name>DMA_INDSCR_ADDR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>SPI dma in descriptor state.</description>
            <name>DMA_INDSCR_STATE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>SPI dma in data state.</description>
            <name>DMA_IN_STATE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x7</bitWidth>
            <description>The remains of SPI dma infifo data.</description>
            <name>DMA_INFIFO_CNT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI dma infifo is full.</description>
            <name>DMA_INFIFO_FULL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI dma infifo is empty.</description>
            <name>DMA_INFIFO_EMPTY</name>
          </field>
        </fields>
        <name>DMA_INSTATUS</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x80000000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x98</addressOffset>
        <description>Data buffer 0</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>32 bits data buffer 0, transferred in the unit of byte. Byte addressable in slave half-duplex mode.</description>
            <name>BUF0</name>
          </field>
        </fields>
        <name>W0</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9C</addressOffset>
        <description>Data buffer 1</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>32 bits data buffer 1, transferred in the unit of byte. Byte addressable in slave half-duplex mode.</description>
            <name>BUF1</name>
          </field>
        </fields>
        <name>W1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA0</addressOffset>
        <description>Data buffer 2</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>32 bits data buffer 2, transferred in the unit of byte. Byte addressable in slave half-duplex mode.</description>
            <name>BUF2</name>
          </field>
        </fields>
        <name>W2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA4</addressOffset>
        <description>Data buffer 3</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>32 bits data buffer 3, transferred in the unit of byte. Byte addressable in slave half-duplex mode.</description>
            <name>BUF3</name>
          </field>
        </fields>
        <name>W3</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA8</addressOffset>
        <description>Data buffer 4</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>32 bits data buffer 4, transferred in the unit of byte. Byte addressable in slave half-duplex mode.</description>
            <name>BUF4</name>
          </field>
        </fields>
        <name>W4</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAC</addressOffset>
        <description>Data buffer 5</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>32 bits data buffer 5, transferred in the unit of byte. Byte addressable in slave half-duplex mode.</description>
            <name>BUF5</name>
          </field>
        </fields>
        <name>W5</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB0</addressOffset>
        <description>Data buffer 6</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>32 bits data buffer 6, transferred in the unit of byte. Byte addressable in slave half-duplex mode.</description>
            <name>BUF6</name>
          </field>
        </fields>
        <name>W6</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB4</addressOffset>
        <description>Data buffer 7</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>32 bits data buffer 7, transferred in the unit of byte. Byte addressable in slave half-duplex mode.</description>
            <name>BUF7</name>
          </field>
        </fields>
        <name>W7</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB8</addressOffset>
        <description>Data buffer 8</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>32 bits data buffer 8, transferred in the unit of byte. Byte addressable in slave half-duplex mode.</description>
            <name>BUF8</name>
          </field>
        </fields>
        <name>W8</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBC</addressOffset>
        <description>Data buffer 9</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>32 bits data buffer 9, transferred in the unit of byte. Byte addressable in slave half-duplex mode.</description>
            <name>BUF9</name>
          </field>
        </fields>
        <name>W9</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xC0</addressOffset>
        <description>Data buffer 10</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>32 bits data buffer 10, transferred in the unit of byte. Byte addressable in slave half-duplex mode.</description>
            <name>BUF10</name>
          </field>
        </fields>
        <name>W10</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xC4</addressOffset>
        <description>Data buffer 11</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>32 bits data buffer 11, transferred in the unit of byte. Byte addressable in slave half-duplex mode.</description>
            <name>BUF11</name>
          </field>
        </fields>
        <name>W11</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xC8</addressOffset>
        <description>Data buffer 12</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>32 bits data buffer 12, transferred in the unit of byte. Byte addressable in slave half-duplex mode.</description>
            <name>BUF12</name>
          </field>
        </fields>
        <name>W12</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xCC</addressOffset>
        <description>Data buffer 13</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>32 bits data buffer 13, transferred in the unit of byte. Byte addressable in slave half-duplex mode.</description>
            <name>BUF13</name>
          </field>
        </fields>
        <name>W13</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xD0</addressOffset>
        <description>Data buffer 14</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>32 bits data buffer 14, transferred in the unit of byte. Byte addressable in slave half-duplex mode.</description>
            <name>BUF14</name>
          </field>
        </fields>
        <name>W14</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xD4</addressOffset>
        <description>Data buffer 15</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>32 bits data buffer 15, transferred in the unit of byte. Byte addressable in slave half-duplex mode.</description>
            <name>BUF15</name>
          </field>
        </fields>
        <name>W15</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xD8</addressOffset>
        <description>Data buffer 16</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>32 bits data buffer 16, transferred in the unit of byte. Byte addressable in slave half-duplex mode.</description>
            <name>BUF16</name>
          </field>
        </fields>
        <name>W16</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xDC</addressOffset>
        <description>Data buffer 17</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>32 bits data buffer 17, transferred in the unit of byte. Byte addressable in slave half-duplex mode.</description>
            <name>BUF17</name>
          </field>
        </fields>
        <name>W17</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xE0</addressOffset>
        <description>SPI input delay mode configuration</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the input signals are delayed by system clock cycles, 0: input without delayed, 1: input with the posedge of clk_apb,2 input with the negedge of clk_apb, 3: input with the spi_clk. Can be configured in CONF state.</description>
            <name>DIN0_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the input signals are delayed by system clock cycles, 0: input without delayed, 1: input with the posedge of clk_apb,2 input with the negedge of clk_apb, 3: input with the spi_clk. Can be configured in CONF state.</description>
            <name>DIN1_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the input signals are delayed by system clock cycles, 0: input without delayed, 1: input with the posedge of clk_apb,2 input with the negedge of clk_apb, 3: input with the spi_clk. Can be configured in CONF state.</description>
            <name>DIN2_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the input signals are delayed by system clock cycles, 0: input without delayed, 1: input with the posedge of clk_apb,2 input with the negedge of clk_apb, 3: input with the spi_clk. Can be configured in CONF state.</description>
            <name>DIN3_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the input signals are delayed by system clock cycles, 0: input without delayed, 1: input with the posedge of clk_apb,2 input with the negedge of clk_apb, 3: input with the spi_clk. Can be configured in CONF state.</description>
            <name>DIN4_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the input signals are delayed by system clock cycles, 0: input without delayed, 1: input with the posedge of clk_apb,2 input with the negedge of clk_apb, 3: input with the spi_clk. Can be configured in CONF state.</description>
            <name>DIN5_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the input signals are delayed by system clock cycles, 0: input without delayed, 1: input with the posedge of clk_apb,2 input with the negedge of clk_apb, 3: input with the spi_clk. Can be configured in CONF state.</description>
            <name>DIN6_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the input signals are delayed by system clock cycles, 0: input without delayed, 1: input with the posedge of clk_apb,2 input with the negedge of clk_apb, 3: input with the spi_clk. Can be configured in CONF state.</description>
            <name>DIN7_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1:enable hclk in spi_timing.v.  0: disable it. Can be configured in CONF state.</description>
            <name>TIMING_CLK_ENA</name>
          </field>
        </fields>
        <name>DIN_MODE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xE4</addressOffset>
        <description>SPI input delay number configuration</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the input signals are delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,...  Can be configured in CONF state.</description>
            <name>DIN0_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the input signals are delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,...  Can be configured in CONF state.</description>
            <name>DIN1_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the input signals are delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,...  Can be configured in CONF state.</description>
            <name>DIN2_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the input signals are delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,...  Can be configured in CONF state.</description>
            <name>DIN3_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the input signals are delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,...  Can be configured in CONF state.</description>
            <name>DIN4_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the input signals are delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,...  Can be configured in CONF state.</description>
            <name>DIN5_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the input signals are delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,...  Can be configured in CONF state.</description>
            <name>DIN6_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the input signals are delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,...  Can be configured in CONF state.</description>
            <name>DIN7_NUM</name>
          </field>
        </fields>
        <name>DIN_NUM</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xE8</addressOffset>
        <description>SPI output delay mode configuration</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the output signals are delayed by system clock cycles, 0: output without delayed, 1: output with the posedge of clk_apb,2 output with the negedge of clk_apb, 3: output with the spi_clk. Can be configured in CONF state.</description>
            <name>DOUT0_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the output signals are delayed by system clock cycles, 0: output without delayed, 1: output with the posedge of clk_apb,2 output with the negedge of clk_apb, 3: output with the spi_clk. Can be configured in CONF state.</description>
            <name>DOUT1_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the output signals are delayed by system clock cycles, 0: output without delayed, 1: output with the posedge of clk_apb,2 output with the negedge of clk_apb, 3: output with the spi_clk. Can be configured in CONF state.</description>
            <name>DOUT2_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the output signals are delayed by system clock cycles, 0: output without delayed, 1: output with the posedge of clk_apb,2 output with the negedge of clk_apb, 3: output with the spi_clk. Can be configured in CONF state.</description>
            <name>DOUT3_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the output signals are delayed by system clock cycles, 0: output without delayed, 1: output with the posedge of clk_apb,2 output with the negedge of clk_apb, 3: output with the spi_clk. Can be configured in CONF state.</description>
            <name>DOUT4_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the output signals are delayed by system clock cycles, 0: output without delayed, 1: output with the posedge of clk_apb,2 output with the negedge of clk_apb, 3: output with the spi_clk. Can be configured in CONF state.</description>
            <name>DOUT5_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the output signals are delayed by system clock cycles, 0: output without delayed, 1: output with the posedge of clk_apb,2 output with the negedge of clk_apb, 3: output with the spi_clk. Can be configured in CONF state.</description>
            <name>DOUT6_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the output signals are delayed by system clock cycles, 0: output without delayed, 1: output with the posedge of clk_apb,2 output with the negedge of clk_apb, 3: output with the spi_clk. Can be configured in CONF state.</description>
            <name>DOUT7_MODE</name>
          </field>
        </fields>
        <name>DOUT_MODE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xEC</addressOffset>
        <description>SPI output delay number configuration</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the output signals are delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,... Can be configured in CONF state.</description>
            <name>DOUT0_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the output signals are delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,... Can be configured in CONF state.</description>
            <name>DOUT1_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the output signals are delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,... Can be configured in CONF state.</description>
            <name>DOUT2_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the output signals are delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,... Can be configured in CONF state.</description>
            <name>DOUT3_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the output signals are delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,... Can be configured in CONF state.</description>
            <name>DOUT4_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the output signals are delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,... Can be configured in CONF state.</description>
            <name>DOUT5_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the output signals are delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,... Can be configured in CONF state.</description>
            <name>DOUT6_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the output signals are delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,... Can be configured in CONF state.</description>
            <name>DOUT7_NUM</name>
          </field>
        </fields>
        <name>DOUT_NUM</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xF0</addressOffset>
        <description>LCD frame control register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xB</bitWidth>
            <description>It is the horizontal blank front porch of a frame. Can be configured in CONF state.</description>
            <name>LCD_HB_FRONT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>It is the vertical active height of a frame. Can be configured in CONF state.</description>
            <name>LCD_VA_HEIGHT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>It is the vertical total height of a frame. Can be configured in CONF state.</description>
            <name>LCD_VT_HEIGHT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: Enable LCD mode output vsync, hsync, de. 0: Disable. Can be configured in CONF state.</description>
            <name>LCD_MODE_EN</name>
          </field>
        </fields>
        <name>LCD_CTRL</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xF4</addressOffset>
        <description>LCD frame control1 register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>It is the vertical blank front porch of a frame. Can be configured in CONF state.</description>
            <name>LCD_VB_FRONT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0xC</bitWidth>
            <description>It is the horizontal active width of a frame. Can be configured in CONF state.</description>
            <name>LCD_HA_WIDTH</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0xC</bitWidth>
            <description>It is the horizontal total width of a frame. Can be configured in CONF state.</description>
            <name>LCD_HT_WIDTH</name>
          </field>
        </fields>
        <name>LCD_CTRL1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xF8</addressOffset>
        <description>LCD frame control2 register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x7</bitWidth>
            <description>It is the position of spi_vsync active pulse in a line. Can be configured in CONF state.</description>
            <name>LCD_VSYNC_WIDTH</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>It is the idle value of spi_vsync. Can be configured in CONF state.</description>
            <name>VSYNC_IDLE_POL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x7</bitWidth>
            <description>It is the position of spi_hsync active pulse in a line. Can be configured in CONF state.</description>
            <name>LCD_HSYNC_WIDTH</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>It is the idle value of spi_hsync. Can be configured in CONF state.</description>
            <name>HSYNC_IDLE_POL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>It is the position of spi_hsync active pulse in a line. Can be configured in CONF state.</description>
            <name>LCD_HSYNC_POSITION</name>
          </field>
        </fields>
        <name>LCD_CTRL2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10001</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xFC</addressOffset>
        <description>LCD delay number</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the output spi_dqs is delayed by system clock cycles, 0: output without delayed, 1: output with the posedge of clk_apb,2 output with the negedge of clk_apb, 3: output with the spi_clk. Can be configured in CONF state.</description>
            <name>D_DQS_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the output spi_cd is delayed by system clock cycles, 0: output without delayed, 1: output with the posedge of clk_apb,2 output with the negedge of clk_apb, 3: output with the spi_clk. Can be configured in CONF state.</description>
            <name>D_CD_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the output spi_de is delayed by system clock cycles, 0: output without delayed, 1: output with the posedge of clk_apb,2 output with the negedge of clk_apb, 3: output with the spi_clk. Can be configured in CONF state.</description>
            <name>D_DE_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the output spi_hsync is delayed by system clock cycles, 0: output without delayed, 1: output with the posedge of clk_apb,2 output with the negedge of clk_apb, 3: output with the spi_clk. Can be configured in CONF state.</description>
            <name>D_HSYNC_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the output spi_vsync is delayed by system clock cycles, 0: output without delayed, 1: output with the posedge of clk_apb,2 output with the negedge of clk_apb, 3: output with the spi_clk. Can be configured in CONF state.</description>
            <name>D_VSYNC_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>It is the idle value of spi_de.</description>
            <name>DE_IDLE_POL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: The pulse of spi_hsync is out in vertical blanking lines in seg-trans or one trans. 0: spi_hsync pulse is valid only in active region lines in seg-trans.</description>
            <name>HS_BLANK_EN</name>
          </field>
        </fields>
        <name>LCD_D_MODE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x100</addressOffset>
        <description>LCD delay mode</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the output spi_dqs is delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,... Can be configured in CONF state.</description>
            <name>D_DQS_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the output spi_cd is delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,... Can be configured in CONF state.</description>
            <name>D_CD_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the output spi_de is delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,... Can be configured in CONF state.</description>
            <name>D_DE_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the output spi_hsync is delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,... Can be configured in CONF state.</description>
            <name>D_HSYNC_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the output spi_vsync is delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,... Can be configured in CONF state.</description>
            <name>D_VSYNC_NUM</name>
          </field>
        </fields>
        <name>LCD_D_NUM</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3FC</addressOffset>
        <description>SPI version control</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1C</bitWidth>
            <description>SPI register version.</description>
            <name>DATE</name>
          </field>
        </fields>
        <name>REG_DATE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x1907240</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <resetMask>0xFFFFFFFF</resetMask>
    <resetValue>0x0</resetValue>
  </peripheral>
</peripherals>
<peripherals>
  <peripheral>
    <addressBlock>
      <offset>0x0</offset>
      <size>0x108</size>
      <usage>registers</usage>
    </addressBlock>
    <baseAddress>0x3F424000</baseAddress>
    <derivedFrom>SPI0</derivedFrom>
    <description>SPI (Serial Peripheral Interface) Controller</description>
    <groupName>SPI</groupName>
    <interrupts>
      <interrupt>
        <name>SPI2</name>
        <value>0x21</value>
      </interrupt>
    </interrupts>
    <interrupts>
      <interrupt>
        <name>SPI2_DMA</name>
        <value>0x39</value>
      </interrupt>
    </interrupts>
    <name>SPI2</name>
    <registers>
      <register>
        <addressOffset>0x0</addressOffset>
        <description>Command control register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x17</bitWidth>
            <description>Define the spi_clk cycles of  SPI_CONF state. Can be configured in CONF state.</description>
            <name>CONF_BITLEN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>User define command enable.  An operation will be triggered when the bit is set. The bit will be cleared once the operation done.1: enable 0: disable. Can not be changed by CONF_buf.</description>
            <name>USR</name>
          </field>
        </fields>
        <name>CMD</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4</addressOffset>
        <description>Address value</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>[31:8]:address to slave, [7:0]:Reserved. Can be configured in CONF state.</description>
            <name>USR_ADDR_VALUE</name>
          </field>
        </fields>
        <name>ADDR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8</addressOffset>
        <description>SPI control register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set the bit to hold spi. The bit is combined with SPI_USR_PREP_HOLD,SPI_USR_CMD_HOLD,SPI_USR_ADDR_HOLD,SPI_USR_DUMMY_HOLD,SPI_USR_DIN_HOLD,SPI_USR_DOUT_HOLD and SPI_USR_HOLD_POL. Can be configured in CONF state.</description>
            <name>EXT_HOLD_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>In the dummy phase the signal level of spi is output by the spi controller. Can be configured in CONF state.</description>
            <name>DUMMY_OUT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Apply 2-bit mode during addr phase 1:enable 0: disable. Can be configured in CONF state.</description>
            <name>FADDR_DUAL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Apply 4-bit mode during addr phase 1:enable 0: disable. Can be configured in CONF state.</description>
            <name>FADDR_QUAD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Apply 8-bit mode during addr phase 1:enable 0: disable. Can be configured in CONF state.</description>
            <name>FADDR_OCT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Apply 2-bit mode during command phase 1:enable 0: disable. Can be configured in CONF state.</description>
            <name>FCMD_DUAL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Apply 4-bit mode during command phase 1:enable 0: disable. Can be configured in CONF state.</description>
            <name>FCMD_QUAD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Apply 8-bit mode during command phase 1:enable 0: disable. Can be configured in CONF state.</description>
            <name>FCMD_OCT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>In the read operations, read-data phase is in 2-bit mode. 1: enable 0: disable. Can be configured in CONF state.</description>
            <name>FREAD_DUAL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>In the read operations read-data phase is in 4-bit mode. 1: enable 0: disable.  Can be configured in CONF state.</description>
            <name>FREAD_QUAD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>In the read operations read-data phase is in 8-bit mode. 1: enable 0: disable.  Can be configured in CONF state.</description>
            <name>FREAD_OCT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to set MISO line polarity, 1: high 0, low. Can be configured in CONF state.</description>
            <name>Q_POL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to set MOSI line polarity, 1: high 0, low. Can be configured in CONF state.</description>
            <name>D_POL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Write protect signal output when SPI is idle.  1: output high, 0: output low.  Can be configured in CONF state.</description>
            <name>WP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>In read-data (MISO) phase 1: LSB first 0: MSB first. Can be configured in CONF state.</description>
            <name>RD_BIT_ORDER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>In command address write-data (MOSI) phases 1: LSB firs 0: MSB first. Can be configured in CONF state.</description>
            <name>WR_BIT_ORDER</name>
          </field>
        </fields>
        <name>CTRL</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x2C0000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xC</addressOffset>
        <description>SPI control register 1</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>SPI clock mode bits. 0: SPI clock is off when CS inactive 1: SPI clock is delayed one cycle after CS inactive 2: SPI clock is delayed two cycles after CS inactive 3: SPI clock is alwasy on. Can be configured in CONF state.</description>
            <name>CLK_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>{CPOL, CPHA},1: support spi clk mode 1 and 3, first edge output data B[0]/B[7].  0: support spi clk mode 0 and 2, first edge output data B[1]/B[6].</description>
            <name>CLK_MODE_13</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>It saves half a cycle when tsck is the same as rsck. 1: output data at rsck posedge   0: output data at tsck posedge</description>
            <name>RSCK_DATA_OUT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1:SPI_BUF16~SPI_BUF17 can be written   0:SPI_BUF16~SPI_BUF17 can not  be written. Can be configured in CONF state.</description>
            <name>W16_17_WR_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>SPI cs signal is delayed by spi clock cycles. Can be configured in CONF state.</description>
            <name>CS_HOLD_DELAY</name>
          </field>
        </fields>
        <name>CTRL1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x4010</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x10</addressOffset>
        <description>SPI control register 2</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xD</bitWidth>
            <description>(cycles+1) of prepare phase by spi clock this bits are combined with SPI_CS_SETUP bit. Can be configured in CONF state.</description>
            <name>CS_SETUP_TIME</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0xD</bitWidth>
            <description>delay cycles of cs pin by spi clock this bits are combined with SPI_CS_HOLD bit. Can be configured in CONF state.</description>
            <name>CS_HOLD_TIME</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>spi_cs signal is delayed by spi_clk . 0: zero 1: if SPI_CK_OUT_EDGE or SPI_CK_IDLE_EDGE is set 1 delayed by half cycle  else delayed by one cycle 2: if SPI_CK_OUT_EDGE or  SPI_CK_IDLE_EDGE is set 1 delayed by one cycle, else delayed by half cycle 3: delayed one cycle. Can be configured in CONF state.</description>
            <name>CS_DELAY_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>spi_cs signal is delayed by system clock cycles. Can be configured in CONF state.</description>
            <name>CS_DELAY_NUM</name>
          </field>
        </fields>
        <name>CTRL2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x2000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x14</addressOffset>
        <description>SPI clock control register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>In the master mode it must be equal to SPI_CLKCNT_N. In the slave mode it must be 0. Can be configured in CONF state.</description>
            <name>CLKCNT_L</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>In the master mode it must be floor((SPI_CLKCNT_N+1)/2-1). In the slave mode it must be 0. Can be configured in CONF state.</description>
            <name>CLKCNT_H</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>In the master mode it is the divider of spi_clk. So spi_clk frequency is system/(SPI_CLKDIV_PRE+1)/(SPI_CLKCNT_N+1). Can be configured in CONF state.</description>
            <name>CLKCNT_N</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0xD</bitWidth>
            <description>In the master mode it is pre-divider of spi_clk.  Can be configured in CONF state.</description>
            <name>CLKDIV_PRE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>In the master mode 1: spi_clk is eqaul to system 0: spi_clk is divided from system clock. Can be configured in CONF state.</description>
            <name>CLK_EQU_SYSCLK</name>
          </field>
        </fields>
        <name>CLOCK</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x80003043</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x18</addressOffset>
        <description>SPI USER control register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set the bit to enable full duplex communication. 1: enable 0: disable. Can be configured in CONF state.</description>
            <name>DOUTDIN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Both for master mode and slave mode. 1: spi controller is in QPI mode. 0: others. Can be configured in CONF state.</description>
            <name>QPI_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Just for master mode. 1: spi controller is in OPI mode (all in 8-bit mode). 0: others. Can be configured in CONF state.</description>
            <name>OPI_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>In the slave mode, this bit can be used to change the polarity of tsck. 0: tsck = spi_ck_i. 1:tsck = !spi_ck_i.</description>
            <name>TSCK_I_EDGE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>spi cs keep low when spi is in  done  phase. 1: enable 0: disable. Can be configured in CONF state.</description>
            <name>CS_HOLD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>spi cs is enable when spi is in  prepare  phase. 1: enable 0: disable. Can be configured in CONF state.</description>
            <name>CS_SETUP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>In the slave mode, this bit can be used to change the polarity of rsck. 0: rsck = !spi_ck_i. 1:rsck = spi_ck_i.</description>
            <name>RSCK_I_EDGE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>the bit combined with SPI_DOUT_MODE register to set mosi signal delay mode. Can be configured in CONF state.</description>
            <name>CK_OUT_EDGE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>In read-data (MISO) phase 1: big-endian 0: little_endian. Can be configured in CONF state.</description>
            <name>RD_BYTE_ORDER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>In command address write-data (MOSI) phases 1: big-endian 0: litte_endian. Can be configured in CONF state.</description>
            <name>WR_BYTE_ORDER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>In the write operations read-data phase is in 2-bit mode. Can be configured in CONF state.</description>
            <name>FWRITE_DUAL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>In the write operations read-data phase is in 4-bit mode. Can be configured in CONF state.</description>
            <name>FWRITE_QUAD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>In the write operations read-data phase is in 8-bit mode. Can be configured in CONF state.</description>
            <name>FWRITE_OCT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: Enable the DMA CONF phase of next seg-trans operation, which means seg-trans will continue. 0: The seg-trans will end after the current SPI seg-trans or this is not seg-trans mode. Can be configured in CONF state.</description>
            <name>USR_CONF_NXT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set the bit to enable 3-line half duplex communication mosi and miso signals share the same pin. 1: enable 0: disable. Can be configured in CONF state.</description>
            <name>SIO</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>It is combined with hold bits to set the polarity of spi hold line 1: spi will be held when spi hold line is high 0: spi will be held when spi hold line is low. Can be configured in CONF state.</description>
            <name>USR_HOLD_POL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>spi is hold at data out state the bit are combined with SPI_USR_HOLD_POL bit. Can be configured in CONF state.</description>
            <name>USR_DOUT_HOLD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>spi is hold at data in state the bit are combined with SPI_USR_HOLD_POL bit. Can be configured in CONF state.</description>
            <name>USR_DIN_HOLD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>spi is hold at dummy state the bit are combined with SPI_USR_HOLD_POL bit. Can be configured in CONF state.</description>
            <name>USR_DUMMY_HOLD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>spi is hold at address state the bit are combined with SPI_USR_HOLD_POL bit. Can be configured in CONF state.</description>
            <name>USR_ADDR_HOLD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>spi is hold at command state the bit are combined with SPI_USR_HOLD_POL bit. Can be configured in CONF state.</description>
            <name>USR_CMD_HOLD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>spi is hold at prepare state the bit are combined with SPI_USR_HOLD_POL bit. Can be configured in CONF state.</description>
            <name>USR_PREP_HOLD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>read-data phase only access to high-part of the buffer SPI_BUF8~SPI_BUF17. 1: enable 0: disable. Can be configured in CONF state.</description>
            <name>USR_MISO_HIGHPART</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>write-data phase only access to high-part of the buffer SPI_BUF8~SPI_BUF17. 1: enable 0: disable.  Can be configured in CONF state.</description>
            <name>USR_MOSI_HIGHPART</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>spi clock is disable in dummy phase when the bit is enable. Can be configured in CONF state.</description>
            <name>USR_DUMMY_IDLE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This bit enable the write-data phase of an operation. Can be configured in CONF state.</description>
            <name>USR_MOSI</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This bit enable the read-data phase of an operation. Can be configured in CONF state.</description>
            <name>USR_MISO</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This bit enable the dummy phase of an operation. Can be configured in CONF state.</description>
            <name>USR_DUMMY</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This bit enable the address phase of an operation. Can be configured in CONF state.</description>
            <name>USR_ADDR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This bit enable the command phase of an operation. Can be configured in CONF state.</description>
            <name>USR_COMMAND</name>
          </field>
        </fields>
        <name>USER</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x800000C0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1C</addressOffset>
        <description>SPI USER control register 1</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>The length in spi_clk cycles of dummy phase. The register value shall be (cycle_num-1). Can be configured in CONF state.</description>
            <name>USR_DUMMY_CYCLELEN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>The length in bits of address phase. The register value shall be (bit_num-1). Can be configured in CONF state.</description>
            <name>USR_ADDR_BITLEN</name>
          </field>
        </fields>
        <name>USER1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xB8000007</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x20</addressOffset>
        <description>SPI USER control register 2</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>The value of  command. Can be configured in CONF state.</description>
            <name>USR_COMMAND_VALUE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>The length in bits of command phase. The register value shall be (bit_num-1). Can be configured in CONF state.</description>
            <name>USR_COMMAND_BITLEN</name>
          </field>
        </fields>
        <name>USER2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x70000000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x24</addressOffset>
        <description>MOSI length</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x17</bitWidth>
            <description>The length in bits of write-data. The register value shall be (bit_num-1). Can be configured in CONF state.</description>
            <name>USR_MOSI_DBITLEN</name>
          </field>
        </fields>
        <name>MOSI_DLEN</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x28</addressOffset>
        <description>MISO length</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x17</bitWidth>
            <description>The length in bits of  read-data. The register value shall be (bit_num-1). Can be configured in CONF state.</description>
            <name>USR_MISO_DBITLEN</name>
          </field>
        </fields>
        <name>MISO_DLEN</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2C</addressOffset>
        <description>SPI misc register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI CS0 pin enable, 1: disable CS0, 0: SPI_CS0 signal is from/to CS0 pin. Can be configured in CONF state.</description>
            <name>CS0_DIS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI CS1 pin enable, 1: disable CS1, 0: SPI_CS1 signal is from/to CS1 pin. Can be configured in CONF state.</description>
            <name>CS1_DIS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI CS2 pin enable, 1: disable CS2, 0: SPI_CS2 signal is from/to CS2 pin. Can be configured in CONF state.</description>
            <name>CS2_DIS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI CS3 pin enable, 1: disable CS3, 0: SPI_CS3 signal is from/to CS3 pin. Can be configured in CONF state.</description>
            <name>CS3_DIS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI CS4 pin enable, 1: disable CS4, 0: SPI_CS4 signal is from/to CS4 pin. Can be configured in CONF state.</description>
            <name>CS4_DIS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI CS5 pin enable, 1: disable CS5, 0: SPI_CS5 signal is from/to CS5 pin. Can be configured in CONF state.</description>
            <name>CS5_DIS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: spi clk out disable,  0: spi clk out enable. Can be configured in CONF state.</description>
            <name>CK_DIS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>In the master mode the bits are the polarity of spi cs line, the value is equivalent to spi_cs ^ SPI_MASTER_CS_POL. Can be configured in CONF state.</description>
            <name>MASTER_CS_POL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: SPI master DTR mode is applied to SPI clk, data and spi_dqs.  0: SPI master DTR mode is  only applied to spi_dqs. This bit should be used with bit 17/18/19.</description>
            <name>CLK_DATA_DTR_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: SPI clk and data of SPI_DOUT and SPI_DIN state are in DTR mode, including master 1/2/4/8-bm.  0:  SPI clk and data of SPI_DOUT and SPI_DIN state are in STR mode. Can be configured in CONF state.</description>
            <name>DATA_DTR_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: SPI clk and data of SPI_SEND_ADDR state are in DTR mode, including master 1/2/4/8-bm.  0:  SPI clk and data of SPI_SEND_ADDR state are in STR mode. Can be configured in CONF state.</description>
            <name>ADDR_DTR_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: SPI clk and data of SPI_SEND_CMD state are in DTR mode, including master 1/2/4/8-bm.  0:  SPI clk and data of SPI_SEND_CMD state are in STR mode. Can be configured in CONF state.</description>
            <name>CMD_DTR_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: spi_cd = !SPI_CD_IDLE_EDGE when SPI_ST[3:0] is in SPI_DOUT or SPI_DIN state.  0: spi_cd = SPI_CD_IDLE_EDGE. Can be configured in CONF state.</description>
            <name>CD_DATA_SET</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: spi_cd = !SPI_CD_IDLE_EDGE when SPI_ST[3:0] is in SPI_DUMMY state.  0: spi_cd = SPI_CD_IDLE_EDGE. Can be configured in CONF state.</description>
            <name>CD_DUMMY_SET</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: spi_cd = !SPI_CD_IDLE_EDGE when SPI_ST[3:0] is in SPI_SEND_ADDR state.  0: spi_cd = SPI_CD_IDLE_EDGE. Can be configured in CONF state.</description>
            <name>CD_ADDR_SET</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>spi slave input cs polarity select. 1: inv  0: not change. Can be configured in CONF state.</description>
            <name>SLAVE_CS_POL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The default value of spi_dqs. Can be configured in CONF state.</description>
            <name>DQS_IDLE_EDGE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: spi_cd = !SPI_CD_IDLE_EDGE when SPI_ST[3:0] is in SPI_SEND_CMD state.  0: spi_cd = SPI_CD_IDLE_EDGE. Can be configured in CONF state.</description>
            <name>CD_CMD_SET</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The default value of spi_cd. Can be configured in CONF state.</description>
            <name>CD_IDLE_EDGE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: spi clk line is high when idle     0: spi clk line is low when idle. Can be configured in CONF state.</description>
            <name>CK_IDLE_EDGE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>spi cs line keep low when the bit is set. Can be configured in CONF state.</description>
            <name>CS_KEEP_ACTIVE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1:  spi quad input swap enable  0:  spi quad input swap disable. Can be configured in CONF state.</description>
            <name>QUAD_DIN_PIN_SWAP</name>
          </field>
        </fields>
        <name>MISC</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x3E</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x30</addressOffset>
        <description>SPI slave control register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt raw bit for the completion of any operation in both the master mode and the slave mode.  Can not be changed by CONF_buf.</description>
            <name>TRANS_DONE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI_SLV_RD_BUF_DONE Interrupt enable. 1: enable 0: disable. Can be configured in CONF state.</description>
            <name>INT_RD_BUF_DONE_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI_SLV_WR_BUF_DONE Interrupt enable. 1: enable 0: disable. Can be configured in CONF state.</description>
            <name>INT_WR_BUF_DONE_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI_SLV_RD_DMA_DONE Interrupt enable. 1: enable 0: disable. Can be configured in CONF state.</description>
            <name>INT_RD_DMA_DONE_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI_SLV_WR_DMA_DONE Interrupt enable. 1: enable 0: disable. Can be configured in CONF state.</description>
            <name>INT_WR_DMA_DONE_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI_TRANS_DONE Interrupt enable. 1: enable 0: disable. Can be configured in CONF state.</description>
            <name>INT_TRANS_DONE_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI_DMA_SEG_TRANS_DONE Interrupt enable. 1: enable 0: disable. Can be configured in CONF state.</description>
            <name>INT_DMA_SEG_TRANS_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: Enable seg magic value error interrupt. 0: Others. Can be configured in CONF state.</description>
            <name>SEG_MAGIC_ERR_INT_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>The operations counter in both the master mode and the slave mode.</description>
            <name>TRANS_CNT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI_TRANS_DONE auto clear enable, clear it 3 apb cycles after the pos edge of SPI_TRANS_DONE.  0:disable. 1: enable. Can be configured in CONF state.</description>
            <name>TRANS_DONE_AUTO_CLR_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set SPI work mode. 1: slave mode 0: master mode.</description>
            <name>MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Software reset enable, reset the spi clock line cs line and data lines. Can be configured in CONF state.</description>
            <name>SOFT_RESET</name>
          </field>
        </fields>
        <name>SLAVE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x200</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x34</addressOffset>
        <description>SPI slave control register 1</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: Clear SPI_SLV_ADDR_ERR. 0: not valid. Can be changed by CONF_buf.</description>
            <name>SLV_ADDR_ERR_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: Clear SPI_SLV_CMD_ERR. 0: not valid.  Can be changed by CONF_buf.</description>
            <name>SLV_CMD_ERR_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: spi slave QPI mode is not supported. 0: spi slave QPI mode is supported.</description>
            <name>SLV_NO_QPI_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: The address value of the last SPI transfer is not supported by SPI slave. 0: The address value is supported or no address value is received.</description>
            <name>SLV_ADDR_ERR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: The command value of the last SPI transfer is not supported by SPI slave. 0: The command value is supported or no command value is received.</description>
            <name>SLV_CMD_ERR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt raw bit for the completion of dma write operation in the slave mode.  Can not be changed by CONF_buf.</description>
            <name>SLV_WR_DMA_DONE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>In the slave mode it is the value of command.</description>
            <name>SLV_LAST_COMMAND</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>In the slave mode it is the value of address.</description>
            <name>SLV_LAST_ADDR</name>
          </field>
        </fields>
        <name>SLAVE1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x38</addressOffset>
        <description>SPI slave Wr_BUF interrupt and CONF control register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt raw bit for the completion of write-buffer operation in the slave mode.  Can not be changed by CONF_buf.</description>
            <name>SLV_WR_BUF_DONE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x7</bitWidth>
            <description>The basic spi_clk cycles of CONF state. The real cycle length of CONF state, if SPI_USR_CONF is enabled, is SPI_CONF_BASE_BITLEN[6:0] + SPI_CONF_BITLEN[23:0].</description>
            <name>CONF_BASE_BITLEN</name>
          </field>
        </fields>
        <name>SLV_WRBUF_DLEN</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xD8000000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3C</addressOffset>
        <description>SPI magic error and slave control register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x14</bitWidth>
            <description>In the slave mode it is the length in bytes for read operations. The register value shall be byte_num.</description>
            <name>SLV_DMA_RD_BYTELEN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt raw bit for the completion of read-buffer operation in the slave mode.  Can not be changed by CONF_buf.</description>
            <name>SLV_RD_BUF_DONE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: The recent magic value in CONF buffer is not right in master DMA seg-trans mode. 0: others.</description>
            <name>SEG_MAGIC_ERR</name>
          </field>
        </fields>
        <name>SLV_RDBUF_DLEN</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x40</addressOffset>
        <description>SPI interrupt control register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x14</bitWidth>
            <description>The full-duplex or half-duplex data byte length of the last SPI transfer in slave mode. In half-duplex mode, this value is controlled by bits [23:20].</description>
            <name>SLV_DATA_BYTELEN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: SPI_SLV_DATA_BYTELEN stores data byte length of master-read-slave data length in DMA controlled mode(Rd_DMA). 0: others</description>
            <name>SLV_RDDMA_BYTELEN_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: SPI_SLV_DATA_BYTELEN stores data byte length of master-write-to-slave data length in DMA controlled mode(Wr_DMA). 0: others</description>
            <name>SLV_WRDMA_BYTELEN_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: SPI_SLV_DATA_BYTELEN stores data byte length of master-read-slave data length in CPU controlled mode(Rd_BUF). 0: others</description>
            <name>SLV_RDBUF_BYTELEN_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: SPI_SLV_DATA_BYTELEN stores data byte length of master-write-to-slave data length in CPU controlled mode(Wr_BUF). 0: others</description>
            <name>SLV_WRBUF_BYTELEN_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>The magic value of BM table in master DMA seg-trans.</description>
            <name>DMA_SEG_MAGIC_VALUE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt raw bit for the completion of Rd-DMA operation in the slave mode.  Can not be changed by CONF_buf.</description>
            <name>SLV_RD_DMA_DONE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: Enable the DMA CONF phase of current seg-trans operation, which means seg-trans will start. 0: This is not seg-trans mode.</description>
            <name>USR_CONF</name>
          </field>
        </fields>
        <name>SLV_RD_BYTE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xA000000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x44</addressOffset>
        <description>SPI master status and DMA read byte control register</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>The status of spi state machine. 0: idle state, 1: preparation state, 2: send command state, 3: send data state, 4: red data state, 5:write data state, 6: wait state, 7: done state.</description>
            <name>ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x14</bitWidth>
            <description>Define the master DMA read byte length in non seg-conf-trans or seg-conf-trans mode. Invalid when SPI_RX_EOF_EN is 0. Can be configured in CONF state..</description>
            <name>MST_DMA_RD_BYTELEN</name>
          </field>
        </fields>
        <name>FSM</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x48</addressOffset>
        <description>SPI hold register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>This register is for two SPI masters to share the same cs clock and data signals. The bits of one SPI are set, if the other SPI is busy, the SPI will be hold. 1(3): hold at  idle  phase 2: hold at  prepare  phase. Can be configured in CONF state.</description>
            <name>INT_HOLD_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>spi hold output value, which should be used with SPI_HOLD_OUT_EN. Can be configured in CONF state.</description>
            <name>VAL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enable set spi output hold value to spi_hold_reg. It can be used to hold spi state machine with SPI_EXT_HOLD_EN and other usr hold signals. Can be configured in CONF state.</description>
            <name>OUT_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>set the hold cycles of output spi_hold signal when SPI_HOLD_OUT_EN is enable. Can be configured in CONF state.</description>
            <name>OUT_TIME</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1:  spi master DMA full-duplex/half-duplex seg-trans ends or slave half-duplex seg-trans ends. And data has been pushed to corresponding memory.  0:  seg-trans is not ended or not occurred.  Can not be changed by CONF_buf.</description>
            <name>DMA_SEG_TRANS_DONE</name>
          </field>
        </fields>
        <name>HOLD</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4C</addressOffset>
        <description>SPI DMA control register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to reset in dma fsm and in data fifo pointer.</description>
            <name>IN_RST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to reset out dma fsm and out data fifo pointer.</description>
            <name>OUT_RST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Reset spi dma ahb master fifo pointer.</description>
            <name>AHBM_FIFO_RST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Reset spi dma ahb master.</description>
            <name>AHBM_RST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set bit to test in link.</description>
            <name>IN_LOOP_TEST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set bit to test out link.</description>
            <name>OUT_LOOP_TEST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>when the bit is set, DMA continue to use the next inlink node when the length of inlink is 0.</description>
            <name>OUT_AUTO_WRBACK</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>out eof flag generation mode . 1: when dma pop all data from fifo  0:when ahb push all data to fifo.</description>
            <name>OUT_EOF_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>read descriptor use burst mode when read data for memory.</description>
            <name>OUTDSCR_BURST_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>read descriptor use burst mode when write data to memory.</description>
            <name>INDSCR_BURST_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>spi dma read data from memory in burst mode.</description>
            <name>OUT_DATA_BURST_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: Internal memory data transfer enable bit. Send SPI DMA RX buffer data to SPI DMA TX buffer. 0: Disable this function.</description>
            <name>MEM_TRANS_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>spi dma read data stop  when in continue tx/rx mode.</description>
            <name>DMA_RX_STOP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>spi dma write data stop when in continue tx/rx mode.</description>
            <name>DMA_TX_STOP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>spi dma continue tx/rx data.</description>
            <name>DMA_CONTINUE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: Clear spi_slv_seg_frt_pop_mask. 0 : others</description>
            <name>SLV_LAST_SEG_POP_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enable dma segment transfer in spi dma half slave mode. 1: enable. 0: disable.</description>
            <name>DMA_SLV_SEG_TRANS_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: spi_dma_infifo_full_vld is cleared by spi slave CMD5. 0: spi_dma_infifo_full_vld is cleared by SPI_TRANS_DONE.</description>
            <name>SLV_RX_SEG_TRANS_CLR_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: spi_dma_outfifo_empty_vld is cleared by spi slave CMD6. 0: spi_dma_outfifo_empty_vld is cleared by SPI_TRANS_DONE.</description>
            <name>SLV_TX_SEG_TRANS_CLR_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: SPI_IN_SUC_EOF_INT_RAW is set when the number of dma pushed data bytes is equal to the value of SPI_SLV_DMA_RD_BYTELEN[19:0]/ SPI_MST_DMA_RD_BYTELEN[19:0] in spi dma transition.  0: SPI_IN_SUC_EOF_INT_RAW is set by SPI_TRANS_DONE in non-seg-trans or SPI_DMA_SEG_TRANS_DONE in seg-trans.</description>
            <name>RX_EOF_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1:Clear spi_dma_infifo_full_vld. 0: Do not control it.</description>
            <name>DMA_INFIFO_FULL_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1:Clear spi_dma_outfifo_empty_vld. 0: Do not control it.</description>
            <name>DMA_OUTFIFO_EMPTY_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Select the external memory block size.</description>
            <name>EXT_MEM_BK_SIZE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: End slave seg-trans, which acts as 0x05 command. 2 or more end seg-trans signals will induce error in DMA RX.  0: others. Will be cleared in 1 APB CLK cycles by hardware..</description>
            <name>DMA_SEG_TRANS_CLR</name>
          </field>
        </fields>
        <name>DMA_CONF</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x200</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x50</addressOffset>
        <description>SPI DMA TX link configuration</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x14</bitWidth>
            <description>The address of the first outlink descriptor.</description>
            <name>OUTLINK_ADDR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set the bit to stop to use outlink descriptor.</description>
            <name>OUTLINK_STOP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set the bit to start to use outlink descriptor.</description>
            <name>OUTLINK_START</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set the bit to mount on new outlink descriptors.</description>
            <name>OUTLINK_RESTART</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>spi dma write data status bit.</description>
            <name>DMA_TX_ENA</name>
          </field>
        </fields>
        <name>DMA_OUT_LINK</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x54</addressOffset>
        <description>SPI DMA RX link configuration</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x14</bitWidth>
            <description>The address of the first inlink descriptor.</description>
            <name>INLINK_ADDR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>when the bit is set, the inlink descriptor returns to the first link node when a packet is error.</description>
            <name>INLINK_AUTO_RET</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set the bit to stop to use inlink descriptor.</description>
            <name>INLINK_STOP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set the bit to start to use inlink descriptor.</description>
            <name>INLINK_START</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set the bit to mount on new inlink descriptors.</description>
            <name>INLINK_RESTART</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI DMA read data status bit.</description>
            <name>DMA_RX_ENA</name>
          </field>
        </fields>
        <name>DMA_IN_LINK</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x58</addressOffset>
        <description>SPI DMA interrupt enable register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The enable bit for lack of enough inlink descriptors. Can be configured in CONF state.</description>
            <name>INLINK_DSCR_EMPTY_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The enable bit for outlink descriptor error. Can be configured in CONF state.</description>
            <name>OUTLINK_DSCR_ERROR_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The enable bit for inlink descriptor error. Can be configured in CONF state.</description>
            <name>INLINK_DSCR_ERROR_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The enable bit for completing usage of a inlink descriptor. Can be configured in CONF state.</description>
            <name>IN_DONE_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The enable bit for receiving error. Can be configured in CONF state.</description>
            <name>IN_ERR_EOF_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The enable bit for completing receiving all the packets from host. Can be configured in CONF state.</description>
            <name>IN_SUC_EOF_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The enable bit for completing usage of a outlink descriptor . Can be configured in CONF state.</description>
            <name>OUT_DONE_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The enable bit for sending a packet to host done. Can be configured in CONF state.</description>
            <name>OUT_EOF_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The enable bit for sending all the packets to host done. Can be configured in CONF state.</description>
            <name>OUT_TOTAL_EOF_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The enable bit for infifo full error interrupt.</description>
            <name>INFIFO_FULL_ERR_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The enable bit for outfifo empty error interrupt.</description>
            <name>OUTFIFO_EMPTY_ERR_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The enable bit for SPI slave CMD6 interrupt.</description>
            <name>SLV_CMD6_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The enable bit for SPI slave CMD7 interrupt.</description>
            <name>SLV_CMD7_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The enable bit for SPI slave CMD8 interrupt.</description>
            <name>SLV_CMD8_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The enable bit for SPI slave CMD9 interrupt.</description>
            <name>SLV_CMD9_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The enable bit for SPI slave CMDA interrupt.</description>
            <name>SLV_CMDA_INT_ENA</name>
          </field>
        </fields>
        <name>DMA_INT_ENA</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5C</addressOffset>
        <description>SPI DMA interrupt raw register</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw bit for lack of enough inlink descriptors. Can be configured in CONF state.</description>
            <name>INLINK_DSCR_EMPTY_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw bit for outlink descriptor error. Can be configured in CONF state.</description>
            <name>OUTLINK_DSCR_ERROR_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw bit for inlink descriptor error. Can be configured in CONF state.</description>
            <name>INLINK_DSCR_ERROR_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw bit for completing usage of a inlink descriptor. Can be configured in CONF state.</description>
            <name>IN_DONE_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw bit for receiving error. Can be configured in CONF state.</description>
            <name>IN_ERR_EOF_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw bit for completing receiving all the packets from host. Can be configured in CONF state.</description>
            <name>IN_SUC_EOF_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw bit for completing usage of a outlink descriptor. Can be configured in CONF state.</description>
            <name>OUT_DONE_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw bit for sending a packet to host done. Can be configured in CONF state.</description>
            <name>OUT_EOF_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw bit for sending all the packets to host done. Can be configured in CONF state.</description>
            <name>OUT_TOTAL_EOF_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1:SPI_DMA_INFIFO_FULL and spi_push_data_prep are valid, which means that DMA Rx buffer is full but push is valid.  0: Others.  Can not be changed by CONF_buf.</description>
            <name>INFIFO_FULL_ERR_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1:SPI_DMA_OUTFIFO_EMPTY and spi_pop_data_prep are valid, which means that there is no data to pop but pop is valid.  0: Others.  Can not be changed by CONF_buf.</description>
            <name>OUTFIFO_EMPTY_ERR_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw bit for SPI slave CMD6 interrupt.</description>
            <name>SLV_CMD6_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw bit for SPI slave CMD7 interrupt.</description>
            <name>SLV_CMD7_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw bit for SPI slave CMD8 interrupt.</description>
            <name>SLV_CMD8_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw bit for SPI slave CMD9 interrupt.</description>
            <name>SLV_CMD9_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw bit for SPI slave CMDA interrupt.</description>
            <name>SLV_CMDA_INT_RAW</name>
          </field>
        </fields>
        <name>DMA_INT_RAW</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x60</addressOffset>
        <description>SPI DMA interrupt status register</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The status bit for lack of enough inlink descriptors.</description>
            <name>INLINK_DSCR_EMPTY_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The status bit for outlink descriptor error.</description>
            <name>OUTLINK_DSCR_ERROR_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The status bit for inlink descriptor error.</description>
            <name>INLINK_DSCR_ERROR_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The status bit for completing usage of a inlink descriptor.</description>
            <name>IN_DONE_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The status bit for receiving error.</description>
            <name>IN_ERR_EOF_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The status bit for completing receiving all the packets from host.</description>
            <name>IN_SUC_EOF_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The status bit for completing usage of a outlink descriptor.</description>
            <name>OUT_DONE_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The status bit for sending a packet to host done.</description>
            <name>OUT_EOF_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The status bit for sending all the packets to host done.</description>
            <name>OUT_TOTAL_EOF_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The status bit for infifo full error.</description>
            <name>INFIFO_FULL_ERR_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The status bit for outfifo empty error.</description>
            <name>OUTFIFO_EMPTY_ERR_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The status bit for SPI slave CMD6 interrupt.</description>
            <name>SLV_CMD6_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The status bit for SPI slave CMD7 interrupt.</description>
            <name>SLV_CMD7_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The status bit for SPI slave CMD8 interrupt.</description>
            <name>SLV_CMD8_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The status bit for SPI slave CMD9 interrupt.</description>
            <name>SLV_CMD9_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The status bit for SPI slave CMDA interrupt.</description>
            <name>SLV_CMDA_INT_ST</name>
          </field>
        </fields>
        <name>DMA_INT_ST</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x64</addressOffset>
        <description>SPI DMA interrupt clear register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The clear bit for lack of enough inlink descriptors. Can be configured in CONF state.</description>
            <name>INLINK_DSCR_EMPTY_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The clear bit for outlink descriptor error. Can be configured in CONF state.</description>
            <name>OUTLINK_DSCR_ERROR_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The clear bit for inlink descriptor error. Can be configured in CONF state.</description>
            <name>INLINK_DSCR_ERROR_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The clear bit for completing usage of a inlink descriptor. Can be configured in CONF state.</description>
            <name>IN_DONE_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The clear bit for receiving error. Can be configured in CONF state.</description>
            <name>IN_ERR_EOF_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The clear bit for completing receiving all the packets from host. Can be configured in CONF state.</description>
            <name>IN_SUC_EOF_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The clear bit for completing usage of a outlink descriptor. Can be configured in CONF state.</description>
            <name>OUT_DONE_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The clear bit for sending a packet to host done. Can be configured in CONF state.</description>
            <name>OUT_EOF_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The clear bit for sending all the packets to host done. Can be configured in CONF state.</description>
            <name>OUT_TOTAL_EOF_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: Clear SPI_INFIFO_FULL_ERR_INT_RAW. 0: not valid. Can be changed by CONF_buf.</description>
            <name>INFIFO_FULL_ERR_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: Clear SPI_OUTFIFO_EMPTY_ERR_INT_RAW signal. 0: not valid. Can be changed by CONF_buf.</description>
            <name>OUTFIFO_EMPTY_ERR_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The clear bit for SPI slave CMD6 interrupt.</description>
            <name>SLV_CMD6_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The clear bit for SPI slave CMD7 interrupt.</description>
            <name>SLV_CMD7_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The clear bit for SPI slave CMD8 interrupt.</description>
            <name>SLV_CMD8_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The clear bit for SPI slave CMD9 interrupt.</description>
            <name>SLV_CMD9_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The clear bit for SPI slave CMDA interrupt.</description>
            <name>SLV_CMDA_INT_CLR</name>
          </field>
        </fields>
        <name>DMA_INT_CLR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x68</addressOffset>
        <description>The latest SPI DMA  RX descriptor address receiving error</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The inlink descriptor address when spi dma produce receiving error.</description>
            <name>DMA_IN_ERR_EOF_DES_ADDR</name>
          </field>
        </fields>
        <name>IN_ERR_EOF_DES_ADDR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x6C</addressOffset>
        <description>The latest SPI DMA  eof RX descriptor address</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The last inlink descriptor address when spi dma produce from_suc_eof.</description>
            <name>DMA_IN_SUC_EOF_DES_ADDR</name>
          </field>
        </fields>
        <name>IN_SUC_EOF_DES_ADDR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x70</addressOffset>
        <description>Current SPI DMA RX descriptor pointer</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The content of current in descriptor pointer.</description>
            <name>DMA_INLINK_DSCR</name>
          </field>
        </fields>
        <name>INLINK_DSCR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x74</addressOffset>
        <description>Next SPI DMA RX descriptor pointer</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The content of next in descriptor pointer.</description>
            <name>DMA_INLINK_DSCR_BF0</name>
          </field>
        </fields>
        <name>INLINK_DSCR_BF0</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x78</addressOffset>
        <description>Current SPI DMA RX buffer pointer</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The content of current in descriptor data buffer pointer.</description>
            <name>DMA_INLINK_DSCR_BF1</name>
          </field>
        </fields>
        <name>INLINK_DSCR_BF1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x7C</addressOffset>
        <description>The latest SPI DMA  eof TX buffer address</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The address of buffer relative to the outlink descriptor that produce eof.</description>
            <name>DMA_OUT_EOF_BFR_DES_ADDR</name>
          </field>
        </fields>
        <name>OUT_EOF_BFR_DES_ADDR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x80</addressOffset>
        <description>The latest SPI DMA  eof TX descriptor address</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The last outlink descriptor address when spi dma produce to_eof.</description>
            <name>DMA_OUT_EOF_DES_ADDR</name>
          </field>
        </fields>
        <name>OUT_EOF_DES_ADDR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x84</addressOffset>
        <description>Current SPI DMA TX descriptor pointer</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The content of current out descriptor pointer.</description>
            <name>DMA_OUTLINK_DSCR</name>
          </field>
        </fields>
        <name>OUTLINK_DSCR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x88</addressOffset>
        <description>Next SPI DMA TX descriptor pointer</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The content of next out descriptor pointer.</description>
            <name>DMA_OUTLINK_DSCR_BF0</name>
          </field>
        </fields>
        <name>OUTLINK_DSCR_BF0</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8C</addressOffset>
        <description>Current SPI DMA TX buffer pointer</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The content of current out descriptor data buffer pointer.</description>
            <name>DMA_OUTLINK_DSCR_BF1</name>
          </field>
        </fields>
        <name>OUTLINK_DSCR_BF1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x90</addressOffset>
        <description>SPI DMA TX status</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x12</bitWidth>
            <description>SPI dma out descriptor address.</description>
            <name>DMA_OUTDSCR_ADDR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>SPI dma out descriptor state.</description>
            <name>DMA_OUTDSCR_STATE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>SPI dma out data state.</description>
            <name>DMA_OUT_STATE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x7</bitWidth>
            <description>The remains of SPI dma outfifo data.</description>
            <name>DMA_OUTFIFO_CNT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI dma outfifo is full.</description>
            <name>DMA_OUTFIFO_FULL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI dma outfifo is empty.</description>
            <name>DMA_OUTFIFO_EMPTY</name>
          </field>
        </fields>
        <name>DMA_OUTSTATUS</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x80000000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x94</addressOffset>
        <description>SPI DMA RX status</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x12</bitWidth>
            <description>SPI dma in descriptor address.</description>
            <name>DMA_INDSCR_ADDR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>SPI dma in descriptor state.</description>
            <name>DMA_INDSCR_STATE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>SPI dma in data state.</description>
            <name>DMA_IN_STATE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x7</bitWidth>
            <description>The remains of SPI dma infifo data.</description>
            <name>DMA_INFIFO_CNT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI dma infifo is full.</description>
            <name>DMA_INFIFO_FULL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI dma infifo is empty.</description>
            <name>DMA_INFIFO_EMPTY</name>
          </field>
        </fields>
        <name>DMA_INSTATUS</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x80000000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x98</addressOffset>
        <description>Data buffer 0</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>32 bits data buffer 0, transferred in the unit of byte. Byte addressable in slave half-duplex mode.</description>
            <name>BUF0</name>
          </field>
        </fields>
        <name>W0</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9C</addressOffset>
        <description>Data buffer 1</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>32 bits data buffer 1, transferred in the unit of byte. Byte addressable in slave half-duplex mode.</description>
            <name>BUF1</name>
          </field>
        </fields>
        <name>W1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA0</addressOffset>
        <description>Data buffer 2</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>32 bits data buffer 2, transferred in the unit of byte. Byte addressable in slave half-duplex mode.</description>
            <name>BUF2</name>
          </field>
        </fields>
        <name>W2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA4</addressOffset>
        <description>Data buffer 3</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>32 bits data buffer 3, transferred in the unit of byte. Byte addressable in slave half-duplex mode.</description>
            <name>BUF3</name>
          </field>
        </fields>
        <name>W3</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA8</addressOffset>
        <description>Data buffer 4</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>32 bits data buffer 4, transferred in the unit of byte. Byte addressable in slave half-duplex mode.</description>
            <name>BUF4</name>
          </field>
        </fields>
        <name>W4</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAC</addressOffset>
        <description>Data buffer 5</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>32 bits data buffer 5, transferred in the unit of byte. Byte addressable in slave half-duplex mode.</description>
            <name>BUF5</name>
          </field>
        </fields>
        <name>W5</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB0</addressOffset>
        <description>Data buffer 6</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>32 bits data buffer 6, transferred in the unit of byte. Byte addressable in slave half-duplex mode.</description>
            <name>BUF6</name>
          </field>
        </fields>
        <name>W6</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB4</addressOffset>
        <description>Data buffer 7</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>32 bits data buffer 7, transferred in the unit of byte. Byte addressable in slave half-duplex mode.</description>
            <name>BUF7</name>
          </field>
        </fields>
        <name>W7</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB8</addressOffset>
        <description>Data buffer 8</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>32 bits data buffer 8, transferred in the unit of byte. Byte addressable in slave half-duplex mode.</description>
            <name>BUF8</name>
          </field>
        </fields>
        <name>W8</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBC</addressOffset>
        <description>Data buffer 9</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>32 bits data buffer 9, transferred in the unit of byte. Byte addressable in slave half-duplex mode.</description>
            <name>BUF9</name>
          </field>
        </fields>
        <name>W9</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xC0</addressOffset>
        <description>Data buffer 10</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>32 bits data buffer 10, transferred in the unit of byte. Byte addressable in slave half-duplex mode.</description>
            <name>BUF10</name>
          </field>
        </fields>
        <name>W10</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xC4</addressOffset>
        <description>Data buffer 11</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>32 bits data buffer 11, transferred in the unit of byte. Byte addressable in slave half-duplex mode.</description>
            <name>BUF11</name>
          </field>
        </fields>
        <name>W11</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xC8</addressOffset>
        <description>Data buffer 12</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>32 bits data buffer 12, transferred in the unit of byte. Byte addressable in slave half-duplex mode.</description>
            <name>BUF12</name>
          </field>
        </fields>
        <name>W12</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xCC</addressOffset>
        <description>Data buffer 13</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>32 bits data buffer 13, transferred in the unit of byte. Byte addressable in slave half-duplex mode.</description>
            <name>BUF13</name>
          </field>
        </fields>
        <name>W13</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xD0</addressOffset>
        <description>Data buffer 14</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>32 bits data buffer 14, transferred in the unit of byte. Byte addressable in slave half-duplex mode.</description>
            <name>BUF14</name>
          </field>
        </fields>
        <name>W14</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xD4</addressOffset>
        <description>Data buffer 15</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>32 bits data buffer 15, transferred in the unit of byte. Byte addressable in slave half-duplex mode.</description>
            <name>BUF15</name>
          </field>
        </fields>
        <name>W15</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xD8</addressOffset>
        <description>Data buffer 16</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>32 bits data buffer 16, transferred in the unit of byte. Byte addressable in slave half-duplex mode.</description>
            <name>BUF16</name>
          </field>
        </fields>
        <name>W16</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xDC</addressOffset>
        <description>Data buffer 17</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>32 bits data buffer 17, transferred in the unit of byte. Byte addressable in slave half-duplex mode.</description>
            <name>BUF17</name>
          </field>
        </fields>
        <name>W17</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xE0</addressOffset>
        <description>SPI input delay mode configuration</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the input signals are delayed by system clock cycles, 0: input without delayed, 1: input with the posedge of clk_apb,2 input with the negedge of clk_apb, 3: input with the spi_clk. Can be configured in CONF state.</description>
            <name>DIN0_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the input signals are delayed by system clock cycles, 0: input without delayed, 1: input with the posedge of clk_apb,2 input with the negedge of clk_apb, 3: input with the spi_clk. Can be configured in CONF state.</description>
            <name>DIN1_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the input signals are delayed by system clock cycles, 0: input without delayed, 1: input with the posedge of clk_apb,2 input with the negedge of clk_apb, 3: input with the spi_clk. Can be configured in CONF state.</description>
            <name>DIN2_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the input signals are delayed by system clock cycles, 0: input without delayed, 1: input with the posedge of clk_apb,2 input with the negedge of clk_apb, 3: input with the spi_clk. Can be configured in CONF state.</description>
            <name>DIN3_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the input signals are delayed by system clock cycles, 0: input without delayed, 1: input with the posedge of clk_apb,2 input with the negedge of clk_apb, 3: input with the spi_clk. Can be configured in CONF state.</description>
            <name>DIN4_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the input signals are delayed by system clock cycles, 0: input without delayed, 1: input with the posedge of clk_apb,2 input with the negedge of clk_apb, 3: input with the spi_clk. Can be configured in CONF state.</description>
            <name>DIN5_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the input signals are delayed by system clock cycles, 0: input without delayed, 1: input with the posedge of clk_apb,2 input with the negedge of clk_apb, 3: input with the spi_clk. Can be configured in CONF state.</description>
            <name>DIN6_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the input signals are delayed by system clock cycles, 0: input without delayed, 1: input with the posedge of clk_apb,2 input with the negedge of clk_apb, 3: input with the spi_clk. Can be configured in CONF state.</description>
            <name>DIN7_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1:enable hclk in spi_timing.v.  0: disable it. Can be configured in CONF state.</description>
            <name>TIMING_CLK_ENA</name>
          </field>
        </fields>
        <name>DIN_MODE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xE4</addressOffset>
        <description>SPI input delay number configuration</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the input signals are delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,...  Can be configured in CONF state.</description>
            <name>DIN0_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the input signals are delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,...  Can be configured in CONF state.</description>
            <name>DIN1_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the input signals are delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,...  Can be configured in CONF state.</description>
            <name>DIN2_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the input signals are delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,...  Can be configured in CONF state.</description>
            <name>DIN3_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the input signals are delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,...  Can be configured in CONF state.</description>
            <name>DIN4_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the input signals are delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,...  Can be configured in CONF state.</description>
            <name>DIN5_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the input signals are delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,...  Can be configured in CONF state.</description>
            <name>DIN6_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the input signals are delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,...  Can be configured in CONF state.</description>
            <name>DIN7_NUM</name>
          </field>
        </fields>
        <name>DIN_NUM</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xE8</addressOffset>
        <description>SPI output delay mode configuration</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the output signals are delayed by system clock cycles, 0: output without delayed, 1: output with the posedge of clk_apb,2 output with the negedge of clk_apb, 3: output with the spi_clk. Can be configured in CONF state.</description>
            <name>DOUT0_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the output signals are delayed by system clock cycles, 0: output without delayed, 1: output with the posedge of clk_apb,2 output with the negedge of clk_apb, 3: output with the spi_clk. Can be configured in CONF state.</description>
            <name>DOUT1_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the output signals are delayed by system clock cycles, 0: output without delayed, 1: output with the posedge of clk_apb,2 output with the negedge of clk_apb, 3: output with the spi_clk. Can be configured in CONF state.</description>
            <name>DOUT2_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the output signals are delayed by system clock cycles, 0: output without delayed, 1: output with the posedge of clk_apb,2 output with the negedge of clk_apb, 3: output with the spi_clk. Can be configured in CONF state.</description>
            <name>DOUT3_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the output signals are delayed by system clock cycles, 0: output without delayed, 1: output with the posedge of clk_apb,2 output with the negedge of clk_apb, 3: output with the spi_clk. Can be configured in CONF state.</description>
            <name>DOUT4_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the output signals are delayed by system clock cycles, 0: output without delayed, 1: output with the posedge of clk_apb,2 output with the negedge of clk_apb, 3: output with the spi_clk. Can be configured in CONF state.</description>
            <name>DOUT5_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the output signals are delayed by system clock cycles, 0: output without delayed, 1: output with the posedge of clk_apb,2 output with the negedge of clk_apb, 3: output with the spi_clk. Can be configured in CONF state.</description>
            <name>DOUT6_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the output signals are delayed by system clock cycles, 0: output without delayed, 1: output with the posedge of clk_apb,2 output with the negedge of clk_apb, 3: output with the spi_clk. Can be configured in CONF state.</description>
            <name>DOUT7_MODE</name>
          </field>
        </fields>
        <name>DOUT_MODE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xEC</addressOffset>
        <description>SPI output delay number configuration</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the output signals are delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,... Can be configured in CONF state.</description>
            <name>DOUT0_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the output signals are delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,... Can be configured in CONF state.</description>
            <name>DOUT1_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the output signals are delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,... Can be configured in CONF state.</description>
            <name>DOUT2_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the output signals are delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,... Can be configured in CONF state.</description>
            <name>DOUT3_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the output signals are delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,... Can be configured in CONF state.</description>
            <name>DOUT4_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the output signals are delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,... Can be configured in CONF state.</description>
            <name>DOUT5_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the output signals are delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,... Can be configured in CONF state.</description>
            <name>DOUT6_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the output signals are delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,... Can be configured in CONF state.</description>
            <name>DOUT7_NUM</name>
          </field>
        </fields>
        <name>DOUT_NUM</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xF0</addressOffset>
        <description>LCD frame control register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xB</bitWidth>
            <description>It is the horizontal blank front porch of a frame. Can be configured in CONF state.</description>
            <name>LCD_HB_FRONT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>It is the vertical active height of a frame. Can be configured in CONF state.</description>
            <name>LCD_VA_HEIGHT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>It is the vertical total height of a frame. Can be configured in CONF state.</description>
            <name>LCD_VT_HEIGHT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: Enable LCD mode output vsync, hsync, de. 0: Disable. Can be configured in CONF state.</description>
            <name>LCD_MODE_EN</name>
          </field>
        </fields>
        <name>LCD_CTRL</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xF4</addressOffset>
        <description>LCD frame control1 register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>It is the vertical blank front porch of a frame. Can be configured in CONF state.</description>
            <name>LCD_VB_FRONT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0xC</bitWidth>
            <description>It is the horizontal active width of a frame. Can be configured in CONF state.</description>
            <name>LCD_HA_WIDTH</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0xC</bitWidth>
            <description>It is the horizontal total width of a frame. Can be configured in CONF state.</description>
            <name>LCD_HT_WIDTH</name>
          </field>
        </fields>
        <name>LCD_CTRL1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xF8</addressOffset>
        <description>LCD frame control2 register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x7</bitWidth>
            <description>It is the position of spi_vsync active pulse in a line. Can be configured in CONF state.</description>
            <name>LCD_VSYNC_WIDTH</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>It is the idle value of spi_vsync. Can be configured in CONF state.</description>
            <name>VSYNC_IDLE_POL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x7</bitWidth>
            <description>It is the position of spi_hsync active pulse in a line. Can be configured in CONF state.</description>
            <name>LCD_HSYNC_WIDTH</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>It is the idle value of spi_hsync. Can be configured in CONF state.</description>
            <name>HSYNC_IDLE_POL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>It is the position of spi_hsync active pulse in a line. Can be configured in CONF state.</description>
            <name>LCD_HSYNC_POSITION</name>
          </field>
        </fields>
        <name>LCD_CTRL2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10001</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xFC</addressOffset>
        <description>LCD delay number</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the output spi_dqs is delayed by system clock cycles, 0: output without delayed, 1: output with the posedge of clk_apb,2 output with the negedge of clk_apb, 3: output with the spi_clk. Can be configured in CONF state.</description>
            <name>D_DQS_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the output spi_cd is delayed by system clock cycles, 0: output without delayed, 1: output with the posedge of clk_apb,2 output with the negedge of clk_apb, 3: output with the spi_clk. Can be configured in CONF state.</description>
            <name>D_CD_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the output spi_de is delayed by system clock cycles, 0: output without delayed, 1: output with the posedge of clk_apb,2 output with the negedge of clk_apb, 3: output with the spi_clk. Can be configured in CONF state.</description>
            <name>D_DE_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the output spi_hsync is delayed by system clock cycles, 0: output without delayed, 1: output with the posedge of clk_apb,2 output with the negedge of clk_apb, 3: output with the spi_clk. Can be configured in CONF state.</description>
            <name>D_HSYNC_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the output spi_vsync is delayed by system clock cycles, 0: output without delayed, 1: output with the posedge of clk_apb,2 output with the negedge of clk_apb, 3: output with the spi_clk. Can be configured in CONF state.</description>
            <name>D_VSYNC_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>It is the idle value of spi_de.</description>
            <name>DE_IDLE_POL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: The pulse of spi_hsync is out in vertical blanking lines in seg-trans or one trans. 0: spi_hsync pulse is valid only in active region lines in seg-trans.</description>
            <name>HS_BLANK_EN</name>
          </field>
        </fields>
        <name>LCD_D_MODE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x100</addressOffset>
        <description>LCD delay mode</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the output spi_dqs is delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,... Can be configured in CONF state.</description>
            <name>D_DQS_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the output spi_cd is delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,... Can be configured in CONF state.</description>
            <name>D_CD_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the output spi_de is delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,... Can be configured in CONF state.</description>
            <name>D_DE_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the output spi_hsync is delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,... Can be configured in CONF state.</description>
            <name>D_HSYNC_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the output spi_vsync is delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,... Can be configured in CONF state.</description>
            <name>D_VSYNC_NUM</name>
          </field>
        </fields>
        <name>LCD_D_NUM</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3FC</addressOffset>
        <description>SPI version control</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1C</bitWidth>
            <description>SPI register version.</description>
            <name>DATE</name>
          </field>
        </fields>
        <name>REG_DATE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x1907240</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <resetMask>0xFFFFFFFF</resetMask>
    <resetValue>0x0</resetValue>
  </peripheral>
</peripherals>
<peripherals>
  <peripheral>
    <addressBlock>
      <offset>0x0</offset>
      <size>0x108</size>
      <usage>registers</usage>
    </addressBlock>
    <baseAddress>0x3F425000</baseAddress>
    <derivedFrom>SPI0</derivedFrom>
    <description>SPI (Serial Peripheral Interface) Controller</description>
    <groupName>SPI</groupName>
    <interrupts>
      <interrupt>
        <name>SPI3</name>
        <value>0x22</value>
      </interrupt>
    </interrupts>
    <interrupts>
      <interrupt>
        <name>SPI3_DMA</name>
        <value>0x3A</value>
      </interrupt>
    </interrupts>
    <name>SPI3</name>
    <registers>
      <register>
        <addressOffset>0x0</addressOffset>
        <description>Command control register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x17</bitWidth>
            <description>Define the spi_clk cycles of  SPI_CONF state. Can be configured in CONF state.</description>
            <name>CONF_BITLEN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>User define command enable.  An operation will be triggered when the bit is set. The bit will be cleared once the operation done.1: enable 0: disable. Can not be changed by CONF_buf.</description>
            <name>USR</name>
          </field>
        </fields>
        <name>CMD</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4</addressOffset>
        <description>Address value</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>[31:8]:address to slave, [7:0]:Reserved. Can be configured in CONF state.</description>
            <name>USR_ADDR_VALUE</name>
          </field>
        </fields>
        <name>ADDR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8</addressOffset>
        <description>SPI control register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set the bit to hold spi. The bit is combined with SPI_USR_PREP_HOLD,SPI_USR_CMD_HOLD,SPI_USR_ADDR_HOLD,SPI_USR_DUMMY_HOLD,SPI_USR_DIN_HOLD,SPI_USR_DOUT_HOLD and SPI_USR_HOLD_POL. Can be configured in CONF state.</description>
            <name>EXT_HOLD_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>In the dummy phase the signal level of spi is output by the spi controller. Can be configured in CONF state.</description>
            <name>DUMMY_OUT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Apply 2-bit mode during addr phase 1:enable 0: disable. Can be configured in CONF state.</description>
            <name>FADDR_DUAL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Apply 4-bit mode during addr phase 1:enable 0: disable. Can be configured in CONF state.</description>
            <name>FADDR_QUAD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Apply 8-bit mode during addr phase 1:enable 0: disable. Can be configured in CONF state.</description>
            <name>FADDR_OCT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Apply 2-bit mode during command phase 1:enable 0: disable. Can be configured in CONF state.</description>
            <name>FCMD_DUAL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Apply 4-bit mode during command phase 1:enable 0: disable. Can be configured in CONF state.</description>
            <name>FCMD_QUAD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Apply 8-bit mode during command phase 1:enable 0: disable. Can be configured in CONF state.</description>
            <name>FCMD_OCT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>In the read operations, read-data phase is in 2-bit mode. 1: enable 0: disable. Can be configured in CONF state.</description>
            <name>FREAD_DUAL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>In the read operations read-data phase is in 4-bit mode. 1: enable 0: disable.  Can be configured in CONF state.</description>
            <name>FREAD_QUAD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>In the read operations read-data phase is in 8-bit mode. 1: enable 0: disable.  Can be configured in CONF state.</description>
            <name>FREAD_OCT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to set MISO line polarity, 1: high 0, low. Can be configured in CONF state.</description>
            <name>Q_POL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to set MOSI line polarity, 1: high 0, low. Can be configured in CONF state.</description>
            <name>D_POL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Write protect signal output when SPI is idle.  1: output high, 0: output low.  Can be configured in CONF state.</description>
            <name>WP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>In read-data (MISO) phase 1: LSB first 0: MSB first. Can be configured in CONF state.</description>
            <name>RD_BIT_ORDER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>In command address write-data (MOSI) phases 1: LSB firs 0: MSB first. Can be configured in CONF state.</description>
            <name>WR_BIT_ORDER</name>
          </field>
        </fields>
        <name>CTRL</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x2C0000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xC</addressOffset>
        <description>SPI control register 1</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>SPI clock mode bits. 0: SPI clock is off when CS inactive 1: SPI clock is delayed one cycle after CS inactive 2: SPI clock is delayed two cycles after CS inactive 3: SPI clock is alwasy on. Can be configured in CONF state.</description>
            <name>CLK_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>{CPOL, CPHA},1: support spi clk mode 1 and 3, first edge output data B[0]/B[7].  0: support spi clk mode 0 and 2, first edge output data B[1]/B[6].</description>
            <name>CLK_MODE_13</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>It saves half a cycle when tsck is the same as rsck. 1: output data at rsck posedge   0: output data at tsck posedge</description>
            <name>RSCK_DATA_OUT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1:SPI_BUF16~SPI_BUF17 can be written   0:SPI_BUF16~SPI_BUF17 can not  be written. Can be configured in CONF state.</description>
            <name>W16_17_WR_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>SPI cs signal is delayed by spi clock cycles. Can be configured in CONF state.</description>
            <name>CS_HOLD_DELAY</name>
          </field>
        </fields>
        <name>CTRL1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x4010</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x10</addressOffset>
        <description>SPI control register 2</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xD</bitWidth>
            <description>(cycles+1) of prepare phase by spi clock this bits are combined with SPI_CS_SETUP bit. Can be configured in CONF state.</description>
            <name>CS_SETUP_TIME</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0xD</bitWidth>
            <description>delay cycles of cs pin by spi clock this bits are combined with SPI_CS_HOLD bit. Can be configured in CONF state.</description>
            <name>CS_HOLD_TIME</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>spi_cs signal is delayed by spi_clk . 0: zero 1: if SPI_CK_OUT_EDGE or SPI_CK_IDLE_EDGE is set 1 delayed by half cycle  else delayed by one cycle 2: if SPI_CK_OUT_EDGE or  SPI_CK_IDLE_EDGE is set 1 delayed by one cycle, else delayed by half cycle 3: delayed one cycle. Can be configured in CONF state.</description>
            <name>CS_DELAY_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>spi_cs signal is delayed by system clock cycles. Can be configured in CONF state.</description>
            <name>CS_DELAY_NUM</name>
          </field>
        </fields>
        <name>CTRL2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x2000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x14</addressOffset>
        <description>SPI clock control register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>In the master mode it must be equal to SPI_CLKCNT_N. In the slave mode it must be 0. Can be configured in CONF state.</description>
            <name>CLKCNT_L</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>In the master mode it must be floor((SPI_CLKCNT_N+1)/2-1). In the slave mode it must be 0. Can be configured in CONF state.</description>
            <name>CLKCNT_H</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>In the master mode it is the divider of spi_clk. So spi_clk frequency is system/(SPI_CLKDIV_PRE+1)/(SPI_CLKCNT_N+1). Can be configured in CONF state.</description>
            <name>CLKCNT_N</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0xD</bitWidth>
            <description>In the master mode it is pre-divider of spi_clk.  Can be configured in CONF state.</description>
            <name>CLKDIV_PRE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>In the master mode 1: spi_clk is eqaul to system 0: spi_clk is divided from system clock. Can be configured in CONF state.</description>
            <name>CLK_EQU_SYSCLK</name>
          </field>
        </fields>
        <name>CLOCK</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x80003043</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x18</addressOffset>
        <description>SPI USER control register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set the bit to enable full duplex communication. 1: enable 0: disable. Can be configured in CONF state.</description>
            <name>DOUTDIN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Both for master mode and slave mode. 1: spi controller is in QPI mode. 0: others. Can be configured in CONF state.</description>
            <name>QPI_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Just for master mode. 1: spi controller is in OPI mode (all in 8-bit mode). 0: others. Can be configured in CONF state.</description>
            <name>OPI_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>In the slave mode, this bit can be used to change the polarity of tsck. 0: tsck = spi_ck_i. 1:tsck = !spi_ck_i.</description>
            <name>TSCK_I_EDGE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>spi cs keep low when spi is in  done  phase. 1: enable 0: disable. Can be configured in CONF state.</description>
            <name>CS_HOLD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>spi cs is enable when spi is in  prepare  phase. 1: enable 0: disable. Can be configured in CONF state.</description>
            <name>CS_SETUP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>In the slave mode, this bit can be used to change the polarity of rsck. 0: rsck = !spi_ck_i. 1:rsck = spi_ck_i.</description>
            <name>RSCK_I_EDGE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>the bit combined with SPI_DOUT_MODE register to set mosi signal delay mode. Can be configured in CONF state.</description>
            <name>CK_OUT_EDGE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>In read-data (MISO) phase 1: big-endian 0: little_endian. Can be configured in CONF state.</description>
            <name>RD_BYTE_ORDER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>In command address write-data (MOSI) phases 1: big-endian 0: litte_endian. Can be configured in CONF state.</description>
            <name>WR_BYTE_ORDER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>In the write operations read-data phase is in 2-bit mode. Can be configured in CONF state.</description>
            <name>FWRITE_DUAL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>In the write operations read-data phase is in 4-bit mode. Can be configured in CONF state.</description>
            <name>FWRITE_QUAD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>In the write operations read-data phase is in 8-bit mode. Can be configured in CONF state.</description>
            <name>FWRITE_OCT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: Enable the DMA CONF phase of next seg-trans operation, which means seg-trans will continue. 0: The seg-trans will end after the current SPI seg-trans or this is not seg-trans mode. Can be configured in CONF state.</description>
            <name>USR_CONF_NXT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set the bit to enable 3-line half duplex communication mosi and miso signals share the same pin. 1: enable 0: disable. Can be configured in CONF state.</description>
            <name>SIO</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>It is combined with hold bits to set the polarity of spi hold line 1: spi will be held when spi hold line is high 0: spi will be held when spi hold line is low. Can be configured in CONF state.</description>
            <name>USR_HOLD_POL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>spi is hold at data out state the bit are combined with SPI_USR_HOLD_POL bit. Can be configured in CONF state.</description>
            <name>USR_DOUT_HOLD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>spi is hold at data in state the bit are combined with SPI_USR_HOLD_POL bit. Can be configured in CONF state.</description>
            <name>USR_DIN_HOLD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>spi is hold at dummy state the bit are combined with SPI_USR_HOLD_POL bit. Can be configured in CONF state.</description>
            <name>USR_DUMMY_HOLD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>spi is hold at address state the bit are combined with SPI_USR_HOLD_POL bit. Can be configured in CONF state.</description>
            <name>USR_ADDR_HOLD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>spi is hold at command state the bit are combined with SPI_USR_HOLD_POL bit. Can be configured in CONF state.</description>
            <name>USR_CMD_HOLD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>spi is hold at prepare state the bit are combined with SPI_USR_HOLD_POL bit. Can be configured in CONF state.</description>
            <name>USR_PREP_HOLD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>read-data phase only access to high-part of the buffer SPI_BUF8~SPI_BUF17. 1: enable 0: disable. Can be configured in CONF state.</description>
            <name>USR_MISO_HIGHPART</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>write-data phase only access to high-part of the buffer SPI_BUF8~SPI_BUF17. 1: enable 0: disable.  Can be configured in CONF state.</description>
            <name>USR_MOSI_HIGHPART</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>spi clock is disable in dummy phase when the bit is enable. Can be configured in CONF state.</description>
            <name>USR_DUMMY_IDLE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This bit enable the write-data phase of an operation. Can be configured in CONF state.</description>
            <name>USR_MOSI</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This bit enable the read-data phase of an operation. Can be configured in CONF state.</description>
            <name>USR_MISO</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This bit enable the dummy phase of an operation. Can be configured in CONF state.</description>
            <name>USR_DUMMY</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This bit enable the address phase of an operation. Can be configured in CONF state.</description>
            <name>USR_ADDR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This bit enable the command phase of an operation. Can be configured in CONF state.</description>
            <name>USR_COMMAND</name>
          </field>
        </fields>
        <name>USER</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x800000C0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1C</addressOffset>
        <description>SPI USER control register 1</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>The length in spi_clk cycles of dummy phase. The register value shall be (cycle_num-1). Can be configured in CONF state.</description>
            <name>USR_DUMMY_CYCLELEN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>The length in bits of address phase. The register value shall be (bit_num-1). Can be configured in CONF state.</description>
            <name>USR_ADDR_BITLEN</name>
          </field>
        </fields>
        <name>USER1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xB8000007</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x20</addressOffset>
        <description>SPI USER control register 2</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>The value of  command. Can be configured in CONF state.</description>
            <name>USR_COMMAND_VALUE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>The length in bits of command phase. The register value shall be (bit_num-1). Can be configured in CONF state.</description>
            <name>USR_COMMAND_BITLEN</name>
          </field>
        </fields>
        <name>USER2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x70000000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x24</addressOffset>
        <description>MOSI length</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x17</bitWidth>
            <description>The length in bits of write-data. The register value shall be (bit_num-1). Can be configured in CONF state.</description>
            <name>USR_MOSI_DBITLEN</name>
          </field>
        </fields>
        <name>MOSI_DLEN</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x28</addressOffset>
        <description>MISO length</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x17</bitWidth>
            <description>The length in bits of  read-data. The register value shall be (bit_num-1). Can be configured in CONF state.</description>
            <name>USR_MISO_DBITLEN</name>
          </field>
        </fields>
        <name>MISO_DLEN</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2C</addressOffset>
        <description>SPI misc register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI CS0 pin enable, 1: disable CS0, 0: SPI_CS0 signal is from/to CS0 pin. Can be configured in CONF state.</description>
            <name>CS0_DIS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI CS1 pin enable, 1: disable CS1, 0: SPI_CS1 signal is from/to CS1 pin. Can be configured in CONF state.</description>
            <name>CS1_DIS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI CS2 pin enable, 1: disable CS2, 0: SPI_CS2 signal is from/to CS2 pin. Can be configured in CONF state.</description>
            <name>CS2_DIS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI CS3 pin enable, 1: disable CS3, 0: SPI_CS3 signal is from/to CS3 pin. Can be configured in CONF state.</description>
            <name>CS3_DIS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI CS4 pin enable, 1: disable CS4, 0: SPI_CS4 signal is from/to CS4 pin. Can be configured in CONF state.</description>
            <name>CS4_DIS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI CS5 pin enable, 1: disable CS5, 0: SPI_CS5 signal is from/to CS5 pin. Can be configured in CONF state.</description>
            <name>CS5_DIS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: spi clk out disable,  0: spi clk out enable. Can be configured in CONF state.</description>
            <name>CK_DIS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>In the master mode the bits are the polarity of spi cs line, the value is equivalent to spi_cs ^ SPI_MASTER_CS_POL. Can be configured in CONF state.</description>
            <name>MASTER_CS_POL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: SPI master DTR mode is applied to SPI clk, data and spi_dqs.  0: SPI master DTR mode is  only applied to spi_dqs. This bit should be used with bit 17/18/19.</description>
            <name>CLK_DATA_DTR_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: SPI clk and data of SPI_DOUT and SPI_DIN state are in DTR mode, including master 1/2/4/8-bm.  0:  SPI clk and data of SPI_DOUT and SPI_DIN state are in STR mode. Can be configured in CONF state.</description>
            <name>DATA_DTR_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: SPI clk and data of SPI_SEND_ADDR state are in DTR mode, including master 1/2/4/8-bm.  0:  SPI clk and data of SPI_SEND_ADDR state are in STR mode. Can be configured in CONF state.</description>
            <name>ADDR_DTR_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: SPI clk and data of SPI_SEND_CMD state are in DTR mode, including master 1/2/4/8-bm.  0:  SPI clk and data of SPI_SEND_CMD state are in STR mode. Can be configured in CONF state.</description>
            <name>CMD_DTR_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: spi_cd = !SPI_CD_IDLE_EDGE when SPI_ST[3:0] is in SPI_DOUT or SPI_DIN state.  0: spi_cd = SPI_CD_IDLE_EDGE. Can be configured in CONF state.</description>
            <name>CD_DATA_SET</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: spi_cd = !SPI_CD_IDLE_EDGE when SPI_ST[3:0] is in SPI_DUMMY state.  0: spi_cd = SPI_CD_IDLE_EDGE. Can be configured in CONF state.</description>
            <name>CD_DUMMY_SET</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: spi_cd = !SPI_CD_IDLE_EDGE when SPI_ST[3:0] is in SPI_SEND_ADDR state.  0: spi_cd = SPI_CD_IDLE_EDGE. Can be configured in CONF state.</description>
            <name>CD_ADDR_SET</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>spi slave input cs polarity select. 1: inv  0: not change. Can be configured in CONF state.</description>
            <name>SLAVE_CS_POL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The default value of spi_dqs. Can be configured in CONF state.</description>
            <name>DQS_IDLE_EDGE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: spi_cd = !SPI_CD_IDLE_EDGE when SPI_ST[3:0] is in SPI_SEND_CMD state.  0: spi_cd = SPI_CD_IDLE_EDGE. Can be configured in CONF state.</description>
            <name>CD_CMD_SET</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The default value of spi_cd. Can be configured in CONF state.</description>
            <name>CD_IDLE_EDGE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: spi clk line is high when idle     0: spi clk line is low when idle. Can be configured in CONF state.</description>
            <name>CK_IDLE_EDGE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>spi cs line keep low when the bit is set. Can be configured in CONF state.</description>
            <name>CS_KEEP_ACTIVE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1:  spi quad input swap enable  0:  spi quad input swap disable. Can be configured in CONF state.</description>
            <name>QUAD_DIN_PIN_SWAP</name>
          </field>
        </fields>
        <name>MISC</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x3E</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x30</addressOffset>
        <description>SPI slave control register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt raw bit for the completion of any operation in both the master mode and the slave mode.  Can not be changed by CONF_buf.</description>
            <name>TRANS_DONE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI_SLV_RD_BUF_DONE Interrupt enable. 1: enable 0: disable. Can be configured in CONF state.</description>
            <name>INT_RD_BUF_DONE_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI_SLV_WR_BUF_DONE Interrupt enable. 1: enable 0: disable. Can be configured in CONF state.</description>
            <name>INT_WR_BUF_DONE_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI_SLV_RD_DMA_DONE Interrupt enable. 1: enable 0: disable. Can be configured in CONF state.</description>
            <name>INT_RD_DMA_DONE_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI_SLV_WR_DMA_DONE Interrupt enable. 1: enable 0: disable. Can be configured in CONF state.</description>
            <name>INT_WR_DMA_DONE_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI_TRANS_DONE Interrupt enable. 1: enable 0: disable. Can be configured in CONF state.</description>
            <name>INT_TRANS_DONE_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI_DMA_SEG_TRANS_DONE Interrupt enable. 1: enable 0: disable. Can be configured in CONF state.</description>
            <name>INT_DMA_SEG_TRANS_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: Enable seg magic value error interrupt. 0: Others. Can be configured in CONF state.</description>
            <name>SEG_MAGIC_ERR_INT_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>The operations counter in both the master mode and the slave mode.</description>
            <name>TRANS_CNT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI_TRANS_DONE auto clear enable, clear it 3 apb cycles after the pos edge of SPI_TRANS_DONE.  0:disable. 1: enable. Can be configured in CONF state.</description>
            <name>TRANS_DONE_AUTO_CLR_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set SPI work mode. 1: slave mode 0: master mode.</description>
            <name>MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Software reset enable, reset the spi clock line cs line and data lines. Can be configured in CONF state.</description>
            <name>SOFT_RESET</name>
          </field>
        </fields>
        <name>SLAVE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x200</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x34</addressOffset>
        <description>SPI slave control register 1</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: Clear SPI_SLV_ADDR_ERR. 0: not valid. Can be changed by CONF_buf.</description>
            <name>SLV_ADDR_ERR_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: Clear SPI_SLV_CMD_ERR. 0: not valid.  Can be changed by CONF_buf.</description>
            <name>SLV_CMD_ERR_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: spi slave QPI mode is not supported. 0: spi slave QPI mode is supported.</description>
            <name>SLV_NO_QPI_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: The address value of the last SPI transfer is not supported by SPI slave. 0: The address value is supported or no address value is received.</description>
            <name>SLV_ADDR_ERR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: The command value of the last SPI transfer is not supported by SPI slave. 0: The command value is supported or no command value is received.</description>
            <name>SLV_CMD_ERR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt raw bit for the completion of dma write operation in the slave mode.  Can not be changed by CONF_buf.</description>
            <name>SLV_WR_DMA_DONE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>In the slave mode it is the value of command.</description>
            <name>SLV_LAST_COMMAND</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>In the slave mode it is the value of address.</description>
            <name>SLV_LAST_ADDR</name>
          </field>
        </fields>
        <name>SLAVE1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x38</addressOffset>
        <description>SPI slave Wr_BUF interrupt and CONF control register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt raw bit for the completion of write-buffer operation in the slave mode.  Can not be changed by CONF_buf.</description>
            <name>SLV_WR_BUF_DONE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x7</bitWidth>
            <description>The basic spi_clk cycles of CONF state. The real cycle length of CONF state, if SPI_USR_CONF is enabled, is SPI_CONF_BASE_BITLEN[6:0] + SPI_CONF_BITLEN[23:0].</description>
            <name>CONF_BASE_BITLEN</name>
          </field>
        </fields>
        <name>SLV_WRBUF_DLEN</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xD8000000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3C</addressOffset>
        <description>SPI magic error and slave control register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x14</bitWidth>
            <description>In the slave mode it is the length in bytes for read operations. The register value shall be byte_num.</description>
            <name>SLV_DMA_RD_BYTELEN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt raw bit for the completion of read-buffer operation in the slave mode.  Can not be changed by CONF_buf.</description>
            <name>SLV_RD_BUF_DONE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: The recent magic value in CONF buffer is not right in master DMA seg-trans mode. 0: others.</description>
            <name>SEG_MAGIC_ERR</name>
          </field>
        </fields>
        <name>SLV_RDBUF_DLEN</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x40</addressOffset>
        <description>SPI interrupt control register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x14</bitWidth>
            <description>The full-duplex or half-duplex data byte length of the last SPI transfer in slave mode. In half-duplex mode, this value is controlled by bits [23:20].</description>
            <name>SLV_DATA_BYTELEN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: SPI_SLV_DATA_BYTELEN stores data byte length of master-read-slave data length in DMA controlled mode(Rd_DMA). 0: others</description>
            <name>SLV_RDDMA_BYTELEN_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: SPI_SLV_DATA_BYTELEN stores data byte length of master-write-to-slave data length in DMA controlled mode(Wr_DMA). 0: others</description>
            <name>SLV_WRDMA_BYTELEN_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: SPI_SLV_DATA_BYTELEN stores data byte length of master-read-slave data length in CPU controlled mode(Rd_BUF). 0: others</description>
            <name>SLV_RDBUF_BYTELEN_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: SPI_SLV_DATA_BYTELEN stores data byte length of master-write-to-slave data length in CPU controlled mode(Wr_BUF). 0: others</description>
            <name>SLV_WRBUF_BYTELEN_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>The magic value of BM table in master DMA seg-trans.</description>
            <name>DMA_SEG_MAGIC_VALUE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt raw bit for the completion of Rd-DMA operation in the slave mode.  Can not be changed by CONF_buf.</description>
            <name>SLV_RD_DMA_DONE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: Enable the DMA CONF phase of current seg-trans operation, which means seg-trans will start. 0: This is not seg-trans mode.</description>
            <name>USR_CONF</name>
          </field>
        </fields>
        <name>SLV_RD_BYTE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xA000000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x44</addressOffset>
        <description>SPI master status and DMA read byte control register</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>The status of spi state machine. 0: idle state, 1: preparation state, 2: send command state, 3: send data state, 4: red data state, 5:write data state, 6: wait state, 7: done state.</description>
            <name>ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x14</bitWidth>
            <description>Define the master DMA read byte length in non seg-conf-trans or seg-conf-trans mode. Invalid when SPI_RX_EOF_EN is 0. Can be configured in CONF state..</description>
            <name>MST_DMA_RD_BYTELEN</name>
          </field>
        </fields>
        <name>FSM</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x48</addressOffset>
        <description>SPI hold register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>This register is for two SPI masters to share the same cs clock and data signals. The bits of one SPI are set, if the other SPI is busy, the SPI will be hold. 1(3): hold at  idle  phase 2: hold at  prepare  phase. Can be configured in CONF state.</description>
            <name>INT_HOLD_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>spi hold output value, which should be used with SPI_HOLD_OUT_EN. Can be configured in CONF state.</description>
            <name>VAL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enable set spi output hold value to spi_hold_reg. It can be used to hold spi state machine with SPI_EXT_HOLD_EN and other usr hold signals. Can be configured in CONF state.</description>
            <name>OUT_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>set the hold cycles of output spi_hold signal when SPI_HOLD_OUT_EN is enable. Can be configured in CONF state.</description>
            <name>OUT_TIME</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1:  spi master DMA full-duplex/half-duplex seg-trans ends or slave half-duplex seg-trans ends. And data has been pushed to corresponding memory.  0:  seg-trans is not ended or not occurred.  Can not be changed by CONF_buf.</description>
            <name>DMA_SEG_TRANS_DONE</name>
          </field>
        </fields>
        <name>HOLD</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4C</addressOffset>
        <description>SPI DMA control register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to reset in dma fsm and in data fifo pointer.</description>
            <name>IN_RST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to reset out dma fsm and out data fifo pointer.</description>
            <name>OUT_RST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Reset spi dma ahb master fifo pointer.</description>
            <name>AHBM_FIFO_RST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Reset spi dma ahb master.</description>
            <name>AHBM_RST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set bit to test in link.</description>
            <name>IN_LOOP_TEST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set bit to test out link.</description>
            <name>OUT_LOOP_TEST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>when the bit is set, DMA continue to use the next inlink node when the length of inlink is 0.</description>
            <name>OUT_AUTO_WRBACK</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>out eof flag generation mode . 1: when dma pop all data from fifo  0:when ahb push all data to fifo.</description>
            <name>OUT_EOF_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>read descriptor use burst mode when read data for memory.</description>
            <name>OUTDSCR_BURST_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>read descriptor use burst mode when write data to memory.</description>
            <name>INDSCR_BURST_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>spi dma read data from memory in burst mode.</description>
            <name>OUT_DATA_BURST_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: Internal memory data transfer enable bit. Send SPI DMA RX buffer data to SPI DMA TX buffer. 0: Disable this function.</description>
            <name>MEM_TRANS_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>spi dma read data stop  when in continue tx/rx mode.</description>
            <name>DMA_RX_STOP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>spi dma write data stop when in continue tx/rx mode.</description>
            <name>DMA_TX_STOP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>spi dma continue tx/rx data.</description>
            <name>DMA_CONTINUE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: Clear spi_slv_seg_frt_pop_mask. 0 : others</description>
            <name>SLV_LAST_SEG_POP_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enable dma segment transfer in spi dma half slave mode. 1: enable. 0: disable.</description>
            <name>DMA_SLV_SEG_TRANS_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: spi_dma_infifo_full_vld is cleared by spi slave CMD5. 0: spi_dma_infifo_full_vld is cleared by SPI_TRANS_DONE.</description>
            <name>SLV_RX_SEG_TRANS_CLR_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: spi_dma_outfifo_empty_vld is cleared by spi slave CMD6. 0: spi_dma_outfifo_empty_vld is cleared by SPI_TRANS_DONE.</description>
            <name>SLV_TX_SEG_TRANS_CLR_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: SPI_IN_SUC_EOF_INT_RAW is set when the number of dma pushed data bytes is equal to the value of SPI_SLV_DMA_RD_BYTELEN[19:0]/ SPI_MST_DMA_RD_BYTELEN[19:0] in spi dma transition.  0: SPI_IN_SUC_EOF_INT_RAW is set by SPI_TRANS_DONE in non-seg-trans or SPI_DMA_SEG_TRANS_DONE in seg-trans.</description>
            <name>RX_EOF_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1:Clear spi_dma_infifo_full_vld. 0: Do not control it.</description>
            <name>DMA_INFIFO_FULL_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1:Clear spi_dma_outfifo_empty_vld. 0: Do not control it.</description>
            <name>DMA_OUTFIFO_EMPTY_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Select the external memory block size.</description>
            <name>EXT_MEM_BK_SIZE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: End slave seg-trans, which acts as 0x05 command. 2 or more end seg-trans signals will induce error in DMA RX.  0: others. Will be cleared in 1 APB CLK cycles by hardware..</description>
            <name>DMA_SEG_TRANS_CLR</name>
          </field>
        </fields>
        <name>DMA_CONF</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x200</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x50</addressOffset>
        <description>SPI DMA TX link configuration</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x14</bitWidth>
            <description>The address of the first outlink descriptor.</description>
            <name>OUTLINK_ADDR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set the bit to stop to use outlink descriptor.</description>
            <name>OUTLINK_STOP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set the bit to start to use outlink descriptor.</description>
            <name>OUTLINK_START</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set the bit to mount on new outlink descriptors.</description>
            <name>OUTLINK_RESTART</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>spi dma write data status bit.</description>
            <name>DMA_TX_ENA</name>
          </field>
        </fields>
        <name>DMA_OUT_LINK</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x54</addressOffset>
        <description>SPI DMA RX link configuration</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x14</bitWidth>
            <description>The address of the first inlink descriptor.</description>
            <name>INLINK_ADDR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>when the bit is set, the inlink descriptor returns to the first link node when a packet is error.</description>
            <name>INLINK_AUTO_RET</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set the bit to stop to use inlink descriptor.</description>
            <name>INLINK_STOP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set the bit to start to use inlink descriptor.</description>
            <name>INLINK_START</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set the bit to mount on new inlink descriptors.</description>
            <name>INLINK_RESTART</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI DMA read data status bit.</description>
            <name>DMA_RX_ENA</name>
          </field>
        </fields>
        <name>DMA_IN_LINK</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x58</addressOffset>
        <description>SPI DMA interrupt enable register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The enable bit for lack of enough inlink descriptors. Can be configured in CONF state.</description>
            <name>INLINK_DSCR_EMPTY_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The enable bit for outlink descriptor error. Can be configured in CONF state.</description>
            <name>OUTLINK_DSCR_ERROR_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The enable bit for inlink descriptor error. Can be configured in CONF state.</description>
            <name>INLINK_DSCR_ERROR_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The enable bit for completing usage of a inlink descriptor. Can be configured in CONF state.</description>
            <name>IN_DONE_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The enable bit for receiving error. Can be configured in CONF state.</description>
            <name>IN_ERR_EOF_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The enable bit for completing receiving all the packets from host. Can be configured in CONF state.</description>
            <name>IN_SUC_EOF_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The enable bit for completing usage of a outlink descriptor . Can be configured in CONF state.</description>
            <name>OUT_DONE_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The enable bit for sending a packet to host done. Can be configured in CONF state.</description>
            <name>OUT_EOF_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The enable bit for sending all the packets to host done. Can be configured in CONF state.</description>
            <name>OUT_TOTAL_EOF_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The enable bit for infifo full error interrupt.</description>
            <name>INFIFO_FULL_ERR_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The enable bit for outfifo empty error interrupt.</description>
            <name>OUTFIFO_EMPTY_ERR_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The enable bit for SPI slave CMD6 interrupt.</description>
            <name>SLV_CMD6_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The enable bit for SPI slave CMD7 interrupt.</description>
            <name>SLV_CMD7_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The enable bit for SPI slave CMD8 interrupt.</description>
            <name>SLV_CMD8_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The enable bit for SPI slave CMD9 interrupt.</description>
            <name>SLV_CMD9_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The enable bit for SPI slave CMDA interrupt.</description>
            <name>SLV_CMDA_INT_ENA</name>
          </field>
        </fields>
        <name>DMA_INT_ENA</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5C</addressOffset>
        <description>SPI DMA interrupt raw register</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw bit for lack of enough inlink descriptors. Can be configured in CONF state.</description>
            <name>INLINK_DSCR_EMPTY_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw bit for outlink descriptor error. Can be configured in CONF state.</description>
            <name>OUTLINK_DSCR_ERROR_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw bit for inlink descriptor error. Can be configured in CONF state.</description>
            <name>INLINK_DSCR_ERROR_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw bit for completing usage of a inlink descriptor. Can be configured in CONF state.</description>
            <name>IN_DONE_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw bit for receiving error. Can be configured in CONF state.</description>
            <name>IN_ERR_EOF_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw bit for completing receiving all the packets from host. Can be configured in CONF state.</description>
            <name>IN_SUC_EOF_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw bit for completing usage of a outlink descriptor. Can be configured in CONF state.</description>
            <name>OUT_DONE_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw bit for sending a packet to host done. Can be configured in CONF state.</description>
            <name>OUT_EOF_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw bit for sending all the packets to host done. Can be configured in CONF state.</description>
            <name>OUT_TOTAL_EOF_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1:SPI_DMA_INFIFO_FULL and spi_push_data_prep are valid, which means that DMA Rx buffer is full but push is valid.  0: Others.  Can not be changed by CONF_buf.</description>
            <name>INFIFO_FULL_ERR_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1:SPI_DMA_OUTFIFO_EMPTY and spi_pop_data_prep are valid, which means that there is no data to pop but pop is valid.  0: Others.  Can not be changed by CONF_buf.</description>
            <name>OUTFIFO_EMPTY_ERR_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw bit for SPI slave CMD6 interrupt.</description>
            <name>SLV_CMD6_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw bit for SPI slave CMD7 interrupt.</description>
            <name>SLV_CMD7_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw bit for SPI slave CMD8 interrupt.</description>
            <name>SLV_CMD8_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw bit for SPI slave CMD9 interrupt.</description>
            <name>SLV_CMD9_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw bit for SPI slave CMDA interrupt.</description>
            <name>SLV_CMDA_INT_RAW</name>
          </field>
        </fields>
        <name>DMA_INT_RAW</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x60</addressOffset>
        <description>SPI DMA interrupt status register</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The status bit for lack of enough inlink descriptors.</description>
            <name>INLINK_DSCR_EMPTY_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The status bit for outlink descriptor error.</description>
            <name>OUTLINK_DSCR_ERROR_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The status bit for inlink descriptor error.</description>
            <name>INLINK_DSCR_ERROR_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The status bit for completing usage of a inlink descriptor.</description>
            <name>IN_DONE_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The status bit for receiving error.</description>
            <name>IN_ERR_EOF_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The status bit for completing receiving all the packets from host.</description>
            <name>IN_SUC_EOF_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The status bit for completing usage of a outlink descriptor.</description>
            <name>OUT_DONE_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The status bit for sending a packet to host done.</description>
            <name>OUT_EOF_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The status bit for sending all the packets to host done.</description>
            <name>OUT_TOTAL_EOF_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The status bit for infifo full error.</description>
            <name>INFIFO_FULL_ERR_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The status bit for outfifo empty error.</description>
            <name>OUTFIFO_EMPTY_ERR_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The status bit for SPI slave CMD6 interrupt.</description>
            <name>SLV_CMD6_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The status bit for SPI slave CMD7 interrupt.</description>
            <name>SLV_CMD7_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The status bit for SPI slave CMD8 interrupt.</description>
            <name>SLV_CMD8_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The status bit for SPI slave CMD9 interrupt.</description>
            <name>SLV_CMD9_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The status bit for SPI slave CMDA interrupt.</description>
            <name>SLV_CMDA_INT_ST</name>
          </field>
        </fields>
        <name>DMA_INT_ST</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x64</addressOffset>
        <description>SPI DMA interrupt clear register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The clear bit for lack of enough inlink descriptors. Can be configured in CONF state.</description>
            <name>INLINK_DSCR_EMPTY_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The clear bit for outlink descriptor error. Can be configured in CONF state.</description>
            <name>OUTLINK_DSCR_ERROR_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The clear bit for inlink descriptor error. Can be configured in CONF state.</description>
            <name>INLINK_DSCR_ERROR_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The clear bit for completing usage of a inlink descriptor. Can be configured in CONF state.</description>
            <name>IN_DONE_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The clear bit for receiving error. Can be configured in CONF state.</description>
            <name>IN_ERR_EOF_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The clear bit for completing receiving all the packets from host. Can be configured in CONF state.</description>
            <name>IN_SUC_EOF_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The clear bit for completing usage of a outlink descriptor. Can be configured in CONF state.</description>
            <name>OUT_DONE_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The clear bit for sending a packet to host done. Can be configured in CONF state.</description>
            <name>OUT_EOF_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The clear bit for sending all the packets to host done. Can be configured in CONF state.</description>
            <name>OUT_TOTAL_EOF_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: Clear SPI_INFIFO_FULL_ERR_INT_RAW. 0: not valid. Can be changed by CONF_buf.</description>
            <name>INFIFO_FULL_ERR_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: Clear SPI_OUTFIFO_EMPTY_ERR_INT_RAW signal. 0: not valid. Can be changed by CONF_buf.</description>
            <name>OUTFIFO_EMPTY_ERR_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The clear bit for SPI slave CMD6 interrupt.</description>
            <name>SLV_CMD6_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The clear bit for SPI slave CMD7 interrupt.</description>
            <name>SLV_CMD7_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The clear bit for SPI slave CMD8 interrupt.</description>
            <name>SLV_CMD8_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The clear bit for SPI slave CMD9 interrupt.</description>
            <name>SLV_CMD9_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The clear bit for SPI slave CMDA interrupt.</description>
            <name>SLV_CMDA_INT_CLR</name>
          </field>
        </fields>
        <name>DMA_INT_CLR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x68</addressOffset>
        <description>The latest SPI DMA  RX descriptor address receiving error</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The inlink descriptor address when spi dma produce receiving error.</description>
            <name>DMA_IN_ERR_EOF_DES_ADDR</name>
          </field>
        </fields>
        <name>IN_ERR_EOF_DES_ADDR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x6C</addressOffset>
        <description>The latest SPI DMA  eof RX descriptor address</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The last inlink descriptor address when spi dma produce from_suc_eof.</description>
            <name>DMA_IN_SUC_EOF_DES_ADDR</name>
          </field>
        </fields>
        <name>IN_SUC_EOF_DES_ADDR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x70</addressOffset>
        <description>Current SPI DMA RX descriptor pointer</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The content of current in descriptor pointer.</description>
            <name>DMA_INLINK_DSCR</name>
          </field>
        </fields>
        <name>INLINK_DSCR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x74</addressOffset>
        <description>Next SPI DMA RX descriptor pointer</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The content of next in descriptor pointer.</description>
            <name>DMA_INLINK_DSCR_BF0</name>
          </field>
        </fields>
        <name>INLINK_DSCR_BF0</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x78</addressOffset>
        <description>Current SPI DMA RX buffer pointer</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The content of current in descriptor data buffer pointer.</description>
            <name>DMA_INLINK_DSCR_BF1</name>
          </field>
        </fields>
        <name>INLINK_DSCR_BF1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x7C</addressOffset>
        <description>The latest SPI DMA  eof TX buffer address</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The address of buffer relative to the outlink descriptor that produce eof.</description>
            <name>DMA_OUT_EOF_BFR_DES_ADDR</name>
          </field>
        </fields>
        <name>OUT_EOF_BFR_DES_ADDR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x80</addressOffset>
        <description>The latest SPI DMA  eof TX descriptor address</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The last outlink descriptor address when spi dma produce to_eof.</description>
            <name>DMA_OUT_EOF_DES_ADDR</name>
          </field>
        </fields>
        <name>OUT_EOF_DES_ADDR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x84</addressOffset>
        <description>Current SPI DMA TX descriptor pointer</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The content of current out descriptor pointer.</description>
            <name>DMA_OUTLINK_DSCR</name>
          </field>
        </fields>
        <name>OUTLINK_DSCR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x88</addressOffset>
        <description>Next SPI DMA TX descriptor pointer</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The content of next out descriptor pointer.</description>
            <name>DMA_OUTLINK_DSCR_BF0</name>
          </field>
        </fields>
        <name>OUTLINK_DSCR_BF0</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8C</addressOffset>
        <description>Current SPI DMA TX buffer pointer</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The content of current out descriptor data buffer pointer.</description>
            <name>DMA_OUTLINK_DSCR_BF1</name>
          </field>
        </fields>
        <name>OUTLINK_DSCR_BF1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x90</addressOffset>
        <description>SPI DMA TX status</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x12</bitWidth>
            <description>SPI dma out descriptor address.</description>
            <name>DMA_OUTDSCR_ADDR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>SPI dma out descriptor state.</description>
            <name>DMA_OUTDSCR_STATE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>SPI dma out data state.</description>
            <name>DMA_OUT_STATE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x7</bitWidth>
            <description>The remains of SPI dma outfifo data.</description>
            <name>DMA_OUTFIFO_CNT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI dma outfifo is full.</description>
            <name>DMA_OUTFIFO_FULL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI dma outfifo is empty.</description>
            <name>DMA_OUTFIFO_EMPTY</name>
          </field>
        </fields>
        <name>DMA_OUTSTATUS</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x80000000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x94</addressOffset>
        <description>SPI DMA RX status</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x12</bitWidth>
            <description>SPI dma in descriptor address.</description>
            <name>DMA_INDSCR_ADDR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>SPI dma in descriptor state.</description>
            <name>DMA_INDSCR_STATE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>SPI dma in data state.</description>
            <name>DMA_IN_STATE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x7</bitWidth>
            <description>The remains of SPI dma infifo data.</description>
            <name>DMA_INFIFO_CNT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI dma infifo is full.</description>
            <name>DMA_INFIFO_FULL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI dma infifo is empty.</description>
            <name>DMA_INFIFO_EMPTY</name>
          </field>
        </fields>
        <name>DMA_INSTATUS</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x80000000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x98</addressOffset>
        <description>Data buffer 0</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>32 bits data buffer 0, transferred in the unit of byte. Byte addressable in slave half-duplex mode.</description>
            <name>BUF0</name>
          </field>
        </fields>
        <name>W0</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9C</addressOffset>
        <description>Data buffer 1</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>32 bits data buffer 1, transferred in the unit of byte. Byte addressable in slave half-duplex mode.</description>
            <name>BUF1</name>
          </field>
        </fields>
        <name>W1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA0</addressOffset>
        <description>Data buffer 2</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>32 bits data buffer 2, transferred in the unit of byte. Byte addressable in slave half-duplex mode.</description>
            <name>BUF2</name>
          </field>
        </fields>
        <name>W2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA4</addressOffset>
        <description>Data buffer 3</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>32 bits data buffer 3, transferred in the unit of byte. Byte addressable in slave half-duplex mode.</description>
            <name>BUF3</name>
          </field>
        </fields>
        <name>W3</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA8</addressOffset>
        <description>Data buffer 4</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>32 bits data buffer 4, transferred in the unit of byte. Byte addressable in slave half-duplex mode.</description>
            <name>BUF4</name>
          </field>
        </fields>
        <name>W4</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAC</addressOffset>
        <description>Data buffer 5</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>32 bits data buffer 5, transferred in the unit of byte. Byte addressable in slave half-duplex mode.</description>
            <name>BUF5</name>
          </field>
        </fields>
        <name>W5</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB0</addressOffset>
        <description>Data buffer 6</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>32 bits data buffer 6, transferred in the unit of byte. Byte addressable in slave half-duplex mode.</description>
            <name>BUF6</name>
          </field>
        </fields>
        <name>W6</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB4</addressOffset>
        <description>Data buffer 7</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>32 bits data buffer 7, transferred in the unit of byte. Byte addressable in slave half-duplex mode.</description>
            <name>BUF7</name>
          </field>
        </fields>
        <name>W7</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB8</addressOffset>
        <description>Data buffer 8</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>32 bits data buffer 8, transferred in the unit of byte. Byte addressable in slave half-duplex mode.</description>
            <name>BUF8</name>
          </field>
        </fields>
        <name>W8</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBC</addressOffset>
        <description>Data buffer 9</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>32 bits data buffer 9, transferred in the unit of byte. Byte addressable in slave half-duplex mode.</description>
            <name>BUF9</name>
          </field>
        </fields>
        <name>W9</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xC0</addressOffset>
        <description>Data buffer 10</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>32 bits data buffer 10, transferred in the unit of byte. Byte addressable in slave half-duplex mode.</description>
            <name>BUF10</name>
          </field>
        </fields>
        <name>W10</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xC4</addressOffset>
        <description>Data buffer 11</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>32 bits data buffer 11, transferred in the unit of byte. Byte addressable in slave half-duplex mode.</description>
            <name>BUF11</name>
          </field>
        </fields>
        <name>W11</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xC8</addressOffset>
        <description>Data buffer 12</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>32 bits data buffer 12, transferred in the unit of byte. Byte addressable in slave half-duplex mode.</description>
            <name>BUF12</name>
          </field>
        </fields>
        <name>W12</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xCC</addressOffset>
        <description>Data buffer 13</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>32 bits data buffer 13, transferred in the unit of byte. Byte addressable in slave half-duplex mode.</description>
            <name>BUF13</name>
          </field>
        </fields>
        <name>W13</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xD0</addressOffset>
        <description>Data buffer 14</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>32 bits data buffer 14, transferred in the unit of byte. Byte addressable in slave half-duplex mode.</description>
            <name>BUF14</name>
          </field>
        </fields>
        <name>W14</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xD4</addressOffset>
        <description>Data buffer 15</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>32 bits data buffer 15, transferred in the unit of byte. Byte addressable in slave half-duplex mode.</description>
            <name>BUF15</name>
          </field>
        </fields>
        <name>W15</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xD8</addressOffset>
        <description>Data buffer 16</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>32 bits data buffer 16, transferred in the unit of byte. Byte addressable in slave half-duplex mode.</description>
            <name>BUF16</name>
          </field>
        </fields>
        <name>W16</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xDC</addressOffset>
        <description>Data buffer 17</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>32 bits data buffer 17, transferred in the unit of byte. Byte addressable in slave half-duplex mode.</description>
            <name>BUF17</name>
          </field>
        </fields>
        <name>W17</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xE0</addressOffset>
        <description>SPI input delay mode configuration</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the input signals are delayed by system clock cycles, 0: input without delayed, 1: input with the posedge of clk_apb,2 input with the negedge of clk_apb, 3: input with the spi_clk. Can be configured in CONF state.</description>
            <name>DIN0_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the input signals are delayed by system clock cycles, 0: input without delayed, 1: input with the posedge of clk_apb,2 input with the negedge of clk_apb, 3: input with the spi_clk. Can be configured in CONF state.</description>
            <name>DIN1_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the input signals are delayed by system clock cycles, 0: input without delayed, 1: input with the posedge of clk_apb,2 input with the negedge of clk_apb, 3: input with the spi_clk. Can be configured in CONF state.</description>
            <name>DIN2_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the input signals are delayed by system clock cycles, 0: input without delayed, 1: input with the posedge of clk_apb,2 input with the negedge of clk_apb, 3: input with the spi_clk. Can be configured in CONF state.</description>
            <name>DIN3_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the input signals are delayed by system clock cycles, 0: input without delayed, 1: input with the posedge of clk_apb,2 input with the negedge of clk_apb, 3: input with the spi_clk. Can be configured in CONF state.</description>
            <name>DIN4_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the input signals are delayed by system clock cycles, 0: input without delayed, 1: input with the posedge of clk_apb,2 input with the negedge of clk_apb, 3: input with the spi_clk. Can be configured in CONF state.</description>
            <name>DIN5_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the input signals are delayed by system clock cycles, 0: input without delayed, 1: input with the posedge of clk_apb,2 input with the negedge of clk_apb, 3: input with the spi_clk. Can be configured in CONF state.</description>
            <name>DIN6_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the input signals are delayed by system clock cycles, 0: input without delayed, 1: input with the posedge of clk_apb,2 input with the negedge of clk_apb, 3: input with the spi_clk. Can be configured in CONF state.</description>
            <name>DIN7_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1:enable hclk in spi_timing.v.  0: disable it. Can be configured in CONF state.</description>
            <name>TIMING_CLK_ENA</name>
          </field>
        </fields>
        <name>DIN_MODE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xE4</addressOffset>
        <description>SPI input delay number configuration</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the input signals are delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,...  Can be configured in CONF state.</description>
            <name>DIN0_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the input signals are delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,...  Can be configured in CONF state.</description>
            <name>DIN1_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the input signals are delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,...  Can be configured in CONF state.</description>
            <name>DIN2_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the input signals are delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,...  Can be configured in CONF state.</description>
            <name>DIN3_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the input signals are delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,...  Can be configured in CONF state.</description>
            <name>DIN4_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the input signals are delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,...  Can be configured in CONF state.</description>
            <name>DIN5_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the input signals are delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,...  Can be configured in CONF state.</description>
            <name>DIN6_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the input signals are delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,...  Can be configured in CONF state.</description>
            <name>DIN7_NUM</name>
          </field>
        </fields>
        <name>DIN_NUM</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xE8</addressOffset>
        <description>SPI output delay mode configuration</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the output signals are delayed by system clock cycles, 0: output without delayed, 1: output with the posedge of clk_apb,2 output with the negedge of clk_apb, 3: output with the spi_clk. Can be configured in CONF state.</description>
            <name>DOUT0_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the output signals are delayed by system clock cycles, 0: output without delayed, 1: output with the posedge of clk_apb,2 output with the negedge of clk_apb, 3: output with the spi_clk. Can be configured in CONF state.</description>
            <name>DOUT1_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the output signals are delayed by system clock cycles, 0: output without delayed, 1: output with the posedge of clk_apb,2 output with the negedge of clk_apb, 3: output with the spi_clk. Can be configured in CONF state.</description>
            <name>DOUT2_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the output signals are delayed by system clock cycles, 0: output without delayed, 1: output with the posedge of clk_apb,2 output with the negedge of clk_apb, 3: output with the spi_clk. Can be configured in CONF state.</description>
            <name>DOUT3_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the output signals are delayed by system clock cycles, 0: output without delayed, 1: output with the posedge of clk_apb,2 output with the negedge of clk_apb, 3: output with the spi_clk. Can be configured in CONF state.</description>
            <name>DOUT4_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the output signals are delayed by system clock cycles, 0: output without delayed, 1: output with the posedge of clk_apb,2 output with the negedge of clk_apb, 3: output with the spi_clk. Can be configured in CONF state.</description>
            <name>DOUT5_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the output signals are delayed by system clock cycles, 0: output without delayed, 1: output with the posedge of clk_apb,2 output with the negedge of clk_apb, 3: output with the spi_clk. Can be configured in CONF state.</description>
            <name>DOUT6_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the output signals are delayed by system clock cycles, 0: output without delayed, 1: output with the posedge of clk_apb,2 output with the negedge of clk_apb, 3: output with the spi_clk. Can be configured in CONF state.</description>
            <name>DOUT7_MODE</name>
          </field>
        </fields>
        <name>DOUT_MODE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xEC</addressOffset>
        <description>SPI output delay number configuration</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the output signals are delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,... Can be configured in CONF state.</description>
            <name>DOUT0_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the output signals are delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,... Can be configured in CONF state.</description>
            <name>DOUT1_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the output signals are delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,... Can be configured in CONF state.</description>
            <name>DOUT2_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the output signals are delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,... Can be configured in CONF state.</description>
            <name>DOUT3_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the output signals are delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,... Can be configured in CONF state.</description>
            <name>DOUT4_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the output signals are delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,... Can be configured in CONF state.</description>
            <name>DOUT5_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the output signals are delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,... Can be configured in CONF state.</description>
            <name>DOUT6_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the output signals are delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,... Can be configured in CONF state.</description>
            <name>DOUT7_NUM</name>
          </field>
        </fields>
        <name>DOUT_NUM</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xF0</addressOffset>
        <description>LCD frame control register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xB</bitWidth>
            <description>It is the horizontal blank front porch of a frame. Can be configured in CONF state.</description>
            <name>LCD_HB_FRONT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>It is the vertical active height of a frame. Can be configured in CONF state.</description>
            <name>LCD_VA_HEIGHT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>It is the vertical total height of a frame. Can be configured in CONF state.</description>
            <name>LCD_VT_HEIGHT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: Enable LCD mode output vsync, hsync, de. 0: Disable. Can be configured in CONF state.</description>
            <name>LCD_MODE_EN</name>
          </field>
        </fields>
        <name>LCD_CTRL</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xF4</addressOffset>
        <description>LCD frame control1 register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>It is the vertical blank front porch of a frame. Can be configured in CONF state.</description>
            <name>LCD_VB_FRONT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0xC</bitWidth>
            <description>It is the horizontal active width of a frame. Can be configured in CONF state.</description>
            <name>LCD_HA_WIDTH</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0xC</bitWidth>
            <description>It is the horizontal total width of a frame. Can be configured in CONF state.</description>
            <name>LCD_HT_WIDTH</name>
          </field>
        </fields>
        <name>LCD_CTRL1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xF8</addressOffset>
        <description>LCD frame control2 register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x7</bitWidth>
            <description>It is the position of spi_vsync active pulse in a line. Can be configured in CONF state.</description>
            <name>LCD_VSYNC_WIDTH</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>It is the idle value of spi_vsync. Can be configured in CONF state.</description>
            <name>VSYNC_IDLE_POL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x7</bitWidth>
            <description>It is the position of spi_hsync active pulse in a line. Can be configured in CONF state.</description>
            <name>LCD_HSYNC_WIDTH</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>It is the idle value of spi_hsync. Can be configured in CONF state.</description>
            <name>HSYNC_IDLE_POL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>It is the position of spi_hsync active pulse in a line. Can be configured in CONF state.</description>
            <name>LCD_HSYNC_POSITION</name>
          </field>
        </fields>
        <name>LCD_CTRL2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10001</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xFC</addressOffset>
        <description>LCD delay number</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the output spi_dqs is delayed by system clock cycles, 0: output without delayed, 1: output with the posedge of clk_apb,2 output with the negedge of clk_apb, 3: output with the spi_clk. Can be configured in CONF state.</description>
            <name>D_DQS_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the output spi_cd is delayed by system clock cycles, 0: output without delayed, 1: output with the posedge of clk_apb,2 output with the negedge of clk_apb, 3: output with the spi_clk. Can be configured in CONF state.</description>
            <name>D_CD_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the output spi_de is delayed by system clock cycles, 0: output without delayed, 1: output with the posedge of clk_apb,2 output with the negedge of clk_apb, 3: output with the spi_clk. Can be configured in CONF state.</description>
            <name>D_DE_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the output spi_hsync is delayed by system clock cycles, 0: output without delayed, 1: output with the posedge of clk_apb,2 output with the negedge of clk_apb, 3: output with the spi_clk. Can be configured in CONF state.</description>
            <name>D_HSYNC_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the output spi_vsync is delayed by system clock cycles, 0: output without delayed, 1: output with the posedge of clk_apb,2 output with the negedge of clk_apb, 3: output with the spi_clk. Can be configured in CONF state.</description>
            <name>D_VSYNC_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>It is the idle value of spi_de.</description>
            <name>DE_IDLE_POL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: The pulse of spi_hsync is out in vertical blanking lines in seg-trans or one trans. 0: spi_hsync pulse is valid only in active region lines in seg-trans.</description>
            <name>HS_BLANK_EN</name>
          </field>
        </fields>
        <name>LCD_D_MODE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x100</addressOffset>
        <description>LCD delay mode</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the output spi_dqs is delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,... Can be configured in CONF state.</description>
            <name>D_DQS_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the output spi_cd is delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,... Can be configured in CONF state.</description>
            <name>D_CD_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the output spi_de is delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,... Can be configured in CONF state.</description>
            <name>D_DE_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the output spi_hsync is delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,... Can be configured in CONF state.</description>
            <name>D_HSYNC_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the output spi_vsync is delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,... Can be configured in CONF state.</description>
            <name>D_VSYNC_NUM</name>
          </field>
        </fields>
        <name>LCD_D_NUM</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3FC</addressOffset>
        <description>SPI version control</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1C</bitWidth>
            <description>SPI register version.</description>
            <name>DATE</name>
          </field>
        </fields>
        <name>REG_DATE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x1907240</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <resetMask>0xFFFFFFFF</resetMask>
    <resetValue>0x0</resetValue>
  </peripheral>
</peripherals>
<peripherals>
  <peripheral>
    <addressBlock>
      <offset>0x0</offset>
      <size>0x108</size>
      <usage>registers</usage>
    </addressBlock>
    <baseAddress>0x3F437000</baseAddress>
    <derivedFrom>SPI0</derivedFrom>
    <description>SPI (Serial Peripheral Interface) Controller</description>
    <groupName>SPI</groupName>
    <interrupts>
      <interrupt>
        <name>SPI4_DMA</name>
        <value>0x55</value>
      </interrupt>
    </interrupts>
    <interrupts>
      <interrupt>
        <name>SPI4</name>
        <value>0x56</value>
      </interrupt>
    </interrupts>
    <name>SPI4</name>
    <registers>
      <register>
        <addressOffset>0x0</addressOffset>
        <description>Command control register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x17</bitWidth>
            <description>Define the spi_clk cycles of  SPI_CONF state. Can be configured in CONF state.</description>
            <name>CONF_BITLEN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>User define command enable.  An operation will be triggered when the bit is set. The bit will be cleared once the operation done.1: enable 0: disable. Can not be changed by CONF_buf.</description>
            <name>USR</name>
          </field>
        </fields>
        <name>CMD</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4</addressOffset>
        <description>Address value</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>[31:8]:address to slave, [7:0]:Reserved. Can be configured in CONF state.</description>
            <name>USR_ADDR_VALUE</name>
          </field>
        </fields>
        <name>ADDR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8</addressOffset>
        <description>SPI control register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set the bit to hold spi. The bit is combined with SPI_USR_PREP_HOLD,SPI_USR_CMD_HOLD,SPI_USR_ADDR_HOLD,SPI_USR_DUMMY_HOLD,SPI_USR_DIN_HOLD,SPI_USR_DOUT_HOLD and SPI_USR_HOLD_POL. Can be configured in CONF state.</description>
            <name>EXT_HOLD_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>In the dummy phase the signal level of spi is output by the spi controller. Can be configured in CONF state.</description>
            <name>DUMMY_OUT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Apply 2-bit mode during addr phase 1:enable 0: disable. Can be configured in CONF state.</description>
            <name>FADDR_DUAL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Apply 4-bit mode during addr phase 1:enable 0: disable. Can be configured in CONF state.</description>
            <name>FADDR_QUAD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Apply 8-bit mode during addr phase 1:enable 0: disable. Can be configured in CONF state.</description>
            <name>FADDR_OCT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Apply 2-bit mode during command phase 1:enable 0: disable. Can be configured in CONF state.</description>
            <name>FCMD_DUAL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Apply 4-bit mode during command phase 1:enable 0: disable. Can be configured in CONF state.</description>
            <name>FCMD_QUAD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Apply 8-bit mode during command phase 1:enable 0: disable. Can be configured in CONF state.</description>
            <name>FCMD_OCT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>In the read operations, read-data phase is in 2-bit mode. 1: enable 0: disable. Can be configured in CONF state.</description>
            <name>FREAD_DUAL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>In the read operations read-data phase is in 4-bit mode. 1: enable 0: disable.  Can be configured in CONF state.</description>
            <name>FREAD_QUAD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>In the read operations read-data phase is in 8-bit mode. 1: enable 0: disable.  Can be configured in CONF state.</description>
            <name>FREAD_OCT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to set MISO line polarity, 1: high 0, low. Can be configured in CONF state.</description>
            <name>Q_POL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to set MOSI line polarity, 1: high 0, low. Can be configured in CONF state.</description>
            <name>D_POL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Write protect signal output when SPI is idle.  1: output high, 0: output low.  Can be configured in CONF state.</description>
            <name>WP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>In read-data (MISO) phase 1: LSB first 0: MSB first. Can be configured in CONF state.</description>
            <name>RD_BIT_ORDER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>In command address write-data (MOSI) phases 1: LSB firs 0: MSB first. Can be configured in CONF state.</description>
            <name>WR_BIT_ORDER</name>
          </field>
        </fields>
        <name>CTRL</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x2C0000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xC</addressOffset>
        <description>SPI control register 1</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>SPI clock mode bits. 0: SPI clock is off when CS inactive 1: SPI clock is delayed one cycle after CS inactive 2: SPI clock is delayed two cycles after CS inactive 3: SPI clock is alwasy on. Can be configured in CONF state.</description>
            <name>CLK_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>{CPOL, CPHA},1: support spi clk mode 1 and 3, first edge output data B[0]/B[7].  0: support spi clk mode 0 and 2, first edge output data B[1]/B[6].</description>
            <name>CLK_MODE_13</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>It saves half a cycle when tsck is the same as rsck. 1: output data at rsck posedge   0: output data at tsck posedge</description>
            <name>RSCK_DATA_OUT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1:SPI_BUF16~SPI_BUF17 can be written   0:SPI_BUF16~SPI_BUF17 can not  be written. Can be configured in CONF state.</description>
            <name>W16_17_WR_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>SPI cs signal is delayed by spi clock cycles. Can be configured in CONF state.</description>
            <name>CS_HOLD_DELAY</name>
          </field>
        </fields>
        <name>CTRL1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x4010</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x10</addressOffset>
        <description>SPI control register 2</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xD</bitWidth>
            <description>(cycles+1) of prepare phase by spi clock this bits are combined with SPI_CS_SETUP bit. Can be configured in CONF state.</description>
            <name>CS_SETUP_TIME</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0xD</bitWidth>
            <description>delay cycles of cs pin by spi clock this bits are combined with SPI_CS_HOLD bit. Can be configured in CONF state.</description>
            <name>CS_HOLD_TIME</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>spi_cs signal is delayed by spi_clk . 0: zero 1: if SPI_CK_OUT_EDGE or SPI_CK_IDLE_EDGE is set 1 delayed by half cycle  else delayed by one cycle 2: if SPI_CK_OUT_EDGE or  SPI_CK_IDLE_EDGE is set 1 delayed by one cycle, else delayed by half cycle 3: delayed one cycle. Can be configured in CONF state.</description>
            <name>CS_DELAY_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>spi_cs signal is delayed by system clock cycles. Can be configured in CONF state.</description>
            <name>CS_DELAY_NUM</name>
          </field>
        </fields>
        <name>CTRL2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x2000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x14</addressOffset>
        <description>SPI clock control register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>In the master mode it must be equal to SPI_CLKCNT_N. In the slave mode it must be 0. Can be configured in CONF state.</description>
            <name>CLKCNT_L</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>In the master mode it must be floor((SPI_CLKCNT_N+1)/2-1). In the slave mode it must be 0. Can be configured in CONF state.</description>
            <name>CLKCNT_H</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>In the master mode it is the divider of spi_clk. So spi_clk frequency is system/(SPI_CLKDIV_PRE+1)/(SPI_CLKCNT_N+1). Can be configured in CONF state.</description>
            <name>CLKCNT_N</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0xD</bitWidth>
            <description>In the master mode it is pre-divider of spi_clk.  Can be configured in CONF state.</description>
            <name>CLKDIV_PRE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>In the master mode 1: spi_clk is eqaul to system 0: spi_clk is divided from system clock. Can be configured in CONF state.</description>
            <name>CLK_EQU_SYSCLK</name>
          </field>
        </fields>
        <name>CLOCK</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x80003043</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x18</addressOffset>
        <description>SPI USER control register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set the bit to enable full duplex communication. 1: enable 0: disable. Can be configured in CONF state.</description>
            <name>DOUTDIN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Both for master mode and slave mode. 1: spi controller is in QPI mode. 0: others. Can be configured in CONF state.</description>
            <name>QPI_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Just for master mode. 1: spi controller is in OPI mode (all in 8-bit mode). 0: others. Can be configured in CONF state.</description>
            <name>OPI_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>In the slave mode, this bit can be used to change the polarity of tsck. 0: tsck = spi_ck_i. 1:tsck = !spi_ck_i.</description>
            <name>TSCK_I_EDGE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>spi cs keep low when spi is in  done  phase. 1: enable 0: disable. Can be configured in CONF state.</description>
            <name>CS_HOLD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>spi cs is enable when spi is in  prepare  phase. 1: enable 0: disable. Can be configured in CONF state.</description>
            <name>CS_SETUP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>In the slave mode, this bit can be used to change the polarity of rsck. 0: rsck = !spi_ck_i. 1:rsck = spi_ck_i.</description>
            <name>RSCK_I_EDGE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>the bit combined with SPI_DOUT_MODE register to set mosi signal delay mode. Can be configured in CONF state.</description>
            <name>CK_OUT_EDGE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>In read-data (MISO) phase 1: big-endian 0: little_endian. Can be configured in CONF state.</description>
            <name>RD_BYTE_ORDER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>In command address write-data (MOSI) phases 1: big-endian 0: litte_endian. Can be configured in CONF state.</description>
            <name>WR_BYTE_ORDER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>In the write operations read-data phase is in 2-bit mode. Can be configured in CONF state.</description>
            <name>FWRITE_DUAL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>In the write operations read-data phase is in 4-bit mode. Can be configured in CONF state.</description>
            <name>FWRITE_QUAD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>In the write operations read-data phase is in 8-bit mode. Can be configured in CONF state.</description>
            <name>FWRITE_OCT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: Enable the DMA CONF phase of next seg-trans operation, which means seg-trans will continue. 0: The seg-trans will end after the current SPI seg-trans or this is not seg-trans mode. Can be configured in CONF state.</description>
            <name>USR_CONF_NXT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set the bit to enable 3-line half duplex communication mosi and miso signals share the same pin. 1: enable 0: disable. Can be configured in CONF state.</description>
            <name>SIO</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>It is combined with hold bits to set the polarity of spi hold line 1: spi will be held when spi hold line is high 0: spi will be held when spi hold line is low. Can be configured in CONF state.</description>
            <name>USR_HOLD_POL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>spi is hold at data out state the bit are combined with SPI_USR_HOLD_POL bit. Can be configured in CONF state.</description>
            <name>USR_DOUT_HOLD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>spi is hold at data in state the bit are combined with SPI_USR_HOLD_POL bit. Can be configured in CONF state.</description>
            <name>USR_DIN_HOLD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>spi is hold at dummy state the bit are combined with SPI_USR_HOLD_POL bit. Can be configured in CONF state.</description>
            <name>USR_DUMMY_HOLD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>spi is hold at address state the bit are combined with SPI_USR_HOLD_POL bit. Can be configured in CONF state.</description>
            <name>USR_ADDR_HOLD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>spi is hold at command state the bit are combined with SPI_USR_HOLD_POL bit. Can be configured in CONF state.</description>
            <name>USR_CMD_HOLD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>spi is hold at prepare state the bit are combined with SPI_USR_HOLD_POL bit. Can be configured in CONF state.</description>
            <name>USR_PREP_HOLD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>read-data phase only access to high-part of the buffer SPI_BUF8~SPI_BUF17. 1: enable 0: disable. Can be configured in CONF state.</description>
            <name>USR_MISO_HIGHPART</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>write-data phase only access to high-part of the buffer SPI_BUF8~SPI_BUF17. 1: enable 0: disable.  Can be configured in CONF state.</description>
            <name>USR_MOSI_HIGHPART</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>spi clock is disable in dummy phase when the bit is enable. Can be configured in CONF state.</description>
            <name>USR_DUMMY_IDLE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This bit enable the write-data phase of an operation. Can be configured in CONF state.</description>
            <name>USR_MOSI</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This bit enable the read-data phase of an operation. Can be configured in CONF state.</description>
            <name>USR_MISO</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This bit enable the dummy phase of an operation. Can be configured in CONF state.</description>
            <name>USR_DUMMY</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This bit enable the address phase of an operation. Can be configured in CONF state.</description>
            <name>USR_ADDR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This bit enable the command phase of an operation. Can be configured in CONF state.</description>
            <name>USR_COMMAND</name>
          </field>
        </fields>
        <name>USER</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x800000C0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1C</addressOffset>
        <description>SPI USER control register 1</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>The length in spi_clk cycles of dummy phase. The register value shall be (cycle_num-1). Can be configured in CONF state.</description>
            <name>USR_DUMMY_CYCLELEN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>The length in bits of address phase. The register value shall be (bit_num-1). Can be configured in CONF state.</description>
            <name>USR_ADDR_BITLEN</name>
          </field>
        </fields>
        <name>USER1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xB8000007</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x20</addressOffset>
        <description>SPI USER control register 2</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>The value of  command. Can be configured in CONF state.</description>
            <name>USR_COMMAND_VALUE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>The length in bits of command phase. The register value shall be (bit_num-1). Can be configured in CONF state.</description>
            <name>USR_COMMAND_BITLEN</name>
          </field>
        </fields>
        <name>USER2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x70000000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x24</addressOffset>
        <description>MOSI length</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x17</bitWidth>
            <description>The length in bits of write-data. The register value shall be (bit_num-1). Can be configured in CONF state.</description>
            <name>USR_MOSI_DBITLEN</name>
          </field>
        </fields>
        <name>MOSI_DLEN</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x28</addressOffset>
        <description>MISO length</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x17</bitWidth>
            <description>The length in bits of  read-data. The register value shall be (bit_num-1). Can be configured in CONF state.</description>
            <name>USR_MISO_DBITLEN</name>
          </field>
        </fields>
        <name>MISO_DLEN</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2C</addressOffset>
        <description>SPI misc register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI CS0 pin enable, 1: disable CS0, 0: SPI_CS0 signal is from/to CS0 pin. Can be configured in CONF state.</description>
            <name>CS0_DIS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI CS1 pin enable, 1: disable CS1, 0: SPI_CS1 signal is from/to CS1 pin. Can be configured in CONF state.</description>
            <name>CS1_DIS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI CS2 pin enable, 1: disable CS2, 0: SPI_CS2 signal is from/to CS2 pin. Can be configured in CONF state.</description>
            <name>CS2_DIS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI CS3 pin enable, 1: disable CS3, 0: SPI_CS3 signal is from/to CS3 pin. Can be configured in CONF state.</description>
            <name>CS3_DIS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI CS4 pin enable, 1: disable CS4, 0: SPI_CS4 signal is from/to CS4 pin. Can be configured in CONF state.</description>
            <name>CS4_DIS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI CS5 pin enable, 1: disable CS5, 0: SPI_CS5 signal is from/to CS5 pin. Can be configured in CONF state.</description>
            <name>CS5_DIS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: spi clk out disable,  0: spi clk out enable. Can be configured in CONF state.</description>
            <name>CK_DIS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>In the master mode the bits are the polarity of spi cs line, the value is equivalent to spi_cs ^ SPI_MASTER_CS_POL. Can be configured in CONF state.</description>
            <name>MASTER_CS_POL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: SPI master DTR mode is applied to SPI clk, data and spi_dqs.  0: SPI master DTR mode is  only applied to spi_dqs. This bit should be used with bit 17/18/19.</description>
            <name>CLK_DATA_DTR_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: SPI clk and data of SPI_DOUT and SPI_DIN state are in DTR mode, including master 1/2/4/8-bm.  0:  SPI clk and data of SPI_DOUT and SPI_DIN state are in STR mode. Can be configured in CONF state.</description>
            <name>DATA_DTR_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: SPI clk and data of SPI_SEND_ADDR state are in DTR mode, including master 1/2/4/8-bm.  0:  SPI clk and data of SPI_SEND_ADDR state are in STR mode. Can be configured in CONF state.</description>
            <name>ADDR_DTR_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: SPI clk and data of SPI_SEND_CMD state are in DTR mode, including master 1/2/4/8-bm.  0:  SPI clk and data of SPI_SEND_CMD state are in STR mode. Can be configured in CONF state.</description>
            <name>CMD_DTR_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: spi_cd = !SPI_CD_IDLE_EDGE when SPI_ST[3:0] is in SPI_DOUT or SPI_DIN state.  0: spi_cd = SPI_CD_IDLE_EDGE. Can be configured in CONF state.</description>
            <name>CD_DATA_SET</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: spi_cd = !SPI_CD_IDLE_EDGE when SPI_ST[3:0] is in SPI_DUMMY state.  0: spi_cd = SPI_CD_IDLE_EDGE. Can be configured in CONF state.</description>
            <name>CD_DUMMY_SET</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: spi_cd = !SPI_CD_IDLE_EDGE when SPI_ST[3:0] is in SPI_SEND_ADDR state.  0: spi_cd = SPI_CD_IDLE_EDGE. Can be configured in CONF state.</description>
            <name>CD_ADDR_SET</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>spi slave input cs polarity select. 1: inv  0: not change. Can be configured in CONF state.</description>
            <name>SLAVE_CS_POL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The default value of spi_dqs. Can be configured in CONF state.</description>
            <name>DQS_IDLE_EDGE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: spi_cd = !SPI_CD_IDLE_EDGE when SPI_ST[3:0] is in SPI_SEND_CMD state.  0: spi_cd = SPI_CD_IDLE_EDGE. Can be configured in CONF state.</description>
            <name>CD_CMD_SET</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The default value of spi_cd. Can be configured in CONF state.</description>
            <name>CD_IDLE_EDGE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: spi clk line is high when idle     0: spi clk line is low when idle. Can be configured in CONF state.</description>
            <name>CK_IDLE_EDGE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>spi cs line keep low when the bit is set. Can be configured in CONF state.</description>
            <name>CS_KEEP_ACTIVE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1:  spi quad input swap enable  0:  spi quad input swap disable. Can be configured in CONF state.</description>
            <name>QUAD_DIN_PIN_SWAP</name>
          </field>
        </fields>
        <name>MISC</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x3E</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x30</addressOffset>
        <description>SPI slave control register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt raw bit for the completion of any operation in both the master mode and the slave mode.  Can not be changed by CONF_buf.</description>
            <name>TRANS_DONE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI_SLV_RD_BUF_DONE Interrupt enable. 1: enable 0: disable. Can be configured in CONF state.</description>
            <name>INT_RD_BUF_DONE_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI_SLV_WR_BUF_DONE Interrupt enable. 1: enable 0: disable. Can be configured in CONF state.</description>
            <name>INT_WR_BUF_DONE_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI_SLV_RD_DMA_DONE Interrupt enable. 1: enable 0: disable. Can be configured in CONF state.</description>
            <name>INT_RD_DMA_DONE_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI_SLV_WR_DMA_DONE Interrupt enable. 1: enable 0: disable. Can be configured in CONF state.</description>
            <name>INT_WR_DMA_DONE_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI_TRANS_DONE Interrupt enable. 1: enable 0: disable. Can be configured in CONF state.</description>
            <name>INT_TRANS_DONE_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI_DMA_SEG_TRANS_DONE Interrupt enable. 1: enable 0: disable. Can be configured in CONF state.</description>
            <name>INT_DMA_SEG_TRANS_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: Enable seg magic value error interrupt. 0: Others. Can be configured in CONF state.</description>
            <name>SEG_MAGIC_ERR_INT_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>The operations counter in both the master mode and the slave mode.</description>
            <name>TRANS_CNT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI_TRANS_DONE auto clear enable, clear it 3 apb cycles after the pos edge of SPI_TRANS_DONE.  0:disable. 1: enable. Can be configured in CONF state.</description>
            <name>TRANS_DONE_AUTO_CLR_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set SPI work mode. 1: slave mode 0: master mode.</description>
            <name>MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Software reset enable, reset the spi clock line cs line and data lines. Can be configured in CONF state.</description>
            <name>SOFT_RESET</name>
          </field>
        </fields>
        <name>SLAVE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x200</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x34</addressOffset>
        <description>SPI slave control register 1</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: Clear SPI_SLV_ADDR_ERR. 0: not valid. Can be changed by CONF_buf.</description>
            <name>SLV_ADDR_ERR_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: Clear SPI_SLV_CMD_ERR. 0: not valid.  Can be changed by CONF_buf.</description>
            <name>SLV_CMD_ERR_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: spi slave QPI mode is not supported. 0: spi slave QPI mode is supported.</description>
            <name>SLV_NO_QPI_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: The address value of the last SPI transfer is not supported by SPI slave. 0: The address value is supported or no address value is received.</description>
            <name>SLV_ADDR_ERR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: The command value of the last SPI transfer is not supported by SPI slave. 0: The command value is supported or no command value is received.</description>
            <name>SLV_CMD_ERR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt raw bit for the completion of dma write operation in the slave mode.  Can not be changed by CONF_buf.</description>
            <name>SLV_WR_DMA_DONE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>In the slave mode it is the value of command.</description>
            <name>SLV_LAST_COMMAND</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>In the slave mode it is the value of address.</description>
            <name>SLV_LAST_ADDR</name>
          </field>
        </fields>
        <name>SLAVE1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x38</addressOffset>
        <description>SPI slave Wr_BUF interrupt and CONF control register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt raw bit for the completion of write-buffer operation in the slave mode.  Can not be changed by CONF_buf.</description>
            <name>SLV_WR_BUF_DONE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x7</bitWidth>
            <description>The basic spi_clk cycles of CONF state. The real cycle length of CONF state, if SPI_USR_CONF is enabled, is SPI_CONF_BASE_BITLEN[6:0] + SPI_CONF_BITLEN[23:0].</description>
            <name>CONF_BASE_BITLEN</name>
          </field>
        </fields>
        <name>SLV_WRBUF_DLEN</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xD8000000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3C</addressOffset>
        <description>SPI magic error and slave control register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x14</bitWidth>
            <description>In the slave mode it is the length in bytes for read operations. The register value shall be byte_num.</description>
            <name>SLV_DMA_RD_BYTELEN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt raw bit for the completion of read-buffer operation in the slave mode.  Can not be changed by CONF_buf.</description>
            <name>SLV_RD_BUF_DONE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: The recent magic value in CONF buffer is not right in master DMA seg-trans mode. 0: others.</description>
            <name>SEG_MAGIC_ERR</name>
          </field>
        </fields>
        <name>SLV_RDBUF_DLEN</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x40</addressOffset>
        <description>SPI interrupt control register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x14</bitWidth>
            <description>The full-duplex or half-duplex data byte length of the last SPI transfer in slave mode. In half-duplex mode, this value is controlled by bits [23:20].</description>
            <name>SLV_DATA_BYTELEN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: SPI_SLV_DATA_BYTELEN stores data byte length of master-read-slave data length in DMA controlled mode(Rd_DMA). 0: others</description>
            <name>SLV_RDDMA_BYTELEN_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: SPI_SLV_DATA_BYTELEN stores data byte length of master-write-to-slave data length in DMA controlled mode(Wr_DMA). 0: others</description>
            <name>SLV_WRDMA_BYTELEN_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: SPI_SLV_DATA_BYTELEN stores data byte length of master-read-slave data length in CPU controlled mode(Rd_BUF). 0: others</description>
            <name>SLV_RDBUF_BYTELEN_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: SPI_SLV_DATA_BYTELEN stores data byte length of master-write-to-slave data length in CPU controlled mode(Wr_BUF). 0: others</description>
            <name>SLV_WRBUF_BYTELEN_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>The magic value of BM table in master DMA seg-trans.</description>
            <name>DMA_SEG_MAGIC_VALUE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt raw bit for the completion of Rd-DMA operation in the slave mode.  Can not be changed by CONF_buf.</description>
            <name>SLV_RD_DMA_DONE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: Enable the DMA CONF phase of current seg-trans operation, which means seg-trans will start. 0: This is not seg-trans mode.</description>
            <name>USR_CONF</name>
          </field>
        </fields>
        <name>SLV_RD_BYTE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xA000000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x44</addressOffset>
        <description>SPI master status and DMA read byte control register</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>The status of spi state machine. 0: idle state, 1: preparation state, 2: send command state, 3: send data state, 4: red data state, 5:write data state, 6: wait state, 7: done state.</description>
            <name>ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x14</bitWidth>
            <description>Define the master DMA read byte length in non seg-conf-trans or seg-conf-trans mode. Invalid when SPI_RX_EOF_EN is 0. Can be configured in CONF state..</description>
            <name>MST_DMA_RD_BYTELEN</name>
          </field>
        </fields>
        <name>FSM</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x48</addressOffset>
        <description>SPI hold register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>This register is for two SPI masters to share the same cs clock and data signals. The bits of one SPI are set, if the other SPI is busy, the SPI will be hold. 1(3): hold at  idle  phase 2: hold at  prepare  phase. Can be configured in CONF state.</description>
            <name>INT_HOLD_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>spi hold output value, which should be used with SPI_HOLD_OUT_EN. Can be configured in CONF state.</description>
            <name>VAL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enable set spi output hold value to spi_hold_reg. It can be used to hold spi state machine with SPI_EXT_HOLD_EN and other usr hold signals. Can be configured in CONF state.</description>
            <name>OUT_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>set the hold cycles of output spi_hold signal when SPI_HOLD_OUT_EN is enable. Can be configured in CONF state.</description>
            <name>OUT_TIME</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1:  spi master DMA full-duplex/half-duplex seg-trans ends or slave half-duplex seg-trans ends. And data has been pushed to corresponding memory.  0:  seg-trans is not ended or not occurred.  Can not be changed by CONF_buf.</description>
            <name>DMA_SEG_TRANS_DONE</name>
          </field>
        </fields>
        <name>HOLD</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4C</addressOffset>
        <description>SPI DMA control register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to reset in dma fsm and in data fifo pointer.</description>
            <name>IN_RST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The bit is used to reset out dma fsm and out data fifo pointer.</description>
            <name>OUT_RST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Reset spi dma ahb master fifo pointer.</description>
            <name>AHBM_FIFO_RST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Reset spi dma ahb master.</description>
            <name>AHBM_RST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set bit to test in link.</description>
            <name>IN_LOOP_TEST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set bit to test out link.</description>
            <name>OUT_LOOP_TEST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>when the bit is set, DMA continue to use the next inlink node when the length of inlink is 0.</description>
            <name>OUT_AUTO_WRBACK</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>out eof flag generation mode . 1: when dma pop all data from fifo  0:when ahb push all data to fifo.</description>
            <name>OUT_EOF_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>read descriptor use burst mode when read data for memory.</description>
            <name>OUTDSCR_BURST_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>read descriptor use burst mode when write data to memory.</description>
            <name>INDSCR_BURST_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>spi dma read data from memory in burst mode.</description>
            <name>OUT_DATA_BURST_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: Internal memory data transfer enable bit. Send SPI DMA RX buffer data to SPI DMA TX buffer. 0: Disable this function.</description>
            <name>MEM_TRANS_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>spi dma read data stop  when in continue tx/rx mode.</description>
            <name>DMA_RX_STOP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>spi dma write data stop when in continue tx/rx mode.</description>
            <name>DMA_TX_STOP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>spi dma continue tx/rx data.</description>
            <name>DMA_CONTINUE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: Clear spi_slv_seg_frt_pop_mask. 0 : others</description>
            <name>SLV_LAST_SEG_POP_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Enable dma segment transfer in spi dma half slave mode. 1: enable. 0: disable.</description>
            <name>DMA_SLV_SEG_TRANS_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: spi_dma_infifo_full_vld is cleared by spi slave CMD5. 0: spi_dma_infifo_full_vld is cleared by SPI_TRANS_DONE.</description>
            <name>SLV_RX_SEG_TRANS_CLR_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: spi_dma_outfifo_empty_vld is cleared by spi slave CMD6. 0: spi_dma_outfifo_empty_vld is cleared by SPI_TRANS_DONE.</description>
            <name>SLV_TX_SEG_TRANS_CLR_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: SPI_IN_SUC_EOF_INT_RAW is set when the number of dma pushed data bytes is equal to the value of SPI_SLV_DMA_RD_BYTELEN[19:0]/ SPI_MST_DMA_RD_BYTELEN[19:0] in spi dma transition.  0: SPI_IN_SUC_EOF_INT_RAW is set by SPI_TRANS_DONE in non-seg-trans or SPI_DMA_SEG_TRANS_DONE in seg-trans.</description>
            <name>RX_EOF_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1:Clear spi_dma_infifo_full_vld. 0: Do not control it.</description>
            <name>DMA_INFIFO_FULL_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1:Clear spi_dma_outfifo_empty_vld. 0: Do not control it.</description>
            <name>DMA_OUTFIFO_EMPTY_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Select the external memory block size.</description>
            <name>EXT_MEM_BK_SIZE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: End slave seg-trans, which acts as 0x05 command. 2 or more end seg-trans signals will induce error in DMA RX.  0: others. Will be cleared in 1 APB CLK cycles by hardware..</description>
            <name>DMA_SEG_TRANS_CLR</name>
          </field>
        </fields>
        <name>DMA_CONF</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x200</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x50</addressOffset>
        <description>SPI DMA TX link configuration</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x14</bitWidth>
            <description>The address of the first outlink descriptor.</description>
            <name>OUTLINK_ADDR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set the bit to stop to use outlink descriptor.</description>
            <name>OUTLINK_STOP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set the bit to start to use outlink descriptor.</description>
            <name>OUTLINK_START</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set the bit to mount on new outlink descriptors.</description>
            <name>OUTLINK_RESTART</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>spi dma write data status bit.</description>
            <name>DMA_TX_ENA</name>
          </field>
        </fields>
        <name>DMA_OUT_LINK</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x54</addressOffset>
        <description>SPI DMA RX link configuration</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x14</bitWidth>
            <description>The address of the first inlink descriptor.</description>
            <name>INLINK_ADDR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>when the bit is set, the inlink descriptor returns to the first link node when a packet is error.</description>
            <name>INLINK_AUTO_RET</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set the bit to stop to use inlink descriptor.</description>
            <name>INLINK_STOP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set the bit to start to use inlink descriptor.</description>
            <name>INLINK_START</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set the bit to mount on new inlink descriptors.</description>
            <name>INLINK_RESTART</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI DMA read data status bit.</description>
            <name>DMA_RX_ENA</name>
          </field>
        </fields>
        <name>DMA_IN_LINK</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x58</addressOffset>
        <description>SPI DMA interrupt enable register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The enable bit for lack of enough inlink descriptors. Can be configured in CONF state.</description>
            <name>INLINK_DSCR_EMPTY_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The enable bit for outlink descriptor error. Can be configured in CONF state.</description>
            <name>OUTLINK_DSCR_ERROR_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The enable bit for inlink descriptor error. Can be configured in CONF state.</description>
            <name>INLINK_DSCR_ERROR_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The enable bit for completing usage of a inlink descriptor. Can be configured in CONF state.</description>
            <name>IN_DONE_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The enable bit for receiving error. Can be configured in CONF state.</description>
            <name>IN_ERR_EOF_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The enable bit for completing receiving all the packets from host. Can be configured in CONF state.</description>
            <name>IN_SUC_EOF_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The enable bit for completing usage of a outlink descriptor . Can be configured in CONF state.</description>
            <name>OUT_DONE_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The enable bit for sending a packet to host done. Can be configured in CONF state.</description>
            <name>OUT_EOF_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The enable bit for sending all the packets to host done. Can be configured in CONF state.</description>
            <name>OUT_TOTAL_EOF_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The enable bit for infifo full error interrupt.</description>
            <name>INFIFO_FULL_ERR_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The enable bit for outfifo empty error interrupt.</description>
            <name>OUTFIFO_EMPTY_ERR_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The enable bit for SPI slave CMD6 interrupt.</description>
            <name>SLV_CMD6_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The enable bit for SPI slave CMD7 interrupt.</description>
            <name>SLV_CMD7_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The enable bit for SPI slave CMD8 interrupt.</description>
            <name>SLV_CMD8_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The enable bit for SPI slave CMD9 interrupt.</description>
            <name>SLV_CMD9_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The enable bit for SPI slave CMDA interrupt.</description>
            <name>SLV_CMDA_INT_ENA</name>
          </field>
        </fields>
        <name>DMA_INT_ENA</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5C</addressOffset>
        <description>SPI DMA interrupt raw register</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw bit for lack of enough inlink descriptors. Can be configured in CONF state.</description>
            <name>INLINK_DSCR_EMPTY_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw bit for outlink descriptor error. Can be configured in CONF state.</description>
            <name>OUTLINK_DSCR_ERROR_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw bit for inlink descriptor error. Can be configured in CONF state.</description>
            <name>INLINK_DSCR_ERROR_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw bit for completing usage of a inlink descriptor. Can be configured in CONF state.</description>
            <name>IN_DONE_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw bit for receiving error. Can be configured in CONF state.</description>
            <name>IN_ERR_EOF_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw bit for completing receiving all the packets from host. Can be configured in CONF state.</description>
            <name>IN_SUC_EOF_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw bit for completing usage of a outlink descriptor. Can be configured in CONF state.</description>
            <name>OUT_DONE_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw bit for sending a packet to host done. Can be configured in CONF state.</description>
            <name>OUT_EOF_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw bit for sending all the packets to host done. Can be configured in CONF state.</description>
            <name>OUT_TOTAL_EOF_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1:SPI_DMA_INFIFO_FULL and spi_push_data_prep are valid, which means that DMA Rx buffer is full but push is valid.  0: Others.  Can not be changed by CONF_buf.</description>
            <name>INFIFO_FULL_ERR_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1:SPI_DMA_OUTFIFO_EMPTY and spi_pop_data_prep are valid, which means that there is no data to pop but pop is valid.  0: Others.  Can not be changed by CONF_buf.</description>
            <name>OUTFIFO_EMPTY_ERR_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw bit for SPI slave CMD6 interrupt.</description>
            <name>SLV_CMD6_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw bit for SPI slave CMD7 interrupt.</description>
            <name>SLV_CMD7_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw bit for SPI slave CMD8 interrupt.</description>
            <name>SLV_CMD8_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw bit for SPI slave CMD9 interrupt.</description>
            <name>SLV_CMD9_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw bit for SPI slave CMDA interrupt.</description>
            <name>SLV_CMDA_INT_RAW</name>
          </field>
        </fields>
        <name>DMA_INT_RAW</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x60</addressOffset>
        <description>SPI DMA interrupt status register</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The status bit for lack of enough inlink descriptors.</description>
            <name>INLINK_DSCR_EMPTY_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The status bit for outlink descriptor error.</description>
            <name>OUTLINK_DSCR_ERROR_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The status bit for inlink descriptor error.</description>
            <name>INLINK_DSCR_ERROR_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The status bit for completing usage of a inlink descriptor.</description>
            <name>IN_DONE_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The status bit for receiving error.</description>
            <name>IN_ERR_EOF_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The status bit for completing receiving all the packets from host.</description>
            <name>IN_SUC_EOF_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The status bit for completing usage of a outlink descriptor.</description>
            <name>OUT_DONE_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The status bit for sending a packet to host done.</description>
            <name>OUT_EOF_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The status bit for sending all the packets to host done.</description>
            <name>OUT_TOTAL_EOF_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The status bit for infifo full error.</description>
            <name>INFIFO_FULL_ERR_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The status bit for outfifo empty error.</description>
            <name>OUTFIFO_EMPTY_ERR_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The status bit for SPI slave CMD6 interrupt.</description>
            <name>SLV_CMD6_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The status bit for SPI slave CMD7 interrupt.</description>
            <name>SLV_CMD7_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The status bit for SPI slave CMD8 interrupt.</description>
            <name>SLV_CMD8_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The status bit for SPI slave CMD9 interrupt.</description>
            <name>SLV_CMD9_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The status bit for SPI slave CMDA interrupt.</description>
            <name>SLV_CMDA_INT_ST</name>
          </field>
        </fields>
        <name>DMA_INT_ST</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x64</addressOffset>
        <description>SPI DMA interrupt clear register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The clear bit for lack of enough inlink descriptors. Can be configured in CONF state.</description>
            <name>INLINK_DSCR_EMPTY_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The clear bit for outlink descriptor error. Can be configured in CONF state.</description>
            <name>OUTLINK_DSCR_ERROR_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The clear bit for inlink descriptor error. Can be configured in CONF state.</description>
            <name>INLINK_DSCR_ERROR_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The clear bit for completing usage of a inlink descriptor. Can be configured in CONF state.</description>
            <name>IN_DONE_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The clear bit for receiving error. Can be configured in CONF state.</description>
            <name>IN_ERR_EOF_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The clear bit for completing receiving all the packets from host. Can be configured in CONF state.</description>
            <name>IN_SUC_EOF_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The clear bit for completing usage of a outlink descriptor. Can be configured in CONF state.</description>
            <name>OUT_DONE_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The clear bit for sending a packet to host done. Can be configured in CONF state.</description>
            <name>OUT_EOF_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The clear bit for sending all the packets to host done. Can be configured in CONF state.</description>
            <name>OUT_TOTAL_EOF_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: Clear SPI_INFIFO_FULL_ERR_INT_RAW. 0: not valid. Can be changed by CONF_buf.</description>
            <name>INFIFO_FULL_ERR_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: Clear SPI_OUTFIFO_EMPTY_ERR_INT_RAW signal. 0: not valid. Can be changed by CONF_buf.</description>
            <name>OUTFIFO_EMPTY_ERR_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The clear bit for SPI slave CMD6 interrupt.</description>
            <name>SLV_CMD6_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The clear bit for SPI slave CMD7 interrupt.</description>
            <name>SLV_CMD7_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The clear bit for SPI slave CMD8 interrupt.</description>
            <name>SLV_CMD8_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The clear bit for SPI slave CMD9 interrupt.</description>
            <name>SLV_CMD9_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The clear bit for SPI slave CMDA interrupt.</description>
            <name>SLV_CMDA_INT_CLR</name>
          </field>
        </fields>
        <name>DMA_INT_CLR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x68</addressOffset>
        <description>The latest SPI DMA  RX descriptor address receiving error</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The inlink descriptor address when spi dma produce receiving error.</description>
            <name>DMA_IN_ERR_EOF_DES_ADDR</name>
          </field>
        </fields>
        <name>IN_ERR_EOF_DES_ADDR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x6C</addressOffset>
        <description>The latest SPI DMA  eof RX descriptor address</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The last inlink descriptor address when spi dma produce from_suc_eof.</description>
            <name>DMA_IN_SUC_EOF_DES_ADDR</name>
          </field>
        </fields>
        <name>IN_SUC_EOF_DES_ADDR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x70</addressOffset>
        <description>Current SPI DMA RX descriptor pointer</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The content of current in descriptor pointer.</description>
            <name>DMA_INLINK_DSCR</name>
          </field>
        </fields>
        <name>INLINK_DSCR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x74</addressOffset>
        <description>Next SPI DMA RX descriptor pointer</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The content of next in descriptor pointer.</description>
            <name>DMA_INLINK_DSCR_BF0</name>
          </field>
        </fields>
        <name>INLINK_DSCR_BF0</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x78</addressOffset>
        <description>Current SPI DMA RX buffer pointer</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The content of current in descriptor data buffer pointer.</description>
            <name>DMA_INLINK_DSCR_BF1</name>
          </field>
        </fields>
        <name>INLINK_DSCR_BF1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x7C</addressOffset>
        <description>The latest SPI DMA  eof TX buffer address</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The address of buffer relative to the outlink descriptor that produce eof.</description>
            <name>DMA_OUT_EOF_BFR_DES_ADDR</name>
          </field>
        </fields>
        <name>OUT_EOF_BFR_DES_ADDR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x80</addressOffset>
        <description>The latest SPI DMA  eof TX descriptor address</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The last outlink descriptor address when spi dma produce to_eof.</description>
            <name>DMA_OUT_EOF_DES_ADDR</name>
          </field>
        </fields>
        <name>OUT_EOF_DES_ADDR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x84</addressOffset>
        <description>Current SPI DMA TX descriptor pointer</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The content of current out descriptor pointer.</description>
            <name>DMA_OUTLINK_DSCR</name>
          </field>
        </fields>
        <name>OUTLINK_DSCR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x88</addressOffset>
        <description>Next SPI DMA TX descriptor pointer</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The content of next out descriptor pointer.</description>
            <name>DMA_OUTLINK_DSCR_BF0</name>
          </field>
        </fields>
        <name>OUTLINK_DSCR_BF0</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8C</addressOffset>
        <description>Current SPI DMA TX buffer pointer</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The content of current out descriptor data buffer pointer.</description>
            <name>DMA_OUTLINK_DSCR_BF1</name>
          </field>
        </fields>
        <name>OUTLINK_DSCR_BF1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x90</addressOffset>
        <description>SPI DMA TX status</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x12</bitWidth>
            <description>SPI dma out descriptor address.</description>
            <name>DMA_OUTDSCR_ADDR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>SPI dma out descriptor state.</description>
            <name>DMA_OUTDSCR_STATE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>SPI dma out data state.</description>
            <name>DMA_OUT_STATE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x7</bitWidth>
            <description>The remains of SPI dma outfifo data.</description>
            <name>DMA_OUTFIFO_CNT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI dma outfifo is full.</description>
            <name>DMA_OUTFIFO_FULL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI dma outfifo is empty.</description>
            <name>DMA_OUTFIFO_EMPTY</name>
          </field>
        </fields>
        <name>DMA_OUTSTATUS</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x80000000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x94</addressOffset>
        <description>SPI DMA RX status</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x12</bitWidth>
            <description>SPI dma in descriptor address.</description>
            <name>DMA_INDSCR_ADDR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>SPI dma in descriptor state.</description>
            <name>DMA_INDSCR_STATE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>SPI dma in data state.</description>
            <name>DMA_IN_STATE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x7</bitWidth>
            <description>The remains of SPI dma infifo data.</description>
            <name>DMA_INFIFO_CNT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI dma infifo is full.</description>
            <name>DMA_INFIFO_FULL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI dma infifo is empty.</description>
            <name>DMA_INFIFO_EMPTY</name>
          </field>
        </fields>
        <name>DMA_INSTATUS</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x80000000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x98</addressOffset>
        <description>Data buffer 0</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>32 bits data buffer 0, transferred in the unit of byte. Byte addressable in slave half-duplex mode.</description>
            <name>BUF0</name>
          </field>
        </fields>
        <name>W0</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9C</addressOffset>
        <description>Data buffer 1</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>32 bits data buffer 1, transferred in the unit of byte. Byte addressable in slave half-duplex mode.</description>
            <name>BUF1</name>
          </field>
        </fields>
        <name>W1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA0</addressOffset>
        <description>Data buffer 2</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>32 bits data buffer 2, transferred in the unit of byte. Byte addressable in slave half-duplex mode.</description>
            <name>BUF2</name>
          </field>
        </fields>
        <name>W2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA4</addressOffset>
        <description>Data buffer 3</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>32 bits data buffer 3, transferred in the unit of byte. Byte addressable in slave half-duplex mode.</description>
            <name>BUF3</name>
          </field>
        </fields>
        <name>W3</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA8</addressOffset>
        <description>Data buffer 4</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>32 bits data buffer 4, transferred in the unit of byte. Byte addressable in slave half-duplex mode.</description>
            <name>BUF4</name>
          </field>
        </fields>
        <name>W4</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAC</addressOffset>
        <description>Data buffer 5</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>32 bits data buffer 5, transferred in the unit of byte. Byte addressable in slave half-duplex mode.</description>
            <name>BUF5</name>
          </field>
        </fields>
        <name>W5</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB0</addressOffset>
        <description>Data buffer 6</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>32 bits data buffer 6, transferred in the unit of byte. Byte addressable in slave half-duplex mode.</description>
            <name>BUF6</name>
          </field>
        </fields>
        <name>W6</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB4</addressOffset>
        <description>Data buffer 7</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>32 bits data buffer 7, transferred in the unit of byte. Byte addressable in slave half-duplex mode.</description>
            <name>BUF7</name>
          </field>
        </fields>
        <name>W7</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB8</addressOffset>
        <description>Data buffer 8</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>32 bits data buffer 8, transferred in the unit of byte. Byte addressable in slave half-duplex mode.</description>
            <name>BUF8</name>
          </field>
        </fields>
        <name>W8</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBC</addressOffset>
        <description>Data buffer 9</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>32 bits data buffer 9, transferred in the unit of byte. Byte addressable in slave half-duplex mode.</description>
            <name>BUF9</name>
          </field>
        </fields>
        <name>W9</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xC0</addressOffset>
        <description>Data buffer 10</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>32 bits data buffer 10, transferred in the unit of byte. Byte addressable in slave half-duplex mode.</description>
            <name>BUF10</name>
          </field>
        </fields>
        <name>W10</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xC4</addressOffset>
        <description>Data buffer 11</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>32 bits data buffer 11, transferred in the unit of byte. Byte addressable in slave half-duplex mode.</description>
            <name>BUF11</name>
          </field>
        </fields>
        <name>W11</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xC8</addressOffset>
        <description>Data buffer 12</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>32 bits data buffer 12, transferred in the unit of byte. Byte addressable in slave half-duplex mode.</description>
            <name>BUF12</name>
          </field>
        </fields>
        <name>W12</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xCC</addressOffset>
        <description>Data buffer 13</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>32 bits data buffer 13, transferred in the unit of byte. Byte addressable in slave half-duplex mode.</description>
            <name>BUF13</name>
          </field>
        </fields>
        <name>W13</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xD0</addressOffset>
        <description>Data buffer 14</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>32 bits data buffer 14, transferred in the unit of byte. Byte addressable in slave half-duplex mode.</description>
            <name>BUF14</name>
          </field>
        </fields>
        <name>W14</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xD4</addressOffset>
        <description>Data buffer 15</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>32 bits data buffer 15, transferred in the unit of byte. Byte addressable in slave half-duplex mode.</description>
            <name>BUF15</name>
          </field>
        </fields>
        <name>W15</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xD8</addressOffset>
        <description>Data buffer 16</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>32 bits data buffer 16, transferred in the unit of byte. Byte addressable in slave half-duplex mode.</description>
            <name>BUF16</name>
          </field>
        </fields>
        <name>W16</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xDC</addressOffset>
        <description>Data buffer 17</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>32 bits data buffer 17, transferred in the unit of byte. Byte addressable in slave half-duplex mode.</description>
            <name>BUF17</name>
          </field>
        </fields>
        <name>W17</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xE0</addressOffset>
        <description>SPI input delay mode configuration</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the input signals are delayed by system clock cycles, 0: input without delayed, 1: input with the posedge of clk_apb,2 input with the negedge of clk_apb, 3: input with the spi_clk. Can be configured in CONF state.</description>
            <name>DIN0_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the input signals are delayed by system clock cycles, 0: input without delayed, 1: input with the posedge of clk_apb,2 input with the negedge of clk_apb, 3: input with the spi_clk. Can be configured in CONF state.</description>
            <name>DIN1_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the input signals are delayed by system clock cycles, 0: input without delayed, 1: input with the posedge of clk_apb,2 input with the negedge of clk_apb, 3: input with the spi_clk. Can be configured in CONF state.</description>
            <name>DIN2_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the input signals are delayed by system clock cycles, 0: input without delayed, 1: input with the posedge of clk_apb,2 input with the negedge of clk_apb, 3: input with the spi_clk. Can be configured in CONF state.</description>
            <name>DIN3_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the input signals are delayed by system clock cycles, 0: input without delayed, 1: input with the posedge of clk_apb,2 input with the negedge of clk_apb, 3: input with the spi_clk. Can be configured in CONF state.</description>
            <name>DIN4_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the input signals are delayed by system clock cycles, 0: input without delayed, 1: input with the posedge of clk_apb,2 input with the negedge of clk_apb, 3: input with the spi_clk. Can be configured in CONF state.</description>
            <name>DIN5_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the input signals are delayed by system clock cycles, 0: input without delayed, 1: input with the posedge of clk_apb,2 input with the negedge of clk_apb, 3: input with the spi_clk. Can be configured in CONF state.</description>
            <name>DIN6_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the input signals are delayed by system clock cycles, 0: input without delayed, 1: input with the posedge of clk_apb,2 input with the negedge of clk_apb, 3: input with the spi_clk. Can be configured in CONF state.</description>
            <name>DIN7_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1:enable hclk in spi_timing.v.  0: disable it. Can be configured in CONF state.</description>
            <name>TIMING_CLK_ENA</name>
          </field>
        </fields>
        <name>DIN_MODE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xE4</addressOffset>
        <description>SPI input delay number configuration</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the input signals are delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,...  Can be configured in CONF state.</description>
            <name>DIN0_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the input signals are delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,...  Can be configured in CONF state.</description>
            <name>DIN1_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the input signals are delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,...  Can be configured in CONF state.</description>
            <name>DIN2_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the input signals are delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,...  Can be configured in CONF state.</description>
            <name>DIN3_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the input signals are delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,...  Can be configured in CONF state.</description>
            <name>DIN4_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the input signals are delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,...  Can be configured in CONF state.</description>
            <name>DIN5_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the input signals are delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,...  Can be configured in CONF state.</description>
            <name>DIN6_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the input signals are delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,...  Can be configured in CONF state.</description>
            <name>DIN7_NUM</name>
          </field>
        </fields>
        <name>DIN_NUM</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xE8</addressOffset>
        <description>SPI output delay mode configuration</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the output signals are delayed by system clock cycles, 0: output without delayed, 1: output with the posedge of clk_apb,2 output with the negedge of clk_apb, 3: output with the spi_clk. Can be configured in CONF state.</description>
            <name>DOUT0_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the output signals are delayed by system clock cycles, 0: output without delayed, 1: output with the posedge of clk_apb,2 output with the negedge of clk_apb, 3: output with the spi_clk. Can be configured in CONF state.</description>
            <name>DOUT1_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the output signals are delayed by system clock cycles, 0: output without delayed, 1: output with the posedge of clk_apb,2 output with the negedge of clk_apb, 3: output with the spi_clk. Can be configured in CONF state.</description>
            <name>DOUT2_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the output signals are delayed by system clock cycles, 0: output without delayed, 1: output with the posedge of clk_apb,2 output with the negedge of clk_apb, 3: output with the spi_clk. Can be configured in CONF state.</description>
            <name>DOUT3_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the output signals are delayed by system clock cycles, 0: output without delayed, 1: output with the posedge of clk_apb,2 output with the negedge of clk_apb, 3: output with the spi_clk. Can be configured in CONF state.</description>
            <name>DOUT4_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the output signals are delayed by system clock cycles, 0: output without delayed, 1: output with the posedge of clk_apb,2 output with the negedge of clk_apb, 3: output with the spi_clk. Can be configured in CONF state.</description>
            <name>DOUT5_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the output signals are delayed by system clock cycles, 0: output without delayed, 1: output with the posedge of clk_apb,2 output with the negedge of clk_apb, 3: output with the spi_clk. Can be configured in CONF state.</description>
            <name>DOUT6_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the output signals are delayed by system clock cycles, 0: output without delayed, 1: output with the posedge of clk_apb,2 output with the negedge of clk_apb, 3: output with the spi_clk. Can be configured in CONF state.</description>
            <name>DOUT7_MODE</name>
          </field>
        </fields>
        <name>DOUT_MODE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xEC</addressOffset>
        <description>SPI output delay number configuration</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the output signals are delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,... Can be configured in CONF state.</description>
            <name>DOUT0_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the output signals are delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,... Can be configured in CONF state.</description>
            <name>DOUT1_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the output signals are delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,... Can be configured in CONF state.</description>
            <name>DOUT2_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the output signals are delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,... Can be configured in CONF state.</description>
            <name>DOUT3_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the output signals are delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,... Can be configured in CONF state.</description>
            <name>DOUT4_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the output signals are delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,... Can be configured in CONF state.</description>
            <name>DOUT5_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the output signals are delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,... Can be configured in CONF state.</description>
            <name>DOUT6_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the output signals are delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,... Can be configured in CONF state.</description>
            <name>DOUT7_NUM</name>
          </field>
        </fields>
        <name>DOUT_NUM</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xF0</addressOffset>
        <description>LCD frame control register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xB</bitWidth>
            <description>It is the horizontal blank front porch of a frame. Can be configured in CONF state.</description>
            <name>LCD_HB_FRONT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>It is the vertical active height of a frame. Can be configured in CONF state.</description>
            <name>LCD_VA_HEIGHT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>It is the vertical total height of a frame. Can be configured in CONF state.</description>
            <name>LCD_VT_HEIGHT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: Enable LCD mode output vsync, hsync, de. 0: Disable. Can be configured in CONF state.</description>
            <name>LCD_MODE_EN</name>
          </field>
        </fields>
        <name>LCD_CTRL</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xF4</addressOffset>
        <description>LCD frame control1 register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>It is the vertical blank front porch of a frame. Can be configured in CONF state.</description>
            <name>LCD_VB_FRONT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0xC</bitWidth>
            <description>It is the horizontal active width of a frame. Can be configured in CONF state.</description>
            <name>LCD_HA_WIDTH</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0xC</bitWidth>
            <description>It is the horizontal total width of a frame. Can be configured in CONF state.</description>
            <name>LCD_HT_WIDTH</name>
          </field>
        </fields>
        <name>LCD_CTRL1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xF8</addressOffset>
        <description>LCD frame control2 register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x7</bitWidth>
            <description>It is the position of spi_vsync active pulse in a line. Can be configured in CONF state.</description>
            <name>LCD_VSYNC_WIDTH</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>It is the idle value of spi_vsync. Can be configured in CONF state.</description>
            <name>VSYNC_IDLE_POL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x7</bitWidth>
            <description>It is the position of spi_hsync active pulse in a line. Can be configured in CONF state.</description>
            <name>LCD_HSYNC_WIDTH</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>It is the idle value of spi_hsync. Can be configured in CONF state.</description>
            <name>HSYNC_IDLE_POL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>It is the position of spi_hsync active pulse in a line. Can be configured in CONF state.</description>
            <name>LCD_HSYNC_POSITION</name>
          </field>
        </fields>
        <name>LCD_CTRL2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10001</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xFC</addressOffset>
        <description>LCD delay number</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the output spi_dqs is delayed by system clock cycles, 0: output without delayed, 1: output with the posedge of clk_apb,2 output with the negedge of clk_apb, 3: output with the spi_clk. Can be configured in CONF state.</description>
            <name>D_DQS_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the output spi_cd is delayed by system clock cycles, 0: output without delayed, 1: output with the posedge of clk_apb,2 output with the negedge of clk_apb, 3: output with the spi_clk. Can be configured in CONF state.</description>
            <name>D_CD_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the output spi_de is delayed by system clock cycles, 0: output without delayed, 1: output with the posedge of clk_apb,2 output with the negedge of clk_apb, 3: output with the spi_clk. Can be configured in CONF state.</description>
            <name>D_DE_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the output spi_hsync is delayed by system clock cycles, 0: output without delayed, 1: output with the posedge of clk_apb,2 output with the negedge of clk_apb, 3: output with the spi_clk. Can be configured in CONF state.</description>
            <name>D_HSYNC_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>the output spi_vsync is delayed by system clock cycles, 0: output without delayed, 1: output with the posedge of clk_apb,2 output with the negedge of clk_apb, 3: output with the spi_clk. Can be configured in CONF state.</description>
            <name>D_VSYNC_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>It is the idle value of spi_de.</description>
            <name>DE_IDLE_POL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: The pulse of spi_hsync is out in vertical blanking lines in seg-trans or one trans. 0: spi_hsync pulse is valid only in active region lines in seg-trans.</description>
            <name>HS_BLANK_EN</name>
          </field>
        </fields>
        <name>LCD_D_MODE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x100</addressOffset>
        <description>LCD delay mode</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the output spi_dqs is delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,... Can be configured in CONF state.</description>
            <name>D_DQS_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the output spi_cd is delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,... Can be configured in CONF state.</description>
            <name>D_CD_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the output spi_de is delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,... Can be configured in CONF state.</description>
            <name>D_DE_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the output spi_hsync is delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,... Can be configured in CONF state.</description>
            <name>D_HSYNC_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>the output spi_vsync is delayed by system clock cycles, 0: delayed by 1 cycle, 1: delayed by 2 cycles,... Can be configured in CONF state.</description>
            <name>D_VSYNC_NUM</name>
          </field>
        </fields>
        <name>LCD_D_NUM</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3FC</addressOffset>
        <description>SPI version control</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1C</bitWidth>
            <description>SPI register version.</description>
            <name>DATE</name>
          </field>
        </fields>
        <name>REG_DATE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x1907240</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <resetMask>0xFFFFFFFF</resetMask>
    <resetValue>0x0</resetValue>
  </peripheral>
</peripherals>
<peripherals>
  <peripheral>
    <addressBlock>
      <offset>0x0</offset>
      <size>0x94</size>
      <usage>registers</usage>
    </addressBlock>
    <baseAddress>0x3F4C0000</baseAddress>
    <description>System</description>
    <groupName>SYSTEM</groupName>
    <interrupts></interrupts>
    <name>SYSTEM</name>
    <registers>
      <register>
        <addressOffset>0x0</addressOffset>
        <description>System ROM configuration register 0</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>This field is used to force on clock gate of internal ROM.</description>
            <name>ROM_FO</name>
          </field>
        </fields>
        <name>ROM_CTRL_0</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x3</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4</addressOffset>
        <description>System ROM configuration register 1</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>This field is used to power down internal ROM.</description>
            <name>ROM_FORCE_PD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>This field is used to power up internal ROM.</description>
            <name>ROM_FORCE_PU</name>
          </field>
        </fields>
        <name>ROM_CTRL_1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xC</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8</addressOffset>
        <description>System SRAM configuration register 0</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x16</bitWidth>
            <description>This field is used to force on clock gate of internal SRAM.</description>
            <name>SRAM_FO</name>
          </field>
        </fields>
        <name>SRAM_CTRL_0</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x3FFFFF</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xC</addressOffset>
        <description>System SRAM configuration register 1</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x16</bitWidth>
            <description>This field is used to power down internal SRAM.</description>
            <name>SRAM_FORCE_PD</name>
          </field>
        </fields>
        <name>SRAM_CTRL_1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x10</addressOffset>
        <description>CPU peripheral clock enable register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable clock of DEDICATED GPIO module.</description>
            <name>CLK_EN_DEDICATED_GPIO</name>
          </field>
        </fields>
        <name>CPU_PERI_CLK_EN</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x14</addressOffset>
        <description>CPU peripheral reset register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to reset DEDICATED GPIO module.</description>
            <name>RST_EN_DEDICATED_GPIO</name>
          </field>
        </fields>
        <name>CPU_PERI_RST_EN</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x80</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x18</addressOffset>
        <description>CPU peripheral clock configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>This field is used to select the clock frequency of CPU or CPU period.</description>
            <name>CPUPERIOD_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This field is used to select the PLL clock frequency based on CPU period.</description>
            <name>PLL_FREQ_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to force on CPU wait mode. In this mode, the clock gate of CPU is turned off until any interrupts happen. This mode could also be force on via WAITI instruction.</description>
            <name>CPU_WAIT_MODE_FORCE_ON</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Sets the number of delay cycles to enter CPU wait mode after a WAITI instruction.</description>
            <name>CPU_WAITI_DELAY_NUM</name>
          </field>
        </fields>
        <name>CPU_PER_CONF</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xC</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1C</addressOffset>
        <description>JTAG configuration register 0</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the 0 to 31 bits of the 256 bits register used to cancel the temporary disable of eFuse to JTAG.</description>
            <name>CANCEL_EFUSE_DISABLE_JTAG_TEMPORARY_0</name>
          </field>
        </fields>
        <name>JTAG_CTRL_0</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x20</addressOffset>
        <description>JTAG configuration register 1</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the 32 to 63 bits of the 256 bits register used to cancel the temporary disable of eFuse to JTAG.</description>
            <name>CANCEL_EFUSE_DISABLE_JTAG_TEMPORARY_1</name>
          </field>
        </fields>
        <name>JTAG_CTRL_1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x24</addressOffset>
        <description>JTAG configuration register 2</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the 64 to 95 bits of the 256 bits register used to cancel the temporary disable of eFuse to JTAG.</description>
            <name>CANCEL_EFUSE_DISABLE_JTAG_TEMPORARY_2</name>
          </field>
        </fields>
        <name>JTAG_CTRL_2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x28</addressOffset>
        <description>JTAG configuration register 3</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the 96 to 127 bits of the 256 bits register used to cancel the temporary disable of eFuse to JTAG.</description>
            <name>CANCEL_EFUSE_DISABLE_JTAG_TEMPORARY_3</name>
          </field>
        </fields>
        <name>JTAG_CTRL_3</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2C</addressOffset>
        <description>JTAG configuration register 4</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the 128 to 159 bits of the 256 bits register used to cancel the temporary disable of eFuse to JTAG.</description>
            <name>CANCEL_EFUSE_DISABLE_JTAG_TEMPORARY_4</name>
          </field>
        </fields>
        <name>JTAG_CTRL_4</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x30</addressOffset>
        <description>JTAG configuration register 5</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the 160 to 191 bits of the 256 bits register used to cancel the temporary disable of eFuse to JTAG.</description>
            <name>CANCEL_EFUSE_DISABLE_JTAG_TEMPORARY_5</name>
          </field>
        </fields>
        <name>JTAG_CTRL_5</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x34</addressOffset>
        <description>JTAG configuration register 6</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the 192 to 223 bits of the 256 bits register used to cancel the temporary disable of eFuse to JTAG.</description>
            <name>CANCEL_EFUSE_DISABLE_JTAG_TEMPORARY_6</name>
          </field>
        </fields>
        <name>JTAG_CTRL_6</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x38</addressOffset>
        <description>JTAG configuration register 7</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stores the 0 to 224 bits of the 255 bits register used to cancel the temporary disable of eFuse to JTAG.</description>
            <name>CANCEL_EFUSE_DISABLE_JTAG_TEMPORARY_7</name>
          </field>
        </fields>
        <name>JTAG_CTRL_7</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3C</addressOffset>
        <description>Memory power-related controlling register (under low-sleep)</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to allow the memory to work as usual when the chip enters the light-sleep state.</description>
            <name>LSLP_MEM_PD_MASK</name>
          </field>
        </fields>
        <name>MEM_PD_MASK</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x1</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x40</addressOffset>
        <description>System peripheral clock (for hardware accelerators) enable register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable clock of timers.</description>
            <name>TIMERS_CLK_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable clock of SPI0 and SPI1.</description>
            <name>SPI01_CLK_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable clock of UART0.</description>
            <name>UART_CLK_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable clock of WDG.</description>
            <name>WDG_CLK_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable clock of I2S0.</description>
            <name>I2S0_CLK_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable clock of UART1.</description>
            <name>UART1_CLK_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable clock of SPI2.</description>
            <name>SPI2_CLK_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable clock of I2C EXT0.</description>
            <name>I2C_EXT0_CLK_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable clock of UHCI0.</description>
            <name>UHCI0_CLK_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable clock of remote controller.</description>
            <name>RMT_CLK_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable clock of pulse count.</description>
            <name>PCNT_CLK_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable clock of LED PWM.</description>
            <name>LEDC_CLK_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable clock of UHCI1.</description>
            <name>UHCI1_CLK_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable clock of timer group0.</description>
            <name>TIMERGROUP_CLK_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable clock of eFuse.</description>
            <name>EFUSE_CLK_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable clock of timer group1.</description>
            <name>TIMERGROUP1_CLK_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable clock of SPI3.</description>
            <name>SPI3_CLK_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable clock of PWM0.</description>
            <name>PWM0_CLK_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable clock of I2C EXT1.</description>
            <name>I2C_EXT1_CLK_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable clock of CAN.</description>
            <name>CAN_CLK_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable clock of PWM1.</description>
            <name>PWM1_CLK_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable clock of I2S1.</description>
            <name>I2S1_CLK_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable clock of SPI2 DMA.</description>
            <name>SPI2_DMA_CLK_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable clock of USB.</description>
            <name>USB_CLK_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable clock of UART memory.</description>
            <name>UART_MEM_CLK_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable clock of PWM2.</description>
            <name>PWM2_CLK_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable clock of PWM3.</description>
            <name>PWM3_CLK_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable clock of SPI3 DMA.</description>
            <name>SPI3_DMA_CLK_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable clock of SAR ADC.</description>
            <name>APB_SARADC_CLK_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable clock of system timer.</description>
            <name>SYSTIMER_CLK_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable clock of aribiter of ADC2.</description>
            <name>ADC2_ARB_CLK_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable clock of SPI4.</description>
            <name>SPI4_CLK_EN</name>
          </field>
        </fields>
        <name>PERIP_CLK_EN0</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xF9C1E06F</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x44</addressOffset>
        <description>System peripheral clock  (for hardware accelerators) enable register 1</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable clock of cryptography AES.</description>
            <name>CRYPTO_AES_CLK_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable clock of cryptography SHA.</description>
            <name>CRYPTO_SHA_CLK_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable clock of cryptography RSA.</description>
            <name>CRYPTO_RSA_CLK_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable clock of cryptography Digital Signature.</description>
            <name>CRYPTO_DS_CLK_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable clock of cryptography HMAC.</description>
            <name>CRYPTO_HMAC_CLK_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable clock of cryptography DMA.</description>
            <name>CRYPTO_DMA_CLK_EN</name>
          </field>
        </fields>
        <name>PERIP_CLK_EN1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x48</addressOffset>
        <description>System peripheral (hardware accelerators) reset register 0</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to reset timers.</description>
            <name>TIMERS_RST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to reset SPI0 and SPI1.</description>
            <name>SPI01_RST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to reset UART0.</description>
            <name>UART_RST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to reset WDG.</description>
            <name>WDG_RST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to reset I2S0.</description>
            <name>I2S0_RST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to reset UART1.</description>
            <name>UART1_RST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to reset SPI2.</description>
            <name>SPI2_RST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to reset I2C EXT0.</description>
            <name>I2C_EXT0_RST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to reset UHCI0.</description>
            <name>UHCI0_RST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to reset remote controller.</description>
            <name>RMT_RST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to reset pulse count.</description>
            <name>PCNT_RST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to reset LED PWM.</description>
            <name>LEDC_RST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to reset UHCI1.</description>
            <name>UHCI1_RST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to reset timer group0.</description>
            <name>TIMERGROUP_RST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to reset eFuse.</description>
            <name>EFUSE_RST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to reset timer group1.</description>
            <name>TIMERGROUP1_RST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to reset SPI3.</description>
            <name>SPI3_RST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to reset PWM0.</description>
            <name>PWM0_RST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to reset I2C EXT1.</description>
            <name>I2C_EXT1_RST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to reset CAN.</description>
            <name>CAN_RST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to reset PWM1.</description>
            <name>PWM1_RST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to reset I2S1.</description>
            <name>I2S1_RST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to reset SPI2 DMA.</description>
            <name>SPI2_DMA_RST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to reset USB.</description>
            <name>USB_RST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to reset UART memory.</description>
            <name>UART_MEM_RST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to reset PWM2.</description>
            <name>PWM2_RST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to reset PWM3.</description>
            <name>PWM3_RST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to reset SPI3 DMA.</description>
            <name>SPI3_DMA_RST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to reset SAR ADC.</description>
            <name>APB_SARADC_RST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to reset system timer.</description>
            <name>SYSTIMER_RST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to reset aribiter of ADC2.</description>
            <name>ADC2_ARB_RST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to reset SPI4.</description>
            <name>SPI4_RST</name>
          </field>
        </fields>
        <name>PERIP_RST_EN0</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4C</addressOffset>
        <description>System peripheral (hardware accelerators) reset register 1</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to reset cryptography AES.</description>
            <name>CRYPTO_AES_RST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to reset cryptography SHA.</description>
            <name>CRYPTO_SHA_RST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to reset cryptography RSA.</description>
            <name>CRYPTO_RSA_RST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to reset cryptography digital signature.</description>
            <name>CRYPTO_DS_RST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to reset cryptography HMAC.</description>
            <name>CRYPTO_HMAC_RST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to reset cryptography DMA.</description>
            <name>CRYPTO_DMA_RST</name>
          </field>
        </fields>
        <name>PERIP_RST_EN1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x7E</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x50</addressOffset>
        <description>Low power clock divider integer register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xC</bitWidth>
            <description>This register is used to set the integer number of divider.</description>
            <name>LPCK_DIV_NUM</name>
          </field>
        </fields>
        <name>LPCK_DIV_INT</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xFF</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x54</addressOffset>
        <description>Divider fraction configuration register for low-power clock</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to select RTC slow clock as the low power clock.</description>
            <name>LPCLK_SEL_RTC_SLOW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to select 8m clock as the low power clock.</description>
            <name>LPCLK_SEL_8M</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to select xtal clock as the low power clock.</description>
            <name>LPCLK_SEL_XTAL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to select xtal32k clock as the low power clock.</description>
            <name>LPCLK_SEL_XTAL32K</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable the RTC low power clock.</description>
            <name>LPCLK_RTC_EN</name>
          </field>
        </fields>
        <name>BT_LPCK_DIV_FRAC</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x2000000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x58</addressOffset>
        <description>CPU interrupt controlling register 0</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to generate CPU interrupt 0. This bit needs to be reset by software in the ISR process.</description>
            <name>CPU_INTR_FROM_CPU_0</name>
          </field>
        </fields>
        <name>CPU_INTR_FROM_CPU_0</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5C</addressOffset>
        <description>CPU interrupt controlling register 1</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to generate CPU interrupt 1. This bit needs to be reset by software in the ISR process.</description>
            <name>CPU_INTR_FROM_CPU_1</name>
          </field>
        </fields>
        <name>CPU_INTR_FROM_CPU_1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x60</addressOffset>
        <description>CPU interrupt controlling register 2</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to generate CPU interrupt 2. This bit needs to be reset by software in the ISR process.</description>
            <name>CPU_INTR_FROM_CPU_2</name>
          </field>
        </fields>
        <name>CPU_INTR_FROM_CPU_2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x64</addressOffset>
        <description>CPU interrupt controlling register 3</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to generate CPU interrupt 3. This bit needs to be reset by software in the ISR process.</description>
            <name>CPU_INTR_FROM_CPU_3</name>
          </field>
        </fields>
        <name>CPU_INTR_FROM_CPU_3</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x68</addressOffset>
        <description>RSA memory remapping register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to power down RSA memory. This bit has the lowest priority. When Digital Signature occupies the RSA, this bit is invalid.</description>
            <name>RSA_MEM_PD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to force power up RSA memory. This bit has the second highest priority.</description>
            <name>RSA_MEM_FORCE_PU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to force power down RSA memory. This bit has the highest priority.</description>
            <name>RSA_MEM_FORCE_PD</name>
          </field>
        </fields>
        <name>RSA_PD_CTRL</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x1</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x6C</addressOffset>
        <description>EDMA enable register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable bus to EDMA.</description>
            <name>BUSTOEXTMEM_ENA</name>
          </field>
        </fields>
        <name>BUSTOEXTMEM_ENA</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x1</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x70</addressOffset>
        <description>Cache control register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable clock of i-cache.</description>
            <name>PRO_ICACHE_CLK_ON</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable clock of d-cache.</description>
            <name>PRO_DCACHE_CLK_ON</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to reset cache.</description>
            <name>PRO_CACHE_RESET</name>
          </field>
        </fields>
        <name>CACHE_CONTROL</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x3</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x74</addressOffset>
        <description>External memory encrypt and decrypt controlling register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable Manual Encryption under SPI Boot mode.</description>
            <name>ENABLE_SPI_MANUAL_ENCRYPT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable Auto Encryption under Download Boot mode.</description>
            <name>ENABLE_DOWNLOAD_DB_ENCRYPT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable Auto Decryption under Download Boot mode.</description>
            <name>ENABLE_DOWNLOAD_G0CB_DECRYPT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable Manual Encryption under Download Boot mode.</description>
            <name>ENABLE_DOWNLOAD_MANUAL_ENCRYPT</name>
          </field>
        </fields>
        <name>EXTERNAL_DEVICE_ENCRYPT_DECRYPT_CONTROL</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x78</addressOffset>
        <description>RTC fast memory configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to start the CRC of RTC memory.</description>
            <name>RTC_MEM_CRC_START</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0xB</bitWidth>
            <description>This field is used to set address of RTC memory for CRC.</description>
            <name>RTC_MEM_CRC_ADDR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0xB</bitWidth>
            <description>This field is used to set length of RTC memory for CRC based on start address.</description>
            <name>RTC_MEM_CRC_LEN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This bit stores the status of RTC memory CRC. High level means finished while low level means not finished.</description>
            <name>RTC_MEM_CRC_FINISH</name>
          </field>
        </fields>
        <name>RTC_FASTMEM_CONFIG</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x7FF00000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x7C</addressOffset>
        <description>RTC fast memory CRC controlling register</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>This field stores the CRC result of RTC memory.</description>
            <name>RTC_MEM_CRC_RES</name>
          </field>
        </fields>
        <name>RTC_FASTMEM_CRC</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x80</addressOffset>
        <description>Redundant ECO control register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The redundant ECO drive bit to avoid optimization in circuits.</description>
            <name>REDUNDANT_ECO_DRIVE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The redundant ECO result bit to avoid optimization in circuits.</description>
            <name>REDUNDANT_ECO_RESULT</name>
          </field>
        </fields>
        <name>Redundant_ECO_Ctrl</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x84</addressOffset>
        <description>Clock gate control register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable clock of this module.</description>
            <name>CLK_EN</name>
          </field>
        </fields>
        <name>CLOCK_GATE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x1</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x88</addressOffset>
        <description>System SRAM configuration register 2</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x16</bitWidth>
            <description>This field is used to power up internal SRAM.</description>
            <name>SRAM_FORCE_PU</name>
          </field>
        </fields>
        <name>SRAM_CTRL_2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x3FFFFF</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8C</addressOffset>
        <description>SoC clock configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>This field is used to set the count of prescaler of XTAL\_CLK.</description>
            <name>PRE_DIV_CNT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>This field is used to select SOC clock.</description>
            <name>SOC_CLK_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x7</bitWidth>
            <description>This field is used to read XTAL frequency in MHz.</description>
            <name>CLK_XTAL_FREQ</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Not used, extends from ESP32.</description>
            <name>CLK_DIV_EN</name>
          </field>
        </fields>
        <name>SYSCLK_CONF</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x1</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xFFC</addressOffset>
        <description>Version control register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1C</bitWidth>
            <description>This is the date version register.</description>
            <name>SYSTEM_REG_DATE</name>
          </field>
        </fields>
        <name>REG_DATE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x1908020</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <resetMask>0xFFFFFFFF</resetMask>
    <resetValue>0x0</resetValue>
  </peripheral>
</peripherals>
<peripherals>
  <peripheral>
    <addressBlock>
      <offset>0x0</offset>
      <size>0x54</size>
      <usage>registers</usage>
    </addressBlock>
    <baseAddress>0x3F423000</baseAddress>
    <description>System Timer</description>
    <groupName>SYSTIMER</groupName>
    <interrupts>
      <interrupt>
        <name>SYSTIMER_TARGET0</name>
        <value>0x47</value>
      </interrupt>
    </interrupts>
    <interrupts>
      <interrupt>
        <name>SYSTIMER_TARGET1</name>
        <value>0x48</value>
      </interrupt>
    </interrupts>
    <interrupts>
      <interrupt>
        <name>SYSTIMER_TARGET2</name>
        <value>0x49</value>
      </interrupt>
    </interrupts>
    <name>SYSTIMER</name>
    <registers>
      <register>
        <addressOffset>0x0</addressOffset>
        <description>Configure system timer clock</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>System timer clock force enable.</description>
            <name>CLK_FO</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Register clock enable.</description>
            <name>CLK_EN</name>
          </field>
        </fields>
        <name>CONF</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4</addressOffset>
        <description>Load value to system timer</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to 1, the value stored in SYSTIMER_TIMER_LOAD_HI and in
            SYSTIMER_TIMER_LOAD_LO will be loaded to system timer</description>
            <name>TIMER_LOAD</name>
          </field>
        </fields>
        <name>LOAD</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8</addressOffset>
        <description>High 32 bits to be loaded to system timer</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The value to be loaded into system timer, high 32 bits.</description>
            <name>TIMER_LOAD_HI</name>
          </field>
        </fields>
        <name>LOAD_HI</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xC</addressOffset>
        <description>Low 32 bits to be loaded to system timer</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>The value to be loaded into system timer, low 32 bits.</description>
            <name>TIMER_LOAD_LO</name>
          </field>
        </fields>
        <name>LOAD_LO</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x10</addressOffset>
        <description>System timer accumulation step</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>Set system timer increment step when using XTAL_CLK.</description>
            <name>TIMER_XTAL_STEP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>Set system timer increment step when using PLL_CLK</description>
            <name>TIMER_PLL_STEP</name>
          </field>
        </fields>
        <name>STEP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x450</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x14</addressOffset>
        <description>System timer target 0, high 32 bits</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>System timer target 0, high 32 bits.</description>
            <name>TIMER_TARGET0_HI</name>
          </field>
        </fields>
        <name>TARGET0_HI</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x18</addressOffset>
        <description>System timer target 0, low 32 bits</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>System timer target 0, low 32 bits.</description>
            <name>TIMER_TARGET0_LO</name>
          </field>
        </fields>
        <name>TARGET0_LO</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1C</addressOffset>
        <description>System timer target 1, high 32 bits</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>System timer target 1, high 32 bits.</description>
            <name>TIMER_TARGET1_HI</name>
          </field>
        </fields>
        <name>TARGET1_HI</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x20</addressOffset>
        <description>System timer target 1, low 32 bits</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>System timer target 1, low 32 bits.</description>
            <name>TIMER_TARGET1_LO</name>
          </field>
        </fields>
        <name>TARGET1_LO</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x24</addressOffset>
        <description>System timer target 2, high 32 bits</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>System timer target 2, high 32 bits.</description>
            <name>TIMER_TARGET2_HI</name>
          </field>
        </fields>
        <name>TARGET2_HI</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x28</addressOffset>
        <description>System timer target 2, low 32 bits</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>System timer target 2, low 32 bits.</description>
            <name>TIMER_TARGET2_LO</name>
          </field>
        </fields>
        <name>TARGET2_LO</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2C</addressOffset>
        <description>Configure work mode for system timer target 0</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1E</bitWidth>
            <description>Set alarm period for system timer target 0, only valid in periodic
            alarms mode.</description>
            <name>TARGET0_PERIOD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set work mode for system timer target 0. 0: work in a timedelay alarm mode; 1: work in periodic alarms mode.</description>
            <name>TARGET0_PERIOD_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>System timer target 0 work enable.</description>
            <name>TARGET0_WORK_EN</name>
          </field>
        </fields>
        <name>TARGET0_CONF</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x30</addressOffset>
        <description>Configure work mode for system timer target 1</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1E</bitWidth>
            <description>Set alarm period for system timer target 1, only valid in periodic
            alarms mode.</description>
            <name>TARGET1_PERIOD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set work mode for system timer target 1. 0: work in a timedelay alarm mode; 1: work in periodic alarms mode.</description>
            <name>TARGET1_PERIOD_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>System timer target 1 work enable.</description>
            <name>TARGET1_WORK_EN</name>
          </field>
        </fields>
        <name>TARGET1_CONF</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x34</addressOffset>
        <description>Configure work mode for system timer target 2</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1E</bitWidth>
            <description>Set alarm period for system timer target 2, only valid in periodic
            alarms mode.</description>
            <name>TARGET2_PERIOD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set work mode for system timer target 2. 0: work in a timedelay alarm mode; 1: work in periodic alarms mode.</description>
            <name>TARGET2_PERIOD_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>System timer target 2 work enable.</description>
            <name>TARGET2_WORK_EN</name>
          </field>
        </fields>
        <name>TARGET2_CONF</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x38</addressOffset>
        <description>Read out system timer value</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Check if it is valid to read out timer value from registers. 0: Not
            ready to read timer value from registers; 1: Ready to read timer value from registers</description>
            <name>TIMER_VALUE_VALID</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Update system timer value to registers.</description>
            <name>TIMER_UPDATE</name>
          </field>
        </fields>
        <name>UPDATE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3C</addressOffset>
        <description>System timer value, high 32 bits</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>System timer value, high 32 bits.</description>
            <name>TIMER_VALUE_HI</name>
          </field>
        </fields>
        <name>VALUE_HI</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x40</addressOffset>
        <description>System timer value, low 32 bits</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>System timer value, low 32 bits.</description>
            <name>TIMER_VALUE_LO</name>
          </field>
        </fields>
        <name>VALUE_LO</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x44</addressOffset>
        <description>System timer interrupt enable</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Interrupt enable bit of system timer target 0.</description>
            <name>INT0_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Interrupt enable bit of system timer target 1.</description>
            <name>INT1_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Interrupt enable bit of system timer target 2.</description>
            <name>INT2_ENA</name>
          </field>
        </fields>
        <name>INT_ENA</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x48</addressOffset>
        <description>System timer interrupt raw</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Interrupt raw bit of system timer target 0.</description>
            <name>INT0_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Interrupt raw bit of system timer target 1.</description>
            <name>INT1_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Interrupt raw bit of system timer target 2.</description>
            <name>INT2_RAW</name>
          </field>
        </fields>
        <name>INT_RAW</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4C</addressOffset>
        <description>System timer interrupt clear</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Interrupt clear bit of system timer target 0.</description>
            <name>INT0_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Interrupt clear bit of system timer target 1.</description>
            <name>INT1_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Interrupt clear bit of system timer target 2.</description>
            <name>INT2_CLR</name>
          </field>
        </fields>
        <name>INT_CLR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xFC</addressOffset>
        <description>Version control register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Version control register</description>
            <name>DATE</name>
          </field>
        </fields>
        <name>DATE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x1807160</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <resetMask>0xFFFFFFFF</resetMask>
    <resetValue>0x0</resetValue>
  </peripheral>
</peripherals>
<peripherals>
  <peripheral>
    <addressBlock>
      <offset>0x0</offset>
      <size>0xB4</size>
      <usage>registers</usage>
    </addressBlock>
    <baseAddress>0x3F41F000</baseAddress>
    <description>Timer Group</description>
    <groupName>TIMG</groupName>
    <interrupts>
      <interrupt>
        <name>TG0_T0_LEVEL</name>
        <value>0xF</value>
      </interrupt>
    </interrupts>
    <interrupts>
      <interrupt>
        <name>TG0_T1_LEVEL</name>
        <value>0x10</value>
      </interrupt>
    </interrupts>
    <interrupts>
      <interrupt>
        <name>TG0_WDT_LEVEL</name>
        <value>0x11</value>
      </interrupt>
    </interrupts>
    <interrupts>
      <interrupt>
        <name>TG0_LACT_LEVEL</name>
        <value>0x12</value>
      </interrupt>
    </interrupts>
    <interrupts>
      <interrupt>
        <name>TG0_T0_EDGE</name>
        <value>0x3E</value>
      </interrupt>
    </interrupts>
    <interrupts>
      <interrupt>
        <name>TG0_T1_EDGE</name>
        <value>0x3F</value>
      </interrupt>
    </interrupts>
    <interrupts>
      <interrupt>
        <name>TG0_WDT_EDGE</name>
        <value>0x40</value>
      </interrupt>
    </interrupts>
    <interrupts>
      <interrupt>
        <name>TG0_LACT_EDGE</name>
        <value>0x41</value>
      </interrupt>
    </interrupts>
    <name>TIMG0</name>
    <registers>
      <register>
        <addressOffset>0x48</addressOffset>
        <description>Watchdog timer configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Reserved.</description>
            <name>WDT_APPCPU_RESET_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>WDT reset CPU enable.</description>
            <name>WDT_PROCPU_RESET_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When set, Flash boot protection is enabled.</description>
            <name>WDT_FLASHBOOT_MOD_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>System reset signal length selection. 0: 100 ns. 1: 200 ns. 2: 300 ns. 3: 400 ns. 4: 500 ns. 5: 800 ns. 6: 1.6 us. 7: 3.2 us.</description>
            <name>WDT_SYS_RESET_LENGTH</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>CPU reset signal length selection. 0: 100 ns. 1: 200 ns. 2: 300 ns. 3: 400 ns. 4: 500 ns. 5: 800 ns. 6: 1.6 us. 7: 3.2 us.</description>
            <name>WDT_CPU_RESET_LENGTH</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When set, a level type interrupt will occur at the timeout of a stage configured to generate an interrupt.</description>
            <name>WDT_LEVEL_INT_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When set, an edge type interrupt will occur at the timeout of a stage configured to generate an interrupt.</description>
            <name>WDT_EDGE_INT_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Stage 3 configuration. 0: off. 1: interrupt. 2: reset CPU. 3: reset system.</description>
            <name>WDT_STG3</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Stage 2 configuration. 0: off. 1: interrupt. 2: reset CPU. 3: reset system.</description>
            <name>WDT_STG2</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Stage 1 configuration. 0: off. 1: interrupt. 2: reset CPU. 3: reset system.</description>
            <name>WDT_STG1</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Stage 0 configuration. 0: off. 1: interrupt. 2: reset CPU. 3: reset system.</description>
            <name>WDT_STG0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When set, MWDT is enabled.</description>
            <name>WDT_EN</name>
          </field>
        </fields>
        <name>WDTCONFIG0</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x4C000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4C</addressOffset>
        <description>Watchdog timer prescaler register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>MWDT clock prescaler value. MWDT clock period = 12.5 ns * TIMG_WDT_CLK_PRESCALE.</description>
            <name>WDT_CLK_PRESCALER</name>
          </field>
        </fields>
        <name>WDTCONFIG1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x50</addressOffset>
        <description>Watchdog timer stage 0 timeout value</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stage 0 timeout value, in MWDT clock cycles.</description>
            <name>WDT_STG0_HOLD</name>
          </field>
        </fields>
        <name>WDTCONFIG2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x18CBA80</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x54</addressOffset>
        <description>Watchdog timer stage 1 timeout value</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stage 1 timeout value, in MWDT clock cycles.</description>
            <name>WDT_STG1_HOLD</name>
          </field>
        </fields>
        <name>WDTCONFIG3</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x7FFFFFF</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x58</addressOffset>
        <description>Watchdog timer stage 2 timeout value</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stage 2 timeout value, in MWDT clock cycles.</description>
            <name>WDT_STG2_HOLD</name>
          </field>
        </fields>
        <name>WDTCONFIG4</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xFFFFF</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5C</addressOffset>
        <description>Watchdog timer stage 3 timeout value</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stage 3 timeout value, in MWDT clock cycles.</description>
            <name>WDT_STG3_HOLD</name>
          </field>
        </fields>
        <name>WDTCONFIG5</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xFFFFF</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x60</addressOffset>
        <description>Write to feed the watchdog timer</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Write any value to feed the MWDT.</description>
            <name>WDT_FEED</name>
          </field>
        </fields>
        <name>WDTFEED</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x64</addressOffset>
        <description>Watchdog write protect register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>If the register contains a different value than its reset value, write protection is enabled.</description>
            <name>WDT_WKEY</name>
          </field>
        </fields>
        <name>WDTWPROTECT</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x50D83AA1</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x68</addressOffset>
        <description>RTC calibration configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When set, periodic calibration is enabled.</description>
            <name>RTC_CALI_START_CYCLING</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Used to select the clock to be calibrated. 0: RTC_CLK. 1: RTC20M_D256_CLK. 2: XTAL32K_CLK.</description>
            <name>RTC_CALI_CLK_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to mark the completion of calibration.</description>
            <name>RTC_CALI_RDY</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0xF</bitWidth>
            <description>Calibration time, in cycles of the clock to be calibrated.</description>
            <name>RTC_CALI_MAX</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to starts calibration.</description>
            <name>RTC_CALI_START</name>
          </field>
        </fields>
        <name>RTCCALICFG</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x13000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x6C</addressOffset>
        <description>RTC calibration configuration register 1</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Periodic calibration valid signal.</description>
            <name>RTC_CALI_CYCLING_DATA_VLD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x19</bitWidth>
            <description>Calibration value when cycles of clock to be calibrated reach TIMG_RTC_CALI_MAX, in unit of XTAL_CLK clock cycles.</description>
            <name>RTC_CALI_VALUE</name>
          </field>
        </fields>
        <name>RTCCALICFG1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x70</addressOffset>
        <description>LACT configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Reserved.</description>
            <name>LACT_USE_REFTICK</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Reserved.</description>
            <name>LACT_RTC_ONLY</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Reserved.</description>
            <name>LACT_CPST_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Reserved.</description>
            <name>LACT_LAC_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Reserved.</description>
            <name>LACT_ALARM_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Reserved.</description>
            <name>LACT_LEVEL_INT_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Reserved.</description>
            <name>LACT_EDGE_INT_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>Reserved.</description>
            <name>LACT_DIVIDER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Reserved.</description>
            <name>LACT_AUTORELOAD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Reserved.</description>
            <name>LACT_INCREASE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Reserved.</description>
            <name>LACT_EN</name>
          </field>
        </fields>
        <name>LACTCONFIG</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x60002300</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x74</addressOffset>
        <description>LACT RTC register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1A</bitWidth>
            <description>Reserved.</description>
            <name>LACT_RTC_STEP_LEN</name>
          </field>
        </fields>
        <name>LACTRTC</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x78</addressOffset>
        <description>LACT low register</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Reserved.</description>
            <name>LACT_LO</name>
          </field>
        </fields>
        <name>LACTLO</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x7C</addressOffset>
        <description>LACT high register</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Reserved.</description>
            <name>LACT_HI</name>
          </field>
        </fields>
        <name>LACTHI</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x80</addressOffset>
        <description>LACT update register</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Reserved.</description>
            <name>LACT_UPDATE</name>
          </field>
        </fields>
        <name>LACTUPDATE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x84</addressOffset>
        <description>LACT alarm low register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Reserved.</description>
            <name>LACT_ALARM_LO</name>
          </field>
        </fields>
        <name>LACTALARMLO</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x88</addressOffset>
        <description>LACT alarm high register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Reserved.</description>
            <name>LACT_ALARM_HI</name>
          </field>
        </fields>
        <name>LACTALARMHI</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8C</addressOffset>
        <description>LACT load low register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Reserved.</description>
            <name>LACT_LOAD_LO</name>
          </field>
        </fields>
        <name>LACTLOADLO</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x90</addressOffset>
        <description>Timer LACT load high register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Reserved.</description>
            <name>LACT_LOAD_HI</name>
          </field>
        </fields>
        <name>LACTLOADHI</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x94</addressOffset>
        <description>Timer LACT load register</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Reserved.</description>
            <name>LACT_LOAD</name>
          </field>
        </fields>
        <name>LACTLOAD</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x98</addressOffset>
        <description>Interrupt enable bits</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt enable bit for the TIMG_T0_INT interrupt.</description>
            <name>T0_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt enable bit for the TIMG_T1_INT interrupt.</description>
            <name>T1_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt enable bit for the TIMG_WDT_INT interrupt.</description>
            <name>WDT_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt enable bit for the TIMG_LACT_INT interrupt.</description>
            <name>LACT_INT_ENA</name>
          </field>
        </fields>
        <name>INT_ENA_TIMERS</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9C</addressOffset>
        <description>Raw interrupt status</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt status bit for the TIMG_T0_INT interrupt.</description>
            <name>T0_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt status bit for the TIMG_T1_INT interrupt.</description>
            <name>T1_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt status bit for the TIMG_WDT_INT interrupt.</description>
            <name>WDT_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt status bit for the TIMG_LACT_INT interrupt.</description>
            <name>LACT_INT_RAW</name>
          </field>
        </fields>
        <name>INT_RAW_TIMERS</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA0</addressOffset>
        <description>Masked interrupt status</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The masked interrupt status bit for the TIMG_T0_INT interrupt.</description>
            <name>T0_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The masked interrupt status bit for the TIMG_T1_INT interrupt.</description>
            <name>T1_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The masked interrupt status bit for the TIMG_WDT_INT interrupt.</description>
            <name>WDT_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The masked interrupt status bit for the TIMG_LACT_INT interrupt.</description>
            <name>LACT_INT_ST</name>
          </field>
        </fields>
        <name>INT_ST_TIMERS</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA4</addressOffset>
        <description>Interrupt clear bits</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear the TIMG_T0_INT interrupt.</description>
            <name>T0_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear the TIMG_T1_INT interrupt.</description>
            <name>T1_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear the TIMG_WDT_INT interrupt.</description>
            <name>WDT_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear the TIMG_LACT_INT interrupt.</description>
            <name>LACT_INT_CLR</name>
          </field>
        </fields>
        <name>INT_CLR_TIMERS</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA8</addressOffset>
        <description>Timer group calibration register</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RTC calibration timeout indicator</description>
            <name>RTC_CALI_TIMEOUT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Cycles that release calibration timeout reset</description>
            <name>RTC_CALI_TIMEOUT_RST_CNT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x19</bitWidth>
            <description>Threshold value for the RTC calibration timer. If the calibration timer's value exceeds this threshold, a timeout is triggered.</description>
            <name>RTC_CALI_TIMEOUT_THRES</name>
          </field>
        </fields>
        <name>RTCCALICFG2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xFFFFFF98</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xF8</addressOffset>
        <description>Version control register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1C</bitWidth>
            <description>Version control register.</description>
            <name>TIMERS_DATE</name>
          </field>
        </fields>
        <name>TIMERS_DATE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x1907261</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xFC</addressOffset>
        <description>Timer group clock gate register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Register clock gate signal. 1: Registers can be read and written to by software. 0: Registers can not be read or written to by software.</description>
            <name>CLK_EN</name>
          </field>
        </fields>
        <name>REGCLK</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x0</addressOffset>
        <description>Timer %s configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: Use XTAL_CLK as the source clock of timer group. 0: Use APB_CLK as the source clock of timer group.</description>
            <name>T0_USE_XTAL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When set, the alarm is enabled. This bit is automatically cleared once an alarm occurs.</description>
            <name>T0_ALARM_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When set, an alarm will generate a level type interrupt.</description>
            <name>T0_LEVEL_INT_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When set, an alarm will generate an edge type interrupt.</description>
            <name>T0_EDGE_INT_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>Timer %s clock (T%s_clk) prescaler value.</description>
            <name>T0_DIVIDER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When set, timer %s auto-reload at alarm is enabled.</description>
            <name>T0_AUTORELOAD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When set, the timer %s time-base counter will increment every clock tick. When cleared, the timer %s time-base counter will decrement.</description>
            <name>T0_INCREASE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When set, the timer %s time-base counter is enabled.</description>
            <name>T0_EN</name>
          </field>
        </fields>
        <name>T0CONFIG</name>
        <resetValue>0x60002000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x24</addressOffset>
        <description>Timer %s configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: Use XTAL_CLK as the source clock of timer group. 0: Use APB_CLK as the source clock of timer group.</description>
            <name>T0_USE_XTAL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When set, the alarm is enabled. This bit is automatically cleared once an alarm occurs.</description>
            <name>T0_ALARM_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When set, an alarm will generate a level type interrupt.</description>
            <name>T0_LEVEL_INT_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When set, an alarm will generate an edge type interrupt.</description>
            <name>T0_EDGE_INT_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>Timer %s clock (T%s_clk) prescaler value.</description>
            <name>T0_DIVIDER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When set, timer %s auto-reload at alarm is enabled.</description>
            <name>T0_AUTORELOAD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When set, the timer %s time-base counter will increment every clock tick. When cleared, the timer %s time-base counter will decrement.</description>
            <name>T0_INCREASE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When set, the timer %s time-base counter is enabled.</description>
            <name>T0_EN</name>
          </field>
        </fields>
        <name>T1CONFIG</name>
        <resetValue>0x60002000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4</addressOffset>
        <description>Timer %s current value, low 32 bits</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>After writing to TIMG_T%sUPDATE_REG, the low 32 bits of the time-base counter of timer %s can be read here.</description>
            <name>T0_LO</name>
          </field>
        </fields>
        <name>T0LO</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x28</addressOffset>
        <description>Timer %s current value, low 32 bits</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>After writing to TIMG_T%sUPDATE_REG, the low 32 bits of the time-base counter of timer %s can be read here.</description>
            <name>T0_LO</name>
          </field>
        </fields>
        <name>T1LO</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8</addressOffset>
        <description>Timer %s current value, high 32 bits</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>After writing to TIMG_T%sUPDATE_REG, the high 32 bits of the time-base counter of timer %s can be read here.</description>
            <name>T0_HI</name>
          </field>
        </fields>
        <name>T0HI</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2C</addressOffset>
        <description>Timer %s current value, high 32 bits</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>After writing to TIMG_T%sUPDATE_REG, the high 32 bits of the time-base counter of timer %s can be read here.</description>
            <name>T0_HI</name>
          </field>
        </fields>
        <name>T1HI</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xC</addressOffset>
        <description>Write to copy current timer value to TIMG_T%sLO_REG or TIMGn_T%sHI_REG</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>After writing 0 or 1 to TIMG_T%sUPDATE_REG, the counter value is latched.</description>
            <name>T0_UPDATE</name>
          </field>
        </fields>
        <name>T0UPDATE</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x30</addressOffset>
        <description>Write to copy current timer value to TIMG_T%sLO_REG or TIMGn_T%sHI_REG</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>After writing 0 or 1 to TIMG_T%sUPDATE_REG, the counter value is latched.</description>
            <name>T0_UPDATE</name>
          </field>
        </fields>
        <name>T1UPDATE</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x10</addressOffset>
        <description>Timer %s alarm value, low 32 bits</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Timer %s alarm trigger time-base counter value, low 32 bits.</description>
            <name>T0_ALARM_LO</name>
          </field>
        </fields>
        <name>T0ALARMLO</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x34</addressOffset>
        <description>Timer %s alarm value, low 32 bits</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Timer %s alarm trigger time-base counter value, low 32 bits.</description>
            <name>T0_ALARM_LO</name>
          </field>
        </fields>
        <name>T1ALARMLO</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x14</addressOffset>
        <description>Timer %s alarm value, high bits</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>
            Timer %s alarm trigger time-base counter value, high 32 bits.</description>
            <name>T0_ALARM_HI</name>
          </field>
        </fields>
        <name>T0ALARMHI</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x38</addressOffset>
        <description>Timer %s alarm value, high bits</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>
            Timer %s alarm trigger time-base counter value, high 32 bits.</description>
            <name>T0_ALARM_HI</name>
          </field>
        </fields>
        <name>T1ALARMHI</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x18</addressOffset>
        <description>Timer %s reload value, low 32 bits</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Low 32 bits of the value that a reload will load onto timer %s time-base counter.</description>
            <name>T0_LOAD_LO</name>
          </field>
        </fields>
        <name>T0LOADLO</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3C</addressOffset>
        <description>Timer %s reload value, low 32 bits</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Low 32 bits of the value that a reload will load onto timer %s time-base counter.</description>
            <name>T0_LOAD_LO</name>
          </field>
        </fields>
        <name>T1LOADLO</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1C</addressOffset>
        <description>Timer %s reload value, high 32 bits</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>High 32 bits of the value that a reload will load onto timer %s time-base counter.</description>
            <name>T0_LOAD_HI</name>
          </field>
        </fields>
        <name>T0LOADHI</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x40</addressOffset>
        <description>Timer %s reload value, high 32 bits</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>High 32 bits of the value that a reload will load onto timer %s time-base counter.</description>
            <name>T0_LOAD_HI</name>
          </field>
        </fields>
        <name>T1LOADHI</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x20</addressOffset>
        <description>Write to reload timer from TIMG_T%sLOADLO_REG or TIMG_T%sLOADHI_REG</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Write any value to trigger a timer %s time-base counter reload.</description>
            <name>T0_LOAD</name>
          </field>
        </fields>
        <name>T0LOAD</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x44</addressOffset>
        <description>Write to reload timer from TIMG_T%sLOADLO_REG or TIMG_T%sLOADHI_REG</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Write any value to trigger a timer %s time-base counter reload.</description>
            <name>T0_LOAD</name>
          </field>
        </fields>
        <name>T1LOAD</name>
        <size>0x20</size>
      </register>
    </registers>
    <resetMask>0xFFFFFFFF</resetMask>
    <resetValue>0x0</resetValue>
  </peripheral>
</peripherals>
<peripherals>
  <peripheral>
    <addressBlock>
      <offset>0x0</offset>
      <size>0xB4</size>
      <usage>registers</usage>
    </addressBlock>
    <baseAddress>0x3F420000</baseAddress>
    <derivedFrom>TIMG0</derivedFrom>
    <description>Timer Group</description>
    <groupName>TIMG</groupName>
    <interrupts>
      <interrupt>
        <name>TG1_T0_LEVEL</name>
        <value>0x13</value>
      </interrupt>
    </interrupts>
    <interrupts>
      <interrupt>
        <name>TG1_T1_LEVEL</name>
        <value>0x14</value>
      </interrupt>
    </interrupts>
    <interrupts>
      <interrupt>
        <name>TG1_WDT_LEVEL</name>
        <value>0x15</value>
      </interrupt>
    </interrupts>
    <interrupts>
      <interrupt>
        <name>TG1_LACT_LEVEL</name>
        <value>0x16</value>
      </interrupt>
    </interrupts>
    <interrupts>
      <interrupt>
        <name>TG1_T0_EDGE</name>
        <value>0x42</value>
      </interrupt>
    </interrupts>
    <interrupts>
      <interrupt>
        <name>TG1_T1_EDGE</name>
        <value>0x43</value>
      </interrupt>
    </interrupts>
    <interrupts>
      <interrupt>
        <name>TG1_WDT_EDGE</name>
        <value>0x44</value>
      </interrupt>
    </interrupts>
    <interrupts>
      <interrupt>
        <name>TG1_LACT_EDGE</name>
        <value>0x45</value>
      </interrupt>
    </interrupts>
    <name>TIMG1</name>
    <registers>
      <register>
        <addressOffset>0x48</addressOffset>
        <description>Watchdog timer configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Reserved.</description>
            <name>WDT_APPCPU_RESET_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>WDT reset CPU enable.</description>
            <name>WDT_PROCPU_RESET_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When set, Flash boot protection is enabled.</description>
            <name>WDT_FLASHBOOT_MOD_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>System reset signal length selection. 0: 100 ns. 1: 200 ns. 2: 300 ns. 3: 400 ns. 4: 500 ns. 5: 800 ns. 6: 1.6 us. 7: 3.2 us.</description>
            <name>WDT_SYS_RESET_LENGTH</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>CPU reset signal length selection. 0: 100 ns. 1: 200 ns. 2: 300 ns. 3: 400 ns. 4: 500 ns. 5: 800 ns. 6: 1.6 us. 7: 3.2 us.</description>
            <name>WDT_CPU_RESET_LENGTH</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When set, a level type interrupt will occur at the timeout of a stage configured to generate an interrupt.</description>
            <name>WDT_LEVEL_INT_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When set, an edge type interrupt will occur at the timeout of a stage configured to generate an interrupt.</description>
            <name>WDT_EDGE_INT_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Stage 3 configuration. 0: off. 1: interrupt. 2: reset CPU. 3: reset system.</description>
            <name>WDT_STG3</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Stage 2 configuration. 0: off. 1: interrupt. 2: reset CPU. 3: reset system.</description>
            <name>WDT_STG2</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Stage 1 configuration. 0: off. 1: interrupt. 2: reset CPU. 3: reset system.</description>
            <name>WDT_STG1</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Stage 0 configuration. 0: off. 1: interrupt. 2: reset CPU. 3: reset system.</description>
            <name>WDT_STG0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When set, MWDT is enabled.</description>
            <name>WDT_EN</name>
          </field>
        </fields>
        <name>WDTCONFIG0</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x4C000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4C</addressOffset>
        <description>Watchdog timer prescaler register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>MWDT clock prescaler value. MWDT clock period = 12.5 ns * TIMG_WDT_CLK_PRESCALE.</description>
            <name>WDT_CLK_PRESCALER</name>
          </field>
        </fields>
        <name>WDTCONFIG1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x50</addressOffset>
        <description>Watchdog timer stage 0 timeout value</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stage 0 timeout value, in MWDT clock cycles.</description>
            <name>WDT_STG0_HOLD</name>
          </field>
        </fields>
        <name>WDTCONFIG2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x18CBA80</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x54</addressOffset>
        <description>Watchdog timer stage 1 timeout value</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stage 1 timeout value, in MWDT clock cycles.</description>
            <name>WDT_STG1_HOLD</name>
          </field>
        </fields>
        <name>WDTCONFIG3</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x7FFFFFF</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x58</addressOffset>
        <description>Watchdog timer stage 2 timeout value</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stage 2 timeout value, in MWDT clock cycles.</description>
            <name>WDT_STG2_HOLD</name>
          </field>
        </fields>
        <name>WDTCONFIG4</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xFFFFF</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5C</addressOffset>
        <description>Watchdog timer stage 3 timeout value</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Stage 3 timeout value, in MWDT clock cycles.</description>
            <name>WDT_STG3_HOLD</name>
          </field>
        </fields>
        <name>WDTCONFIG5</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xFFFFF</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x60</addressOffset>
        <description>Write to feed the watchdog timer</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Write any value to feed the MWDT.</description>
            <name>WDT_FEED</name>
          </field>
        </fields>
        <name>WDTFEED</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x64</addressOffset>
        <description>Watchdog write protect register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>If the register contains a different value than its reset value, write protection is enabled.</description>
            <name>WDT_WKEY</name>
          </field>
        </fields>
        <name>WDTWPROTECT</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x50D83AA1</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x68</addressOffset>
        <description>RTC calibration configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When set, periodic calibration is enabled.</description>
            <name>RTC_CALI_START_CYCLING</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Used to select the clock to be calibrated. 0: RTC_CLK. 1: RTC20M_D256_CLK. 2: XTAL32K_CLK.</description>
            <name>RTC_CALI_CLK_SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to mark the completion of calibration.</description>
            <name>RTC_CALI_RDY</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0xF</bitWidth>
            <description>Calibration time, in cycles of the clock to be calibrated.</description>
            <name>RTC_CALI_MAX</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to starts calibration.</description>
            <name>RTC_CALI_START</name>
          </field>
        </fields>
        <name>RTCCALICFG</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x13000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x6C</addressOffset>
        <description>RTC calibration configuration register 1</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Periodic calibration valid signal.</description>
            <name>RTC_CALI_CYCLING_DATA_VLD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x19</bitWidth>
            <description>Calibration value when cycles of clock to be calibrated reach TIMG_RTC_CALI_MAX, in unit of XTAL_CLK clock cycles.</description>
            <name>RTC_CALI_VALUE</name>
          </field>
        </fields>
        <name>RTCCALICFG1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x70</addressOffset>
        <description>LACT configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Reserved.</description>
            <name>LACT_USE_REFTICK</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Reserved.</description>
            <name>LACT_RTC_ONLY</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Reserved.</description>
            <name>LACT_CPST_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Reserved.</description>
            <name>LACT_LAC_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Reserved.</description>
            <name>LACT_ALARM_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Reserved.</description>
            <name>LACT_LEVEL_INT_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Reserved.</description>
            <name>LACT_EDGE_INT_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>Reserved.</description>
            <name>LACT_DIVIDER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Reserved.</description>
            <name>LACT_AUTORELOAD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Reserved.</description>
            <name>LACT_INCREASE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Reserved.</description>
            <name>LACT_EN</name>
          </field>
        </fields>
        <name>LACTCONFIG</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x60002300</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x74</addressOffset>
        <description>LACT RTC register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1A</bitWidth>
            <description>Reserved.</description>
            <name>LACT_RTC_STEP_LEN</name>
          </field>
        </fields>
        <name>LACTRTC</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x78</addressOffset>
        <description>LACT low register</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Reserved.</description>
            <name>LACT_LO</name>
          </field>
        </fields>
        <name>LACTLO</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x7C</addressOffset>
        <description>LACT high register</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Reserved.</description>
            <name>LACT_HI</name>
          </field>
        </fields>
        <name>LACTHI</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x80</addressOffset>
        <description>LACT update register</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Reserved.</description>
            <name>LACT_UPDATE</name>
          </field>
        </fields>
        <name>LACTUPDATE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x84</addressOffset>
        <description>LACT alarm low register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Reserved.</description>
            <name>LACT_ALARM_LO</name>
          </field>
        </fields>
        <name>LACTALARMLO</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x88</addressOffset>
        <description>LACT alarm high register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Reserved.</description>
            <name>LACT_ALARM_HI</name>
          </field>
        </fields>
        <name>LACTALARMHI</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8C</addressOffset>
        <description>LACT load low register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Reserved.</description>
            <name>LACT_LOAD_LO</name>
          </field>
        </fields>
        <name>LACTLOADLO</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x90</addressOffset>
        <description>Timer LACT load high register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Reserved.</description>
            <name>LACT_LOAD_HI</name>
          </field>
        </fields>
        <name>LACTLOADHI</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x94</addressOffset>
        <description>Timer LACT load register</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Reserved.</description>
            <name>LACT_LOAD</name>
          </field>
        </fields>
        <name>LACTLOAD</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x98</addressOffset>
        <description>Interrupt enable bits</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt enable bit for the TIMG_T0_INT interrupt.</description>
            <name>T0_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt enable bit for the TIMG_T1_INT interrupt.</description>
            <name>T1_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt enable bit for the TIMG_WDT_INT interrupt.</description>
            <name>WDT_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The interrupt enable bit for the TIMG_LACT_INT interrupt.</description>
            <name>LACT_INT_ENA</name>
          </field>
        </fields>
        <name>INT_ENA_TIMERS</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9C</addressOffset>
        <description>Raw interrupt status</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt status bit for the TIMG_T0_INT interrupt.</description>
            <name>T0_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt status bit for the TIMG_T1_INT interrupt.</description>
            <name>T1_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt status bit for the TIMG_WDT_INT interrupt.</description>
            <name>WDT_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The raw interrupt status bit for the TIMG_LACT_INT interrupt.</description>
            <name>LACT_INT_RAW</name>
          </field>
        </fields>
        <name>INT_RAW_TIMERS</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA0</addressOffset>
        <description>Masked interrupt status</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The masked interrupt status bit for the TIMG_T0_INT interrupt.</description>
            <name>T0_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The masked interrupt status bit for the TIMG_T1_INT interrupt.</description>
            <name>T1_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The masked interrupt status bit for the TIMG_WDT_INT interrupt.</description>
            <name>WDT_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The masked interrupt status bit for the TIMG_LACT_INT interrupt.</description>
            <name>LACT_INT_ST</name>
          </field>
        </fields>
        <name>INT_ST_TIMERS</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA4</addressOffset>
        <description>Interrupt clear bits</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear the TIMG_T0_INT interrupt.</description>
            <name>T0_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear the TIMG_T1_INT interrupt.</description>
            <name>T1_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear the TIMG_WDT_INT interrupt.</description>
            <name>WDT_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear the TIMG_LACT_INT interrupt.</description>
            <name>LACT_INT_CLR</name>
          </field>
        </fields>
        <name>INT_CLR_TIMERS</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA8</addressOffset>
        <description>Timer group calibration register</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RTC calibration timeout indicator</description>
            <name>RTC_CALI_TIMEOUT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Cycles that release calibration timeout reset</description>
            <name>RTC_CALI_TIMEOUT_RST_CNT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x19</bitWidth>
            <description>Threshold value for the RTC calibration timer. If the calibration timer's value exceeds this threshold, a timeout is triggered.</description>
            <name>RTC_CALI_TIMEOUT_THRES</name>
          </field>
        </fields>
        <name>RTCCALICFG2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xFFFFFF98</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xF8</addressOffset>
        <description>Version control register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1C</bitWidth>
            <description>Version control register.</description>
            <name>TIMERS_DATE</name>
          </field>
        </fields>
        <name>TIMERS_DATE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x1907261</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xFC</addressOffset>
        <description>Timer group clock gate register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Register clock gate signal. 1: Registers can be read and written to by software. 0: Registers can not be read or written to by software.</description>
            <name>CLK_EN</name>
          </field>
        </fields>
        <name>REGCLK</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x0</addressOffset>
        <description>Timer %s configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: Use XTAL_CLK as the source clock of timer group. 0: Use APB_CLK as the source clock of timer group.</description>
            <name>T0_USE_XTAL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When set, the alarm is enabled. This bit is automatically cleared once an alarm occurs.</description>
            <name>T0_ALARM_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When set, an alarm will generate a level type interrupt.</description>
            <name>T0_LEVEL_INT_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When set, an alarm will generate an edge type interrupt.</description>
            <name>T0_EDGE_INT_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>Timer %s clock (T%s_clk) prescaler value.</description>
            <name>T0_DIVIDER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When set, timer %s auto-reload at alarm is enabled.</description>
            <name>T0_AUTORELOAD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When set, the timer %s time-base counter will increment every clock tick. When cleared, the timer %s time-base counter will decrement.</description>
            <name>T0_INCREASE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When set, the timer %s time-base counter is enabled.</description>
            <name>T0_EN</name>
          </field>
        </fields>
        <name>T0CONFIG</name>
        <resetValue>0x60002000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x24</addressOffset>
        <description>Timer %s configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: Use XTAL_CLK as the source clock of timer group. 0: Use APB_CLK as the source clock of timer group.</description>
            <name>T0_USE_XTAL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When set, the alarm is enabled. This bit is automatically cleared once an alarm occurs.</description>
            <name>T0_ALARM_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When set, an alarm will generate a level type interrupt.</description>
            <name>T0_LEVEL_INT_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When set, an alarm will generate an edge type interrupt.</description>
            <name>T0_EDGE_INT_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>Timer %s clock (T%s_clk) prescaler value.</description>
            <name>T0_DIVIDER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When set, timer %s auto-reload at alarm is enabled.</description>
            <name>T0_AUTORELOAD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When set, the timer %s time-base counter will increment every clock tick. When cleared, the timer %s time-base counter will decrement.</description>
            <name>T0_INCREASE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When set, the timer %s time-base counter is enabled.</description>
            <name>T0_EN</name>
          </field>
        </fields>
        <name>T1CONFIG</name>
        <resetValue>0x60002000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4</addressOffset>
        <description>Timer %s current value, low 32 bits</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>After writing to TIMG_T%sUPDATE_REG, the low 32 bits of the time-base counter of timer %s can be read here.</description>
            <name>T0_LO</name>
          </field>
        </fields>
        <name>T0LO</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x28</addressOffset>
        <description>Timer %s current value, low 32 bits</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>After writing to TIMG_T%sUPDATE_REG, the low 32 bits of the time-base counter of timer %s can be read here.</description>
            <name>T0_LO</name>
          </field>
        </fields>
        <name>T1LO</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8</addressOffset>
        <description>Timer %s current value, high 32 bits</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>After writing to TIMG_T%sUPDATE_REG, the high 32 bits of the time-base counter of timer %s can be read here.</description>
            <name>T0_HI</name>
          </field>
        </fields>
        <name>T0HI</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2C</addressOffset>
        <description>Timer %s current value, high 32 bits</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>After writing to TIMG_T%sUPDATE_REG, the high 32 bits of the time-base counter of timer %s can be read here.</description>
            <name>T0_HI</name>
          </field>
        </fields>
        <name>T1HI</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xC</addressOffset>
        <description>Write to copy current timer value to TIMG_T%sLO_REG or TIMGn_T%sHI_REG</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>After writing 0 or 1 to TIMG_T%sUPDATE_REG, the counter value is latched.</description>
            <name>T0_UPDATE</name>
          </field>
        </fields>
        <name>T0UPDATE</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x30</addressOffset>
        <description>Write to copy current timer value to TIMG_T%sLO_REG or TIMGn_T%sHI_REG</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>After writing 0 or 1 to TIMG_T%sUPDATE_REG, the counter value is latched.</description>
            <name>T0_UPDATE</name>
          </field>
        </fields>
        <name>T1UPDATE</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x10</addressOffset>
        <description>Timer %s alarm value, low 32 bits</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Timer %s alarm trigger time-base counter value, low 32 bits.</description>
            <name>T0_ALARM_LO</name>
          </field>
        </fields>
        <name>T0ALARMLO</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x34</addressOffset>
        <description>Timer %s alarm value, low 32 bits</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Timer %s alarm trigger time-base counter value, low 32 bits.</description>
            <name>T0_ALARM_LO</name>
          </field>
        </fields>
        <name>T1ALARMLO</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x14</addressOffset>
        <description>Timer %s alarm value, high bits</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>
            Timer %s alarm trigger time-base counter value, high 32 bits.</description>
            <name>T0_ALARM_HI</name>
          </field>
        </fields>
        <name>T0ALARMHI</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x38</addressOffset>
        <description>Timer %s alarm value, high bits</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>
            Timer %s alarm trigger time-base counter value, high 32 bits.</description>
            <name>T0_ALARM_HI</name>
          </field>
        </fields>
        <name>T1ALARMHI</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x18</addressOffset>
        <description>Timer %s reload value, low 32 bits</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Low 32 bits of the value that a reload will load onto timer %s time-base counter.</description>
            <name>T0_LOAD_LO</name>
          </field>
        </fields>
        <name>T0LOADLO</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3C</addressOffset>
        <description>Timer %s reload value, low 32 bits</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Low 32 bits of the value that a reload will load onto timer %s time-base counter.</description>
            <name>T0_LOAD_LO</name>
          </field>
        </fields>
        <name>T1LOADLO</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1C</addressOffset>
        <description>Timer %s reload value, high 32 bits</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>High 32 bits of the value that a reload will load onto timer %s time-base counter.</description>
            <name>T0_LOAD_HI</name>
          </field>
        </fields>
        <name>T0LOADHI</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x40</addressOffset>
        <description>Timer %s reload value, high 32 bits</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>High 32 bits of the value that a reload will load onto timer %s time-base counter.</description>
            <name>T0_LOAD_HI</name>
          </field>
        </fields>
        <name>T1LOADHI</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x20</addressOffset>
        <description>Write to reload timer from TIMG_T%sLOADLO_REG or TIMG_T%sLOADHI_REG</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Write any value to trigger a timer %s time-base counter reload.</description>
            <name>T0_LOAD</name>
          </field>
        </fields>
        <name>T0LOAD</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x44</addressOffset>
        <description>Write to reload timer from TIMG_T%sLOADLO_REG or TIMG_T%sLOADHI_REG</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Write any value to trigger a timer %s time-base counter reload.</description>
            <name>T0_LOAD</name>
          </field>
        </fields>
        <name>T1LOAD</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x0</addressOffset>
        <description>Timer %s configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: Use XTAL_CLK as the source clock of timer group. 0: Use APB_CLK as the source clock of timer group.</description>
            <name>T0_USE_XTAL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When set, the alarm is enabled. This bit is automatically cleared once an alarm occurs.</description>
            <name>T0_ALARM_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When set, an alarm will generate a level type interrupt.</description>
            <name>T0_LEVEL_INT_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When set, an alarm will generate an edge type interrupt.</description>
            <name>T0_EDGE_INT_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>Timer %s clock (T%s_clk) prescaler value.</description>
            <name>T0_DIVIDER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When set, timer %s auto-reload at alarm is enabled.</description>
            <name>T0_AUTORELOAD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When set, the timer %s time-base counter will increment every clock tick. When cleared, the timer %s time-base counter will decrement.</description>
            <name>T0_INCREASE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When set, the timer %s time-base counter is enabled.</description>
            <name>T0_EN</name>
          </field>
        </fields>
        <name>T0CONFIG</name>
        <resetValue>0x60002000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x24</addressOffset>
        <description>Timer %s configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: Use XTAL_CLK as the source clock of timer group. 0: Use APB_CLK as the source clock of timer group.</description>
            <name>T0_USE_XTAL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When set, the alarm is enabled. This bit is automatically cleared once an alarm occurs.</description>
            <name>T0_ALARM_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When set, an alarm will generate a level type interrupt.</description>
            <name>T0_LEVEL_INT_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When set, an alarm will generate an edge type interrupt.</description>
            <name>T0_EDGE_INT_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>Timer %s clock (T%s_clk) prescaler value.</description>
            <name>T0_DIVIDER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When set, timer %s auto-reload at alarm is enabled.</description>
            <name>T0_AUTORELOAD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When set, the timer %s time-base counter will increment every clock tick. When cleared, the timer %s time-base counter will decrement.</description>
            <name>T0_INCREASE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When set, the timer %s time-base counter is enabled.</description>
            <name>T0_EN</name>
          </field>
        </fields>
        <name>T1CONFIG</name>
        <resetValue>0x60002000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4</addressOffset>
        <description>Timer %s current value, low 32 bits</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>After writing to TIMG_T%sUPDATE_REG, the low 32 bits of the time-base counter of timer %s can be read here.</description>
            <name>T0_LO</name>
          </field>
        </fields>
        <name>T0LO</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x28</addressOffset>
        <description>Timer %s current value, low 32 bits</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>After writing to TIMG_T%sUPDATE_REG, the low 32 bits of the time-base counter of timer %s can be read here.</description>
            <name>T0_LO</name>
          </field>
        </fields>
        <name>T1LO</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8</addressOffset>
        <description>Timer %s current value, high 32 bits</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>After writing to TIMG_T%sUPDATE_REG, the high 32 bits of the time-base counter of timer %s can be read here.</description>
            <name>T0_HI</name>
          </field>
        </fields>
        <name>T0HI</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2C</addressOffset>
        <description>Timer %s current value, high 32 bits</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>After writing to TIMG_T%sUPDATE_REG, the high 32 bits of the time-base counter of timer %s can be read here.</description>
            <name>T0_HI</name>
          </field>
        </fields>
        <name>T1HI</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xC</addressOffset>
        <description>Write to copy current timer value to TIMG_T%sLO_REG or TIMGn_T%sHI_REG</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>After writing 0 or 1 to TIMG_T%sUPDATE_REG, the counter value is latched.</description>
            <name>T0_UPDATE</name>
          </field>
        </fields>
        <name>T0UPDATE</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x30</addressOffset>
        <description>Write to copy current timer value to TIMG_T%sLO_REG or TIMGn_T%sHI_REG</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>After writing 0 or 1 to TIMG_T%sUPDATE_REG, the counter value is latched.</description>
            <name>T0_UPDATE</name>
          </field>
        </fields>
        <name>T1UPDATE</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x10</addressOffset>
        <description>Timer %s alarm value, low 32 bits</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Timer %s alarm trigger time-base counter value, low 32 bits.</description>
            <name>T0_ALARM_LO</name>
          </field>
        </fields>
        <name>T0ALARMLO</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x34</addressOffset>
        <description>Timer %s alarm value, low 32 bits</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Timer %s alarm trigger time-base counter value, low 32 bits.</description>
            <name>T0_ALARM_LO</name>
          </field>
        </fields>
        <name>T1ALARMLO</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x14</addressOffset>
        <description>Timer %s alarm value, high bits</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>
            Timer %s alarm trigger time-base counter value, high 32 bits.</description>
            <name>T0_ALARM_HI</name>
          </field>
        </fields>
        <name>T0ALARMHI</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x38</addressOffset>
        <description>Timer %s alarm value, high bits</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>
            Timer %s alarm trigger time-base counter value, high 32 bits.</description>
            <name>T0_ALARM_HI</name>
          </field>
        </fields>
        <name>T1ALARMHI</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x18</addressOffset>
        <description>Timer %s reload value, low 32 bits</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Low 32 bits of the value that a reload will load onto timer %s time-base counter.</description>
            <name>T0_LOAD_LO</name>
          </field>
        </fields>
        <name>T0LOADLO</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3C</addressOffset>
        <description>Timer %s reload value, low 32 bits</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Low 32 bits of the value that a reload will load onto timer %s time-base counter.</description>
            <name>T0_LOAD_LO</name>
          </field>
        </fields>
        <name>T1LOADLO</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1C</addressOffset>
        <description>Timer %s reload value, high 32 bits</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>High 32 bits of the value that a reload will load onto timer %s time-base counter.</description>
            <name>T0_LOAD_HI</name>
          </field>
        </fields>
        <name>T0LOADHI</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x40</addressOffset>
        <description>Timer %s reload value, high 32 bits</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>High 32 bits of the value that a reload will load onto timer %s time-base counter.</description>
            <name>T0_LOAD_HI</name>
          </field>
        </fields>
        <name>T1LOADHI</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x20</addressOffset>
        <description>Write to reload timer from TIMG_T%sLOADLO_REG or TIMG_T%sLOADHI_REG</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Write any value to trigger a timer %s time-base counter reload.</description>
            <name>T0_LOAD</name>
          </field>
        </fields>
        <name>T0LOAD</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x44</addressOffset>
        <description>Write to reload timer from TIMG_T%sLOADLO_REG or TIMG_T%sLOADHI_REG</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Write any value to trigger a timer %s time-base counter reload.</description>
            <name>T0_LOAD</name>
          </field>
        </fields>
        <name>T1LOAD</name>
        <size>0x20</size>
      </register>
    </registers>
    <resetMask>0xFFFFFFFF</resetMask>
    <resetValue>0x0</resetValue>
  </peripheral>
</peripherals>
<peripherals>
  <peripheral>
    <addressBlock>
      <offset>0x0</offset>
      <size>0x6C</size>
      <usage>registers</usage>
    </addressBlock>
    <baseAddress>0x3F42B000</baseAddress>
    <description>Two-Wire Automotive Interface</description>
    <groupName>TWAI</groupName>
    <interrupts>
      <interrupt>
        <name>CAN</name>
        <value>0x2F</value>
      </interrupt>
    </interrupts>
    <name>TWAI</name>
    <registers>
      <register>
        <addressOffset>0x0</addressOffset>
        <description>Mode Register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This bit is used to configure the operating mode of the TWAI Controller. 1: Reset mode; 0: Operating mode.</description>
            <name>RESET_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: Listen only mode. In this mode the nodes will only receive messages from the bus, without generating the acknowledge signal nor updating the RX error counter.</description>
            <name>LISTEN_ONLY_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: Self test mode. In this mode the TX nodes can perform a successful transmission without receiving the acknowledge signal. This mode is often used to test a single node with the self reception request command.</description>
            <name>SELF_TEST_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This bit is used to configure the filter mode. 0: Dual filter mode; 1: Single filter mode.</description>
            <name>RX_FILTER_MODE</name>
          </field>
        </fields>
        <name>MODE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x1</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4</addressOffset>
        <description>Command Register</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set the bit to 1 to allow the driving nodes start transmission.</description>
            <name>TX_REQ</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set the bit to 1 to cancel a pending transmission request.</description>
            <name>ABORT_TX</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set the bit to 1 to release the RX buffer.</description>
            <name>RELEASE_BUF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set the bit to 1 to clear the data overrun status bit.</description>
            <name>CLR_OVERRUN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Self reception request command. Set the bit to 1 to allow a message be transmitted and received simultaneously.</description>
            <name>SELF_RX_REQ</name>
          </field>
        </fields>
        <name>CMD</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8</addressOffset>
        <description>Status register</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: The data in the RX buffer is not empty, with at least one received data packet.</description>
            <name>RX_BUF_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: The RX FIFO is full and data overrun has occurred.</description>
            <name>OVERRUN_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: The TX buffer is empty, the CPU may write a message into it.</description>
            <name>TX_BUF_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: The TWAI controller has successfully received a packet from the bus.</description>
            <name>TX_COMPLETE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: The TWAI Controller is receiving a message from the bus.</description>
            <name>RX_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: The TWAI Controller is transmitting a message to the bus.</description>
            <name>TX_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: At least one of the RX/TX error counter has reached or exceeded the value set in register TWAI_ERR_WARNING_LIMIT_REG.</description>
            <name>ERR_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: In bus-off status, the TWAI Controller is no longer involved in bus activities.</description>
            <name>BUS_OFF_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This bit reflects whether the data packet in the RX FIFO is complete. 1: The current packet is missing; 0: The current packet is complete</description>
            <name>MISS_ST</name>
          </field>
        </fields>
        <name>STATUS</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xC</addressOffset>
        <description>Interrupt Register</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receive interrupt. If this bit is set to 1, it indicates there are messages to be handled in the RX FIFO.</description>
            <name>RX_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmit interrupt. If this bit is set to 1, it indicates the message transmitting mis- sion is finished and a new transmission is able to execute.</description>
            <name>TX_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Error warning interrupt. If this bit is set to 1, it indicates the error status signal and the bus-off status signal of Status register have changed (e.g., switched from 0 to 1 or from 1 to 0).</description>
            <name>ERR_WARN_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Data overrun interrupt. If this bit is set to 1, it indicates a data overrun interrupt is generated in the RX FIFO.</description>
            <name>OVERRUN_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Error passive interrupt. If this bit is set to 1, it indicates the TWAI Controller is switched between error active status and error passive status due to the change of error counters.</description>
            <name>ERR_PASSIVE_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Arbitration lost interrupt. If this bit is set to 1, it indicates an arbitration lost interrupt is generated.</description>
            <name>ARB_LOST_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Error interrupt. If this bit is set to 1, it indicates an error is detected on the bus.</description>
            <name>BUS_ERR_INT_ST</name>
          </field>
        </fields>
        <name>INT_RAW</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x10</addressOffset>
        <description>Interrupt Enable Register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to 1 to enable receive interrupt.</description>
            <name>RX_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to 1 to enable transmit interrupt.</description>
            <name>TX_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to 1 to enable error warning interrupt.</description>
            <name>ERR_WARN_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to 1 to enable data overrun interrupt.</description>
            <name>OVERRUN_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to 1 to enable error passive interrupt.</description>
            <name>ERR_PASSIVE_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to 1 to enable arbitration lost interrupt.</description>
            <name>ARB_LOST_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to 1 to enable error interrupt.</description>
            <name>BUS_ERR_INT_ENA</name>
          </field>
        </fields>
        <name>INT_ENA</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x18</addressOffset>
        <description>Bus Timing Register 0</description>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xE</bitWidth>
            <description>Baud Rate Prescaler, determines the frequency dividing ratio.</description>
            <name>BAUD_PRESC</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Synchronization Jump Width (SJW), 1 \verb+~+ 14 Tq wide.</description>
            <name>SYNC_JUMP_WIDTH</name>
          </field>
        </fields>
        <name>BUS_TIMING_0</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1C</addressOffset>
        <description>Bus Timing Register 1</description>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>The width of PBS1.</description>
            <name>TIME_SEG1</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>The width of PBS2.</description>
            <name>TIME_SEG2</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The number of sample points. 0: the bus is sampled once; 1: the bus is sampled three times</description>
            <name>TIME_SAMP</name>
          </field>
        </fields>
        <name>BUS_TIMING_1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2C</addressOffset>
        <description>Arbitration Lost Capture Register</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register contains information about the bit position of lost arbitration.</description>
            <name>ARB_LOST_CAP</name>
          </field>
        </fields>
        <name>ARB_LOST_CAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x30</addressOffset>
        <description>Error Code Capture Register</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register contains information about the location of errors, see Table 181 for details.</description>
            <name>ECC_SEGMENT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This register contains information about transmission direction of the node when error occurs. 1: Error occurs when receiving a message; 0: Error occurs when transmitting a message</description>
            <name>ECC_DIRECTION</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>This register contains information about error types: 00: bit error; 01: form error; 10: stuff error; 11: other type of error</description>
            <name>ECC_TYPE</name>
          </field>
        </fields>
        <name>ERR_CODE_CAP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x34</addressOffset>
        <description>Error Warning Limit Register</description>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>Error warning threshold. In the case when any of a error counter value exceeds the threshold, or all the error counter values are below the threshold, an error warning interrupt will be triggered (given the enable signal is valid).</description>
            <name>ERR_WARNING_LIMIT</name>
          </field>
        </fields>
        <name>ERR_WARNING_LIMIT</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x60</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x38</addressOffset>
        <description>Receive Error Counter Register</description>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>The RX error counter register, reflects value changes under reception status.</description>
            <name>RX_ERR_CNT</name>
          </field>
        </fields>
        <name>RX_ERR_CNT</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3C</addressOffset>
        <description>Transmit Error Counter Register</description>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>The TX error counter register, reflects value changes under transmission status.</description>
            <name>TX_ERR_CNT</name>
          </field>
        </fields>
        <name>TX_ERR_CNT</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x40</addressOffset>
        <description>Data register 0</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>In reset mode, it is acceptance code register 0 with R/W Permission. In operation mode, it stores the 0th byte information of the data to be transmitted under operating mode.</description>
            <name>TX_BYTE_0</name>
          </field>
        </fields>
        <name>DATA_0</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x44</addressOffset>
        <description>Data register 1</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>In reset mode, it is acceptance code register 1 with R/W Permission. In operation mode, it stores the 1st byte information of the data to be transmitted under operating mode.</description>
            <name>TX_BYTE_1</name>
          </field>
        </fields>
        <name>DATA_1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x48</addressOffset>
        <description>Data register 2</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>In reset mode, it is acceptance code register 2 with R/W Permission. In operation mode, it stores the 2nd byte information of the data to be transmitted under operating mode.</description>
            <name>TX_BYTE_2</name>
          </field>
        </fields>
        <name>DATA_2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4C</addressOffset>
        <description>Data register 3</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>In reset mode, it is acceptance code register 3 with R/W Permission. In operation mode, it stores the 3rd byte information of the data to be transmitted under operating mode.</description>
            <name>TX_BYTE_3</name>
          </field>
        </fields>
        <name>DATA_3</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x50</addressOffset>
        <description>Data register 4</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>In reset mode, it is acceptance mask register 0 with R/W Permission. In operation mode, it stores the 4th byte information of the data to be transmitted under operating mode.</description>
            <name>TX_BYTE_4</name>
          </field>
        </fields>
        <name>DATA_4</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x54</addressOffset>
        <description>Data register 5</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>In reset mode, it is acceptance mask register 1 with R/W Permission. In operation mode, it stores the 5th byte information of the data to be transmitted under operating mode.</description>
            <name>TX_BYTE_5</name>
          </field>
        </fields>
        <name>DATA_5</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x58</addressOffset>
        <description>Data register 6</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>In reset mode, it is acceptance mask register 2 with R/W Permission. In operation mode, it stores the 6th byte information of the data to be transmitted under operating mode.</description>
            <name>TX_BYTE_6</name>
          </field>
        </fields>
        <name>DATA_6</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5C</addressOffset>
        <description>Data register 7</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>In reset mode, it is acceptance mask register 3 with R/W Permission. In operation mode, it stores the 7th byte information of the data to be transmitted under operating mode.</description>
            <name>TX_BYTE_7</name>
          </field>
        </fields>
        <name>DATA_7</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x60</addressOffset>
        <description>Data register 8</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>Stored the 8th byte information of the data to be transmitted under operating mode.</description>
            <name>TX_BYTE_8</name>
          </field>
        </fields>
        <name>DATA_8</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x64</addressOffset>
        <description>Data register 9</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>Stored the 9th byte information of the data to be transmitted under operating mode.</description>
            <name>TX_BYTE_9</name>
          </field>
        </fields>
        <name>DATA_9</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x68</addressOffset>
        <description>Data register 10</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>Stored the 10th byte information of the data to be transmitted under operating mode.</description>
            <name>TX_BYTE_10</name>
          </field>
        </fields>
        <name>DATA_10</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x6C</addressOffset>
        <description>Data register 11</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>Stored the 11th byte information of the data to be transmitted under operating mode.</description>
            <name>TX_BYTE_11</name>
          </field>
        </fields>
        <name>DATA_11</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x70</addressOffset>
        <description>Data register 12</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>Stored the 12th byte information of the data to be transmitted under operating mode.</description>
            <name>TX_BYTE_12</name>
          </field>
        </fields>
        <name>DATA_12</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x74</addressOffset>
        <description>Receive Message Counter Register</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x7</bitWidth>
            <description>This register reflects the number of messages available within the RX FIFO.</description>
            <name>RX_MESSAGE_COUNTER</name>
          </field>
        </fields>
        <name>RX_MESSAGE_CNT</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x7C</addressOffset>
        <description>Clock Divider register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>These bits are used to configure frequency dividing coefficients of the external CLKOUT pin.</description>
            <name>CD</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This bit can be configured under reset mode. 1: Disable the external CLKOUT pin; 0: Enable the external CLKOUT pin</description>
            <name>CLOCK_OFF</name>
          </field>
        </fields>
        <name>CLOCK_DIVIDER</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <resetMask>0xFFFFFFFF</resetMask>
    <resetValue>0x0</resetValue>
  </peripheral>
</peripherals>
<peripherals>
  <peripheral>
    <addressBlock>
      <offset>0x0</offset>
      <size>0x7C</size>
      <usage>registers</usage>
    </addressBlock>
    <baseAddress>0x3F400000</baseAddress>
    <description>UART (Universal Asynchronous Receiver-Transmitter) Controller</description>
    <groupName>UART</groupName>
    <interrupts>
      <interrupt>
        <name>UART0</name>
        <value>0x25</value>
      </interrupt>
    </interrupts>
    <name>UART0</name>
    <registers>
      <register>
        <addressOffset>0x0</addressOffset>
        <description>FIFO data register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>UART 0 accesses FIFO via this register.</description>
            <name>RXFIFO_RD_BYTE</name>
          </field>
        </fields>
        <name>FIFO</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4</addressOffset>
        <description>Raw interrupt status</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This interrupt raw bit turns to high level when the receiver receives more data than what UART_RXFIFO_FULL_THRHD specifies.</description>
            <name>RXFIFO_FULL_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This interrupt raw bit turns to high level when the amount of data in TX FIFO is less than what UART_TXFIFO_EMPTY_THRHD specifies.</description>
            <name>TXFIFO_EMPTY_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This interrupt raw bit turns to high level when the receiver detects a parity error in the data.</description>
            <name>PARITY_ERR_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This interrupt raw bit turns to high level when the receiver detects a data frame error.</description>
            <name>FRM_ERR_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This interrupt raw bit turns to high level when the receiver receives more data than the capacity of RX FIFO.</description>
            <name>RXFIFO_OVF_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This interrupt raw bit turns to high level when the receiver detects the edge change of DSRn signal.</description>
            <name>DSR_CHG_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This interrupt raw bit turns to high level when the receiver detects the edge change of CTSn signal.</description>
            <name>CTS_CHG_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This interrupt raw bit turns to high level when the receiver detects a 0 after the stop bit.</description>
            <name>BRK_DET_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This interrupt raw bit turns to high level when the receiver takes more time than UART_RX_TOUT_THRHD to receive a byte.</description>
            <name>RXFIFO_TOUT_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This interrupt raw bit turns to high level when the receiver receives an XON character and UART_SW_FLOW_CON_EN is set to 1.</description>
            <name>SW_XON_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This interrupt raw bit turns to high level when the receiver receives an XOFF character and UART_SW_FLOW_CON_EN is set to 1.</description>
            <name>SW_XOFF_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This interrupt raw bit turns to high level when the receiver detects a glitch in the middle of a start bit.</description>
            <name>GLITCH_DET_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This interrupt raw bit turns to high level when the transmitter completes  sending  NULL characters, after all data in TX FIFO are sent.</description>
            <name>TX_BRK_DONE_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This interrupt raw bit turns to high level when the transmitter has kept the shortest duration after sending the  last data.</description>
            <name>TX_BRK_IDLE_DONE_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This interrupt raw bit turns to high level when the transmitter has sent out all data in FIFO.</description>
            <name>TX_DONE_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This interrupt raw bit turns to high level when the receiver detects a parity error from the echo of the transmitter in RS485 mode.</description>
            <name>RS485_PARITY_ERR_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This interrupt raw bit turns to high level when the receiver detects a data frame error from the echo of the transmitter in RS485 mode.</description>
            <name>RS485_FRM_ERR_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This interrupt raw bit turns to high level when a collision is detected between the transmitter and the receiver in RS485 mode.</description>
            <name>RS485_CLASH_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This interrupt raw bit turns to high level when the receiver detects the configured UART_AT_CMD CHAR.</description>
            <name>AT_CMD_CHAR_DET_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This interrupt raw bit turns to high level when input RXD edge changes more times than what UART_ACTIVE_THRESHOLD specifies in Light-sleep mode.</description>
            <name>WAKEUP_INT_RAW</name>
          </field>
        </fields>
        <name>INT_RAW</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8</addressOffset>
        <description>Masked interrupt status</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the status bit for UART_RXFIFO_FULL_INT when UART_RXFIFO_FULL_INT_ENA is set to 1.</description>
            <name>RXFIFO_FULL_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the status bit for UART_TXFIFO_EMPTY_INT when UART_TXFIFO_EMPTY_INT_ENA is set to 1.</description>
            <name>TXFIFO_EMPTY_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the status bit for UART_PARITY_ERR_INT when UART_PARITY_ERR_INT_ENA is set to 1.</description>
            <name>PARITY_ERR_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the status bit for UART_FRM_ERR_INT when UART_FRM_ERR_INT_ENA is set to 1.</description>
            <name>FRM_ERR_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the status bit for UART_RXFIFO_OVF_INT when UART_RXFIFO_OVF_INT_ENA is set to 1.</description>
            <name>RXFIFO_OVF_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the status bit for UART_DSR_CHG_INT when UART_DSR_CHG_INT_ENA is set to 1.</description>
            <name>DSR_CHG_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the status bit for UART_CTS_CHG_INT when UART_CTS_CHG_INT_ENA is set to 1.</description>
            <name>CTS_CHG_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the status bit for UART_BRK_DET_INT when UART_BRK_DET_INT_ENA is set to 1.</description>
            <name>BRK_DET_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the status bit for UART_RXFIFO_TOUT_INT when UART_RXFIFO_TOUT_INT_ENA is set to 1.</description>
            <name>RXFIFO_TOUT_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the status bit for UART_SW_XON_INT when UART_SW_XON_INT_ENA is set to 1.</description>
            <name>SW_XON_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the status bit for UART_SW_XOFF_INT when UART_SW_XOFF_INT_ENA is set to 1.</description>
            <name>SW_XOFF_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the status bit for UART_GLITCH_DET_INT when UART_GLITCH_DET_INT_ENA is set to 1.</description>
            <name>GLITCH_DET_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the status bit for UART_TX_BRK_DONE_INT when UART_TX_BRK_DONE_INT_ENA is set to 1.</description>
            <name>TX_BRK_DONE_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the status bit for UART_TX_BRK_IDLE_DONE_INT when UART_TX_BRK_IDLE_DONE_INT_ENA is set to 1.</description>
            <name>TX_BRK_IDLE_DONE_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the status bit for UART_TX_DONE_INT when UART_TX_DONE_INT_ENA is set to 1.</description>
            <name>TX_DONE_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the status bit for UART_RS485_PARITY_ERR_INT when UART_RS485_PARITY_INT_ENA is set to 1.</description>
            <name>RS485_PARITY_ERR_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the status bit for UART_RS485_FRM_ERR_INT when UART_RS485_FRM_ERR_INT_ENA is set to 1.</description>
            <name>RS485_FRM_ERR_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the status bit for UART_RS485_CLASH_INT when UART_RS485_CLASH_INT_ENA is set to 1.</description>
            <name>RS485_CLASH_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the status bit for UART_AT_CMD_CHAR_DET_INT when UART_AT_CMD_CHAR_DET_INT_ENA is set to 1.</description>
            <name>AT_CMD_CHAR_DET_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the status bit for UART_WAKEUP_INT when UART_WAKEUP_INT_ENA is set to 1.</description>
            <name>WAKEUP_INT_ST</name>
          </field>
        </fields>
        <name>INT_ST</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xC</addressOffset>
        <description>Interrupt enable bits</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the enable bit for UART_RXFIFO_FULL_INT.</description>
            <name>RXFIFO_FULL_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the enable bit for UART_TXFIFO_EMPTY_INT.</description>
            <name>TXFIFO_EMPTY_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the enable bit for UART_PARITY_ERR_INT.</description>
            <name>PARITY_ERR_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the enable bit for UART_FRM_ERR_INT.</description>
            <name>FRM_ERR_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the enable bit for UART_RXFIFO_OVF_INT.</description>
            <name>RXFIFO_OVF_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the enable bit for UART_DSR_CHG_INT.</description>
            <name>DSR_CHG_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the enable bit for UART_CTS_CHG_INT.</description>
            <name>CTS_CHG_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the enable bit for UART_BRK_DET_INT.</description>
            <name>BRK_DET_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the enable bit for UART_RXFIFO_TOUT_INT.</description>
            <name>RXFIFO_TOUT_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the enable bit for UART_SW_XON_INT.</description>
            <name>SW_XON_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the enable bit for UART_SW_XOFF_INT.</description>
            <name>SW_XOFF_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the enable bit for UART_GLITCH_DET_INT.</description>
            <name>GLITCH_DET_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the enable bit for UART_TX_BRK_DONE_INT.</description>
            <name>TX_BRK_DONE_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the enable bit for UART_TX_BRK_IDLE_DONE_INT.</description>
            <name>TX_BRK_IDLE_DONE_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the enable bit for UART_TX_DONE_INT.</description>
            <name>TX_DONE_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the enable bit for UART_RS485_PARITY_ERR_INT.</description>
            <name>RS485_PARITY_ERR_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the enable bit for UART_RS485_PARITY_ERR_INT.</description>
            <name>RS485_FRM_ERR_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the enable bit for UART_RS485_CLASH_INT.</description>
            <name>RS485_CLASH_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the enable bit for UART_AT_CMD_CHAR_DET_INT.</description>
            <name>AT_CMD_CHAR_DET_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the enable bit for UART_WAKEUP_INT.</description>
            <name>WAKEUP_INT_ENA</name>
          </field>
        </fields>
        <name>INT_ENA</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x10</addressOffset>
        <description>Interrupt clear bits</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear UART_THE RXFIFO_FULL_INT interrupt.</description>
            <name>RXFIFO_FULL_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear UART_TXFIFO_EMPTY_INT interrupt.</description>
            <name>TXFIFO_EMPTY_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear UART_PARITY_ERR_INT interrupt.</description>
            <name>PARITY_ERR_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear UART_FRM_ERR_INT interrupt.</description>
            <name>FRM_ERR_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear UART_UART_RXFIFO_OVF_INT interrupt.</description>
            <name>RXFIFO_OVF_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear UART_DSR_CHG_INT interrupt.</description>
            <name>DSR_CHG_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear UART_CTS_CHG_INT interrupt.</description>
            <name>CTS_CHG_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear UART_BRK_DET_INT interrupt.</description>
            <name>BRK_DET_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear UART_RXFIFO_TOUT_INT interrupt.</description>
            <name>RXFIFO_TOUT_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear UART_SW_XON_INT interrupt.</description>
            <name>SW_XON_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear UART_SW_XOFF_INT interrupt.</description>
            <name>SW_XOFF_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear UART_GLITCH_DET_INT interrupt.</description>
            <name>GLITCH_DET_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear UART_TX_BRK_DONE_INT interrupt.</description>
            <name>TX_BRK_DONE_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear UART_TX_BRK_IDLE_DONE_INT interrupt.</description>
            <name>TX_BRK_IDLE_DONE_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear UART_TX_DONE_INT interrupt.</description>
            <name>TX_DONE_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear UART_RS485_PARITY_ERR_INT interrupt.</description>
            <name>RS485_PARITY_ERR_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear UART_RS485_FRM_ERR_INT interrupt.</description>
            <name>RS485_FRM_ERR_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear UART_RS485_CLASH_INT interrupt.</description>
            <name>RS485_CLASH_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear UART_AT_CMD_CHAR_DET_INT interrupt.</description>
            <name>AT_CMD_CHAR_DET_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear UART_WAKEUP_INT interrupt.</description>
            <name>WAKEUP_INT_CLR</name>
          </field>
        </fields>
        <name>INT_CLR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x14</addressOffset>
        <description>Clock divider configuration</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x14</bitWidth>
            <description>The integral part of the frequency divisor.</description>
            <name>CLKDIV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>The fractional part of the frequency divisor.</description>
            <name>FRAG</name>
          </field>
        </fields>
        <name>CLKDIV</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x2B6</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x18</addressOffset>
        <description>Autobaud configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the enable bit for baud rate detection.</description>
            <name>EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>When input pulse width is lower than this value, the pulse is ignored.
            This register is used in autobaud detection.</description>
            <name>GLITCH_FILT</name>
          </field>
        </fields>
        <name>AUTOBAUD</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x1000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1C</addressOffset>
        <description>UART status register</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>Stores the number of valid data bytes in RX FIFO.</description>
            <name>RXFIFO_CNT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This register represents the level of the internal UART DSR signal.</description>
            <name>DSRN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This register represents the level of the internal UART CTS signal.</description>
            <name>CTSN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This register represents the level of the internal UART RXD signal.</description>
            <name>RXD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>Stores the number of data bytes in TX FIFO.</description>
            <name>TXFIFO_CNT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This bit represents the level of the internal UART DTR signal.</description>
            <name>DTRN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This bit represents the level of the internal UART RTS signal.</description>
            <name>RTSN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This bit represents the level of the internal UART TXD signal.</description>
            <name>TXD</name>
          </field>
        </fields>
        <name>STATUS</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x20</addressOffset>
        <description>Configuration register 0</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This register is used to configure the parity check mode.
            0: even. 1: odd.</description>
            <name>PARITY</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable UART parity check.</description>
            <name>PARITY_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>This register is used to set the length of data.
            0: 5 bits. 1: 6 bits. 2: 7 bits. 3: 8 bits.</description>
            <name>BIT_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>This register is used to set the length of  stop bit.
            1: 1 bit. 2: 1.5 bits. 3: 2 bits.</description>
            <name>STOP_BIT_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This register is used to configure the software RTS signal which is used in software flow control.</description>
            <name>SW_RTS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This register is used to configure the software DTR signal which is used in software flow control.</description>
            <name>SW_DTR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable the transmitter to send NULL characters when the process of sending data is done.</description>
            <name>TXD_BRK</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable IrDA loopback mode.</description>
            <name>IRDA_DPLX</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the start enable bit for IrDA transmitter.</description>
            <name>IRDA_TX_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: The IrDA transmitter's 11th bit is the same as 10th bit. 0: Set IrDA transmitter's 11th bit to 0.</description>
            <name>IRDA_WCTL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to invert the level of IrDA transmitter.</description>
            <name>IRDA_TX_INV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to invert the level of IrDA receiver.</description>
            <name>IRDA_RX_INV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable UART loopback test mode.</description>
            <name>LOOPBACK</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable flow control function for the transmitter.</description>
            <name>TX_FLOW_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable IrDA protocol.</description>
            <name>IRDA_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to reset the UART RX FIFO.</description>
            <name>RXFIFO_RST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to reset the UART TX FIFO.</description>
            <name>TXFIFO_RST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to invert the level of UART RXD signal.</description>
            <name>RXD_INV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to invert the level of UART CTS signal.</description>
            <name>CTS_INV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to invert the level of UART DSR signal.</description>
            <name>DSR_INV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to invert the level of UART TXD signal.</description>
            <name>TXD_INV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to invert the level of UART RTS signal.</description>
            <name>RTS_INV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to invert the level of UART DTR signal.</description>
            <name>DTR_INV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: Force clock on for registers. 0: Support clock only when application writes registers.</description>
            <name>CLK_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: The receiver stops storing data into FIFO when data is wrong. 0: The receiver stores the data even if the  received data is wrong.</description>
            <name>ERR_WR_MASK</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This register is used to select the clock. 
            1: APB_CLK. 
            0: REF_TICK.</description>
            <name>TICK_REF_ALWAYS_ON</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The signal to enable UART RAM clock gating.
            1: UART RAM powers on, the data of which can be read and written.
            0: UART RAM powers down.</description>
            <name>MEM_CLK_EN</name>
          </field>
        </fields>
        <name>CONF0</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x1800001C</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x24</addressOffset>
        <description>Configuration register 1</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>An UART_RXFIFO_FULL_INT interrupt is generated when the receiver receives more data than this register’s value.</description>
            <name>RXFIFO_FULL_THRHD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>An UART_TXFIFO_EMPTY_INT interrupt is generated when the number of data bytes in TX FIFO is less than this register's value.</description>
            <name>TXFIFO_EMPTY_THRHD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to stop accumulating idle_cnt when hardware flow control works.</description>
            <name>RX_TOUT_FLOW_DIS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the flow enable bit for UART receiver.
            1: Choose software flow control with configuring sw_rts signal. 0: Disable software flow control.</description>
            <name>RX_FLOW_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the enable bit for UART receiver's timeout function.</description>
            <name>RX_TOUT_EN</name>
          </field>
        </fields>
        <name>CONF1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xC060</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x28</addressOffset>
        <description>Autobaud minimum low pulse duration register</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x14</bitWidth>
            <description>This register stores the value of the minimum duration time of the low level pulse. It is used in baud rate detection.</description>
            <name>MIN_CNT</name>
          </field>
        </fields>
        <name>LOWPULSE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xFFFFF</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2C</addressOffset>
        <description>Autobaud minimum high pulse duration register</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x14</bitWidth>
            <description>This register stores  the value of the maximum duration time for the high level pulse. It is used in baud rate detection.</description>
            <name>MIN_CNT</name>
          </field>
        </fields>
        <name>HIGHPULSE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xFFFFF</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x30</addressOffset>
        <description>Autobaud edge change count register</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>This register stores the count of RXD edge change.  It is used in baud rate detection. As baud rate registers UART_REG_LOWPULSE_MIN_CNT, UART_REG_HIGHPULSE_MIN_CNT, UART_REG_POSEDGE_MIN_CNT, and UART_REG_NEGEDGE_MIN_CNT always record the minimal value, UART_REG_RXD_EDGE_CNT indicates the statistic number of RXD edge to find out the minimal value for these baud rate registers.</description>
            <name>RXD_EDGE_CNT</name>
          </field>
        </fields>
        <name>RXD_CNT</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x34</addressOffset>
        <description>Software flow control configuration</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable software flow control. When UART receives flow control characters XON or XOFF, which can be configured by UART_XON_CHAR or UART_XOFF_CHAR respectively, UART_SW_XON_INT or UART_SW_XOFF_INT interrupts can be triggered if enabled.</description>
            <name>SW_FLOW_CON_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to remove flow control characters from the received data.</description>
            <name>XONOFF_DEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to force the transmitter to send data.</description>
            <name>FORCE_XON</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to stop the transmitter from sending data.</description>
            <name>FORCE_XOFF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to send an XON character. This bit is cleared by hardware automatically.</description>
            <name>SEND_XON</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to send an XOFF character. This bit is cleared by hardware automatically.</description>
            <name>SEND_XOFF</name>
          </field>
        </fields>
        <name>FLOW_CONF</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x38</addressOffset>
        <description>Sleep mode configuration</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>The UART is activated from Light-sleep mode when the input RXD edge changes more times than this register's value.</description>
            <name>ACTIVE_THRESHOLD</name>
          </field>
        </fields>
        <name>SLEEP_CONF</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xF0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3C</addressOffset>
        <description>Software flow control character configuration</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>When the number of data bytes in RX FIFO is more than this register's value with UART_SW_FLOW_CON_EN set to 1, the transmitter sends an XOFF character.</description>
            <name>XOFF_THRESHOLD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>This register stores the XOFF flow control character.</description>
            <name>XOFF_CHAR</name>
          </field>
        </fields>
        <name>SWFC_CONF0</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x26E0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x40</addressOffset>
        <description>Software flow-control character configuration</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>When the number of data bytes in RX FIFO is less than this register's value with UART_SW_FLOW_CON_EN set to 1, the transmitter sends an XON character.</description>
            <name>XON_THRESHOLD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>This register stores the XON flow control character.</description>
            <name>XON_CHAR</name>
          </field>
        </fields>
        <name>SWFC_CONF1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x2200</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x44</addressOffset>
        <description>Frame end idle time configuration</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>A frame end signal is generated when the receiver takes more time to receive one byte data than this register's value, in the unit of bit time (the time it takes to transfer one bit).</description>
            <name>RX_IDLE_THRHD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>This register is used to configure the duration time between transfers, in the unit of bit time (the time it takes to transfer one bit).</description>
            <name>TX_IDLE_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>This register is used to configure the number of 0 to be sent after the process of sending data is done. It is active when UART_TXD_BRK is set to 1.</description>
            <name>TX_BRK_NUM</name>
          </field>
        </fields>
        <name>IDLE_CONF</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xA40100</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x48</addressOffset>
        <description>RS485 mode configuration</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to choose RS485 mode.</description>
            <name>RS485_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to delay the stop bit by 1 bit.</description>
            <name>DL0_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to delay the stop bit by 1 bit.</description>
            <name>DL1_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable the receiver could receive data when the transmitter is transmitting data in RS485 mode.</description>
            <name>RS485TX_RX_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: enable RS485 transmitter to send data when RS485 receiver line is busy. 
            0: RS485 transmitter should not send data when its receiver is busy.</description>
            <name>RS485RXBY_TX_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This register is used to delay the receiver's internal data signal.</description>
            <name>RS485_RX_DLY_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>This register is used to delay the transmitter's internal data signal.</description>
            <name>RS485_TX_DLY_NUM</name>
          </field>
        </fields>
        <name>RS485_CONF</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4C</addressOffset>
        <description>Pre-sequence timing configuration</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>This register is used to configure the idle duration time before the first AT_CMD is received by the receiver. 
            It will not take the next data received as AT_CMD character when the duration is less than this register's value.</description>
            <name>PRE_IDLE_NUM</name>
          </field>
        </fields>
        <name>AT_CMD_PRECNT</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x901</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x50</addressOffset>
        <description>Post-sequence timing configuration</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>This register is used to configure the duration time between the last AT_CMD and the next data.
            It will not take the previous data as AT_CMD character when the duration is less than this register's value.</description>
            <name>POST_IDLE_NUM</name>
          </field>
        </fields>
        <name>AT_CMD_POSTCNT</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x901</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x54</addressOffset>
        <description>Timeout configuration</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>This register is used to configure the duration time between the AT_CMD characters.
            It will not take the data as continuous AT_CMD characters when the duration time is less than this register's value.</description>
            <name>RX_GAP_TOUT</name>
          </field>
        </fields>
        <name>AT_CMD_GAPTOUT</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xB</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x58</addressOffset>
        <description>AT escape sequence selection configuration</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>This register is used to configure the content of AT_CMD character.</description>
            <name>AT_CMD_CHAR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>This register is used to configure the number of continuous AT_CMD characters received by the receiver.</description>
            <name>CHAR_NUM</name>
          </field>
        </fields>
        <name>AT_CMD_CHAR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x32B</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5C</addressOffset>
        <description>UART threshold and allocation configuration</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>This register is used to configure the amount of RAM allocated for RX FIFO. The default number is 128 bytes.</description>
            <name>RX_SIZE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>This register is used to configure the amount of RAM allocated for TX FIFO. The default number is 128 bytes.</description>
            <name>TX_SIZE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>This register is used to configure the maximum amount of data bytes that can be received  when hardware flow control works.</description>
            <name>RX_FLOW_THRHD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>This register is used to configure the threshold time that the receiver takes to receive one byte, in the unit of bit time (the time it takes to transfer one bit).
            The UART_RXFIFO_TOUT_INT interrupt will be triggered when the receiver takes more time to receive one byte with UART RX_TOUT_EN set to 1.</description>
            <name>RX_TOUT_THRHD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to force power down UART RAM.</description>
            <name>MEM_FORCE_PD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to force power up UART RAM.</description>
            <name>MEM_FORCE_PU</name>
          </field>
        </fields>
        <name>MEM_CONF</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xA0012</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x60</addressOffset>
        <description>TX FIFO write and read offset address</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>This register stores the offset address in TX FIFO when software writes TX FIFO via APB.</description>
            <name>APB_TX_WADDR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>This register stores the offset address in TX FIFO when TX FSM reads data via Tx_FIFO_Ctrl.</description>
            <name>TX_RADDR</name>
          </field>
        </fields>
        <name>MEM_TX_STATUS</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x64</addressOffset>
        <description>RX FIFO write and read offset address</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>This register stores the offset address in RX_FIFO when software reads data from RX FIFO via APB.</description>
            <name>APB_RX_RADDR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>This register stores the offset address in RX FIFO when Rx_FIFO_Ctrl writes RX FIFO.</description>
            <name>RX_WADDR</name>
          </field>
        </fields>
        <name>MEM_RX_STATUS</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x68</addressOffset>
        <description>UART transmitter and receiver status</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>This is the status register of the receiver.</description>
            <name>ST_URX_OUT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>This is the status register of the transmitter.</description>
            <name>ST_UTX_OUT</name>
          </field>
        </fields>
        <name>FSM_STATUS</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x6C</addressOffset>
        <description>Autobaud high pulse register</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x14</bitWidth>
            <description>This register stores the minimal input clock count between two positive edges. It is used in baud rate detection.</description>
            <name>POSEDGE_MIN_CNT</name>
          </field>
        </fields>
        <name>POSPULSE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xFFFFF</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x70</addressOffset>
        <description>Autobaud low pulse register</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x14</bitWidth>
            <description>This register stores the minimal input clock count between two negative edges. It is used in baud rate detection.</description>
            <name>NEGEDGE_MIN_CNT</name>
          </field>
        </fields>
        <name>NEGPULSE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xFFFFF</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x74</addressOffset>
        <description>UART version control register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>This is the version control register.</description>
            <name>DATE</name>
          </field>
        </fields>
        <name>DATE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x18082800</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x78</addressOffset>
        <description>UART ID register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>This register is used to configure the UART_ID.</description>
            <name>ID</name>
          </field>
        </fields>
        <name>ID</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x500</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <resetMask>0xFFFFFFFF</resetMask>
    <resetValue>0x0</resetValue>
  </peripheral>
</peripherals>
<peripherals>
  <peripheral>
    <addressBlock>
      <offset>0x0</offset>
      <size>0x7C</size>
      <usage>registers</usage>
    </addressBlock>
    <baseAddress>0x3F410000</baseAddress>
    <derivedFrom>UART0</derivedFrom>
    <description>UART (Universal Asynchronous Receiver-Transmitter) Controller</description>
    <groupName>UART</groupName>
    <interrupts>
      <interrupt>
        <name>UART1</name>
        <value>0x26</value>
      </interrupt>
    </interrupts>
    <name>UART1</name>
    <registers>
      <register>
        <addressOffset>0x0</addressOffset>
        <description>FIFO data register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>UART 0 accesses FIFO via this register.</description>
            <name>RXFIFO_RD_BYTE</name>
          </field>
        </fields>
        <name>FIFO</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4</addressOffset>
        <description>Raw interrupt status</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This interrupt raw bit turns to high level when the receiver receives more data than what UART_RXFIFO_FULL_THRHD specifies.</description>
            <name>RXFIFO_FULL_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This interrupt raw bit turns to high level when the amount of data in TX FIFO is less than what UART_TXFIFO_EMPTY_THRHD specifies.</description>
            <name>TXFIFO_EMPTY_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This interrupt raw bit turns to high level when the receiver detects a parity error in the data.</description>
            <name>PARITY_ERR_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This interrupt raw bit turns to high level when the receiver detects a data frame error.</description>
            <name>FRM_ERR_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This interrupt raw bit turns to high level when the receiver receives more data than the capacity of RX FIFO.</description>
            <name>RXFIFO_OVF_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This interrupt raw bit turns to high level when the receiver detects the edge change of DSRn signal.</description>
            <name>DSR_CHG_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This interrupt raw bit turns to high level when the receiver detects the edge change of CTSn signal.</description>
            <name>CTS_CHG_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This interrupt raw bit turns to high level when the receiver detects a 0 after the stop bit.</description>
            <name>BRK_DET_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This interrupt raw bit turns to high level when the receiver takes more time than UART_RX_TOUT_THRHD to receive a byte.</description>
            <name>RXFIFO_TOUT_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This interrupt raw bit turns to high level when the receiver receives an XON character and UART_SW_FLOW_CON_EN is set to 1.</description>
            <name>SW_XON_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This interrupt raw bit turns to high level when the receiver receives an XOFF character and UART_SW_FLOW_CON_EN is set to 1.</description>
            <name>SW_XOFF_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This interrupt raw bit turns to high level when the receiver detects a glitch in the middle of a start bit.</description>
            <name>GLITCH_DET_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This interrupt raw bit turns to high level when the transmitter completes  sending  NULL characters, after all data in TX FIFO are sent.</description>
            <name>TX_BRK_DONE_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This interrupt raw bit turns to high level when the transmitter has kept the shortest duration after sending the  last data.</description>
            <name>TX_BRK_IDLE_DONE_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This interrupt raw bit turns to high level when the transmitter has sent out all data in FIFO.</description>
            <name>TX_DONE_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This interrupt raw bit turns to high level when the receiver detects a parity error from the echo of the transmitter in RS485 mode.</description>
            <name>RS485_PARITY_ERR_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This interrupt raw bit turns to high level when the receiver detects a data frame error from the echo of the transmitter in RS485 mode.</description>
            <name>RS485_FRM_ERR_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This interrupt raw bit turns to high level when a collision is detected between the transmitter and the receiver in RS485 mode.</description>
            <name>RS485_CLASH_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This interrupt raw bit turns to high level when the receiver detects the configured UART_AT_CMD CHAR.</description>
            <name>AT_CMD_CHAR_DET_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This interrupt raw bit turns to high level when input RXD edge changes more times than what UART_ACTIVE_THRESHOLD specifies in Light-sleep mode.</description>
            <name>WAKEUP_INT_RAW</name>
          </field>
        </fields>
        <name>INT_RAW</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8</addressOffset>
        <description>Masked interrupt status</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the status bit for UART_RXFIFO_FULL_INT when UART_RXFIFO_FULL_INT_ENA is set to 1.</description>
            <name>RXFIFO_FULL_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the status bit for UART_TXFIFO_EMPTY_INT when UART_TXFIFO_EMPTY_INT_ENA is set to 1.</description>
            <name>TXFIFO_EMPTY_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the status bit for UART_PARITY_ERR_INT when UART_PARITY_ERR_INT_ENA is set to 1.</description>
            <name>PARITY_ERR_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the status bit for UART_FRM_ERR_INT when UART_FRM_ERR_INT_ENA is set to 1.</description>
            <name>FRM_ERR_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the status bit for UART_RXFIFO_OVF_INT when UART_RXFIFO_OVF_INT_ENA is set to 1.</description>
            <name>RXFIFO_OVF_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the status bit for UART_DSR_CHG_INT when UART_DSR_CHG_INT_ENA is set to 1.</description>
            <name>DSR_CHG_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the status bit for UART_CTS_CHG_INT when UART_CTS_CHG_INT_ENA is set to 1.</description>
            <name>CTS_CHG_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the status bit for UART_BRK_DET_INT when UART_BRK_DET_INT_ENA is set to 1.</description>
            <name>BRK_DET_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the status bit for UART_RXFIFO_TOUT_INT when UART_RXFIFO_TOUT_INT_ENA is set to 1.</description>
            <name>RXFIFO_TOUT_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the status bit for UART_SW_XON_INT when UART_SW_XON_INT_ENA is set to 1.</description>
            <name>SW_XON_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the status bit for UART_SW_XOFF_INT when UART_SW_XOFF_INT_ENA is set to 1.</description>
            <name>SW_XOFF_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the status bit for UART_GLITCH_DET_INT when UART_GLITCH_DET_INT_ENA is set to 1.</description>
            <name>GLITCH_DET_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the status bit for UART_TX_BRK_DONE_INT when UART_TX_BRK_DONE_INT_ENA is set to 1.</description>
            <name>TX_BRK_DONE_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the status bit for UART_TX_BRK_IDLE_DONE_INT when UART_TX_BRK_IDLE_DONE_INT_ENA is set to 1.</description>
            <name>TX_BRK_IDLE_DONE_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the status bit for UART_TX_DONE_INT when UART_TX_DONE_INT_ENA is set to 1.</description>
            <name>TX_DONE_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the status bit for UART_RS485_PARITY_ERR_INT when UART_RS485_PARITY_INT_ENA is set to 1.</description>
            <name>RS485_PARITY_ERR_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the status bit for UART_RS485_FRM_ERR_INT when UART_RS485_FRM_ERR_INT_ENA is set to 1.</description>
            <name>RS485_FRM_ERR_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the status bit for UART_RS485_CLASH_INT when UART_RS485_CLASH_INT_ENA is set to 1.</description>
            <name>RS485_CLASH_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the status bit for UART_AT_CMD_CHAR_DET_INT when UART_AT_CMD_CHAR_DET_INT_ENA is set to 1.</description>
            <name>AT_CMD_CHAR_DET_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the status bit for UART_WAKEUP_INT when UART_WAKEUP_INT_ENA is set to 1.</description>
            <name>WAKEUP_INT_ST</name>
          </field>
        </fields>
        <name>INT_ST</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xC</addressOffset>
        <description>Interrupt enable bits</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the enable bit for UART_RXFIFO_FULL_INT.</description>
            <name>RXFIFO_FULL_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the enable bit for UART_TXFIFO_EMPTY_INT.</description>
            <name>TXFIFO_EMPTY_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the enable bit for UART_PARITY_ERR_INT.</description>
            <name>PARITY_ERR_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the enable bit for UART_FRM_ERR_INT.</description>
            <name>FRM_ERR_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the enable bit for UART_RXFIFO_OVF_INT.</description>
            <name>RXFIFO_OVF_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the enable bit for UART_DSR_CHG_INT.</description>
            <name>DSR_CHG_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the enable bit for UART_CTS_CHG_INT.</description>
            <name>CTS_CHG_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the enable bit for UART_BRK_DET_INT.</description>
            <name>BRK_DET_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the enable bit for UART_RXFIFO_TOUT_INT.</description>
            <name>RXFIFO_TOUT_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the enable bit for UART_SW_XON_INT.</description>
            <name>SW_XON_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the enable bit for UART_SW_XOFF_INT.</description>
            <name>SW_XOFF_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the enable bit for UART_GLITCH_DET_INT.</description>
            <name>GLITCH_DET_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the enable bit for UART_TX_BRK_DONE_INT.</description>
            <name>TX_BRK_DONE_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the enable bit for UART_TX_BRK_IDLE_DONE_INT.</description>
            <name>TX_BRK_IDLE_DONE_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the enable bit for UART_TX_DONE_INT.</description>
            <name>TX_DONE_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the enable bit for UART_RS485_PARITY_ERR_INT.</description>
            <name>RS485_PARITY_ERR_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the enable bit for UART_RS485_PARITY_ERR_INT.</description>
            <name>RS485_FRM_ERR_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the enable bit for UART_RS485_CLASH_INT.</description>
            <name>RS485_CLASH_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the enable bit for UART_AT_CMD_CHAR_DET_INT.</description>
            <name>AT_CMD_CHAR_DET_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the enable bit for UART_WAKEUP_INT.</description>
            <name>WAKEUP_INT_ENA</name>
          </field>
        </fields>
        <name>INT_ENA</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x10</addressOffset>
        <description>Interrupt clear bits</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear UART_THE RXFIFO_FULL_INT interrupt.</description>
            <name>RXFIFO_FULL_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear UART_TXFIFO_EMPTY_INT interrupt.</description>
            <name>TXFIFO_EMPTY_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear UART_PARITY_ERR_INT interrupt.</description>
            <name>PARITY_ERR_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear UART_FRM_ERR_INT interrupt.</description>
            <name>FRM_ERR_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear UART_UART_RXFIFO_OVF_INT interrupt.</description>
            <name>RXFIFO_OVF_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear UART_DSR_CHG_INT interrupt.</description>
            <name>DSR_CHG_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear UART_CTS_CHG_INT interrupt.</description>
            <name>CTS_CHG_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear UART_BRK_DET_INT interrupt.</description>
            <name>BRK_DET_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear UART_RXFIFO_TOUT_INT interrupt.</description>
            <name>RXFIFO_TOUT_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear UART_SW_XON_INT interrupt.</description>
            <name>SW_XON_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear UART_SW_XOFF_INT interrupt.</description>
            <name>SW_XOFF_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear UART_GLITCH_DET_INT interrupt.</description>
            <name>GLITCH_DET_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear UART_TX_BRK_DONE_INT interrupt.</description>
            <name>TX_BRK_DONE_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear UART_TX_BRK_IDLE_DONE_INT interrupt.</description>
            <name>TX_BRK_IDLE_DONE_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear UART_TX_DONE_INT interrupt.</description>
            <name>TX_DONE_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear UART_RS485_PARITY_ERR_INT interrupt.</description>
            <name>RS485_PARITY_ERR_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear UART_RS485_FRM_ERR_INT interrupt.</description>
            <name>RS485_FRM_ERR_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear UART_RS485_CLASH_INT interrupt.</description>
            <name>RS485_CLASH_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear UART_AT_CMD_CHAR_DET_INT interrupt.</description>
            <name>AT_CMD_CHAR_DET_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear UART_WAKEUP_INT interrupt.</description>
            <name>WAKEUP_INT_CLR</name>
          </field>
        </fields>
        <name>INT_CLR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x14</addressOffset>
        <description>Clock divider configuration</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x14</bitWidth>
            <description>The integral part of the frequency divisor.</description>
            <name>CLKDIV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>The fractional part of the frequency divisor.</description>
            <name>FRAG</name>
          </field>
        </fields>
        <name>CLKDIV</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x2B6</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x18</addressOffset>
        <description>Autobaud configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the enable bit for baud rate detection.</description>
            <name>EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>When input pulse width is lower than this value, the pulse is ignored.
            This register is used in autobaud detection.</description>
            <name>GLITCH_FILT</name>
          </field>
        </fields>
        <name>AUTOBAUD</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x1000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1C</addressOffset>
        <description>UART status register</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>Stores the number of valid data bytes in RX FIFO.</description>
            <name>RXFIFO_CNT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This register represents the level of the internal UART DSR signal.</description>
            <name>DSRN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This register represents the level of the internal UART CTS signal.</description>
            <name>CTSN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This register represents the level of the internal UART RXD signal.</description>
            <name>RXD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>Stores the number of data bytes in TX FIFO.</description>
            <name>TXFIFO_CNT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This bit represents the level of the internal UART DTR signal.</description>
            <name>DTRN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This bit represents the level of the internal UART RTS signal.</description>
            <name>RTSN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This bit represents the level of the internal UART TXD signal.</description>
            <name>TXD</name>
          </field>
        </fields>
        <name>STATUS</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x20</addressOffset>
        <description>Configuration register 0</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This register is used to configure the parity check mode.
            0: even. 1: odd.</description>
            <name>PARITY</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable UART parity check.</description>
            <name>PARITY_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>This register is used to set the length of data.
            0: 5 bits. 1: 6 bits. 2: 7 bits. 3: 8 bits.</description>
            <name>BIT_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>This register is used to set the length of  stop bit.
            1: 1 bit. 2: 1.5 bits. 3: 2 bits.</description>
            <name>STOP_BIT_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This register is used to configure the software RTS signal which is used in software flow control.</description>
            <name>SW_RTS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This register is used to configure the software DTR signal which is used in software flow control.</description>
            <name>SW_DTR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable the transmitter to send NULL characters when the process of sending data is done.</description>
            <name>TXD_BRK</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable IrDA loopback mode.</description>
            <name>IRDA_DPLX</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the start enable bit for IrDA transmitter.</description>
            <name>IRDA_TX_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: The IrDA transmitter's 11th bit is the same as 10th bit. 0: Set IrDA transmitter's 11th bit to 0.</description>
            <name>IRDA_WCTL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to invert the level of IrDA transmitter.</description>
            <name>IRDA_TX_INV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to invert the level of IrDA receiver.</description>
            <name>IRDA_RX_INV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable UART loopback test mode.</description>
            <name>LOOPBACK</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable flow control function for the transmitter.</description>
            <name>TX_FLOW_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable IrDA protocol.</description>
            <name>IRDA_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to reset the UART RX FIFO.</description>
            <name>RXFIFO_RST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to reset the UART TX FIFO.</description>
            <name>TXFIFO_RST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to invert the level of UART RXD signal.</description>
            <name>RXD_INV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to invert the level of UART CTS signal.</description>
            <name>CTS_INV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to invert the level of UART DSR signal.</description>
            <name>DSR_INV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to invert the level of UART TXD signal.</description>
            <name>TXD_INV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to invert the level of UART RTS signal.</description>
            <name>RTS_INV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to invert the level of UART DTR signal.</description>
            <name>DTR_INV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: Force clock on for registers. 0: Support clock only when application writes registers.</description>
            <name>CLK_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: The receiver stops storing data into FIFO when data is wrong. 0: The receiver stores the data even if the  received data is wrong.</description>
            <name>ERR_WR_MASK</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This register is used to select the clock. 
            1: APB_CLK. 
            0: REF_TICK.</description>
            <name>TICK_REF_ALWAYS_ON</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The signal to enable UART RAM clock gating.
            1: UART RAM powers on, the data of which can be read and written.
            0: UART RAM powers down.</description>
            <name>MEM_CLK_EN</name>
          </field>
        </fields>
        <name>CONF0</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x1800001C</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x24</addressOffset>
        <description>Configuration register 1</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>An UART_RXFIFO_FULL_INT interrupt is generated when the receiver receives more data than this register’s value.</description>
            <name>RXFIFO_FULL_THRHD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>An UART_TXFIFO_EMPTY_INT interrupt is generated when the number of data bytes in TX FIFO is less than this register's value.</description>
            <name>TXFIFO_EMPTY_THRHD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to stop accumulating idle_cnt when hardware flow control works.</description>
            <name>RX_TOUT_FLOW_DIS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the flow enable bit for UART receiver.
            1: Choose software flow control with configuring sw_rts signal. 0: Disable software flow control.</description>
            <name>RX_FLOW_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the enable bit for UART receiver's timeout function.</description>
            <name>RX_TOUT_EN</name>
          </field>
        </fields>
        <name>CONF1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xC060</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x28</addressOffset>
        <description>Autobaud minimum low pulse duration register</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x14</bitWidth>
            <description>This register stores the value of the minimum duration time of the low level pulse. It is used in baud rate detection.</description>
            <name>MIN_CNT</name>
          </field>
        </fields>
        <name>LOWPULSE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xFFFFF</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2C</addressOffset>
        <description>Autobaud minimum high pulse duration register</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x14</bitWidth>
            <description>This register stores  the value of the maximum duration time for the high level pulse. It is used in baud rate detection.</description>
            <name>MIN_CNT</name>
          </field>
        </fields>
        <name>HIGHPULSE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xFFFFF</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x30</addressOffset>
        <description>Autobaud edge change count register</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>This register stores the count of RXD edge change.  It is used in baud rate detection. As baud rate registers UART_REG_LOWPULSE_MIN_CNT, UART_REG_HIGHPULSE_MIN_CNT, UART_REG_POSEDGE_MIN_CNT, and UART_REG_NEGEDGE_MIN_CNT always record the minimal value, UART_REG_RXD_EDGE_CNT indicates the statistic number of RXD edge to find out the minimal value for these baud rate registers.</description>
            <name>RXD_EDGE_CNT</name>
          </field>
        </fields>
        <name>RXD_CNT</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x34</addressOffset>
        <description>Software flow control configuration</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable software flow control. When UART receives flow control characters XON or XOFF, which can be configured by UART_XON_CHAR or UART_XOFF_CHAR respectively, UART_SW_XON_INT or UART_SW_XOFF_INT interrupts can be triggered if enabled.</description>
            <name>SW_FLOW_CON_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to remove flow control characters from the received data.</description>
            <name>XONOFF_DEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to force the transmitter to send data.</description>
            <name>FORCE_XON</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to stop the transmitter from sending data.</description>
            <name>FORCE_XOFF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to send an XON character. This bit is cleared by hardware automatically.</description>
            <name>SEND_XON</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to send an XOFF character. This bit is cleared by hardware automatically.</description>
            <name>SEND_XOFF</name>
          </field>
        </fields>
        <name>FLOW_CONF</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x38</addressOffset>
        <description>Sleep mode configuration</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>The UART is activated from Light-sleep mode when the input RXD edge changes more times than this register's value.</description>
            <name>ACTIVE_THRESHOLD</name>
          </field>
        </fields>
        <name>SLEEP_CONF</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xF0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3C</addressOffset>
        <description>Software flow control character configuration</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>When the number of data bytes in RX FIFO is more than this register's value with UART_SW_FLOW_CON_EN set to 1, the transmitter sends an XOFF character.</description>
            <name>XOFF_THRESHOLD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>This register stores the XOFF flow control character.</description>
            <name>XOFF_CHAR</name>
          </field>
        </fields>
        <name>SWFC_CONF0</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x26E0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x40</addressOffset>
        <description>Software flow-control character configuration</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>When the number of data bytes in RX FIFO is less than this register's value with UART_SW_FLOW_CON_EN set to 1, the transmitter sends an XON character.</description>
            <name>XON_THRESHOLD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>This register stores the XON flow control character.</description>
            <name>XON_CHAR</name>
          </field>
        </fields>
        <name>SWFC_CONF1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x2200</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x44</addressOffset>
        <description>Frame end idle time configuration</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>A frame end signal is generated when the receiver takes more time to receive one byte data than this register's value, in the unit of bit time (the time it takes to transfer one bit).</description>
            <name>RX_IDLE_THRHD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>This register is used to configure the duration time between transfers, in the unit of bit time (the time it takes to transfer one bit).</description>
            <name>TX_IDLE_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>This register is used to configure the number of 0 to be sent after the process of sending data is done. It is active when UART_TXD_BRK is set to 1.</description>
            <name>TX_BRK_NUM</name>
          </field>
        </fields>
        <name>IDLE_CONF</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xA40100</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x48</addressOffset>
        <description>RS485 mode configuration</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to choose RS485 mode.</description>
            <name>RS485_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to delay the stop bit by 1 bit.</description>
            <name>DL0_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to delay the stop bit by 1 bit.</description>
            <name>DL1_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable the receiver could receive data when the transmitter is transmitting data in RS485 mode.</description>
            <name>RS485TX_RX_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: enable RS485 transmitter to send data when RS485 receiver line is busy. 
            0: RS485 transmitter should not send data when its receiver is busy.</description>
            <name>RS485RXBY_TX_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This register is used to delay the receiver's internal data signal.</description>
            <name>RS485_RX_DLY_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>This register is used to delay the transmitter's internal data signal.</description>
            <name>RS485_TX_DLY_NUM</name>
          </field>
        </fields>
        <name>RS485_CONF</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4C</addressOffset>
        <description>Pre-sequence timing configuration</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>This register is used to configure the idle duration time before the first AT_CMD is received by the receiver. 
            It will not take the next data received as AT_CMD character when the duration is less than this register's value.</description>
            <name>PRE_IDLE_NUM</name>
          </field>
        </fields>
        <name>AT_CMD_PRECNT</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x901</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x50</addressOffset>
        <description>Post-sequence timing configuration</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>This register is used to configure the duration time between the last AT_CMD and the next data.
            It will not take the previous data as AT_CMD character when the duration is less than this register's value.</description>
            <name>POST_IDLE_NUM</name>
          </field>
        </fields>
        <name>AT_CMD_POSTCNT</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x901</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x54</addressOffset>
        <description>Timeout configuration</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>This register is used to configure the duration time between the AT_CMD characters.
            It will not take the data as continuous AT_CMD characters when the duration time is less than this register's value.</description>
            <name>RX_GAP_TOUT</name>
          </field>
        </fields>
        <name>AT_CMD_GAPTOUT</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xB</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x58</addressOffset>
        <description>AT escape sequence selection configuration</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>This register is used to configure the content of AT_CMD character.</description>
            <name>AT_CMD_CHAR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>This register is used to configure the number of continuous AT_CMD characters received by the receiver.</description>
            <name>CHAR_NUM</name>
          </field>
        </fields>
        <name>AT_CMD_CHAR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x32B</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5C</addressOffset>
        <description>UART threshold and allocation configuration</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>This register is used to configure the amount of RAM allocated for RX FIFO. The default number is 128 bytes.</description>
            <name>RX_SIZE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>This register is used to configure the amount of RAM allocated for TX FIFO. The default number is 128 bytes.</description>
            <name>TX_SIZE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>This register is used to configure the maximum amount of data bytes that can be received  when hardware flow control works.</description>
            <name>RX_FLOW_THRHD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>This register is used to configure the threshold time that the receiver takes to receive one byte, in the unit of bit time (the time it takes to transfer one bit).
            The UART_RXFIFO_TOUT_INT interrupt will be triggered when the receiver takes more time to receive one byte with UART RX_TOUT_EN set to 1.</description>
            <name>RX_TOUT_THRHD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to force power down UART RAM.</description>
            <name>MEM_FORCE_PD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to force power up UART RAM.</description>
            <name>MEM_FORCE_PU</name>
          </field>
        </fields>
        <name>MEM_CONF</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xA0012</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x60</addressOffset>
        <description>TX FIFO write and read offset address</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>This register stores the offset address in TX FIFO when software writes TX FIFO via APB.</description>
            <name>APB_TX_WADDR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>This register stores the offset address in TX FIFO when TX FSM reads data via Tx_FIFO_Ctrl.</description>
            <name>TX_RADDR</name>
          </field>
        </fields>
        <name>MEM_TX_STATUS</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x64</addressOffset>
        <description>RX FIFO write and read offset address</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>This register stores the offset address in RX_FIFO when software reads data from RX FIFO via APB.</description>
            <name>APB_RX_RADDR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>This register stores the offset address in RX FIFO when Rx_FIFO_Ctrl writes RX FIFO.</description>
            <name>RX_WADDR</name>
          </field>
        </fields>
        <name>MEM_RX_STATUS</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x68</addressOffset>
        <description>UART transmitter and receiver status</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>This is the status register of the receiver.</description>
            <name>ST_URX_OUT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>This is the status register of the transmitter.</description>
            <name>ST_UTX_OUT</name>
          </field>
        </fields>
        <name>FSM_STATUS</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x6C</addressOffset>
        <description>Autobaud high pulse register</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x14</bitWidth>
            <description>This register stores the minimal input clock count between two positive edges. It is used in baud rate detection.</description>
            <name>POSEDGE_MIN_CNT</name>
          </field>
        </fields>
        <name>POSPULSE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xFFFFF</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x70</addressOffset>
        <description>Autobaud low pulse register</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x14</bitWidth>
            <description>This register stores the minimal input clock count between two negative edges. It is used in baud rate detection.</description>
            <name>NEGEDGE_MIN_CNT</name>
          </field>
        </fields>
        <name>NEGPULSE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xFFFFF</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x74</addressOffset>
        <description>UART version control register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>This is the version control register.</description>
            <name>DATE</name>
          </field>
        </fields>
        <name>DATE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x18082800</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x78</addressOffset>
        <description>UART ID register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>This register is used to configure the UART_ID.</description>
            <name>ID</name>
          </field>
        </fields>
        <name>ID</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x500</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <resetMask>0xFFFFFFFF</resetMask>
    <resetValue>0x0</resetValue>
  </peripheral>
</peripherals>
<peripherals>
  <peripheral>
    <addressBlock>
      <offset>0x0</offset>
      <size>0xBC</size>
      <usage>registers</usage>
    </addressBlock>
    <baseAddress>0x3F414000</baseAddress>
    <description>Universal Host Controller Interface</description>
    <groupName>UHCI</groupName>
    <interrupts></interrupts>
    <name>UHCI0</name>
    <registers>
      <register>
        <addressOffset>0x0</addressOffset>
        <description>UHCI configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to reset in DMA FSM.</description>
            <name>IN_RST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to reset out DMA FSM.</description>
            <name>OUT_RST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to reset AHB interface cmdFIFO of DMA.</description>
            <name>AHBM_FIFO_RST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to reset AHB interface of DMA.</description>
            <name>AHBM_RST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Reserved.</description>
            <name>IN_LOOP_TEST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Reserved.</description>
            <name>OUT_LOOP_TEST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable automatic outlink writeback when all the data in TX FIFO has been transmitted.</description>
            <name>OUT_AUTO_WRBACK</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Reserved.</description>
            <name>OUT_NO_RESTART_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This register is used to specify the generation mode of UHCI_OUT_EOF_INT interrupt. 
            1: When DMA has popped all data from FIFO.
            0: When AHB has pushed all data to FIFO.</description>
            <name>OUT_EOF_MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to link up UHCI and UART0.</description>
            <name>UART0_CE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to link up UHCI and UART1.</description>
            <name>UART1_CE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This register is used to specify DMA transmit descriptor transfer mode.
            1: burst mode.
            0: byte mode.</description>
            <name>OUTDSCR_BURST_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This register is used to specify DMA receive descriptor transfer mode.
            1: burst mode.
            0: byte mode.</description>
            <name>INDSCR_BURST_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: UHCI transmitted data would be write back into DMA INFIFO.</description>
            <name>MEM_TRANS_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to separate the data frame using a special character.</description>
            <name>SEPER_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to encode the data packet with a formatting header.</description>
            <name>HEAD_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable UHCI to receive the 16 bit CRC.</description>
            <name>CRC_REC_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>If this bit is set to 1, UHCI will end the payload receiving process when UART has been in idle state.</description>
            <name>UART_IDLE_EOF_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>If this bit is set to 1, UHCI decoder stops receiving payload data when the number of received data bytes has reached the specified value. 
            The value is payload length indicated by UCHI packet header when UHCI_HEAD_EN is 1 or the value is a configuration value when UHCI_HEAD_EN is 0. 
            If this bit is set to 0, UHCI decoder stops receiving payload data  upon receiving 0xC0.</description>
            <name>LEN_EOF_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable data integrity checking by appending a 16 bit CCITT-CRC to the end of the payload.</description>
            <name>ENCODE_CRC_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: Force clock on for registers. 0: Support clock only when application writes registers.</description>
            <name>CLK_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>If this bit is set to 1, UHCI stops receiving payload data when a NULL frame is received by UART.</description>
            <name>UART_RX_BRK_EOF_EN</name>
          </field>
        </fields>
        <name>CONF0</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x370100</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4</addressOffset>
        <description>Raw interrupt status</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the interrupt raw bit for UHCI_RX_START_INT interrupt. The interrupt is triggered when a separator has been sent.</description>
            <name>RX_START_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the interrupt raw bit for UHCI_TX_START_INT  interrupt. The interrupt is triggered when DMA detects a separator.</description>
            <name>TX_START_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the interrupt raw bit for UHCI_RX_HUNG_INT interrupt. The interrupt is triggered when DMA takes more time to receive data than the configure value.</description>
            <name>RX_HUNG_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the interrupt raw bit for UHCI_TX_HUNG_INT  interrupt. The interrupt is triggered when DMA takes more time to read data from RAM than the configured value.</description>
            <name>TX_HUNG_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the interrupt raw bit for UHCI_IN_DONE_INT  interrupt. The interrupt is triggered when an receive descriptor is completed.</description>
            <name>IN_DONE_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the interrupt raw bit for UHCI_IN_SUC_EOF_INT interrupt. The interrupt is triggered when a data packet has been received successfully.</description>
            <name>IN_SUC_EOF_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the interrupt raw bit for UHCI_IN_ERR_EOF_INT interrupt. The interrupt is triggered when there are some errors in EOF in the receive descriptor.</description>
            <name>IN_ERR_EOF_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the interrupt raw bit for UHCI_OUT_DONE_INT interrupt. The interrupt is triggered when an transmit descriptor is completed.</description>
            <name>OUT_DONE_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the interrupt raw bit for UHCI_OUT_EOF_INT interrupt. The interrupt is triggered when the current descriptor's EOF bit is 1.</description>
            <name>OUT_EOF_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the interrupt raw bit for UHCI_IN_DSCR_ERR_INT interrupt. The interrupt is triggered when there are some errors in the receive descriptor.</description>
            <name>IN_DSCR_ERR_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the interrupt raw bit for UHCI_OUT_DSCR_ERR_INT interrupt. The interrupt is triggered when there are some errors in the transmit descriptor.</description>
            <name>OUT_DSCR_ERR_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the interrupt raw bit for UHCI_IN_DSCR_EMPTY_INT interrupt. The interrupt is triggered when there are not enough inlinks for DMA.</description>
            <name>IN_DSCR_EMPTY_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the interrupt raw bit for UHCI_OUTLINK_EOF_ERR_INT interrupt. The interrupt is triggered when there are some errors in EOF in the transmit descriptor.</description>
            <name>OUTLINK_EOF_ERR_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the interrupt raw bit for UHCI_OUT_TOTAL_EOF_INT interrupt. The interrupt is triggered when all data in the last buffer address has been sent out.</description>
            <name>OUT_TOTAL_EOF_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the interrupt raw bit for UHCI_SEND_S_REG_Q_INT interrupt. The interrupt is triggered when DMA has sent out a short packet using single_send mode.</description>
            <name>SEND_S_REG_Q_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the interrupt raw bit for UHCI_SEND_A_REG_Q_INT interrupt. The interrupt is triggered when DMA has sent out a short packet using always_send mode.</description>
            <name>SEND_A_REG_Q_INT_RAW</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the interrupt raw bit for UHCI_DMA_INFIFO_FULL_WM_INT interrupt. The interrupt is triggered when the number of data bytes in DMA RX FIFO has reached the configured threshold value.</description>
            <name>DMA_INFIFO_FULL_WM_INT_RAW</name>
          </field>
        </fields>
        <name>INT_RAW</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8</addressOffset>
        <description>Masked interrupt status</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the masked interrupt bit for UHCI_RX_START_INT interrupt when UHCI_RX_START_INT_ENA is set to 1.</description>
            <name>RX_START_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the masked interrupt bit for UHCI_TX_START_INT interrupt when UHCI_TX_START_INT_ENA is set to 1.</description>
            <name>TX_START_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the masked interrupt bit for UHCI_RX_HUNG_INT interrupt when UHCI_RX_HUNG_INT_ENA is set to 1.</description>
            <name>RX_HUNG_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the masked interrupt bit for UHCI_TX_HUNG_INT interrupt when UHCI_TX_HUNG_INT_ENA is set to 1.</description>
            <name>TX_HUNG_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the masked interrupt bit for UHCI_IN_DONE_INT interrupt when UHCI_IN_DONE_INT_ENA is set to 1.</description>
            <name>IN_DONE_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the masked interrupt bit for UHCI_IN_SUC_EOF_INT interrupt when UHCI_IN_SUC_EOF_INT_ENA is set to 1.</description>
            <name>IN_SUC_EOF_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the masked interrupt bit for UHCI_IN_ERR_EOF_INT interrupt when UHCI_IN_ERR_EOF_INT_ENA is set to 1.</description>
            <name>IN_ERR_EOF_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the masked interrupt bit for UHCI_OUT_DONE_INT interrupt when UHCI_OUT_DONE_INT_ENA is set to 1.</description>
            <name>OUT_DONE_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the masked interrupt bit for UHCI_OUT_EOF_INT interrupt when UHCI_OUT_EOF_INT_ENA is set to 1.</description>
            <name>OUT_EOF_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the masked interrupt bit for UHCI_IN_DSCR_ERR_INT interrupt when UHCI_IN_DSCR_ERR_INT is set to 1.</description>
            <name>IN_DSCR_ERR_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the masked interrupt bit for UHCI_OUT_DSCR_ERR_INT interrupt when UHCI_OUT_DSCR_ERR_INT_ENA is set to 1.</description>
            <name>OUT_DSCR_ERR_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the masked interrupt bit for UHCI_IN_DSCR_EMPTY_INT interrupt when UHCI_IN_DSCR_EMPTY_INT_ENA is set to 1.</description>
            <name>IN_DSCR_EMPTY_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the masked interrupt bit for  UHCI_OUTLINK_EOF_ERR_INT interrupt when UHCI_OUTLINK_EOF_ERR_INT_ENA is set to 1.</description>
            <name>OUTLINK_EOF_ERR_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the masked interrupt bit for  UHCI_OUT_TOTAL_EOF_INT interrupt when UHCI_OUT_TOTAL_EOF_INT_ENA is set to 1.</description>
            <name>OUT_TOTAL_EOF_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the masked interrupt bit for  UHCI_SEND_S_REG_Q_INT interrupt when UHCI_SEND_S_REG_Q_INT_ENA is set to 1.</description>
            <name>SEND_S_REG_Q_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the masked interrupt bit for UHCI_SEND_A_REG_Q_INT interrupt when UHCI_SEND_A_REG_Q_INT_ENA is set to 1.</description>
            <name>SEND_A_REG_Q_INT_ST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the masked interrupt bit for UHCI_DMA_INFIFO_FULL_WM_INT INTERRUPT when UHCI_DMA_INFIFO_FULL_WM_INT_ENA is set to 1.</description>
            <name>DMA_INFIFO_FULL_WM_INT_ST</name>
          </field>
        </fields>
        <name>INT_ST</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xC</addressOffset>
        <description>Interrupt enable bits</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the interrupt enable bit for UHCI_RX_START_INT interrupt.</description>
            <name>RX_START_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the interrupt enable bit for UHCI_TX_START_INT interrupt.</description>
            <name>TX_START_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the interrupt enable bit for UHCI_RX_HUNG_INT interrupt.</description>
            <name>RX_HUNG_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the interrupt enable bit for UHCI_TX_HUNG_INT interrupt.</description>
            <name>TX_HUNG_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the interrupt enable bit for UHCI_IN_DONE_INT interrupt.</description>
            <name>IN_DONE_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the interrupt enable bit for UHCI_IN_SUC_EOF_INT interrupt.</description>
            <name>IN_SUC_EOF_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the interrupt enable bit for UHCI_IN_ERR_EOF_INT interrupt.</description>
            <name>IN_ERR_EOF_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the interrupt enable bit for UHCI_OUT_DONE_INT interrupt.</description>
            <name>OUT_DONE_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the interrupt enable bit for UHCI_OUT_EOF_INT interrupt.</description>
            <name>OUT_EOF_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the interrupt enable bit for UHCI_IN_DSCR_ERR_INT interrupt.</description>
            <name>IN_DSCR_ERR_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the interrupt enable bit for UHCI_OUT_DSCR_ERR_INT interrupt.</description>
            <name>OUT_DSCR_ERR_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the interrupt enable bit for UHCI_IN_DSCR_EMPTY_INT interrupt.</description>
            <name>IN_DSCR_EMPTY_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the interrupt enable bit for UHCI_OUTLINK_EOF_ERR_INT interrupt.</description>
            <name>OUTLINK_EOF_ERR_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the interrupt enable bit for UHCI_OUT_TOTAL_EOF_INT interrupt.</description>
            <name>OUT_TOTAL_EOF_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the interrupt enable bit for UHCI_SEND_S_REG_Q_INT interrupt.</description>
            <name>SEND_S_REG_Q_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the interrupt enable bit for UHCI_SEND_A_REG_Q_INT interrupt.</description>
            <name>SEND_A_REG_Q_INT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the interrupt enable bit for UHCI_DMA_INFIFO_FULL_WM_INT interrupt.</description>
            <name>DMA_INFIFO_FULL_WM_INT_ENA</name>
          </field>
        </fields>
        <name>INT_ENA</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x10</addressOffset>
        <description>Interrupt clear bits</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear UHCI_RX_START_INT interrupt.</description>
            <name>RX_START_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear UHCI_TX_START_INT interrupt.</description>
            <name>TX_START_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear UHCI_RX_HUNG_INT interrupt.</description>
            <name>RX_HUNG_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear UHCI_TX_HUNG_INT interrupt.</description>
            <name>TX_HUNG_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear UHCI_IN_DONE_INT interrupt.</description>
            <name>IN_DONE_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear UHCI_IN_SUC_EOF_INT interrupt.</description>
            <name>IN_SUC_EOF_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear UHCI_IN_ERR_EOF_INT interrupt.</description>
            <name>IN_ERR_EOF_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear UHCI_OUT_DONE_INT interrupt.</description>
            <name>OUT_DONE_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear UHCI_OUT_EOF_INT interrupt.</description>
            <name>OUT_EOF_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear UHCI_IN_DSCR_ERR_INT interrupt.</description>
            <name>IN_DSCR_ERR_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear UHCI_OUT_DSCR_ERR_INT interrupt.</description>
            <name>OUT_DSCR_ERR_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear UHCI_IN_DSCR_EMPTY_INT interrupt.</description>
            <name>IN_DSCR_EMPTY_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear UHCI_OUTLINK_EOF_ERR_INT interrupt.</description>
            <name>OUTLINK_EOF_ERR_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear UHCI_OUT_TOTAL_EOF_INT interrupt.</description>
            <name>OUT_TOTAL_EOF_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear UHCI_SEND_S_REG_Q_INT interrupt.</description>
            <name>SEND_S_REG_Q_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear UHCI_SEND_A_REG_Q_INT interrupt.</description>
            <name>SEND_A_REG_Q_INT_CLR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to clear UHCI_DMA_INFIFO_FULL_WM_INT interrupt.</description>
            <name>DMA_INFIFO_FULL_WM_INT_CLR</name>
          </field>
        </fields>
        <name>INT_CLR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x14</addressOffset>
        <description>DMA data-output status register</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: DMA TX FIFO is full.</description>
            <name>OUT_FULL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: DMA TX FIFO is empty.</description>
            <name>OUT_EMPTY</name>
          </field>
        </fields>
        <name>DMA_OUT_STATUS</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x2</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x18</addressOffset>
        <description>Push control register of TX FIFO</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>This is the data that need to be pushed into TX FIFO.</description>
            <name>OUTFIFO_WDATA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to push data into TX FIFO.</description>
            <name>OUTFIFO_PUSH</name>
          </field>
        </fields>
        <name>DMA_OUT_PUSH</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x1C</addressOffset>
        <description>UHCI data-input status register</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Data-input FIFO full signal.</description>
            <name>IN_FULL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Data-input FIFO empty signal.</description>
            <name>IN_EMPTY</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>This register indicates the error type when DMA has received a packet with error.
            3'b001: Checksum error in the HCI packet; 
            3'b010: Sequence number error in the HCI packet;
            3'b011: CRC bit error in the HCI packet;
            3'b100: 0xC0 is found but the received HCI packet is not end;
            3'b101: 0xC0 is not found when the HCI packet has been received;
            3'b110: CRC check error.</description>
            <name>RX_ERR_CAUSE</name>
          </field>
        </fields>
        <name>DMA_IN_STATUS</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x2</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x20</addressOffset>
        <description>Pop control register of RX FIFO</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xC</bitWidth>
            <description>This register stores the data popping from RX FIFO.</description>
            <name>INFIFO_RDATA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to pop data from  RX FIFO.</description>
            <name>INFIFO_POP</name>
          </field>
        </fields>
        <name>DMA_IN_POP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x24</addressOffset>
        <description>Link descriptor address and control</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x14</bitWidth>
            <description>This register is used to specify the least significant 20 bits of the first transmit descriptor's address.</description>
            <name>OUTLINK_ADDR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to stop dealing with the transmit descriptor.</description>
            <name>OUTLINK_STOP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to start a new transmit descriptor.</description>
            <name>OUTLINK_START</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to restart the transmit descriptor from the last address.</description>
            <name>OUTLINK_RESTART</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: the transmit descriptor's FSM is in idle state.
            0: the transmit descriptor's FSM is working.</description>
            <name>OUTLINK_PARK</name>
          </field>
        </fields>
        <name>DMA_OUT_LINK</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x28</addressOffset>
        <description>Link descriptor address and control</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x14</bitWidth>
            <description>This register is used to specify the least significant 20 bits of the first receive descriptor's address.</description>
            <name>INLINK_ADDR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the enable bit to return to current receive descriptor's address, when there are some errors in current packet.</description>
            <name>INLINK_AUTO_RET</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to stop dealing with the receive descriptors.</description>
            <name>INLINK_STOP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to start dealing with the receive descriptors.</description>
            <name>INLINK_START</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to restart new receive descriptors.</description>
            <name>INLINK_RESTART</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: the receive descriptor's FSM is in idle state.
            0: the receive descriptor's FSM is working.</description>
            <name>INLINK_PARK</name>
          </field>
        </fields>
        <name>DMA_IN_LINK</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x100000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x2C</addressOffset>
        <description>UHCI configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the enable bit to check header checksum when UHCI receives a data packet.</description>
            <name>CHECK_SUM_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the enable bit to check sequence number when UHCI receives a data packet.</description>
            <name>CHECK_SEQ_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to support CRC calculation. Data Integrity check present bit in UHCI packet frame should be 1.</description>
            <name>CRC_DISABLE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to save the packet header when UHCI receives a data packet.</description>
            <name>SAVE_HEAD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to encode the data packet with a checksum.</description>
            <name>TX_CHECK_SUM_RE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to encode the data packet with an acknowledgement when a reliable packet is to be transmit.</description>
            <name>TX_ACK_NUM_RE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>1: Check the link list descriptor when link list owner is DMA controller; 0: Always check link list descriptor.</description>
            <name>CHECK_OWNER</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>The UHCI encoder will jump to ST_SW_WAIT status if this register is set to 1.</description>
            <name>WAIT_SW_START</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>If current UHCI_ENCODE_STATE is ST_SW_WAIT, the UHCI will start to send data packet out when this bit is set to 1.</description>
            <name>SW_START</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0xC</bitWidth>
            <description>This field is used to generate the UHCI_DMA_INFIFO_FULL_WM_INT interrupt when the counter value of DMA RX FIFO exceeds the value of the register.</description>
            <name>DMA_INFIFO_FULL_THRS</name>
          </field>
        </fields>
        <name>CONF1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x33</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x30</addressOffset>
        <description>UHCI decoder status register</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x12</bitWidth>
            <description>This register stores the current receive descriptor's address.</description>
            <name>INLINK_DSCR_ADDR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Reserved.</description>
            <name>IN_DSCR_STATE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Reserved.</description>
            <name>IN_STATE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register stores the number of data bytes in RX FIFO.</description>
            <name>INFIFO_CNT_DEBUG</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>UHCI decoder status.</description>
            <name>DECODE_STATE</name>
          </field>
        </fields>
        <name>STATE0</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x34</addressOffset>
        <description>UHCI encoder status register</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x12</bitWidth>
            <description>This register stores the current transmit descriptor's address.</description>
            <name>OUTLINK_DSCR_ADDR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Reserved.</description>
            <name>OUT_DSCR_STATE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Reserved.</description>
            <name>OUT_STATE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>This register stores the number of data bytes in TX FIFO.</description>
            <name>OUTFIFO_CNT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>UHCI encoder status.</description>
            <name>ENCODE_STATE</name>
          </field>
        </fields>
        <name>STATE1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x38</addressOffset>
        <description>Outlink descriptor address when EOF occurs</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>This register stores the address of the transmit descriptor when the EOF bit in this descriptor is 1.</description>
            <name>OUT_EOF_DES_ADDR</name>
          </field>
        </fields>
        <name>DMA_OUT_EOF_DES_ADDR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x3C</addressOffset>
        <description>Inlink descriptor address when EOF occurs</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>This register stores the address of the receive descriptor when received successful EOF.</description>
            <name>IN_SUC_EOF_DES_ADDR</name>
          </field>
        </fields>
        <name>DMA_IN_SUC_EOF_DES_ADDR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x40</addressOffset>
        <description>Inlink descriptor address when errors occur</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>This register stores the address of the receive descriptor when there are some errors in this descriptor.</description>
            <name>IN_ERR_EOF_DES_ADDR</name>
          </field>
        </fields>
        <name>DMA_IN_ERR_EOF_DES_ADDR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x44</addressOffset>
        <description>Outlink descriptor address before the last transmit descriptor</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>This register stores the address of the transmit descriptor before the last transmit descriptor.</description>
            <name>OUT_EOF_BFR_DES_ADDR</name>
          </field>
        </fields>
        <name>DMA_OUT_EOF_BFR_DES_ADDR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x48</addressOffset>
        <description>AHB test register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Reserved.</description>
            <name>AHB_TESTMODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Reserved.</description>
            <name>AHB_TESTADDR</name>
          </field>
        </fields>
        <name>AHB_TEST</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x4C</addressOffset>
        <description>The third word of the next receive descriptor</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>This register stores the third word of the next receive descriptor.</description>
            <name>INLINK_DSCR</name>
          </field>
        </fields>
        <name>DMA_IN_DSCR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x50</addressOffset>
        <description>The third word of current receive descriptor</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>This register stores the third word of the current receive descriptor.</description>
            <name>INLINK_DSCR_BF0</name>
          </field>
        </fields>
        <name>DMA_IN_DSCR_BF0</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x58</addressOffset>
        <description>The third word of the next transmit descriptor</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>This register stores the third word of the next transmit descriptor.</description>
            <name>OUTLINK_DSCR</name>
          </field>
        </fields>
        <name>DMA_OUT_DSCR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x5C</addressOffset>
        <description>The third word of current transmit descriptor</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>This register stores the third word of the current transmit descriptor.</description>
            <name>OUTLINK_DSCR_BF0</name>
          </field>
        </fields>
        <name>DMA_OUT_DSCR_BF0</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x64</addressOffset>
        <description>Escape character configuration</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to decode character 0xC0 when DMA receives data.</description>
            <name>TX_C0_ESC_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to decode character 0xDB when DMA receives data.</description>
            <name>TX_DB_ESC_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to decode flow control character 0x11 when DMA receives data.</description>
            <name>TX_11_ESC_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to decode flow control character 0x13 when DMA receives data.</description>
            <name>TX_13_ESC_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to replace 0xC0 by special characters when DMA sends data.</description>
            <name>RX_C0_ESC_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to replace 0xDB by special characters when DMA sends data.</description>
            <name>RX_DB_ESC_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to replace flow control character 0x11 by special characters when DMA sends data.</description>
            <name>RX_11_ESC_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to replace flow control character 0x13 by special characters when DMA sends data.</description>
            <name>RX_13_ESC_EN</name>
          </field>
        </fields>
        <name>ESCAPE_CONF</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x33</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x68</addressOffset>
        <description>Timeout configuration</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>This register stores the timeout value. UHCI produce the UHCI_TX_HUNG_INT interrupt when DMA takes more time to receive data.</description>
            <name>TXFIFO_TIMEOUT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>This register is used to configure the maximum tick count.</description>
            <name>TXFIFO_TIMEOUT_SHIFT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the enable bit for TX FIFO receive timeout.</description>
            <name>TXFIFO_TIMEOUT_ENA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>This register stores the timeout value. UHCI produce the UHCI_RX_HUNG_INT interrupt when DMA takes more time to read data from RAM.</description>
            <name>RXFIFO_TIMEOUT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>This register is used to configure the maximum tick count.</description>
            <name>RXFIFO_TIMEOUT_SHIFT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>This is the enable bit for DMA send timeout.</description>
            <name>RXFIFO_TIMEOUT_ENA</name>
          </field>
        </fields>
        <name>HUNG_CONF</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x810810</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x70</addressOffset>
        <description>UHCI packet header register</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>This register stores the header of the current received packet.</description>
            <name>RX_HEAD</name>
          </field>
        </fields>
        <name>RX_HEAD</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x74</addressOffset>
        <description>UHCI quick_sent configuration register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>This register is used to specify the single_send mode.</description>
            <name>SINGLE_SEND_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable single_send mode to send short packets.</description>
            <name>SINGLE_SEND_EN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>This register is used to specify the always_send mode.</description>
            <name>ALWAYS_SEND_NUM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set this bit to enable always_send mode to send short packets.</description>
            <name>ALWAYS_SEND_EN</name>
          </field>
        </fields>
        <name>QUICK_SENT</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x78</addressOffset>
        <description>Q0_WORD0 quick_sent register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>This register is used as a quick_sent register when mode is specified by UHCI_ALWAYS_SEND_NUM or UHCI_SINGLE_SEND_NUM.</description>
            <name>SEND_Q0_WORD0</name>
          </field>
        </fields>
        <name>Q0_WORD0</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x7C</addressOffset>
        <description>Q0_WORD1 quick_sent register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>This register is used as a quick_sent register when mode is specified by UHCI_ALWAYS_SEND_NUM or UHCI_SINGLE_SEND_NUM.</description>
            <name>SEND_Q0_WORD1</name>
          </field>
        </fields>
        <name>Q0_WORD1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x80</addressOffset>
        <description>Q1_WORD0 quick_sent register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>This register is used as a quick_sent register when mode is specified by UHCI_ALWAYS_SEND_NUM or UHCI_SINGLE_SEND_NUM.</description>
            <name>SEND_Q1_WORD0</name>
          </field>
        </fields>
        <name>Q1_WORD0</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x84</addressOffset>
        <description>Q1_WORD1 quick_sent register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>This register is used as a quick_sent register when mode is specified by UHCI_ALWAYS_SEND_NUM or UHCI_SINGLE_SEND_NUM.</description>
            <name>SEND_Q1_WORD1</name>
          </field>
        </fields>
        <name>Q1_WORD1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x88</addressOffset>
        <description>Q2_WORD0 quick_sent register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>This register is used as a quick_sent register when mode is specified by UHCI_ALWAYS_SEND_NUM or UHCI_SINGLE_SEND_NUM.</description>
            <name>SEND_Q2_WORD0</name>
          </field>
        </fields>
        <name>Q2_WORD0</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8C</addressOffset>
        <description>Q2_WORD1 quick_sent register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>This register is used as a quick_sent register when mode is specified by UHCI_ALWAYS_SEND_NUM or UHCI_SINGLE_SEND_NUM.</description>
            <name>SEND_Q2_WORD1</name>
          </field>
        </fields>
        <name>Q2_WORD1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x90</addressOffset>
        <description>Q3_WORD0 quick_sent register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>This register is used as a quick_sent register when mode is specified by UHCI_ALWAYS_SEND_NUM or UHCI_SINGLE_SEND_NUM.</description>
            <name>SEND_Q3_WORD0</name>
          </field>
        </fields>
        <name>Q3_WORD0</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x94</addressOffset>
        <description>Q3_WORD1 quick_sent register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>This register is used as a quick_sent register when mode is specified by UHCI_ALWAYS_SEND_NUM or UHCI_SINGLE_SEND_NUM.</description>
            <name>SEND_Q3_WORD1</name>
          </field>
        </fields>
        <name>Q3_WORD1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x98</addressOffset>
        <description>Q4_WORD0 quick_sent register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>This register is used as a quick_sent register when mode is specified by UHCI_ALWAYS_SEND_NUM or UHCI_SINGLE_SEND_NUM.</description>
            <name>SEND_Q4_WORD0</name>
          </field>
        </fields>
        <name>Q4_WORD0</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x9C</addressOffset>
        <description>Q4_WORD1 quick_sent register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>This register is used as a quick_sent register when mode is specified by UHCI_ALWAYS_SEND_NUM or UHCI_SINGLE_SEND_NUM.</description>
            <name>SEND_Q4_WORD1</name>
          </field>
        </fields>
        <name>Q4_WORD1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA0</addressOffset>
        <description>Q5_WORD0 quick_sent register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>This register is used as a quick_sent register when mode is specified by UHCI_ALWAYS_SEND_NUM or UHCI_SINGLE_SEND_NUM.</description>
            <name>SEND_Q5_WORD0</name>
          </field>
        </fields>
        <name>Q5_WORD0</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA4</addressOffset>
        <description>Q5_WORD1 quick_sent register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>This register is used as a quick_sent register when mode is specified by UHCI_ALWAYS_SEND_NUM or UHCI_SINGLE_SEND_NUM.</description>
            <name>SEND_Q5_WORD1</name>
          </field>
        </fields>
        <name>Q5_WORD1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xA8</addressOffset>
        <description>Q6_WORD0 quick_sent register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>This register is used as a quick_sent register when mode is specified by UHCI_ALWAYS_SEND_NUM or UHCI_SINGLE_SEND_NUM.</description>
            <name>SEND_Q6_WORD0</name>
          </field>
        </fields>
        <name>Q6_WORD0</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xAC</addressOffset>
        <description>Q6_WORD1 quick_sent register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>This register is used as a quick_sent register when mode is specified by UHCI_ALWAYS_SEND_NUM or UHCI_SINGLE_SEND_NUM.</description>
            <name>SEND_Q6_WORD1</name>
          </field>
        </fields>
        <name>Q6_WORD1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB0</addressOffset>
        <description>Escape sequence configuration register 0</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>This register is used to define separators to encode data packets. The default value is 0xC0.</description>
            <name>SEPER_CHAR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>This register is used to define the first character of SLIP escape sequence. The default value is 0xDB.</description>
            <name>SEPER_ESC_CHAR0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>This register is used to define the second character of SLIP escape sequence. The default value is 0xDC.</description>
            <name>SEPER_ESC_CHAR1</name>
          </field>
        </fields>
        <name>ESC_CONF0</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xDCDBC0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB4</addressOffset>
        <description>Escape sequence configuration register 1</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>This register is used to define a character that need to be encoded. The default value is 0xDB that used as the first character of SLIP escape sequence.</description>
            <name>ESC_SEQ0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>This register is used to define the first character of SLIP escape sequence. The default value is 0xDB.</description>
            <name>ESC_SEQ0_CHAR0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>This register is used to define the second character of SLIP escape sequence. The default value is 0xDD.</description>
            <name>ESC_SEQ0_CHAR1</name>
          </field>
        </fields>
        <name>ESC_CONF1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xDDDBDB</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xB8</addressOffset>
        <description>Escape sequence configuration register 2</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>This register is used to define a character that need to be encoded. The default value is 0x11 that used as a flow control character.</description>
            <name>ESC_SEQ1</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>This register is used to define the first character of SLIP escape sequence. The default value is 0xDB.</description>
            <name>ESC_SEQ1_CHAR0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>This register is used to define the second character of SLIP escape sequence. The default value is 0xDE.</description>
            <name>ESC_SEQ1_CHAR1</name>
          </field>
        </fields>
        <name>ESC_CONF2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xDEDB11</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xBC</addressOffset>
        <description>Escape sequence configuration register 3</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>This register is used to define a character that need to be decoded. The default value is 0x13 that used as a flow control character.</description>
            <name>ESC_SEQ2</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>This register is used to define the first character of SLIP escape sequence. The default value is 0xDB.</description>
            <name>ESC_SEQ2_CHAR0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>This register is used to define the second character of SLIP escape sequence. The default value is 0xDF.</description>
            <name>ESC_SEQ2_CHAR1</name>
          </field>
        </fields>
        <name>ESC_CONF3</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xDFDB13</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xC0</addressOffset>
        <description>Configure register for packet length</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xD</bitWidth>
            <description>This register is used to configure the maximum value of the packet length when UHCI_HEAD_EN is 0.</description>
            <name>PKT_THRS</name>
          </field>
        </fields>
        <name>PKT_THRES</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x80</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0xFC</addressOffset>
        <description>UHCI version  control register</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>This is the version control register.</description>
            <name>DATE</name>
          </field>
        </fields>
        <name>DATE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x18073001</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <resetMask>0xFFFFFFFF</resetMask>
    <resetValue>0x0</resetValue>
  </peripheral>
</peripherals>
<peripherals>
  <peripheral>
    <addressBlock>
      <offset>0x0</offset>
      <size>0x60</size>
      <usage>registers</usage>
    </addressBlock>
    <baseAddress>0x6003A100</baseAddress>
    <description>XTS-AES-128 Flash Encryption</description>
    <groupName>XTS_AES</groupName>
    <interrupts></interrupts>
    <name>XTS_AES</name>
    <registers>
      <register>
        <addressOffset>0x140</addressOffset>
        <description>Configures the size of target memory space</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Configures the data size of a single encryption. 0: 128 bits. 1: 256 bits. 2: 512 bits.</description>
            <name>LINESIZE</name>
          </field>
        </fields>
        <name>LINESIZE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x144</addressOffset>
        <description>Configures the type of the external memory</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Configures the type of the external memory. Currently, it must be set to 0, as the Manual Encryption block only supports flash encryption. Errors may occur if users write 1. 0: flash. 1: external RAM.</description>
            <name>DESTINATION</name>
          </field>
        </fields>
        <name>DESTINATION</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x148</addressOffset>
        <description>Physical address</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1E</bitWidth>
            <description>Physical address.</description>
            <name>PHYSICAL_ADDRESS</name>
          </field>
        </fields>
        <name>PHYSICAL_ADDRESS</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x14C</addressOffset>
        <description>Activates AES algorithm</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set to enable manual encryption.</description>
            <name>TRIGGER</name>
          </field>
        </fields>
        <name>TRIGGER</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x150</addressOffset>
        <description>Release control</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set to grant SPI1 access to encrypted result.</description>
            <name>RELEASE</name>
          </field>
        </fields>
        <name>RELEASE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x154</addressOffset>
        <description>Destroys control</description>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Set to destroy encrypted result.</description>
            <name>DESTROY</name>
          </field>
        </fields>
        <name>DESTROY</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x158</addressOffset>
        <description>Status register</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Indicates the status of the Manual Encryption block. 0x0 (XTS_AES_IDLE): idle. 0x1 (XTS_AES_BUSY): busy with encryption. 0x2 (XTS_AES_DONE): encryption is completed, but the encrypted result is not accessible to SPI. 0X3 (XTS_AES_RELEASE): encrypted result is accessible to SPI.</description>
            <name>STATE</name>
          </field>
        </fields>
        <name>STATE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x15C</addressOffset>
        <description>Version control register</description>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1E</bitWidth>
            <description>Version control register.</description>
            <name>DATE</name>
          </field>
        </fields>
        <name>DATE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x20190514</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x100</addressOffset>
        <description>Plaintext register %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>This register stores %sth 32-bit piece of plaintext.</description>
            <name>PLAIN_0</name>
          </field>
        </fields>
        <name>PLAIN_0</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x104</addressOffset>
        <description>Plaintext register %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>This register stores %sth 32-bit piece of plaintext.</description>
            <name>PLAIN_0</name>
          </field>
        </fields>
        <name>PLAIN_1</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x108</addressOffset>
        <description>Plaintext register %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>This register stores %sth 32-bit piece of plaintext.</description>
            <name>PLAIN_0</name>
          </field>
        </fields>
        <name>PLAIN_2</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x10C</addressOffset>
        <description>Plaintext register %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>This register stores %sth 32-bit piece of plaintext.</description>
            <name>PLAIN_0</name>
          </field>
        </fields>
        <name>PLAIN_3</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x110</addressOffset>
        <description>Plaintext register %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>This register stores %sth 32-bit piece of plaintext.</description>
            <name>PLAIN_0</name>
          </field>
        </fields>
        <name>PLAIN_4</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x114</addressOffset>
        <description>Plaintext register %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>This register stores %sth 32-bit piece of plaintext.</description>
            <name>PLAIN_0</name>
          </field>
        </fields>
        <name>PLAIN_5</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x118</addressOffset>
        <description>Plaintext register %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>This register stores %sth 32-bit piece of plaintext.</description>
            <name>PLAIN_0</name>
          </field>
        </fields>
        <name>PLAIN_6</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x11C</addressOffset>
        <description>Plaintext register %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>This register stores %sth 32-bit piece of plaintext.</description>
            <name>PLAIN_0</name>
          </field>
        </fields>
        <name>PLAIN_7</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x120</addressOffset>
        <description>Plaintext register %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>This register stores %sth 32-bit piece of plaintext.</description>
            <name>PLAIN_0</name>
          </field>
        </fields>
        <name>PLAIN_8</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x124</addressOffset>
        <description>Plaintext register %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>This register stores %sth 32-bit piece of plaintext.</description>
            <name>PLAIN_0</name>
          </field>
        </fields>
        <name>PLAIN_9</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x128</addressOffset>
        <description>Plaintext register %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>This register stores %sth 32-bit piece of plaintext.</description>
            <name>PLAIN_0</name>
          </field>
        </fields>
        <name>PLAIN_10</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x12C</addressOffset>
        <description>Plaintext register %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>This register stores %sth 32-bit piece of plaintext.</description>
            <name>PLAIN_0</name>
          </field>
        </fields>
        <name>PLAIN_11</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x130</addressOffset>
        <description>Plaintext register %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>This register stores %sth 32-bit piece of plaintext.</description>
            <name>PLAIN_0</name>
          </field>
        </fields>
        <name>PLAIN_12</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x134</addressOffset>
        <description>Plaintext register %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>This register stores %sth 32-bit piece of plaintext.</description>
            <name>PLAIN_0</name>
          </field>
        </fields>
        <name>PLAIN_13</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x138</addressOffset>
        <description>Plaintext register %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>This register stores %sth 32-bit piece of plaintext.</description>
            <name>PLAIN_0</name>
          </field>
        </fields>
        <name>PLAIN_14</name>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x13C</addressOffset>
        <description>Plaintext register %s</description>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>This register stores %sth 32-bit piece of plaintext.</description>
            <name>PLAIN_0</name>
          </field>
        </fields>
        <name>PLAIN_15</name>
        <size>0x20</size>
      </register>
    </registers>
    <resetMask>0xFFFFFFFF</resetMask>
    <resetValue>0x0</resetValue>
  </peripheral>
</peripherals>
<resetMask>0xFFFFFFFF</resetMask>
<resetValue>0x0</resetValue>
<vendor>ESPRESSIF SYSTEMS (SHANGHAI) CO., LTD.</vendor>
<vendorId>ESPRESSIF</vendorId>
<version>4</version>
<width>0x20</width></device>