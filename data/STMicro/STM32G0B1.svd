<?xml version="1.0" encoding="UTF-8"?>
<device xmlns:xs="http://www.w3.org/2001/XMLSchema-instance" schemaVersion="1.1" xs:noNamespaceSchemaLocation="CMSIS-SVD_Schema_1_1.xsd"><addressUnitBits>0x8</addressUnitBits>
<cpu>
  <dcachePresent>
    <dcachePresen></dcachePresen>
  </dcachePresent>
  <deviceNumInterrupts>0x0</deviceNumInterrupts>
  <dtcmPresent>
    <dtcmPresen></dtcmPresen>
  </dtcmPresent>
  <endian>little</endian>
  <fpuPresent>0x0</fpuPresent>
  <icachePresent>
    <icachePresen></icachePresen>
  </icachePresent>
  <itcmPresent>
    <itcmPresen></itcmPresen>
  </itcmPresent>
  <mpuPresent>0x1</mpuPresent>
  <name>CM0</name>
  <nvicPrioBits>0x4</nvicPrioBits>
  <revision>r0p1</revision>
  <sauNumRegions>0x0</sauNumRegions>
  <vendorSystickConfig>0x0</vendorSystickConfig>
</cpu>
<description>STM32G0B1</description>
<name>STM32G0B1</name>
<peripherals>
  <peripheral>
    <addressBlock>
      <offset>0x0</offset>
      <size>0x400</size>
      <usage>registers</usage>
    </addressBlock>
    <baseAddress>0x40023000</baseAddress>
    <description>Cyclic redundancy check calculation
          unit</description>
    <groupName>CRC</groupName>
    <interrupts></interrupts>
    <name>CRC</name>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x0</addressOffset>
        <description>Data register</description>
        <displayName>CRC_DR</displayName>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Data register bits</description>
            <name>DR</name>
          </field>
        </fields>
        <name>CRC_DR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xFFFFFFFF</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x4</addressOffset>
        <description>Independent data register</description>
        <displayName>CRC_IDR</displayName>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>General-purpose 32-bit data register
                          bits</description>
            <name>IDR</name>
          </field>
        </fields>
        <name>CRC_IDR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x8</addressOffset>
        <description>Control register</description>
        <displayName>CRC_CR</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Reverse output data
            This bit controls the reversal of the bit order of the output data.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Bit order not affected</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Bit-reversed output format</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>REV_OUT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Reverse input data
            These bits control the reversal of the bit order of the input data</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Bit order not affected</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Bit reversal done by byte</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Bit reversal done by half-word</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Bit reversal done by word</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>REV_IN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Polynomial size
            These bits control the size of the polynomial.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>32 bit polynomial</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>16 bit polynomial</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>8 bit polynomial</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>7 bit polynomial</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>POLYSIZE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RESET bit</description>
            <name>RESET</name>
          </field>
        </fields>
        <name>CRC_CR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x10</addressOffset>
        <description>Initial CRC value</description>
        <displayName>CRC_INIT</displayName>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Programmable initial CRC
                          value</description>
            <name>CRC_INIT</name>
          </field>
        </fields>
        <name>CRC_INIT</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xFFFFFFFF</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x14</addressOffset>
        <description>polynomial</description>
        <displayName>CRC_POL</displayName>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>Programmable polynomial</description>
            <name>POL</name>
          </field>
        </fields>
        <name>CRC_POL</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x4C11DB7</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <resetMask>0xFFFFFFFF</resetMask>
    <resetValue>0x0</resetValue>
    <size>0x20</size>
  </peripheral>
</peripherals>
<peripherals>
  <peripheral>
    <addressBlock>
      <offset>0x0</offset>
      <size>0x400</size>
      <usage>registers</usage>
    </addressBlock>
    <baseAddress>0x40007400</baseAddress>
    <description>DAC</description>
    <groupName>DAC</groupName>
    <interrupts></interrupts>
    <name>DAC</name>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x0</addressOffset>
        <description>DAC control register</description>
        <displayName>DAC_CR</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>DAC channel1 enable
            This bit is set and cleared by software to enable/disable DAC channel1.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>DAC channel1 disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>DAC channel1 enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>EN1</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>DAC channel1 trigger enable
            This bit is set and cleared by software to enable/disable DAC channel1 trigger.
            Note: When software trigger is selected, the transfer from the DAC_DHR1 register to the DAC_DOR1 register takes only one dac_pclk clock cycle.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>DAC channel1 trigger disabled and data written into the DAC_DHR1 register are transferred one dac_pclk clock cycle later to the DAC_DOR1 register</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>DAC channel1 trigger enabled and data from the DAC_DHR1 register are transferred three dac_pclk clock cycles later to the DAC_DOR1 register</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TEN1</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>DAC channel1 trigger selection
            These bits select the external event used to trigger DAC channel1
            ...
            Refer to the trigger selection tables in  for details on trigger configuration and mapping.
            Note: Only used if bit TEN1 = 1 (DAC channel1 trigger enabled).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>SWTRIG1</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>dac_ch1_trg1</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>dac_ch1_trg2</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>dac_ch1_trg15</description>
                <name>B_0xF</name>
                <value>0xF</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TSEL1</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>DAC channel1 noise/triangle wave generation enable
            These bits are set and cleared by software.
            1x: Triangle wave generation enabled
            Only used if bit TEN1 = 1 (DAC channel1 trigger enabled).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>wave generation disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Noise wave generation enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>WAVE1</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>DAC channel1 mask/amplitude selector
            These bits are written by software to select mask in wave generation mode or amplitude in triangle generation mode.
            ≥ 1011: Unmask bits[11:0] of LFSR/ triangle amplitude equal to 4095</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Unmask bit0 of LFSR/ triangle amplitude equal to 1</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Unmask bits[1:0] of LFSR/ triangle amplitude equal to 3</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Unmask bits[2:0] of LFSR/ triangle amplitude equal to 7</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Unmask bits[3:0] of LFSR/ triangle amplitude equal to 15</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Unmask bits[4:0] of LFSR/ triangle amplitude equal to 31</description>
                <name>B_0x4</name>
                <value>0x4</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Unmask bits[5:0] of LFSR/ triangle amplitude equal to 63</description>
                <name>B_0x5</name>
                <value>0x5</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Unmask bits[6:0] of LFSR/ triangle amplitude equal to 127</description>
                <name>B_0x6</name>
                <value>0x6</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Unmask bits[7:0] of LFSR/ triangle amplitude equal to 255</description>
                <name>B_0x7</name>
                <value>0x7</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Unmask bits[8:0] of LFSR/ triangle amplitude equal to 511</description>
                <name>B_0x8</name>
                <value>0x8</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Unmask bits[9:0] of LFSR/ triangle amplitude equal to 1023</description>
                <name>B_0x9</name>
                <value>0x9</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Unmask bits[10:0] of LFSR/ triangle amplitude equal to 2047</description>
                <name>B_0xA</name>
                <value>0xA</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>MAMP1</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>DAC channel1 DMA enable
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>DAC channel1 DMA mode disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>DAC channel1 DMA mode enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>DMAEN1</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>DAC channel1 DMA Underrun Interrupt enable
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>DAC channel1 DMA Underrun Interrupt disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>DAC channel1 DMA Underrun Interrupt enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>DMAUDRIE1</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>DAC channel1 calibration enable
            This bit is set and cleared by software to enable/disable DAC channel1 calibration, it can be written only if bit EN1=0 into DAC_CR (the calibration mode can be entered/exit only when the DAC channel is disabled) Otherwise, the write operation is ignored.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>DAC channel1 in Normal operating mode</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>DAC channel1 in calibration mode</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CEN1</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>DAC channel2 enable
            This bit is set and cleared by software to enable/disable DAC channel2.
            Note: These bits are available only on dual-channel DACs. Refer to implementation.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>DAC channel2 disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>DAC channel2 enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>EN2</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>DAC channel2 trigger enable
            This bit is set and cleared by software to enable/disable DAC channel2 trigger
            Note: When software trigger is selected, the transfer from the DAC_DHR2 register to the DAC_DOR2 register takes only one dac_pclk clock cycle.
            These bits are available only on dual-channel DACs. Refer to implementation.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>DAC channel2 trigger disabled and data written into the DAC_DHR2 register are transferred one dac_pclk clock cycle later to the DAC_DOR2 register</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>DAC channel2 trigger enabled and data from the DAC_DHR2 register are transferred three dac_pclk clock cycles later to the DAC_DOR2 register</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TEN2</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>DAC channel2 trigger selection
            These bits select the external event used to trigger DAC channel2
            ...
            Refer to the trigger selection tables in  for details on trigger configuration and mapping.
            Note: Only used if bit TEN2 = 1 (DAC channel2 trigger enabled).
            These bits are available only on dual-channel DACs. Refer to implementation.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>SWTRIG2</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>dac_ch2_trg1</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>dac_ch2_trg2</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>dac_ch2_trg15</description>
                <name>B_0xF</name>
                <value>0xF</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TSEL2</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>DAC channel2 noise/triangle wave generation enable
            These bits are set/reset by software.
            1x: Triangle wave generation enabled
            Note: Only used if bit TEN2 = 1 (DAC channel2 trigger enabled)
            These bits are available only on dual-channel DACs. Refer to implementation.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>wave generation disabled </description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Noise wave generation enabled </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>WAVE2</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>DAC channel2 mask/amplitude selector
            These bits are written by software to select mask in wave generation mode or amplitude in triangle generation mode.
            ≥ 1011: Unmask bits[11:0] of LFSR/ triangle amplitude equal to 4095
            Note: These bits are available only on dual-channel DACs. Refer to implementation.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Unmask bit0 of LFSR/ triangle amplitude equal to 1</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Unmask bits[1:0] of LFSR/ triangle amplitude equal to 3</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Unmask bits[2:0] of LFSR/ triangle amplitude equal to 7</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Unmask bits[3:0] of LFSR/ triangle amplitude equal to 15</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Unmask bits[4:0] of LFSR/ triangle amplitude equal to 31</description>
                <name>B_0x4</name>
                <value>0x4</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Unmask bits[5:0] of LFSR/ triangle amplitude equal to 63</description>
                <name>B_0x5</name>
                <value>0x5</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Unmask bits[6:0] of LFSR/ triangle amplitude equal to 127</description>
                <name>B_0x6</name>
                <value>0x6</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Unmask bits[7:0] of LFSR/ triangle amplitude equal to 255</description>
                <name>B_0x7</name>
                <value>0x7</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Unmask bits[8:0] of LFSR/ triangle amplitude equal to 511</description>
                <name>B_0x8</name>
                <value>0x8</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Unmask bits[9:0] of LFSR/ triangle amplitude equal to 1023</description>
                <name>B_0x9</name>
                <value>0x9</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Unmask bits[10:0] of LFSR/ triangle amplitude equal to 2047</description>
                <name>B_0xA</name>
                <value>0xA</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>MAMP2</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>DAC channel2 DMA enable
            This bit is set and cleared by software.
            Note: This bit is available only on dual-channel DACs. Refer to implementation.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>DAC channel2 DMA mode disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>DAC channel2 DMA mode enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>DMAEN2</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>DAC channel2 DMA underrun interrupt enable
            This bit is set and cleared by software.
            Note: This bit is available only on dual-channel DACs. Refer to implementation.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>DAC channel2 DMA underrun interrupt disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>DAC channel2 DMA underrun interrupt enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>DMAUDRIE2</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>DAC channel2 calibration enable
            This bit is set and cleared by software to enable/disable DAC channel2 calibration, it can be written only if EN2 bit is set to 0 into DAC_CR (the calibration mode can be entered/exit only when the DAC channel is disabled) Otherwise, the write operation is ignored.
            Note: This bit is available only on dual-channel DACs. Refer to implementation.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>DAC channel2 in Normal operating mode</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>DAC channel2 in calibration mode</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CEN2</name>
          </field>
        </fields>
        <name>DAC_CR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>write-only</access>
        <addressOffset>0x4</addressOffset>
        <description>DAC software trigger register</description>
        <displayName>DAC_SWTRGR</displayName>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>DAC channel1 software trigger
            This bit is set by software to trigger the DAC in software trigger mode.
            Note: This bit is cleared by hardware (one dac_pclk clock cycle later) once the DAC_DHR1 register value has been loaded into the DAC_DOR1 register.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No trigger</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Trigger</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>SWTRIG1</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>DAC channel2 software trigger
            This bit is set by software to trigger the DAC in software trigger mode.
            Note: This bit is cleared by hardware (one dac_pclk clock cycle later) once the DAC_DHR2 register value has been loaded into the DAC_DOR2 register.
            This bit is available only on dual-channel DACs. Refer to implementation.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No trigger</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Trigger</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>SWTRIG2</name>
          </field>
        </fields>
        <name>DAC_SWTRGR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x8</addressOffset>
        <description>DAC channel1 12-bit right-aligned data
                  holding register</description>
        <displayName>DAC_DHR12R1</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xC</bitWidth>
            <description>DAC channel1 12-bit right-aligned data
            These bits are written by software. They specify 12-bit data for DAC channel1.</description>
            <name>DACC1DHR</name>
          </field>
        </fields>
        <name>DAC_DHR12R1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0xC</addressOffset>
        <description>DAC channel1 12-bit left aligned data
                  holding register</description>
        <displayName>DAC_DHR12L1</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0xC</bitWidth>
            <description>DAC channel1 12-bit left-aligned data
            These bits are written by software.
            They specify 12-bit data for DAC channel1.</description>
            <name>DACC1DHR</name>
          </field>
        </fields>
        <name>DAC_DHR12L1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x10</addressOffset>
        <description>DAC channel1 8-bit right aligned data
                  holding register</description>
        <displayName>DAC_DHR8R1</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>DAC channel1 8-bit right-aligned data
            These bits are written by software. They specify 8-bit data for DAC channel1.</description>
            <name>DACC1DHR</name>
          </field>
        </fields>
        <name>DAC_DHR8R1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x14</addressOffset>
        <description>DAC channel2 12-bit right aligned data
                  holding register</description>
        <displayName>DAC_DHR12R2</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xC</bitWidth>
            <description>DAC channel2 12-bit right-aligned data
            These bits are written by software. They specify 12-bit data for DAC channel2.</description>
            <name>DACC2DHR</name>
          </field>
        </fields>
        <name>DAC_DHR12R2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x18</addressOffset>
        <description>DAC channel2 12-bit left aligned data
                  holding register</description>
        <displayName>DAC_DHR12L2</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0xC</bitWidth>
            <description>DAC channel2 12-bit left-aligned data
            These bits are written by software which specify 12-bit data for DAC channel2.</description>
            <name>DACC2DHR</name>
          </field>
        </fields>
        <name>DAC_DHR12L2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x1C</addressOffset>
        <description>DAC channel2 8-bit right-aligned data
                  holding register</description>
        <displayName>DAC_DHR8R2</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>DAC channel2 8-bit right-aligned data
            These bits are written by software which specifies 8-bit data for DAC channel2.</description>
            <name>DACC2DHR</name>
          </field>
        </fields>
        <name>DAC_DHR8R2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x20</addressOffset>
        <description>Dual DAC 12-bit right-aligned data holding
                  register</description>
        <displayName>DAC_DHR12RD</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xC</bitWidth>
            <description>DAC channel1 12-bit right-aligned data
            These bits are written by software which specifies 12-bit data for DAC channel1.</description>
            <name>DACC1DHR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0xC</bitWidth>
            <description>DAC channel2 12-bit right-aligned data
            These bits are written by software which specifies 12-bit data for DAC channel2.</description>
            <name>DACC2DHR</name>
          </field>
        </fields>
        <name>DAC_DHR12RD</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x24</addressOffset>
        <description>DUAL DAC 12-bit left aligned data holding
                  register</description>
        <displayName>DAC_DHR12LD</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0xC</bitWidth>
            <description>DAC channel1 12-bit left-aligned data
            These bits are written by software which specifies 12-bit data for DAC channel1.</description>
            <name>DACC1DHR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0xC</bitWidth>
            <description>DAC channel2 12-bit left-aligned data
            These bits are written by software which specifies 12-bit data for DAC channel2.</description>
            <name>DACC2DHR</name>
          </field>
        </fields>
        <name>DAC_DHR12LD</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x28</addressOffset>
        <description>DUAL DAC 8-bit right aligned data holding
                  register</description>
        <displayName>DAC_DHR8RD</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>DAC channel1 8-bit right-aligned data
            These bits are written by software which specifies 8-bit data for DAC channel1.</description>
            <name>DACC1DHR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>DAC channel2 8-bit right-aligned data
            These bits are written by software which specifies 8-bit data for DAC channel2.</description>
            <name>DACC2DHR</name>
          </field>
        </fields>
        <name>DAC_DHR8RD</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-only</access>
        <addressOffset>0x2C</addressOffset>
        <description>DAC channel1 data output
                  register</description>
        <displayName>DAC_DOR1</displayName>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xC</bitWidth>
            <description>DAC channel1 data output
            These bits are read-only, they contain data output for DAC channel1.</description>
            <name>DACC1DOR</name>
          </field>
        </fields>
        <name>DAC_DOR1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-only</access>
        <addressOffset>0x30</addressOffset>
        <description>DAC channel2 data output
                  register</description>
        <displayName>DAC_DOR2</displayName>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xC</bitWidth>
            <description>DAC channel2 data output
            These bits are read-only, they contain data output for DAC channel2.</description>
            <name>DACC2DOR</name>
          </field>
        </fields>
        <name>DAC_DOR2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x34</addressOffset>
        <description>DAC status register</description>
        <displayName>DAC_SR</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>DAC channel1 DMA underrun flag
            This bit is set by hardware and cleared by software (by writing it to 1).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No DMA underrun error condition occurred for DAC channel1</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>DMA underrun error condition occurred for DAC channel1 (the currently selected trigger is driving DAC channel1 conversion at a frequency higher than the DMA service capability rate)</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>DMAUDR1</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>DAC channel1 calibration offset status
            This bit is set and cleared by hardware</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>calibration trimming value is lower than the offset correction value</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>calibration trimming value is equal or greater than the offset correction value</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CAL_FLAG1</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>DAC channel1 busy writing sample time flag
            This bit is systematically set just after Sample and hold mode enable and is set each time the software writes the register DAC_SHSR1, It is cleared by hardware when the write operation of DAC_SHSR1 is complete. (It takes about 3 LSI periods of synchronization).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>There is no write operation of DAC_SHSR1 ongoing: DAC_SHSR1 can be written</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>There is a write operation of DAC_SHSR1 ongoing: DAC_SHSR1 cannot be written</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>BWST1</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>DAC channel2 DMA underrun flag
            This bit is set by hardware and cleared by software (by writing it to 1).
            Note: This bit is available only on dual-channel DACs. Refer to implementation.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No DMA underrun error condition occurred for DAC channel2</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>DMA underrun error condition occurred for DAC channel2 (the currently selected trigger is driving DAC channel2 conversion at a frequency higher than the DMA service capability rate).</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>DMAUDR2</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>DAC channel2 calibration offset status
            This bit is set and cleared by hardware
            Note: This bit is available only on dual-channel DACs. Refer to implementation.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>calibration trimming value is lower than the offset correction value</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>calibration trimming value is equal or greater than the offset correction value</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CAL_FLAG2</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>DAC channel2 busy writing sample time flag
            This bit is systematically set just after Sample and hold mode enable. It is set each time the software writes the register DAC_SHSR2, It is cleared by hardware when the write operation of DAC_SHSR2 is complete. (It takes about 3 LSI periods of synchronization).
            Note: This bit is available only on dual-channel DACs. Refer to implementation.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>There is no write operation of DAC_SHSR2 ongoing: DAC_SHSR2 can be written</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>There is a write operation of DAC_SHSR2 ongoing: DAC_SHSR2 cannot be written</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>BWST2</name>
          </field>
        </fields>
        <name>DAC_SR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x38</addressOffset>
        <description>DAC calibration control
                  register</description>
        <displayName>DAC_CCR</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>DAC channel1 offset trimming value</description>
            <name>OTRIM1</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>DAC channel2 offset trimming value
            These bits are available only on dual-channel DACs. Refer to implementation.</description>
            <name>OTRIM2</name>
          </field>
        </fields>
        <name>DAC_CCR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x3C</addressOffset>
        <description>DAC mode control register</description>
        <displayName>DAC_MCR</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>DAC channel1 mode
            These bits can be written only when the DAC is disabled and not in the calibration mode (when bit EN1=0 and bit CEN1 =0 in the DAC_CR register). If EN1=1 or CEN1 =1 the write operation is ignored.
            They can be set and cleared by software to select the DAC channel1 mode:
            DAC channel1 in Normal mode
            DAC channel1 in sample &amp; hold mode
            Note: This register can be modified only when EN1=0.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>DAC channel1 is connected to external pin with Buffer enabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>DAC channel1 is connected to external pin and to on chip peripherals with Buffer enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>DAC channel1 is connected to external pin with Buffer disabled</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>DAC channel1 is connected to on chip peripherals with Buffer disabled</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>DAC channel1 is connected to external pin with Buffer enabled</description>
                <name>B_0x4</name>
                <value>0x4</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>DAC channel1 is connected to external pin and to on chip peripherals with Buffer enabled</description>
                <name>B_0x5</name>
                <value>0x5</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>DAC channel1 is connected to external pin and to on chip peripherals with Buffer disabled</description>
                <name>B_0x6</name>
                <value>0x6</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>DAC channel1 is connected to on chip peripherals with Buffer disabled</description>
                <name>B_0x7</name>
                <value>0x7</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>MODE1</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>DAC channel2 mode
            These bits can be written only when the DAC is disabled and not in the calibration mode (when bit EN2=0 and bit CEN2 =0 in the DAC_CR register). If EN2=1 or CEN2 =1 the write operation is ignored.
            They can be set and cleared by software to select the DAC channel2 mode:
            DAC channel2 in Normal mode
            DAC channel2 in Sample and hold mode
            Note: This register can be modified only when EN2=0.
            Refer to  for the availability of DAC channel2.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>DAC channel2 is connected to external pin with Buffer enabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>DAC channel2 is connected to external pin and to on chip peripherals with buffer enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>DAC channel2 is connected to external pin with buffer disabled</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>DAC channel2 is connected to on chip peripherals with Buffer disabled</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>DAC channel2 is connected to external pin with Buffer enabled</description>
                <name>B_0x4</name>
                <value>0x4</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>DAC channel2 is connected to external pin and to on chip peripherals with Buffer enabled</description>
                <name>B_0x5</name>
                <value>0x5</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>DAC channel2 is connected to external pin and to on chip peripherals with Buffer disabled</description>
                <name>B_0x6</name>
                <value>0x6</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>DAC channel2 is connected to on chip peripherals with Buffer disabled</description>
                <name>B_0x7</name>
                <value>0x7</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>MODE2</name>
          </field>
        </fields>
        <name>DAC_MCR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x40</addressOffset>
        <description>DAC Sample and Hold sample time register
                  1</description>
        <displayName>DAC_SHSR1</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>DAC channel1 sample time (only valid in Sample and hold mode)
            These bits can be written when the DAC channel1 is disabled or also during normal operation. in the latter case, the write can be done only when BWST1 of DAC_SR register is low, If BWST1=1, the write operation is ignored.</description>
            <name>TSAMPLE1</name>
          </field>
        </fields>
        <name>DAC_SHSR1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x44</addressOffset>
        <description>DAC Sample and Hold sample time register
                  2</description>
        <displayName>DAC_SHSR2</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>DAC channel2 sample time (only valid in Sample and hold mode)
            These bits can be written when the DAC channel2 is disabled or also during normal operation. in the latter case, the write can be done only when BWST2 of DAC_SR register is low, if BWST2=1, the write operation is ignored.</description>
            <name>TSAMPLE2</name>
          </field>
        </fields>
        <name>DAC_SHSR2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x48</addressOffset>
        <description>DAC Sample and Hold hold time
                  register</description>
        <displayName>DAC_SHHR</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>DAC channel1 hold time (only valid in Sample and hold mode)
            Hold time= (THOLD[9:0]) x LSI clock period
            Note: This register can be modified only when EN1=0.</description>
            <name>THOLD1</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>DAC channel2 hold time (only valid in Sample and hold mode).
            Hold time= (THOLD[9:0]) x LSI clock period
            Note: This register can be modified only when EN2=0.
            These bits are available only on dual-channel DACs. Refer to implementation.</description>
            <name>THOLD2</name>
          </field>
        </fields>
        <name>DAC_SHHR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10001</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x4C</addressOffset>
        <description>DAC Sample and Hold refresh time
                  register</description>
        <displayName>DAC_SHRR</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>DAC channel1 refresh time (only valid in Sample and hold mode)
            Refresh time= (TREFRESH[7:0]) x LSI clock period
            Note: This register can be modified only when EN1=0.</description>
            <name>TREFRESH1</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>DAC channel2 refresh time (only valid in Sample and hold mode)
            Refresh time= (TREFRESH[7:0]) x LSI clock period
            Note: This register can be modified only when EN2=0.
            These bits are available only on dual-channel DACs. Refer to implementation.</description>
            <name>TREFRESH2</name>
          </field>
        </fields>
        <name>DAC_SHRR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x10001</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <resetMask>0xFFFFFFFF</resetMask>
    <resetValue>0x0</resetValue>
    <size>0x20</size>
  </peripheral>
</peripherals>
<peripherals>
  <peripheral>
    <addressBlock>
      <offset>0x0</offset>
      <size>0x400</size>
      <usage>registers</usage>
    </addressBlock>
    <baseAddress>0x40015800</baseAddress>
    <description>Debug support</description>
    <groupName>DBG</groupName>
    <interrupts></interrupts>
    <name>DBG</name>
    <registers>
      <register>
        <access>read-only</access>
        <addressOffset>0x0</addressOffset>
        <description>MCU Device ID Code Register</description>
        <displayName>IDCODE</displayName>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xC</bitWidth>
            <description>Device Identifier</description>
            <name>DEV_ID</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>Revision Identifier</description>
            <name>REV_ID</name>
          </field>
        </fields>
        <name>IDCODE</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x4</addressOffset>
        <description>DBG configuration register </description>
        <displayName>DBG_CR</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Debug Stop mode
            Debug options in Stop mode.
            Upon Stop mode exit, the software must re-establish the desired clock configuration.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>All clocks disabled, including FCLK and HCLK. Upon Stop mode exit, the CPU is clocked by the HSI internal RC oscillator. </description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>FCLK and HCLK running, derived from the internal RC oscillator remaining active. If Systick is enabled, it may generate periodic interrupt and wake up events.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>DBG_STOP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Debug Standby and Shutdown modes
            Debug options in Standby or Shutdown mode.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Digital part powered. From software point of view, exiting Standby and Shutdown modes is identical as fetching reset vector (except for status bits indicating that the MCU exits Standby)</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Digital part powered and FCLK and HCLK running, derived from the internal RC oscillator remaining active. The MCU generates a system reset so that exiting Standby and Shutdown has the same effect as starting from reset.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>DBG_STANDBY</name>
          </field>
        </fields>
        <name>DBG_CR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x8</addressOffset>
        <description>DBG APB freeze register 1 </description>
        <displayName>DBG_APB_FZ1</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Clocking of TIM2 counter when the core is halted
            This bit enables/disables the clock to the counter of TIM2 when the core is halted:</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Enable</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Disable</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>DBG_TIM2_STOP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Clocking of TIM3 counter when the core is halted
            This bit enables/disables the clock to the counter of TIM3 when the core is halted:</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Enable</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Disable</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>DBG_TIM3_STOP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Clocking of TIM6 counter when the core is halted
            This bit enables/disables the clock to the counter of TIM6 when the core is halted:</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Enable</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Disable</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>DBG_TIM6_STOP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Clocking of TIM7 counter when the core is halted.
            This bit enables/disables the clock to the counter of ITIM7 when the core is halted:</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Enable</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Disable</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>DBG_TIM7_STOP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Clocking of RTC counter when the core is halted
            This bit enables/disables the clock to the counter of RTC when the core is halted:</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Enable</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Disable</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>DBG_RTC_STOP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Clocking of WWDG counter when the core is halted
            This bit enables/disables the clock to the counter of WWDG when the core is halted:</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Enable</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Disable</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>DBG_WWDG_STOP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Clocking of IWDG counter when the core is halted
            This bit enables/disables the clock to the counter of IWDG when the core is halted:</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Enable</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Disable</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>DBG_IWDG_STOP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SMBUS timeout when core is halted</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Same behavior as in normal mode</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>The SMBUS timeout is frozen</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>DBG_I2C1_SMBUS_TIMEOUT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Clocking of LPTIMER2 counter when the core is halted
            This bit enables/disables the clock to the counter of LPTIMER2 when the core is halted:</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Enable</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Disable</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>DBG_LPTIM2_STOP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Clocking of LPTIMER1 counter when the core is halted
            This bit enables/disables the clock to the counter of LPTIMER1 when the core is halted:</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Enable</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Disable</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>DBG_LPTIM1_STOP</name>
          </field>
        </fields>
        <name>DBG_APB_FZ1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0xC</addressOffset>
        <description>DBG APB freeze register 2 </description>
        <displayName>DBG_APB_FZ2</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Clocking of TIM1 counter when the core is halted
            This bit enables/disables the clock to the counter of TIM1 when the core is halted:</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Enable</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Disable</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>DBG_TIM1_STOP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Clocking of TIM14 counter when the core is halted
            This bit enables/disables the clock to the counter of TIM14 when the core is halted:</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Enable</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Disable</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>DBG_TIM14_STOP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Clocking of TIM15 counter when the core is halted
            This bit enables/disables the clock to the counter of TIM15 when the core is halted:
            Only available on STM32G071xx and STM32G081xx, reserved on STM32G031xx and STM32G041xx.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Enable</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Disable</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>DBG_TIM15_STOP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Clocking of TIM16 counter when the core is halted
            This bit enables/disables the clock to the counter of TIM16 when the core is halted:</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Enable</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Disable</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>DBG_TIM16_STOP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Clocking of TIM17 counter when the core is halted
            This bit enables/disables the clock to the counter of TIM17 when the core is halted:</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Enable</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Disable</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>DBG_TIM17_STOP</name>
          </field>
        </fields>
        <name>DBG_APB_FZ2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <resetMask>0xFFFFFFFF</resetMask>
    <resetValue>0x0</resetValue>
    <size>0x20</size>
  </peripheral>
</peripherals>
<peripherals>
  <peripheral>
    <addressBlock>
      <offset>0x0</offset>
      <size>0x800</size>
      <usage>registers</usage>
    </addressBlock>
    <baseAddress>0x40020800</baseAddress>
    <description>DMAMUX</description>
    <groupName>DMAMUX</groupName>
    <interrupts>
      <interrupt>
        <name>DMA_Channel4_5_6_7</name>
        <value>0xB</value>
      </interrupt>
    </interrupts>
    <name>DMAMUX</name>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x0</addressOffset>
        <description>DMAMUX request line multiplexer channel x configuration register</description>
        <displayName>DMAMUX_C0CR</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>DMA request identification
            	Selects the input DMA request. See the DMAMUX table about assignments of multiplexer inputs to resources.</description>
            <name>DMAREQ_ID</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Synchronization overrun interrupt enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>interrupt disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>interrupt enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>SOIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Event generation enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>event generation disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>event generation enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>EGE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Synchronization enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>synchronization disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>synchronization enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>SE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Synchronization polarity
            	Defines the edge polarity of the selected synchronization input:</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>no event, i.e. no synchronization nor detection.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>rising edge</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>falling edge</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>rising and falling edge</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>SPOL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Number of DMA requests minus 1 to forward
            	Defines the number of DMA requests to forward to the DMA controller after a synchronization event, and/or the number of DMA requests before an output event is generated.
            	This field shall only be written when both SE and EGE bits are low.</description>
            <name>NBREQ</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Synchronization identification
            	Selects the synchronization input (see inputs to resources STM32G0).</description>
            <name>SYNC_ID</name>
          </field>
        </fields>
        <name>DMAMUX_C0CR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x4</addressOffset>
        <description>DMAMUX request line multiplexer channel x configuration register</description>
        <displayName>DMAMUX_C1CR</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>DMA request identification
            	Selects the input DMA request. See the DMAMUX table about assignments of multiplexer inputs to resources.</description>
            <name>DMAREQ_ID</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Synchronization overrun interrupt enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>interrupt disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>interrupt enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>SOIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Event generation enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>event generation disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>event generation enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>EGE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Synchronization enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>synchronization disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>synchronization enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>SE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Synchronization polarity
            	Defines the edge polarity of the selected synchronization input:</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>no event, i.e. no synchronization nor detection.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>rising edge</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>falling edge</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>rising and falling edge</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>SPOL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Number of DMA requests minus 1 to forward
            	Defines the number of DMA requests to forward to the DMA controller after a synchronization event, and/or the number of DMA requests before an output event is generated.
            	This field shall only be written when both SE and EGE bits are low.</description>
            <name>NBREQ</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Synchronization identification
            	Selects the synchronization input (see inputs to resources STM32G0).</description>
            <name>SYNC_ID</name>
          </field>
        </fields>
        <name>DMAMUX_C1CR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x8</addressOffset>
        <description>DMAMUX request line multiplexer channel x configuration register</description>
        <displayName>DMAMUX_C2CR</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>DMA request identification
            	Selects the input DMA request. See the DMAMUX table about assignments of multiplexer inputs to resources.</description>
            <name>DMAREQ_ID</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Synchronization overrun interrupt enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>interrupt disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>interrupt enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>SOIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Event generation enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>event generation disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>event generation enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>EGE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Synchronization enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>synchronization disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>synchronization enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>SE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Synchronization polarity
            	Defines the edge polarity of the selected synchronization input:</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>no event, i.e. no synchronization nor detection.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>rising edge</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>falling edge</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>rising and falling edge</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>SPOL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Number of DMA requests minus 1 to forward
            	Defines the number of DMA requests to forward to the DMA controller after a synchronization event, and/or the number of DMA requests before an output event is generated.
            	This field shall only be written when both SE and EGE bits are low.</description>
            <name>NBREQ</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Synchronization identification
            	Selects the synchronization input (see inputs to resources STM32G0).</description>
            <name>SYNC_ID</name>
          </field>
        </fields>
        <name>DMAMUX_C2CR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0xC</addressOffset>
        <description>DMAMUX request line multiplexer channel x configuration register</description>
        <displayName>DMAMUX_C3CR</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>DMA request identification
            	Selects the input DMA request. See the DMAMUX table about assignments of multiplexer inputs to resources.</description>
            <name>DMAREQ_ID</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Synchronization overrun interrupt enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>interrupt disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>interrupt enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>SOIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Event generation enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>event generation disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>event generation enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>EGE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Synchronization enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>synchronization disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>synchronization enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>SE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Synchronization polarity
            	Defines the edge polarity of the selected synchronization input:</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>no event, i.e. no synchronization nor detection.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>rising edge</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>falling edge</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>rising and falling edge</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>SPOL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Number of DMA requests minus 1 to forward
            	Defines the number of DMA requests to forward to the DMA controller after a synchronization event, and/or the number of DMA requests before an output event is generated.
            	This field shall only be written when both SE and EGE bits are low.</description>
            <name>NBREQ</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Synchronization identification
            	Selects the synchronization input (see inputs to resources STM32G0).</description>
            <name>SYNC_ID</name>
          </field>
        </fields>
        <name>DMAMUX_C3CR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x10</addressOffset>
        <description>DMAMUX request line multiplexer channel x configuration register</description>
        <displayName>DMAMUX_C4CR</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>DMA request identification
            	Selects the input DMA request. See the DMAMUX table about assignments of multiplexer inputs to resources.</description>
            <name>DMAREQ_ID</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Synchronization overrun interrupt enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>interrupt disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>interrupt enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>SOIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Event generation enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>event generation disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>event generation enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>EGE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Synchronization enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>synchronization disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>synchronization enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>SE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Synchronization polarity
            	Defines the edge polarity of the selected synchronization input:</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>no event, i.e. no synchronization nor detection.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>rising edge</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>falling edge</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>rising and falling edge</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>SPOL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Number of DMA requests minus 1 to forward
            	Defines the number of DMA requests to forward to the DMA controller after a synchronization event, and/or the number of DMA requests before an output event is generated.
            	This field shall only be written when both SE and EGE bits are low.</description>
            <name>NBREQ</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Synchronization identification
            	Selects the synchronization input (see inputs to resources STM32G0).</description>
            <name>SYNC_ID</name>
          </field>
        </fields>
        <name>DMAMUX_C4CR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x14</addressOffset>
        <description>DMAMUX request line multiplexer channel x configuration register</description>
        <displayName>DMAMUX_C5CR</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>DMA request identification
            	Selects the input DMA request. See the DMAMUX table about assignments of multiplexer inputs to resources.</description>
            <name>DMAREQ_ID</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Synchronization overrun interrupt enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>interrupt disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>interrupt enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>SOIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Event generation enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>event generation disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>event generation enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>EGE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Synchronization enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>synchronization disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>synchronization enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>SE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Synchronization polarity
            	Defines the edge polarity of the selected synchronization input:</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>no event, i.e. no synchronization nor detection.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>rising edge</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>falling edge</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>rising and falling edge</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>SPOL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Number of DMA requests minus 1 to forward
            	Defines the number of DMA requests to forward to the DMA controller after a synchronization event, and/or the number of DMA requests before an output event is generated.
            	This field shall only be written when both SE and EGE bits are low.</description>
            <name>NBREQ</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Synchronization identification
            	Selects the synchronization input (see inputs to resources STM32G0).</description>
            <name>SYNC_ID</name>
          </field>
        </fields>
        <name>DMAMUX_C5CR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x18</addressOffset>
        <description>DMAMUX request line multiplexer channel x configuration register</description>
        <displayName>DMAMUX_C6CR</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>DMA request identification
            	Selects the input DMA request. See the DMAMUX table about assignments of multiplexer inputs to resources.</description>
            <name>DMAREQ_ID</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Synchronization overrun interrupt enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>interrupt disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>interrupt enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>SOIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Event generation enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>event generation disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>event generation enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>EGE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Synchronization enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>synchronization disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>synchronization enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>SE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Synchronization polarity
            	Defines the edge polarity of the selected synchronization input:</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>no event, i.e. no synchronization nor detection.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>rising edge</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>falling edge</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>rising and falling edge</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>SPOL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Number of DMA requests minus 1 to forward
            	Defines the number of DMA requests to forward to the DMA controller after a synchronization event, and/or the number of DMA requests before an output event is generated.
            	This field shall only be written when both SE and EGE bits are low.</description>
            <name>NBREQ</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Synchronization identification
            	Selects the synchronization input (see inputs to resources STM32G0).</description>
            <name>SYNC_ID</name>
          </field>
        </fields>
        <name>DMAMUX_C6CR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-only</access>
        <addressOffset>0x80</addressOffset>
        <description>DMAMUX request line multiplexer interrupt channel status register</description>
        <displayName>DMAMUX_CSR</displayName>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Synchronization overrun event flag
            	The flag is set when a synchronization event occurs on a DMA request line multiplexer channel x, while the DMA request counter value is lower than NBREQ.
            	The flag is cleared by writing 1 to the corresponding CSOFx bit in DMAMUX_CFR register.</description>
            <name>SOF0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Synchronization overrun event flag
            	The flag is set when a synchronization event occurs on a DMA request line multiplexer channel x, while the DMA request counter value is lower than NBREQ.
            	The flag is cleared by writing 1 to the corresponding CSOFx bit in DMAMUX_CFR register.</description>
            <name>SOF1</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Synchronization overrun event flag
            	The flag is set when a synchronization event occurs on a DMA request line multiplexer channel x, while the DMA request counter value is lower than NBREQ.
            	The flag is cleared by writing 1 to the corresponding CSOFx bit in DMAMUX_CFR register.</description>
            <name>SOF2</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Synchronization overrun event flag
            	The flag is set when a synchronization event occurs on a DMA request line multiplexer channel x, while the DMA request counter value is lower than NBREQ.
            	The flag is cleared by writing 1 to the corresponding CSOFx bit in DMAMUX_CFR register.</description>
            <name>SOF3</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Synchronization overrun event flag
            	The flag is set when a synchronization event occurs on a DMA request line multiplexer channel x, while the DMA request counter value is lower than NBREQ.
            	The flag is cleared by writing 1 to the corresponding CSOFx bit in DMAMUX_CFR register.</description>
            <name>SOF4</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Synchronization overrun event flag
            	The flag is set when a synchronization event occurs on a DMA request line multiplexer channel x, while the DMA request counter value is lower than NBREQ.
            	The flag is cleared by writing 1 to the corresponding CSOFx bit in DMAMUX_CFR register.</description>
            <name>SOF5</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Synchronization overrun event flag
            	The flag is set when a synchronization event occurs on a DMA request line multiplexer channel x, while the DMA request counter value is lower than NBREQ.
            	The flag is cleared by writing 1 to the corresponding CSOFx bit in DMAMUX_CFR register.</description>
            <name>SOF6</name>
          </field>
        </fields>
        <name>DMAMUX_CSR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>write-only</access>
        <addressOffset>0x84</addressOffset>
        <description>DMAMUX request line multiplexer interrupt clear flag register</description>
        <displayName>DMAMUX_CFR</displayName>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Clear synchronization overrun event flag
            Writing 1 in each bit clears the corresponding overrun flag SOFx in the DMAMUX_CSR register.</description>
            <name>CSOF0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Clear synchronization overrun event flag
            Writing 1 in each bit clears the corresponding overrun flag SOFx in the DMAMUX_CSR register.</description>
            <name>CSOF1</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Clear synchronization overrun event flag
            Writing 1 in each bit clears the corresponding overrun flag SOFx in the DMAMUX_CSR register.</description>
            <name>CSOF2</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Clear synchronization overrun event flag
            Writing 1 in each bit clears the corresponding overrun flag SOFx in the DMAMUX_CSR register.</description>
            <name>CSOF3</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Clear synchronization overrun event flag
            Writing 1 in each bit clears the corresponding overrun flag SOFx in the DMAMUX_CSR register.</description>
            <name>CSOF4</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Clear synchronization overrun event flag
            Writing 1 in each bit clears the corresponding overrun flag SOFx in the DMAMUX_CSR register.</description>
            <name>CSOF5</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Clear synchronization overrun event flag
            Writing 1 in each bit clears the corresponding overrun flag SOFx in the DMAMUX_CSR register.</description>
            <name>CSOF6</name>
          </field>
        </fields>
        <name>DMAMUX_CFR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x100</addressOffset>
        <description>DMAMUX request generator channel x configuration register</description>
        <displayName>DMAMUX_RG0CR</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Signal identification
            Selects the DMA request trigger input used for the channel x of the DMA request generator</description>
            <name>SIG_ID</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Trigger overrun interrupt enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>interrupt on a trigger overrun event occurrence is disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>interrupt on a trigger overrun event occurrence is enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>OIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>DMA request generator channel x enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>DMA request generator channel x disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>DMA request generator channel x enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>GE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>DMA request generator trigger polarity
            Defines the edge polarity of the selected trigger input</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>no event. I.e. none trigger detection nor generation.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>rising edge</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>falling edge</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>rising and falling edge</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>GPOL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Number of DMA requests to be generated (minus 1)
            Defines the number of DMA requests to be generated after a trigger event. The actual number of generated DMA requests is GNBREQ +1.
            Note: This field shall only be written when GE bit is disabled.</description>
            <name>GNBREQ</name>
          </field>
        </fields>
        <name>DMAMUX_RG0CR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x104</addressOffset>
        <description>DMAMUX request generator channel x configuration register</description>
        <displayName>DMAMUX_RG1CR</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Signal identification
            Selects the DMA request trigger input used for the channel x of the DMA request generator</description>
            <name>SIG_ID</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Trigger overrun interrupt enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>interrupt on a trigger overrun event occurrence is disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>interrupt on a trigger overrun event occurrence is enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>OIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>DMA request generator channel x enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>DMA request generator channel x disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>DMA request generator channel x enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>GE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>DMA request generator trigger polarity
            Defines the edge polarity of the selected trigger input</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>no event. I.e. none trigger detection nor generation.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>rising edge</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>falling edge</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>rising and falling edge</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>GPOL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Number of DMA requests to be generated (minus 1)
            Defines the number of DMA requests to be generated after a trigger event. The actual number of generated DMA requests is GNBREQ +1.
            Note: This field shall only be written when GE bit is disabled.</description>
            <name>GNBREQ</name>
          </field>
        </fields>
        <name>DMAMUX_RG1CR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x108</addressOffset>
        <description>DMAMUX request generator channel x configuration register</description>
        <displayName>DMAMUX_RG2CR</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Signal identification
            Selects the DMA request trigger input used for the channel x of the DMA request generator</description>
            <name>SIG_ID</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Trigger overrun interrupt enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>interrupt on a trigger overrun event occurrence is disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>interrupt on a trigger overrun event occurrence is enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>OIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>DMA request generator channel x enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>DMA request generator channel x disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>DMA request generator channel x enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>GE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>DMA request generator trigger polarity
            Defines the edge polarity of the selected trigger input</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>no event. I.e. none trigger detection nor generation.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>rising edge</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>falling edge</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>rising and falling edge</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>GPOL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Number of DMA requests to be generated (minus 1)
            Defines the number of DMA requests to be generated after a trigger event. The actual number of generated DMA requests is GNBREQ +1.
            Note: This field shall only be written when GE bit is disabled.</description>
            <name>GNBREQ</name>
          </field>
        </fields>
        <name>DMAMUX_RG2CR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x10C</addressOffset>
        <description>DMAMUX request generator channel x configuration register</description>
        <displayName>DMAMUX_RG3CR</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Signal identification
            Selects the DMA request trigger input used for the channel x of the DMA request generator</description>
            <name>SIG_ID</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Trigger overrun interrupt enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>interrupt on a trigger overrun event occurrence is disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>interrupt on a trigger overrun event occurrence is enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>OIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>DMA request generator channel x enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>DMA request generator channel x disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>DMA request generator channel x enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>GE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>DMA request generator trigger polarity
            Defines the edge polarity of the selected trigger input</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>no event. I.e. none trigger detection nor generation.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>rising edge</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>falling edge</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>rising and falling edge</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>GPOL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Number of DMA requests to be generated (minus 1)
            Defines the number of DMA requests to be generated after a trigger event. The actual number of generated DMA requests is GNBREQ +1.
            Note: This field shall only be written when GE bit is disabled.</description>
            <name>GNBREQ</name>
          </field>
        </fields>
        <name>DMAMUX_RG3CR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-only</access>
        <addressOffset>0x140</addressOffset>
        <description>DMAMUX request generator interrupt status register</description>
        <displayName>DMAMUX_RGSR</displayName>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Trigger overrun event flag
            The flag is set when a new trigger event occurs on DMA request generator channel x, before the request counter underrun (the internal request counter programmed via the GNBREQ field of the DMAMUX_RGxCR register).
            The flag is cleared by writing 1 to the corresponding COFx bit in the DMAMUX_RGCFR register.</description>
            <name>OF0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Trigger overrun event flag
            The flag is set when a new trigger event occurs on DMA request generator channel x, before the request counter underrun (the internal request counter programmed via the GNBREQ field of the DMAMUX_RGxCR register).
            The flag is cleared by writing 1 to the corresponding COFx bit in the DMAMUX_RGCFR register.</description>
            <name>OF1</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Trigger overrun event flag
            The flag is set when a new trigger event occurs on DMA request generator channel x, before the request counter underrun (the internal request counter programmed via the GNBREQ field of the DMAMUX_RGxCR register).
            The flag is cleared by writing 1 to the corresponding COFx bit in the DMAMUX_RGCFR register.</description>
            <name>OF2</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Trigger overrun event flag
            The flag is set when a new trigger event occurs on DMA request generator channel x, before the request counter underrun (the internal request counter programmed via the GNBREQ field of the DMAMUX_RGxCR register).
            The flag is cleared by writing 1 to the corresponding COFx bit in the DMAMUX_RGCFR register.</description>
            <name>OF3</name>
          </field>
        </fields>
        <name>DMAMUX_RGSR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>write-only</access>
        <addressOffset>0x144</addressOffset>
        <description>DMAMUX request generator interrupt clear flag register</description>
        <displayName>DMAMUX_RGCFR</displayName>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Clear trigger overrun event flag
            Writing 1 in each bit clears the corresponding overrun flag OFx in the DMAMUX_RGSR register.</description>
            <name>COF0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Clear trigger overrun event flag
            Writing 1 in each bit clears the corresponding overrun flag OFx in the DMAMUX_RGSR register.</description>
            <name>COF1</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Clear trigger overrun event flag
            Writing 1 in each bit clears the corresponding overrun flag OFx in the DMAMUX_RGSR register.</description>
            <name>COF2</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Clear trigger overrun event flag
            Writing 1 in each bit clears the corresponding overrun flag OFx in the DMAMUX_RGSR register.</description>
            <name>COF3</name>
          </field>
        </fields>
        <name>DMAMUX_RGCFR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <resetMask>0xFFFFFFFF</resetMask>
    <resetValue>0x0</resetValue>
    <size>0x20</size>
  </peripheral>
</peripherals>
<peripherals>
  <peripheral>
    <addressBlock>
      <offset>0x0</offset>
      <size>0x400</size>
      <usage>registers</usage>
    </addressBlock>
    <baseAddress>0x50000000</baseAddress>
    <description>General-purpose I/Os</description>
    <groupName>GPIO</groupName>
    <interrupts></interrupts>
    <name>GPIOA</name>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x0</addressOffset>
        <description>GPIO port mode register</description>
        <displayName>MODER</displayName>
        <fields>
          <field>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER15</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER14</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER13</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER12</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER11</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER10</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER9</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER8</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER7</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER6</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER5</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER4</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER3</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER2</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER1</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER0</name>
          </field>
        </fields>
        <name>MODER</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xEBFFFFFF</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x4</addressOffset>
        <description>GPIO port output type register</description>
        <displayName>OTYPER</displayName>
        <fields>
          <field>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT15</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT14</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT13</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT12</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT11</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT10</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT9</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT8</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT7</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT6</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT5</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT4</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT3</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT2</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT1</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT0</name>
          </field>
        </fields>
        <name>OTYPER</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x8</addressOffset>
        <description>GPIO port output speed
                  register</description>
        <displayName>OSPEEDR</displayName>
        <fields>
          <field>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR15</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR14</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR13</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR12</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR11</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR10</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR9</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR8</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR7</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR6</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR5</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR4</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR3</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR2</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR1</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR0</name>
          </field>
        </fields>
        <name>OSPEEDR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xC000000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0xC</addressOffset>
        <description>GPIO port pull-up/pull-down
                  register</description>
        <displayName>PUPDR</displayName>
        <fields>
          <field>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR15</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR14</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR13</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR12</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR11</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR10</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR9</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR8</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR7</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR6</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR5</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR4</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR3</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR2</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR1</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR0</name>
          </field>
        </fields>
        <name>PUPDR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x24000000</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-only</access>
        <addressOffset>0x10</addressOffset>
        <description>GPIO port input data register</description>
        <displayName>IDR</displayName>
        <fields>
          <field>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR15</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR14</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR13</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR12</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR11</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR10</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR9</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR8</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR7</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR6</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR5</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR4</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR3</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR2</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR1</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR0</name>
          </field>
        </fields>
        <name>IDR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x14</addressOffset>
        <description>GPIO port output data register</description>
        <displayName>ODR</displayName>
        <fields>
          <field>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR15</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR14</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR13</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR12</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR11</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR10</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR9</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR8</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR7</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR6</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR5</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR4</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR3</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR2</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR1</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR0</name>
          </field>
        </fields>
        <name>ODR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>write-only</access>
        <addressOffset>0x18</addressOffset>
        <description>GPIO port bit set/reset
                  register</description>
        <displayName>BSRR</displayName>
        <fields>
          <field>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x reset bit y (y =
                          0..15)</description>
            <name>BR15</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x reset bit y (y =
                          0..15)</description>
            <name>BR14</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x reset bit y (y =
                          0..15)</description>
            <name>BR13</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x reset bit y (y =
                          0..15)</description>
            <name>BR12</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x reset bit y (y =
                          0..15)</description>
            <name>BR11</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x reset bit y (y =
                          0..15)</description>
            <name>BR10</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x reset bit y (y =
                          0..15)</description>
            <name>BR9</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x reset bit y (y =
                          0..15)</description>
            <name>BR8</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x reset bit y (y =
                          0..15)</description>
            <name>BR7</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x reset bit y (y =
                          0..15)</description>
            <name>BR6</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x reset bit y (y =
                          0..15)</description>
            <name>BR5</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x reset bit y (y =
                          0..15)</description>
            <name>BR4</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x reset bit y (y =
                          0..15)</description>
            <name>BR3</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x reset bit y (y =
                          0..15)</description>
            <name>BR2</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x reset bit y (y =
                          0..15)</description>
            <name>BR1</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BR0</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS15</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS14</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS13</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS12</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS11</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS10</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS9</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS8</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS7</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS6</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS5</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS4</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS3</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS2</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS1</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS0</name>
          </field>
        </fields>
        <name>BSRR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x1C</addressOffset>
        <description>GPIO port configuration lock
                  register</description>
        <displayName>LCKR</displayName>
        <fields>
          <field>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCKK</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK15</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK14</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK13</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK12</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK11</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK10</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK9</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK8</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK7</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK6</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK5</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK4</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK3</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK2</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK1</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK0</name>
          </field>
        </fields>
        <name>LCKR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x20</addressOffset>
        <description>GPIO alternate function low
                  register</description>
        <displayName>AFRL</displayName>
        <fields>
          <field>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 0..7)</description>
            <name>AFSEL7</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 0..7)</description>
            <name>AFSEL6</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 0..7)</description>
            <name>AFSEL5</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 0..7)</description>
            <name>AFSEL4</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 0..7)</description>
            <name>AFSEL3</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 0..7)</description>
            <name>AFSEL2</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 0..7)</description>
            <name>AFSEL1</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 0..7)</description>
            <name>AFSEL0</name>
          </field>
        </fields>
        <name>AFRL</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x24</addressOffset>
        <description>GPIO alternate function high
                  register</description>
        <displayName>AFRH</displayName>
        <fields>
          <field>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 8..15)</description>
            <name>AFSEL15</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 8..15)</description>
            <name>AFSEL14</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 8..15)</description>
            <name>AFSEL13</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 8..15)</description>
            <name>AFSEL12</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 8..15)</description>
            <name>AFSEL11</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 8..15)</description>
            <name>AFSEL10</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 8..15)</description>
            <name>AFSEL9</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 8..15)</description>
            <name>AFSEL8</name>
          </field>
        </fields>
        <name>AFRH</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>write-only</access>
        <addressOffset>0x28</addressOffset>
        <description>port bit reset register</description>
        <displayName>BRR</displayName>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR0</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR1</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR2</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR3</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR4</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR5</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR6</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR7</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR8</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR9</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR10</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR11</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR12</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR13</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR14</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR15</name>
          </field>
        </fields>
        <name>BRR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <resetMask>0xFFFFFFFF</resetMask>
    <resetValue>0x0</resetValue>
    <size>0x20</size>
  </peripheral>
</peripherals>
<peripherals>
  <peripheral>
    <addressBlock>
      <offset>0x0</offset>
      <size>0x400</size>
      <usage>registers</usage>
    </addressBlock>
    <baseAddress>0x50000400</baseAddress>
    <description>General-purpose I/Os</description>
    <groupName>GPIO</groupName>
    <interrupts></interrupts>
    <name>GPIOB</name>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x0</addressOffset>
        <description>GPIO port mode register</description>
        <displayName>MODER</displayName>
        <fields>
          <field>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER15</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER14</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER13</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER12</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER11</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER10</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER9</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER8</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER7</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER6</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER5</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER4</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER3</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER2</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER1</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER0</name>
          </field>
        </fields>
        <name>MODER</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xFFFFFFFF</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x4</addressOffset>
        <description>GPIO port output type register</description>
        <displayName>OTYPER</displayName>
        <fields>
          <field>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT15</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT14</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT13</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT12</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT11</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT10</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT9</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT8</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT7</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT6</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT5</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT4</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT3</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT2</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT1</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT0</name>
          </field>
        </fields>
        <name>OTYPER</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x8</addressOffset>
        <description>GPIO port output speed
                  register</description>
        <displayName>OSPEEDR</displayName>
        <fields>
          <field>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR15</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR14</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR13</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR12</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR11</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR10</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR9</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR8</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR7</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR6</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR5</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR4</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR3</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR2</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR1</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR0</name>
          </field>
        </fields>
        <name>OSPEEDR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0xC</addressOffset>
        <description>GPIO port pull-up/pull-down
                  register</description>
        <displayName>PUPDR</displayName>
        <fields>
          <field>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR15</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR14</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR13</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR12</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR11</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR10</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR9</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR8</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR7</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR6</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR5</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR4</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR3</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR2</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR1</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR0</name>
          </field>
        </fields>
        <name>PUPDR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-only</access>
        <addressOffset>0x10</addressOffset>
        <description>GPIO port input data register</description>
        <displayName>IDR</displayName>
        <fields>
          <field>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR15</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR14</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR13</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR12</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR11</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR10</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR9</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR8</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR7</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR6</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR5</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR4</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR3</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR2</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR1</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR0</name>
          </field>
        </fields>
        <name>IDR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x14</addressOffset>
        <description>GPIO port output data register</description>
        <displayName>ODR</displayName>
        <fields>
          <field>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR15</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR14</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR13</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR12</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR11</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR10</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR9</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR8</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR7</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR6</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR5</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR4</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR3</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR2</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR1</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR0</name>
          </field>
        </fields>
        <name>ODR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>write-only</access>
        <addressOffset>0x18</addressOffset>
        <description>GPIO port bit set/reset
                  register</description>
        <displayName>BSRR</displayName>
        <fields>
          <field>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x reset bit y (y =
                          0..15)</description>
            <name>BR15</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x reset bit y (y =
                          0..15)</description>
            <name>BR14</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x reset bit y (y =
                          0..15)</description>
            <name>BR13</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x reset bit y (y =
                          0..15)</description>
            <name>BR12</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x reset bit y (y =
                          0..15)</description>
            <name>BR11</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x reset bit y (y =
                          0..15)</description>
            <name>BR10</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x reset bit y (y =
                          0..15)</description>
            <name>BR9</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x reset bit y (y =
                          0..15)</description>
            <name>BR8</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x reset bit y (y =
                          0..15)</description>
            <name>BR7</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x reset bit y (y =
                          0..15)</description>
            <name>BR6</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x reset bit y (y =
                          0..15)</description>
            <name>BR5</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x reset bit y (y =
                          0..15)</description>
            <name>BR4</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x reset bit y (y =
                          0..15)</description>
            <name>BR3</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x reset bit y (y =
                          0..15)</description>
            <name>BR2</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x reset bit y (y =
                          0..15)</description>
            <name>BR1</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BR0</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS15</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS14</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS13</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS12</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS11</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS10</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS9</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS8</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS7</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS6</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS5</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS4</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS3</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS2</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS1</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS0</name>
          </field>
        </fields>
        <name>BSRR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x1C</addressOffset>
        <description>GPIO port configuration lock
                  register</description>
        <displayName>LCKR</displayName>
        <fields>
          <field>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCKK</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK15</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK14</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK13</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK12</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK11</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK10</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK9</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK8</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK7</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK6</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK5</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK4</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK3</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK2</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK1</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK0</name>
          </field>
        </fields>
        <name>LCKR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x20</addressOffset>
        <description>GPIO alternate function low
                  register</description>
        <displayName>AFRL</displayName>
        <fields>
          <field>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 0..7)</description>
            <name>AFSEL7</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 0..7)</description>
            <name>AFSEL6</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 0..7)</description>
            <name>AFSEL5</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 0..7)</description>
            <name>AFSEL4</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 0..7)</description>
            <name>AFSEL3</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 0..7)</description>
            <name>AFSEL2</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 0..7)</description>
            <name>AFSEL1</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 0..7)</description>
            <name>AFSEL0</name>
          </field>
        </fields>
        <name>AFRL</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x24</addressOffset>
        <description>GPIO alternate function high
                  register</description>
        <displayName>AFRH</displayName>
        <fields>
          <field>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 8..15)</description>
            <name>AFSEL15</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 8..15)</description>
            <name>AFSEL14</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 8..15)</description>
            <name>AFSEL13</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 8..15)</description>
            <name>AFSEL12</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 8..15)</description>
            <name>AFSEL11</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 8..15)</description>
            <name>AFSEL10</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 8..15)</description>
            <name>AFSEL9</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 8..15)</description>
            <name>AFSEL8</name>
          </field>
        </fields>
        <name>AFRH</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>write-only</access>
        <addressOffset>0x28</addressOffset>
        <description>port bit reset register</description>
        <displayName>BRR</displayName>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR0</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR1</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR2</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR3</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR4</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR5</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR6</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR7</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR8</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR9</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR10</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR11</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR12</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR13</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR14</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR15</name>
          </field>
        </fields>
        <name>BRR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <resetMask>0xFFFFFFFF</resetMask>
    <resetValue>0x0</resetValue>
    <size>0x20</size>
  </peripheral>
</peripherals>
<peripherals>
  <peripheral>
    <addressBlock>
      <offset>0x0</offset>
      <size>0x400</size>
      <usage>registers</usage>
    </addressBlock>
    <baseAddress>0x50000800</baseAddress>
    <derivedFrom>GPIOB</derivedFrom>
    <description>General-purpose I/Os</description>
    <groupName>GPIO</groupName>
    <interrupts></interrupts>
    <name>GPIOC</name>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x0</addressOffset>
        <description>GPIO port mode register</description>
        <displayName>MODER</displayName>
        <fields>
          <field>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER15</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER14</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER13</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER12</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER11</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER10</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER9</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER8</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER7</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER6</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER5</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER4</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER3</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER2</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER1</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER0</name>
          </field>
        </fields>
        <name>MODER</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xFFFFFFFF</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x4</addressOffset>
        <description>GPIO port output type register</description>
        <displayName>OTYPER</displayName>
        <fields>
          <field>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT15</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT14</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT13</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT12</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT11</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT10</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT9</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT8</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT7</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT6</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT5</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT4</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT3</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT2</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT1</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT0</name>
          </field>
        </fields>
        <name>OTYPER</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x8</addressOffset>
        <description>GPIO port output speed
                  register</description>
        <displayName>OSPEEDR</displayName>
        <fields>
          <field>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR15</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR14</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR13</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR12</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR11</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR10</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR9</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR8</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR7</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR6</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR5</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR4</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR3</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR2</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR1</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR0</name>
          </field>
        </fields>
        <name>OSPEEDR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0xC</addressOffset>
        <description>GPIO port pull-up/pull-down
                  register</description>
        <displayName>PUPDR</displayName>
        <fields>
          <field>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR15</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR14</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR13</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR12</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR11</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR10</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR9</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR8</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR7</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR6</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR5</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR4</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR3</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR2</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR1</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR0</name>
          </field>
        </fields>
        <name>PUPDR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-only</access>
        <addressOffset>0x10</addressOffset>
        <description>GPIO port input data register</description>
        <displayName>IDR</displayName>
        <fields>
          <field>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR15</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR14</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR13</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR12</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR11</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR10</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR9</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR8</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR7</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR6</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR5</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR4</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR3</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR2</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR1</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR0</name>
          </field>
        </fields>
        <name>IDR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x14</addressOffset>
        <description>GPIO port output data register</description>
        <displayName>ODR</displayName>
        <fields>
          <field>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR15</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR14</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR13</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR12</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR11</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR10</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR9</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR8</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR7</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR6</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR5</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR4</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR3</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR2</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR1</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR0</name>
          </field>
        </fields>
        <name>ODR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>write-only</access>
        <addressOffset>0x18</addressOffset>
        <description>GPIO port bit set/reset
                  register</description>
        <displayName>BSRR</displayName>
        <fields>
          <field>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x reset bit y (y =
                          0..15)</description>
            <name>BR15</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x reset bit y (y =
                          0..15)</description>
            <name>BR14</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x reset bit y (y =
                          0..15)</description>
            <name>BR13</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x reset bit y (y =
                          0..15)</description>
            <name>BR12</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x reset bit y (y =
                          0..15)</description>
            <name>BR11</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x reset bit y (y =
                          0..15)</description>
            <name>BR10</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x reset bit y (y =
                          0..15)</description>
            <name>BR9</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x reset bit y (y =
                          0..15)</description>
            <name>BR8</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x reset bit y (y =
                          0..15)</description>
            <name>BR7</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x reset bit y (y =
                          0..15)</description>
            <name>BR6</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x reset bit y (y =
                          0..15)</description>
            <name>BR5</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x reset bit y (y =
                          0..15)</description>
            <name>BR4</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x reset bit y (y =
                          0..15)</description>
            <name>BR3</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x reset bit y (y =
                          0..15)</description>
            <name>BR2</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x reset bit y (y =
                          0..15)</description>
            <name>BR1</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BR0</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS15</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS14</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS13</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS12</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS11</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS10</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS9</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS8</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS7</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS6</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS5</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS4</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS3</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS2</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS1</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS0</name>
          </field>
        </fields>
        <name>BSRR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x1C</addressOffset>
        <description>GPIO port configuration lock
                  register</description>
        <displayName>LCKR</displayName>
        <fields>
          <field>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCKK</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK15</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK14</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK13</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK12</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK11</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK10</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK9</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK8</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK7</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK6</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK5</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK4</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK3</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK2</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK1</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK0</name>
          </field>
        </fields>
        <name>LCKR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x20</addressOffset>
        <description>GPIO alternate function low
                  register</description>
        <displayName>AFRL</displayName>
        <fields>
          <field>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 0..7)</description>
            <name>AFSEL7</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 0..7)</description>
            <name>AFSEL6</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 0..7)</description>
            <name>AFSEL5</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 0..7)</description>
            <name>AFSEL4</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 0..7)</description>
            <name>AFSEL3</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 0..7)</description>
            <name>AFSEL2</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 0..7)</description>
            <name>AFSEL1</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 0..7)</description>
            <name>AFSEL0</name>
          </field>
        </fields>
        <name>AFRL</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x24</addressOffset>
        <description>GPIO alternate function high
                  register</description>
        <displayName>AFRH</displayName>
        <fields>
          <field>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 8..15)</description>
            <name>AFSEL15</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 8..15)</description>
            <name>AFSEL14</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 8..15)</description>
            <name>AFSEL13</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 8..15)</description>
            <name>AFSEL12</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 8..15)</description>
            <name>AFSEL11</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 8..15)</description>
            <name>AFSEL10</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 8..15)</description>
            <name>AFSEL9</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 8..15)</description>
            <name>AFSEL8</name>
          </field>
        </fields>
        <name>AFRH</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>write-only</access>
        <addressOffset>0x28</addressOffset>
        <description>port bit reset register</description>
        <displayName>BRR</displayName>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR0</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR1</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR2</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR3</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR4</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR5</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR6</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR7</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR8</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR9</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR10</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR11</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR12</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR13</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR14</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR15</name>
          </field>
        </fields>
        <name>BRR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <resetMask>0xFFFFFFFF</resetMask>
    <resetValue>0x0</resetValue>
    <size>0x20</size>
  </peripheral>
</peripherals>
<peripherals>
  <peripheral>
    <addressBlock>
      <offset>0x0</offset>
      <size>0x400</size>
      <usage>registers</usage>
    </addressBlock>
    <baseAddress>0x50000C00</baseAddress>
    <derivedFrom>GPIOB</derivedFrom>
    <description>General-purpose I/Os</description>
    <groupName>GPIO</groupName>
    <interrupts></interrupts>
    <name>GPIOD</name>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x0</addressOffset>
        <description>GPIO port mode register</description>
        <displayName>MODER</displayName>
        <fields>
          <field>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER15</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER14</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER13</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER12</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER11</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER10</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER9</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER8</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER7</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER6</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER5</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER4</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER3</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER2</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER1</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER0</name>
          </field>
        </fields>
        <name>MODER</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xFFFFFFFF</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x4</addressOffset>
        <description>GPIO port output type register</description>
        <displayName>OTYPER</displayName>
        <fields>
          <field>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT15</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT14</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT13</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT12</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT11</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT10</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT9</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT8</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT7</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT6</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT5</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT4</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT3</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT2</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT1</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT0</name>
          </field>
        </fields>
        <name>OTYPER</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x8</addressOffset>
        <description>GPIO port output speed
                  register</description>
        <displayName>OSPEEDR</displayName>
        <fields>
          <field>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR15</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR14</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR13</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR12</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR11</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR10</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR9</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR8</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR7</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR6</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR5</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR4</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR3</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR2</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR1</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR0</name>
          </field>
        </fields>
        <name>OSPEEDR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0xC</addressOffset>
        <description>GPIO port pull-up/pull-down
                  register</description>
        <displayName>PUPDR</displayName>
        <fields>
          <field>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR15</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR14</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR13</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR12</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR11</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR10</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR9</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR8</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR7</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR6</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR5</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR4</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR3</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR2</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR1</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR0</name>
          </field>
        </fields>
        <name>PUPDR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-only</access>
        <addressOffset>0x10</addressOffset>
        <description>GPIO port input data register</description>
        <displayName>IDR</displayName>
        <fields>
          <field>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR15</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR14</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR13</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR12</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR11</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR10</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR9</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR8</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR7</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR6</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR5</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR4</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR3</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR2</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR1</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR0</name>
          </field>
        </fields>
        <name>IDR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x14</addressOffset>
        <description>GPIO port output data register</description>
        <displayName>ODR</displayName>
        <fields>
          <field>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR15</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR14</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR13</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR12</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR11</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR10</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR9</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR8</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR7</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR6</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR5</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR4</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR3</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR2</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR1</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR0</name>
          </field>
        </fields>
        <name>ODR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>write-only</access>
        <addressOffset>0x18</addressOffset>
        <description>GPIO port bit set/reset
                  register</description>
        <displayName>BSRR</displayName>
        <fields>
          <field>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x reset bit y (y =
                          0..15)</description>
            <name>BR15</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x reset bit y (y =
                          0..15)</description>
            <name>BR14</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x reset bit y (y =
                          0..15)</description>
            <name>BR13</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x reset bit y (y =
                          0..15)</description>
            <name>BR12</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x reset bit y (y =
                          0..15)</description>
            <name>BR11</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x reset bit y (y =
                          0..15)</description>
            <name>BR10</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x reset bit y (y =
                          0..15)</description>
            <name>BR9</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x reset bit y (y =
                          0..15)</description>
            <name>BR8</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x reset bit y (y =
                          0..15)</description>
            <name>BR7</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x reset bit y (y =
                          0..15)</description>
            <name>BR6</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x reset bit y (y =
                          0..15)</description>
            <name>BR5</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x reset bit y (y =
                          0..15)</description>
            <name>BR4</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x reset bit y (y =
                          0..15)</description>
            <name>BR3</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x reset bit y (y =
                          0..15)</description>
            <name>BR2</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x reset bit y (y =
                          0..15)</description>
            <name>BR1</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BR0</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS15</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS14</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS13</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS12</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS11</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS10</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS9</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS8</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS7</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS6</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS5</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS4</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS3</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS2</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS1</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS0</name>
          </field>
        </fields>
        <name>BSRR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x1C</addressOffset>
        <description>GPIO port configuration lock
                  register</description>
        <displayName>LCKR</displayName>
        <fields>
          <field>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCKK</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK15</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK14</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK13</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK12</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK11</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK10</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK9</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK8</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK7</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK6</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK5</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK4</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK3</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK2</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK1</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK0</name>
          </field>
        </fields>
        <name>LCKR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x20</addressOffset>
        <description>GPIO alternate function low
                  register</description>
        <displayName>AFRL</displayName>
        <fields>
          <field>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 0..7)</description>
            <name>AFSEL7</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 0..7)</description>
            <name>AFSEL6</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 0..7)</description>
            <name>AFSEL5</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 0..7)</description>
            <name>AFSEL4</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 0..7)</description>
            <name>AFSEL3</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 0..7)</description>
            <name>AFSEL2</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 0..7)</description>
            <name>AFSEL1</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 0..7)</description>
            <name>AFSEL0</name>
          </field>
        </fields>
        <name>AFRL</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x24</addressOffset>
        <description>GPIO alternate function high
                  register</description>
        <displayName>AFRH</displayName>
        <fields>
          <field>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 8..15)</description>
            <name>AFSEL15</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 8..15)</description>
            <name>AFSEL14</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 8..15)</description>
            <name>AFSEL13</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 8..15)</description>
            <name>AFSEL12</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 8..15)</description>
            <name>AFSEL11</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 8..15)</description>
            <name>AFSEL10</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 8..15)</description>
            <name>AFSEL9</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 8..15)</description>
            <name>AFSEL8</name>
          </field>
        </fields>
        <name>AFRH</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>write-only</access>
        <addressOffset>0x28</addressOffset>
        <description>port bit reset register</description>
        <displayName>BRR</displayName>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR0</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR1</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR2</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR3</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR4</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR5</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR6</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR7</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR8</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR9</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR10</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR11</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR12</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR13</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR14</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR15</name>
          </field>
        </fields>
        <name>BRR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <resetMask>0xFFFFFFFF</resetMask>
    <resetValue>0x0</resetValue>
    <size>0x20</size>
  </peripheral>
</peripherals>
<peripherals>
  <peripheral>
    <addressBlock>
      <offset>0x0</offset>
      <size>0x400</size>
      <usage>registers</usage>
    </addressBlock>
    <baseAddress>0x50001000</baseAddress>
    <derivedFrom>GPIOB</derivedFrom>
    <description>General-purpose I/Os</description>
    <groupName>GPIO</groupName>
    <interrupts></interrupts>
    <name>GPIOE</name>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x0</addressOffset>
        <description>GPIO port mode register</description>
        <displayName>MODER</displayName>
        <fields>
          <field>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER15</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER14</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER13</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER12</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER11</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER10</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER9</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER8</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER7</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER6</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER5</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER4</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER3</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER2</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER1</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER0</name>
          </field>
        </fields>
        <name>MODER</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xFFFFFFFF</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x4</addressOffset>
        <description>GPIO port output type register</description>
        <displayName>OTYPER</displayName>
        <fields>
          <field>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT15</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT14</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT13</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT12</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT11</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT10</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT9</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT8</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT7</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT6</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT5</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT4</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT3</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT2</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT1</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT0</name>
          </field>
        </fields>
        <name>OTYPER</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x8</addressOffset>
        <description>GPIO port output speed
                  register</description>
        <displayName>OSPEEDR</displayName>
        <fields>
          <field>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR15</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR14</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR13</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR12</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR11</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR10</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR9</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR8</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR7</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR6</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR5</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR4</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR3</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR2</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR1</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR0</name>
          </field>
        </fields>
        <name>OSPEEDR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0xC</addressOffset>
        <description>GPIO port pull-up/pull-down
                  register</description>
        <displayName>PUPDR</displayName>
        <fields>
          <field>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR15</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR14</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR13</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR12</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR11</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR10</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR9</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR8</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR7</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR6</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR5</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR4</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR3</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR2</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR1</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR0</name>
          </field>
        </fields>
        <name>PUPDR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-only</access>
        <addressOffset>0x10</addressOffset>
        <description>GPIO port input data register</description>
        <displayName>IDR</displayName>
        <fields>
          <field>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR15</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR14</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR13</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR12</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR11</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR10</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR9</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR8</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR7</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR6</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR5</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR4</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR3</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR2</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR1</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR0</name>
          </field>
        </fields>
        <name>IDR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x14</addressOffset>
        <description>GPIO port output data register</description>
        <displayName>ODR</displayName>
        <fields>
          <field>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR15</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR14</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR13</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR12</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR11</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR10</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR9</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR8</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR7</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR6</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR5</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR4</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR3</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR2</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR1</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR0</name>
          </field>
        </fields>
        <name>ODR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>write-only</access>
        <addressOffset>0x18</addressOffset>
        <description>GPIO port bit set/reset
                  register</description>
        <displayName>BSRR</displayName>
        <fields>
          <field>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x reset bit y (y =
                          0..15)</description>
            <name>BR15</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x reset bit y (y =
                          0..15)</description>
            <name>BR14</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x reset bit y (y =
                          0..15)</description>
            <name>BR13</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x reset bit y (y =
                          0..15)</description>
            <name>BR12</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x reset bit y (y =
                          0..15)</description>
            <name>BR11</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x reset bit y (y =
                          0..15)</description>
            <name>BR10</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x reset bit y (y =
                          0..15)</description>
            <name>BR9</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x reset bit y (y =
                          0..15)</description>
            <name>BR8</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x reset bit y (y =
                          0..15)</description>
            <name>BR7</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x reset bit y (y =
                          0..15)</description>
            <name>BR6</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x reset bit y (y =
                          0..15)</description>
            <name>BR5</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x reset bit y (y =
                          0..15)</description>
            <name>BR4</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x reset bit y (y =
                          0..15)</description>
            <name>BR3</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x reset bit y (y =
                          0..15)</description>
            <name>BR2</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x reset bit y (y =
                          0..15)</description>
            <name>BR1</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BR0</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS15</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS14</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS13</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS12</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS11</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS10</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS9</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS8</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS7</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS6</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS5</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS4</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS3</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS2</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS1</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS0</name>
          </field>
        </fields>
        <name>BSRR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x1C</addressOffset>
        <description>GPIO port configuration lock
                  register</description>
        <displayName>LCKR</displayName>
        <fields>
          <field>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCKK</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK15</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK14</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK13</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK12</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK11</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK10</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK9</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK8</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK7</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK6</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK5</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK4</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK3</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK2</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK1</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK0</name>
          </field>
        </fields>
        <name>LCKR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x20</addressOffset>
        <description>GPIO alternate function low
                  register</description>
        <displayName>AFRL</displayName>
        <fields>
          <field>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 0..7)</description>
            <name>AFSEL7</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 0..7)</description>
            <name>AFSEL6</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 0..7)</description>
            <name>AFSEL5</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 0..7)</description>
            <name>AFSEL4</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 0..7)</description>
            <name>AFSEL3</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 0..7)</description>
            <name>AFSEL2</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 0..7)</description>
            <name>AFSEL1</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 0..7)</description>
            <name>AFSEL0</name>
          </field>
        </fields>
        <name>AFRL</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x24</addressOffset>
        <description>GPIO alternate function high
                  register</description>
        <displayName>AFRH</displayName>
        <fields>
          <field>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 8..15)</description>
            <name>AFSEL15</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 8..15)</description>
            <name>AFSEL14</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 8..15)</description>
            <name>AFSEL13</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 8..15)</description>
            <name>AFSEL12</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 8..15)</description>
            <name>AFSEL11</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 8..15)</description>
            <name>AFSEL10</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 8..15)</description>
            <name>AFSEL9</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 8..15)</description>
            <name>AFSEL8</name>
          </field>
        </fields>
        <name>AFRH</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>write-only</access>
        <addressOffset>0x28</addressOffset>
        <description>port bit reset register</description>
        <displayName>BRR</displayName>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR0</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR1</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR2</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR3</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR4</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR5</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR6</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR7</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR8</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR9</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR10</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR11</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR12</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR13</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR14</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR15</name>
          </field>
        </fields>
        <name>BRR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <resetMask>0xFFFFFFFF</resetMask>
    <resetValue>0x0</resetValue>
    <size>0x20</size>
  </peripheral>
</peripherals>
<peripherals>
  <peripheral>
    <addressBlock>
      <offset>0x0</offset>
      <size>0x400</size>
      <usage>registers</usage>
    </addressBlock>
    <baseAddress>0x50001400</baseAddress>
    <derivedFrom>GPIOB</derivedFrom>
    <description>General-purpose I/Os</description>
    <groupName>GPIO</groupName>
    <interrupts></interrupts>
    <name>GPIOF</name>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x0</addressOffset>
        <description>GPIO port mode register</description>
        <displayName>MODER</displayName>
        <fields>
          <field>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER15</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER14</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER13</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER12</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER11</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER10</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER9</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER8</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER7</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER6</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER5</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER4</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER3</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER2</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER1</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>MODER0</name>
          </field>
        </fields>
        <name>MODER</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xFFFFFFFF</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x4</addressOffset>
        <description>GPIO port output type register</description>
        <displayName>OTYPER</displayName>
        <fields>
          <field>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT15</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT14</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT13</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT12</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT11</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT10</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT9</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT8</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT7</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT6</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT5</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT4</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT3</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT2</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT1</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OT0</name>
          </field>
        </fields>
        <name>OTYPER</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x8</addressOffset>
        <description>GPIO port output speed
                  register</description>
        <displayName>OSPEEDR</displayName>
        <fields>
          <field>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR15</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR14</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR13</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR12</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR11</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR10</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR9</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR8</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR7</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR6</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR5</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR4</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR3</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR2</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR1</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>OSPEEDR0</name>
          </field>
        </fields>
        <name>OSPEEDR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0xC</addressOffset>
        <description>GPIO port pull-up/pull-down
                  register</description>
        <displayName>PUPDR</displayName>
        <fields>
          <field>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR15</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR14</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR13</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR12</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR11</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR10</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR9</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR8</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR7</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR6</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR5</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR4</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR3</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR2</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR1</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Port x configuration bits (y =
                          0..15)</description>
            <name>PUPDR0</name>
          </field>
        </fields>
        <name>PUPDR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-only</access>
        <addressOffset>0x10</addressOffset>
        <description>GPIO port input data register</description>
        <displayName>IDR</displayName>
        <fields>
          <field>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR15</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR14</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR13</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR12</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR11</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR10</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR9</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR8</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR7</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR6</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR5</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR4</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR3</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR2</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR1</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port input data (y =
                          0..15)</description>
            <name>IDR0</name>
          </field>
        </fields>
        <name>IDR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x14</addressOffset>
        <description>GPIO port output data register</description>
        <displayName>ODR</displayName>
        <fields>
          <field>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR15</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR14</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR13</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR12</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR11</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR10</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR9</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR8</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR7</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR6</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR5</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR4</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR3</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR2</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR1</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port output data (y =
                          0..15)</description>
            <name>ODR0</name>
          </field>
        </fields>
        <name>ODR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>write-only</access>
        <addressOffset>0x18</addressOffset>
        <description>GPIO port bit set/reset
                  register</description>
        <displayName>BSRR</displayName>
        <fields>
          <field>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x reset bit y (y =
                          0..15)</description>
            <name>BR15</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x reset bit y (y =
                          0..15)</description>
            <name>BR14</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x reset bit y (y =
                          0..15)</description>
            <name>BR13</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x reset bit y (y =
                          0..15)</description>
            <name>BR12</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x reset bit y (y =
                          0..15)</description>
            <name>BR11</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x reset bit y (y =
                          0..15)</description>
            <name>BR10</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x reset bit y (y =
                          0..15)</description>
            <name>BR9</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x reset bit y (y =
                          0..15)</description>
            <name>BR8</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x reset bit y (y =
                          0..15)</description>
            <name>BR7</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x reset bit y (y =
                          0..15)</description>
            <name>BR6</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x reset bit y (y =
                          0..15)</description>
            <name>BR5</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x reset bit y (y =
                          0..15)</description>
            <name>BR4</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x reset bit y (y =
                          0..15)</description>
            <name>BR3</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x reset bit y (y =
                          0..15)</description>
            <name>BR2</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x reset bit y (y =
                          0..15)</description>
            <name>BR1</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BR0</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS15</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS14</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS13</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS12</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS11</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS10</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS9</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS8</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS7</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS6</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS5</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS4</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS3</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS2</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS1</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x set bit y (y=
                          0..15)</description>
            <name>BS0</name>
          </field>
        </fields>
        <name>BSRR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x1C</addressOffset>
        <description>GPIO port configuration lock
                  register</description>
        <displayName>LCKR</displayName>
        <fields>
          <field>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCKK</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK15</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK14</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK13</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK12</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK11</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK10</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK9</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK8</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK7</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK6</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK5</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK4</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK3</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK2</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK1</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port x lock bit y (y=
                          0..15)</description>
            <name>LCK0</name>
          </field>
        </fields>
        <name>LCKR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x20</addressOffset>
        <description>GPIO alternate function low
                  register</description>
        <displayName>AFRL</displayName>
        <fields>
          <field>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 0..7)</description>
            <name>AFSEL7</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 0..7)</description>
            <name>AFSEL6</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 0..7)</description>
            <name>AFSEL5</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 0..7)</description>
            <name>AFSEL4</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 0..7)</description>
            <name>AFSEL3</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 0..7)</description>
            <name>AFSEL2</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 0..7)</description>
            <name>AFSEL1</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 0..7)</description>
            <name>AFSEL0</name>
          </field>
        </fields>
        <name>AFRL</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x24</addressOffset>
        <description>GPIO alternate function high
                  register</description>
        <displayName>AFRH</displayName>
        <fields>
          <field>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 8..15)</description>
            <name>AFSEL15</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 8..15)</description>
            <name>AFSEL14</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 8..15)</description>
            <name>AFSEL13</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 8..15)</description>
            <name>AFSEL12</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 8..15)</description>
            <name>AFSEL11</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 8..15)</description>
            <name>AFSEL10</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 8..15)</description>
            <name>AFSEL9</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Alternate function selection for port x
                          bit y (y = 8..15)</description>
            <name>AFSEL8</name>
          </field>
        </fields>
        <name>AFRH</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>write-only</access>
        <addressOffset>0x28</addressOffset>
        <description>port bit reset register</description>
        <displayName>BRR</displayName>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR0</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR1</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR2</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR3</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR4</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR5</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR6</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR7</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR8</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR9</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR10</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR11</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR12</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR13</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR14</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Port Reset bit</description>
            <name>BR15</name>
          </field>
        </fields>
        <name>BRR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <resetMask>0xFFFFFFFF</resetMask>
    <resetValue>0x0</resetValue>
    <size>0x20</size>
  </peripheral>
</peripherals>
<peripherals>
  <peripheral>
    <addressBlock>
      <offset>0x0</offset>
      <size>0x400</size>
      <usage>registers</usage>
    </addressBlock>
    <baseAddress>0x40007800</baseAddress>
    <description>HDMI-CEC</description>
    <groupName>CEC</groupName>
    <interrupts>
      <interrupt>
        <name>CEC</name>
        <value>0x1E</value>
      </interrupt>
    </interrupts>
    <name>HDMI_CEC</name>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x0</addressOffset>
        <description>CEC control register</description>
        <displayName>CEC_CR</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>CEC enable
            The CECEN bit is set and cleared by software. CECEN = 1 starts message reception and enables the TXSOM control. CECEN = 0 disables the CEC peripheral, clears all bits of CEC_CR register and aborts any on-going reception or transmission.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>CEC peripheral is off.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CEC peripheral is on.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CECEN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Tx start of message
            TXSOM is set by software to command transmission of the first byte of a CEC message. If the CEC message consists of only one byte, TXEOM must be set before of TXSOM.
            Start-bit is effectively started on the CEC line after SFT is counted. If TXSOM is set while a message reception is ongoing, transmission starts after the end of reception.
            TXSOM is cleared by hardware after the last byte of the message is sent with a positive acknowledge (TXEND = 1), in case of transmission underrun (TXUDR = 1), negative acknowledge (TXACKE = 1), and transmission error (TXERR = 1). It is also cleared by CECEN = 0. It is not cleared and transmission is automatically retried in case of arbitration lost (ARBLST = 1).
            TXSOM can be also used as a status bit informing application whether any transmission request is pending or under execution. The application can abort a transmission request at any time by clearing the CECEN bit.
            Note: TXSOM must be set when CECEN = 1.
            TXSOM must be set when transmission data is available into TXDR.
            HEADER first four bits containing own peripheral address are taken from TXDR[7:4], not from CEC_CFGR.OAR that is used only for reception.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No CEC transmission is on-going</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CEC transmission command</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TXSOM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Tx end of message
            The TXEOM bit is set by software to command transmission of the last byte of a CEC message.
            TXEOM is cleared by hardware at the same time and under the same conditions as for TXSOM.
            Note: TXEOM must be set when CECEN = 1.
            TXEOM must be set before writing transmission data to TXDR.
            If TXEOM is set when TXSOM = 0, transmitted message consists of 1 byte (HEADER) only (PING message).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>TXDR data byte is transmitted with EOM = 0  </description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>TXDR data byte is transmitted with EOM = 1  </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TXEOM</name>
          </field>
        </fields>
        <name>CEC_CR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x4</addressOffset>
        <description>This register is used to configure the
                  HDMI-CEC controller. It is mandatory to write CEC_CFGR
                  only when CECEN=0.</description>
        <displayName>CEC_CFGR</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Signal free time
            SFT bits are set by software. In the SFT = 0x0 configuration, the number of nominal data bit periods waited before transmission is ruled by hardware according to the transmission history. In all the other configurations the SFT number is determined by software.
            0x0
            2.5 data-bit periods if CEC is the last bus initiator with unsuccessful transmission (ARBLST = 1, TXERR = 1, TXUDR = 1 or TXACKE = 1)
            4 data-bit periods if CEC is the new bus initiator
            6 data-bit periods if CEC is the last bus initiator with successful transmission (TXEOM = 1)</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>0.5 nominal data bit periods</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>1.5 nominal data bit periods</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>2.5 nominal data bit periods</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>3.5 nominal data bit periods</description>
                <name>B_0x4</name>
                <value>0x4</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>4.5 nominal data bit periods</description>
                <name>B_0x5</name>
                <value>0x5</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>5.5 nominal data bit periods</description>
                <name>B_0x6</name>
                <value>0x6</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>6.5 nominal data bit periods</description>
                <name>B_0x7</name>
                <value>0x7</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>SFT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Rx-tolerance
            The RXTOL bit is set and cleared by software.
            Start-bit, +/- 200 µs rise, +/- 200 µs fall
            Data-bit: +/- 200 µs rise. +/- 350 µs fall
            Start-bit: +/- 400 µs rise, +/- 400 µs fall
            Data-bit: +/-300 µs rise, +/- 500 µs fall</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Standard tolerance margin:</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Extended tolerance</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RXTOL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Rx-stop on bit rising error
            The BRESTP bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>BRE detection does not stop reception of the CEC message. Data bit is sampled at 1.05 ms.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>BRE detection stops message reception.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>BRESTP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Generate error-bit on bit rising error
            The BREGEN bit is set and cleared by software.
            Note: If BRDNOGEN = 0, an error-bit is generated upon BRE detection with BRESTP = 1 in broadcast even if BREGEN = 0.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>BRE detection does not generate an error-bit on the CEC line.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>BRE detection generates an error-bit on the CEC line (if BRESTP is set).</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>BREGEN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Generate error-bit on long bit period error
            The LBPEGEN bit is set and cleared by software.
            Note: If BRDNOGEN = 0, an error-bit is generated upon LBPE detection in broadcast even if LBPEGEN = 0.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>LBPE detection does not generate an error-bit on the CEC line.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>LBPE detection generates an error-bit on the CEC line.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>LBPEGEN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Avoid error-bit generation in broadcast
            The BRDNOGEN bit is set and cleared by software.
            error-bit on the CEC line. LBPE detection with LBPEGEN = 0 on a broadcast message generates an error-bit on the CEC line.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>BRE detection with BRESTP = 1 and BREGEN = 0 on a broadcast message generates an    </description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Error-bit is not generated in the same condition as above. An error-bit is not generated even in case of an SBPE detection in a broadcast message if listen mode is set.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>BRDNOGEN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SFT option bit
            The SFTOPT bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>SFT timer starts when TXSOM is set by software.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>SFT timer starts automatically at the end of message transmission/reception.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>SFTOP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0xF</bitWidth>
            <description>Own addresses configuration
            The OAR bits are set by software to select which destination logical addresses has to be considered in receive mode. Each bit, when set, enables the CEC logical address identified by the given bit position.
            At the end of HEADER reception, the received destination address is compared with the enabled addresses. In case of matching address, the incoming message is acknowledged and received. In case of non-matching address, the incoming message is received only in listen mode (LSTN = 1), but without acknowledge sent. Broadcast messages are always received.
            Example:
            OAR = 0b000 0000 0010 0001 means that CEC acknowledges addresses 0x0 and 0x5. Consequently, each message directed to one of these addresses is received.</description>
            <name>OAR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Listen mode
            LSTN bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>CEC peripheral receives only message addressed to its own address (OAR). Messages addressed to different destination are ignored. Broadcast messages are always received.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CEC peripheral receives messages addressed to its own address (OAR) with positive acknowledge. Messages addressed to different destination are received, but without interfering with the CEC bus: no acknowledge sent.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>LSTN</name>
          </field>
        </fields>
        <name>CEC_CFGR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>write-only</access>
        <addressOffset>0x8</addressOffset>
        <description>CEC Tx data register</description>
        <displayName>CEC_TXDR</displayName>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>Tx Data register. TXD is a write-only
                          register containing the data byte to be transmitted.
                          Note: TXD must be written when
                          TXSTART=1</description>
            <name>TXD</name>
          </field>
        </fields>
        <name>CEC_TXDR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-only</access>
        <addressOffset>0xC</addressOffset>
        <description>CEC Rx Data Register</description>
        <displayName>CEC_RXDR</displayName>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>Rx Data register. RXD is read-only and
                          contains the last data byte which has been received
                          from the CEC line.</description>
            <name>RXD</name>
          </field>
        </fields>
        <name>CEC_RXDR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x10</addressOffset>
        <description>CEC Interrupt and Status
                  Register</description>
        <displayName>CEC_ISR</displayName>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Rx-Byte Received The RXBR bit is set by
                          hardware to inform application that a new byte has
                          been received from the CEC line and stored into the
                          RXD buffer. RXBR is cleared by software write at
                          1.</description>
            <name>RXBR</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>End Of Reception RXEND is set by
                          hardware to inform application that the last byte of
                          a CEC message is received from the CEC line and
                          stored into the RXD buffer. RXEND is set at the same
                          time of RXBR. RXEND is cleared by software write at
                          1.</description>
            <name>RXEND</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Rx-Overrun RXOVR is set by hardware if
                          RXBR is not yet cleared at the time a new byte is
                          received on the CEC line and stored into RXD. RXOVR
                          assertion stops message reception so that no
                          acknowledge is sent. In case of broadcast, a negative
                          acknowledge is sent. RXOVR is cleared by software
                          write at 1.</description>
            <name>RXOVR</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Rx-Bit Rising Error BRE is set by
                          hardware in case a Data-Bit waveform is detected with
                          Bit Rising Error. BRE is set either at the time the
                          misplaced rising edge occurs, or at the end of the
                          maximum BRE tolerance allowed by RXTOL, in case
                          rising edge is still longing. BRE stops message
                          reception if BRESTP=1. BRE generates an Error-Bit on
                          the CEC line if BREGEN=1. BRE is cleared by software
                          write at 1.</description>
            <name>BRE</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Rx-Short Bit Period Error SBPE is set by
                          hardware in case a Data-Bit waveform is detected with
                          Short Bit Period Error. SBPE is set at the time the
                          anticipated falling edge occurs. SBPE generates an
                          Error-Bit on the CEC line. SBPE is cleared by
                          software write at 1.</description>
            <name>SBPE</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Rx-Long Bit Period Error LBPE is set by
                          hardware in case a Data-Bit waveform is detected with
                          Long Bit Period Error. LBPE is set at the end of the
                          maximum bit-extension tolerance allowed by RXTOL, in
                          case falling edge is still longing. LBPE always stops
                          reception of the CEC message. LBPE generates an
                          Error-Bit on the CEC line if LBPEGEN=1. In case of
                          broadcast, Error-Bit is generated even in case of
                          LBPEGEN=0. LBPE is cleared by software write at
                          1.</description>
            <name>LBPE</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Rx-Missing Acknowledge In receive mode,
                          RXACKE is set by hardware to inform application that
                          no acknowledge was seen on the CEC line. RXACKE
                          applies only for broadcast messages and in listen
                          mode also for not directly addressed messages
                          (destination address not enabled in OAR). RXACKE
                          aborts message reception. RXACKE is cleared by
                          software write at 1.</description>
            <name>RXACKE</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Arbitration Lost ARBLST is set by
                          hardware to inform application that CEC device is
                          switching to reception due to arbitration lost event
                          following the TXSOM command. ARBLST can be due either
                          to a contending CEC device starting earlier or
                          starting at the same time but with higher HEADER
                          priority. After ARBLST assertion TXSOM bit keeps
                          pending for next transmission attempt. ARBLST is
                          cleared by software write at 1.</description>
            <name>ARBLST</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Tx-Byte Request TXBR is set by hardware
                          to inform application that the next transmission data
                          has to be written to TXDR. TXBR is set when the 4th
                          bit of currently transmitted byte is sent.
                          Application must write the next byte to TXDR within 6
                          nominal data-bit periods before transmission underrun
                          error occurs (TXUDR). TXBR is cleared by software
                          write at 1.</description>
            <name>TXBR</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>End of Transmission TXEND is set by
                          hardware to inform application that the last byte of
                          the CEC message has been successfully transmitted.
                          TXEND clears the TXSOM and TXEOM control bits. TXEND
                          is cleared by software write at 1.</description>
            <name>TXEND</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Tx-Buffer Underrun In transmission mode,
                          TXUDR is set by hardware if application was not in
                          time to load TXDR before of next byte transmission.
                          TXUDR aborts message transmission and clears TXSOM
                          and TXEOM control bits. TXUDR is cleared by software
                          write at 1</description>
            <name>TXUDR</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Tx-Error In transmission mode, TXERR is
                          set by hardware if the CEC initiator detects low
                          impedance on the CEC line while it is released. TXERR
                          aborts message transmission and clears TXSOM and
                          TXEOM controls. TXERR is cleared by software write at
                          1.</description>
            <name>TXERR</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Tx-Missing Acknowledge Error In
                          transmission mode, TXACKE is set by hardware to
                          inform application that no acknowledge was received.
                          In case of broadcast transmission, TXACKE informs
                          application that a negative acknowledge was received.
                          TXACKE aborts message transmission and clears TXSOM
                          and TXEOM controls. TXACKE is cleared by software
                          write at 1.</description>
            <name>TXACKE</name>
          </field>
        </fields>
        <name>CEC_ISR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x14</addressOffset>
        <description>CEC interrupt enable register</description>
        <displayName>CEC_IER</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Rx-byte received interrupt enable
            The RXBRIE bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>RXBR interrupt disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>RXBR interrupt enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RXBRIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>End of reception interrupt enable
            The RXENDIE bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>RXEND interrupt disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>RXEND interrupt enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RXENDIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Rx-buffer overrun interrupt enable
            The RXOVRIE bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>RXOVR interrupt disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>RXOVR interrupt enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RXOVRIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bit rising error interrupt enable
            The BREIE bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>BRE interrupt disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>BRE interrupt enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>BREIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Short bit period error interrupt enable
            The SBPEIE bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>SBPE interrupt disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>SBPE interrupt enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>SBPEIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Long bit period error interrupt enable
            The LBPEIE bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>LBPE interrupt disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>LBPE interrupt enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>LBPEIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Rx-missing acknowledge error interrupt enable
            The RXACKIE bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>RXACKE interrupt disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>RXACKE interrupt enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RXACKIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Arbitration lost interrupt enable
            The ARBLSTIE bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>ARBLST interrupt disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>ARBLST interrupt enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>ARBLSTIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Tx-byte request interrupt enable
            The TXBRIE bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>TXBR interrupt disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>TXBR interrupt enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TXBRIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Tx-end of message interrupt enable
            The TXENDIE bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>TXEND interrupt disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>TXEND interrupt enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TXENDIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Tx-underrun interrupt enable
            The TXUDRIE bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>TXUDR interrupt disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>TXUDR interrupt enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TXUDRIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Tx-error interrupt enable
            The TXERRIE bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>TXERR interrupt disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>TXERR interrupt enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TXERRIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Tx-missing acknowledge error interrupt enable
            The TXACKEIE bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>TXACKE interrupt disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>TXACKE interrupt enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TXACKIE</name>
          </field>
        </fields>
        <name>CEC_IER</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <resetMask>0xFFFFFFFF</resetMask>
    <resetValue>0x0</resetValue>
    <size>0x20</size>
  </peripheral>
</peripherals>
<peripherals>
  <peripheral>
    <addressBlock>
      <offset>0x0</offset>
      <size>0x400</size>
      <usage>registers</usage>
    </addressBlock>
    <baseAddress>0x40005400</baseAddress>
    <description>Inter-integrated circuit</description>
    <groupName>I2C</groupName>
    <interrupts>
      <interrupt>
        <name>I2C1</name>
        <value>0x17</value>
      </interrupt>
    </interrupts>
    <name>I2C1</name>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x0</addressOffset>
        <description>Control register 1</description>
        <displayName>I2C_CR1</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Peripheral enable
            Note: When PE=0, the I2C SCL and SDA lines are released. Internal state machines and status bits are put back to their reset value. When cleared, PE must be kept low for at least 3 APB clock cycles.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Peripheral disable</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Peripheral enable</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>PE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>TX Interrupt enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Transmit (TXIS) interrupt disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Transmit (TXIS) interrupt enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TXIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RX Interrupt enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receive (RXNE) interrupt disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receive (RXNE) interrupt enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RXIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Address match Interrupt enable (slave only)</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Address match (ADDR) interrupts disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Address match (ADDR) interrupts enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>ADDRIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Not acknowledge received Interrupt enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Not acknowledge (NACKF) received interrupts disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Not acknowledge (NACKF) received interrupts enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>NACKIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Stop detection Interrupt enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Stop detection (STOPF) interrupt disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Stop detection (STOPF) interrupt enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>STOPIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transfer Complete interrupt enable
            Note: Any of these events generate an interrupt:
            Transfer Complete (TC)
            Transfer Complete Reload (TCR)</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Transfer Complete interrupt disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Transfer Complete interrupt enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TCIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Error interrupts enable
            Note: Any of these errors generate an interrupt:
            Arbitration Loss (ARLO)
            Bus Error detection (BERR)
            Overrun/Underrun (OVR)
            Timeout detection (TIMEOUT)
            PEC error detection (PECERR)
            Alert pin event detection (ALERT)</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Error detection interrupts disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Error detection interrupts enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>ERRIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Digital noise filter
            These bits are used to configure the digital noise filter on SDA and SCL input. The digital filter, filters spikes with a length of up to DNF[3:0] * tI2CCLK
            ...
            Note: If the analog filter is also enabled, the digital filter is added to the analog filter.
            This filter can only be programmed when the I2C is disabled (PE = 0).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Digital filter disabled </description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Digital filter enabled and filtering capability up to 1 tI2CCLK</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>digital filter enabled and filtering capability up to15 tI2CCLK</description>
                <name>B_0xF</name>
                <value>0xF</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>DNF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Analog noise filter OFF
            Note: This bit can only be programmed when the I2C is disabled (PE = 0).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Analog noise filter enabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Analog noise filter disabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>ANFOFF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>DMA transmission requests enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>DMA mode disabled for transmission</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>DMA mode enabled for transmission</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TXDMAEN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>DMA reception requests enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>DMA mode disabled for reception</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>DMA mode enabled for reception</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RXDMAEN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Slave byte control
            This bit is used to enable hardware byte control in slave mode.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Slave byte control disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Slave byte control enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>SBC</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Clock stretching disable
            This bit is used to disable clock stretching in slave mode. It must be kept cleared in master mode.
            Note: This bit can only be programmed when the I2C is disabled (PE = 0).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Clock stretching enabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Clock stretching disabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>NOSTRETCH</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Wakeup from Stop mode enable
            Note: If the Wakeup from Stop mode feature is not supported, this bit is reserved and forced by hardware to '0â. Refer to .
            Note: WUPEN can be set only when DNF = '0000â</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Wakeup from Stop mode disable.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Wakeup from Stop mode enable.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>WUPEN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>General call enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>General call disabled. Address 0b00000000 is NACKed.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>General call enabled. Address 0b00000000 is ACKed.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>GCEN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SMBus Host Address enable
            Note: If the SMBus feature is not supported, this bit is reserved and forced by hardware to '0â. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Host Address disabled. Address 0b0001000x is NACKed.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Host Address enabled. Address 0b0001000x is ACKed.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>SMBHEN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SMBus Device Default Address enable
            Note: If the SMBus feature is not supported, this bit is reserved and forced by hardware to '0â. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Device Default Address disabled. Address 0b1100001x is NACKed.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Device Default Address enabled. Address 0b1100001x is ACKed.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>SMBDEN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SMBus alert enable
            Note: When ALERTEN=0, the SMBA pin can be used as a standard GPIO.
            If the SMBus feature is not supported, this bit is reserved and forced by hardware to '0â. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>The SMBus alert pin (SMBA) is not supported in host mode (SMBHEN=1). In device mode (SMBHEN=0), the SMBA pin is released and the Alert Response Address header is disabled (0001100x followed by NACK). </description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>The SMBus alert pin is supported in host mode (SMBHEN=1). In device mode (SMBHEN=0), the SMBA pin is driven low and the Alert Response Address header is enabled (0001100x followed by ACK).</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>ALERTEN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>PEC enable
            Note: If the SMBus feature is not supported, this bit is reserved and forced by hardware to '0â. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>PEC calculation disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>PEC calculation enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>PECEN</name>
          </field>
        </fields>
        <name>I2C_CR1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x4</addressOffset>
        <description>Control register 2</description>
        <displayName>I2C_CR2</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>Slave address (master mode)
            In 7-bit addressing mode (ADD10 = 0):
            SADD[7:1] should be written with the 7-bit slave address to be sent. The bits SADD[9], SADD[8] and SADD[0] are don't care.
            In 10-bit addressing mode (ADD10 = 1):
            SADD[9:0] should be written with the 10-bit slave address to be sent.
            Note: Changing these bits when the START bit is set is not allowed.</description>
            <name>SADD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transfer direction (master mode)
            Note: Changing this bit when the START bit is set is not allowed.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Master requests a write transfer.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Master requests a read transfer.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RD_WRN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>10-bit addressing mode (master mode)
            Note: Changing this bit when the START bit is set is not allowed.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>The master operates in 7-bit addressing mode,</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>The master operates in 10-bit addressing mode</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>ADD10</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>10-bit address header only read direction (master receiver mode)
            Note: Changing this bit when the START bit is set is not allowed.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>The master sends the complete 10 bit slave address read sequence: Start + 2 bytes 10bit address in write direction + Restart + 1st 7 bits of the 10 bit address in read direction.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>The master only sends the 1st 7 bits of the 10 bit address, followed by Read direction.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>HEAD10R</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Start generation
            This bit is set by software, and cleared by hardware after the Start followed by the address sequence is sent, by an arbitration loss, by a timeout error detection, or when PE = 0. It can also be cleared by software by writing '1â to the ADDRCF bit in the I2C_ICR register.
            If the I2C is already in master mode with AUTOEND = 0, setting this bit generates a Repeated Start condition when RELOAD=0, after the end of the NBYTES transfer.
            Otherwise setting this bit generates a START condition once the bus is free.
            Note: Writing '0â to this bit has no effect.
            The START bit can be set even if the bus is BUSY or I2C is in slave mode.
            This bit has no effect when RELOAD is set.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No Start generation.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Restart/Start generation:</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>START</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Stop generation (master mode)
            The bit is set by software, cleared by hardware when a STOP condition is detected, or when PE = 0.
            In Master Mode:
            Note: Writing '0â to this bit has no effect.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No Stop generation.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Stop generation after current byte transfer.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>STOP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>NACK generation (slave mode)
            The bit is set by software, cleared by hardware when the NACK is sent, or when a STOP condition or an Address matched is received, or when PE=0.
            Note: Writing '0â to this bit has no effect.
            This bit is used in slave mode only: in master receiver mode, NACK is automatically generated after last byte preceding STOP or RESTART condition, whatever the NACK bit value.
            When an overrun occurs in slave receiver NOSTRETCH mode, a NACK is automatically generated whatever the NACK bit value.
            When hardware PEC checking is enabled (PECBYTE=1), the PEC acknowledge value does not depend on the NACK value.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>an ACK is sent after current received byte.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>a NACK is sent after current received byte.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>NACK</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>Number of bytes
            The number of bytes to be transmitted/received is programmed there. This field is donât care in slave mode with SBC=0.
            Note: Changing these bits when the START bit is set is not allowed.</description>
            <name>NBYTES</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>NBYTES reload mode
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>The transfer is completed after the NBYTES data transfer (STOP or RESTART follows).</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>The transfer is not completed after the NBYTES data transfer (NBYTES is reloaded). TCR flag is set when NBYTES data are transferred, stretching SCL low.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RELOAD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Automatic end mode (master mode)
            This bit is set and cleared by software.
            Note: This bit has no effect in slave mode or when the RELOAD bit is set.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>software end mode: TC flag is set when NBYTES data are transferred, stretching SCL low.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Automatic end mode: a STOP condition is automatically sent when NBYTES data are transferred.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>AUTOEND</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Packet error checking byte
            This bit is set by software, and cleared by hardware when the PEC is transferred, or when a STOP condition or an Address matched is received, also when PE=0.
            Note: Writing '0â to this bit has no effect.
            This bit has no effect when RELOAD is set.
            This bit has no effect is slave mode when SBC=0.
            If the SMBus feature is not supported, this bit is reserved and forced by hardware to '0â. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No PEC transfer.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>PEC transmission/reception is requested</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>PECBYTE</name>
          </field>
        </fields>
        <name>I2C_CR2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x8</addressOffset>
        <description>Own address register 1</description>
        <displayName>I2C_OAR1</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>Interface own slave address
            7-bit addressing mode: OA1[7:1] contains the 7-bit own slave address. The bits OA1[9], OA1[8] and OA1[0] are don't care.
            10-bit addressing mode: OA1[9:0] contains the 10-bit own slave address.
            Note: These bits can be written only when OA1EN=0.</description>
            <name>OA1</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Own Address 1 10-bit mode
            Note: This bit can be written only when OA1EN=0.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Own address 1 is a 7-bit address.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Own address 1 is a 10-bit address.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>OA1MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Own Address 1 enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Own address 1 disabled. The received slave address OA1 is NACKed.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Own address 1 enabled. The received slave address OA1 is ACKed.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>OA1EN</name>
          </field>
        </fields>
        <name>I2C_OAR1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0xC</addressOffset>
        <description>Own address register 2</description>
        <displayName>I2C_OAR2</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x7</bitWidth>
            <description>Interface address
            7-bit addressing mode: 7-bit address
            Note: These bits can be written only when OA2EN=0.</description>
            <name>OA2</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Own Address 2 masks
            Note: These bits can be written only when OA2EN=0.
            As soon as OA2MSK is not equal to 0, the reserved I2C addresses (0b0000xxx and 0b1111xxx) are not acknowledged even if the comparison matches.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No mask</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>OA2[1] is masked and donât care. Only OA2[7:2] are compared.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>OA2[2:1] are masked and donât care. Only OA2[7:3] are compared.</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>OA2[3:1] are masked and donât care. Only OA2[7:4] are compared.</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>OA2[4:1] are masked and donât care. Only OA2[7:5] are compared.</description>
                <name>B_0x4</name>
                <value>0x4</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>OA2[5:1] are masked and donât care. Only OA2[7:6] are compared.</description>
                <name>B_0x5</name>
                <value>0x5</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>OA2[6:1] are masked and donât care. Only OA2[7] is compared.</description>
                <name>B_0x6</name>
                <value>0x6</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>OA2[7:1] are masked and donât care. No comparison is done, and all (except reserved) 7-bit received addresses are acknowledged.</description>
                <name>B_0x7</name>
                <value>0x7</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>OA2MSK</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Own Address 2 enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Own address 2 disabled. The received slave address OA2 is NACKed.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Own address 2 enabled. The received slave address OA2 is ACKed.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>OA2EN</name>
          </field>
        </fields>
        <name>I2C_OAR2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x10</addressOffset>
        <description>Timing register</description>
        <displayName>I2C_TIMINGR</displayName>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>SCL low period (master
                          mode)</description>
            <name>SCLL</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>SCL high period (master
                          mode)</description>
            <name>SCLH</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Data hold time</description>
            <name>SDADEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Data setup time</description>
            <name>SCLDEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Timing prescaler</description>
            <name>PRESC</name>
          </field>
        </fields>
        <name>I2C_TIMINGR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x14</addressOffset>
        <description>Status register 1</description>
        <displayName>I2C_TIMEOUTR</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xC</bitWidth>
            <description>Bus Timeout A
            This field is used to configure:
            The SCL low timeout condition tTIMEOUT when TIDLE=0
            tTIMEOUT= (TIMEOUTA+1) x 2048 x tI2CCLK
            The bus idle condition (both SCL and SDA high) when TIDLE=1
            tIDLE= (TIMEOUTA+1) x 4 x tI2CCLK
            Note: These bits can be written only when TIMOUTEN=0.</description>
            <name>TIMEOUTA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Idle clock timeout detection
            Note: This bit can be written only when TIMOUTEN=0.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>TIMEOUTA is used to detect SCL low timeout</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>TIMEOUTA is used to detect both SCL and SDA high timeout (bus idle condition)</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TIDLE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Clock timeout enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>SCL timeout detection is disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>SCL timeout detection is enabled: when SCL is low for more than tTIMEOUT (TIDLE=0) or high for more than tIDLE (TIDLE=1), a timeout error is detected (TIMEOUT=1).</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TIMOUTEN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0xC</bitWidth>
            <description>Bus timeout B
            This field is used to configure the cumulative clock extension timeout:
            In master mode, the master cumulative clock low extend time (tLOW:MEXT) is detected
            In slave mode, the slave cumulative clock low extend time (tLOW:SEXT) is detected
            tLOW:EXT= (TIMEOUTB+1) x 2048 x tI2CCLK
            Note: These bits can be written only when TEXTEN=0.</description>
            <name>TIMEOUTB</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Extended clock timeout enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Extended clock timeout detection is disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Extended clock timeout detection is enabled. When a cumulative SCL stretch for more than tLOW:EXT is done by the I2C interface, a timeout error is detected (TIMEOUT=1).</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TEXTEN</name>
          </field>
        </fields>
        <name>I2C_TIMEOUTR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x18</addressOffset>
        <description>Interrupt and Status register</description>
        <displayName>I2C_ISR</displayName>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x7</bitWidth>
            <description>Address match code (Slave
                          mode)</description>
            <name>ADDCODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transfer direction (Slave mode)
            This flag is updated when an address match event occurs (ADDR=1).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Write transfer, slave enters receiver mode.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Read transfer, slave enters transmitter mode.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>DIR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bus busy</description>
            <name>BUSY</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SMBus alert</description>
            <name>ALERT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Timeout or t_low detection
                          flag</description>
            <name>TIMEOUT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>PEC Error in reception</description>
            <name>PECERR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Overrun/Underrun (slave
                          mode)</description>
            <name>OVR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Arbitration lost</description>
            <name>ARLO</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bus error</description>
            <name>BERR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transfer Complete Reload</description>
            <name>TCR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transfer Complete (master
                          mode)</description>
            <name>TC</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Stop detection flag</description>
            <name>STOPF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Not acknowledge received
                          flag</description>
            <name>NACKF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Address matched (slave
                          mode)</description>
            <name>ADDR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receive data register not empty
                          (receivers)</description>
            <name>RXNE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmit interrupt status
                          (transmitters)</description>
            <name>TXIS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmit data register empty
                          (transmitters)</description>
            <name>TXE</name>
          </field>
        </fields>
        <name>I2C_ISR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x1</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>write-only</access>
        <addressOffset>0x1C</addressOffset>
        <description>Interrupt clear register</description>
        <displayName>I2C_ICR</displayName>
        <fields>
          <field>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Alert flag clear</description>
            <name>ALERTCF</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Timeout detection flag
                          clear</description>
            <name>TIMOUTCF</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>PEC Error flag clear</description>
            <name>PECCF</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Overrun/Underrun flag
                          clear</description>
            <name>OVRCF</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Arbitration lost flag
                          clear</description>
            <name>ARLOCF</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bus error flag clear</description>
            <name>BERRCF</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Stop detection flag clear</description>
            <name>STOPCF</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Not Acknowledge flag clear</description>
            <name>NACKCF</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Address Matched flag clear</description>
            <name>ADDRCF</name>
          </field>
        </fields>
        <name>I2C_ICR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-only</access>
        <addressOffset>0x20</addressOffset>
        <description>PEC register</description>
        <displayName>I2C_PECR</displayName>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>Packet error checking
                          register</description>
            <name>PEC</name>
          </field>
        </fields>
        <name>I2C_PECR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-only</access>
        <addressOffset>0x24</addressOffset>
        <description>Receive data register</description>
        <displayName>I2C_RXDR</displayName>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>8-bit receive data</description>
            <name>RXDATA</name>
          </field>
        </fields>
        <name>I2C_RXDR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x28</addressOffset>
        <description>Transmit data register</description>
        <displayName>I2C_TXDR</displayName>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>8-bit transmit data</description>
            <name>TXDATA</name>
          </field>
        </fields>
        <name>I2C_TXDR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <resetMask>0xFFFFFFFF</resetMask>
    <resetValue>0x0</resetValue>
    <size>0x20</size>
  </peripheral>
</peripherals>
<peripherals>
  <peripheral>
    <addressBlock>
      <offset>0x0</offset>
      <size>0x400</size>
      <usage>registers</usage>
    </addressBlock>
    <baseAddress>0x40005800</baseAddress>
    <derivedFrom>I2C1</derivedFrom>
    <description>Inter-integrated circuit</description>
    <groupName>I2C</groupName>
    <interrupts>
      <interrupt>
        <name>I2C2</name>
        <value>0x18</value>
      </interrupt>
    </interrupts>
    <name>I2C2</name>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x0</addressOffset>
        <description>Control register 1</description>
        <displayName>I2C_CR1</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Peripheral enable
            Note: When PE=0, the I2C SCL and SDA lines are released. Internal state machines and status bits are put back to their reset value. When cleared, PE must be kept low for at least 3 APB clock cycles.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Peripheral disable</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Peripheral enable</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>PE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>TX Interrupt enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Transmit (TXIS) interrupt disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Transmit (TXIS) interrupt enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TXIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RX Interrupt enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receive (RXNE) interrupt disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receive (RXNE) interrupt enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RXIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Address match Interrupt enable (slave only)</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Address match (ADDR) interrupts disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Address match (ADDR) interrupts enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>ADDRIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Not acknowledge received Interrupt enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Not acknowledge (NACKF) received interrupts disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Not acknowledge (NACKF) received interrupts enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>NACKIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Stop detection Interrupt enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Stop detection (STOPF) interrupt disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Stop detection (STOPF) interrupt enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>STOPIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transfer Complete interrupt enable
            Note: Any of these events generate an interrupt:
            Transfer Complete (TC)
            Transfer Complete Reload (TCR)</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Transfer Complete interrupt disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Transfer Complete interrupt enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TCIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Error interrupts enable
            Note: Any of these errors generate an interrupt:
            Arbitration Loss (ARLO)
            Bus Error detection (BERR)
            Overrun/Underrun (OVR)
            Timeout detection (TIMEOUT)
            PEC error detection (PECERR)
            Alert pin event detection (ALERT)</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Error detection interrupts disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Error detection interrupts enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>ERRIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Digital noise filter
            These bits are used to configure the digital noise filter on SDA and SCL input. The digital filter, filters spikes with a length of up to DNF[3:0] * tI2CCLK
            ...
            Note: If the analog filter is also enabled, the digital filter is added to the analog filter.
            This filter can only be programmed when the I2C is disabled (PE = 0).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Digital filter disabled </description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Digital filter enabled and filtering capability up to 1 tI2CCLK</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>digital filter enabled and filtering capability up to15 tI2CCLK</description>
                <name>B_0xF</name>
                <value>0xF</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>DNF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Analog noise filter OFF
            Note: This bit can only be programmed when the I2C is disabled (PE = 0).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Analog noise filter enabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Analog noise filter disabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>ANFOFF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>DMA transmission requests enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>DMA mode disabled for transmission</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>DMA mode enabled for transmission</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TXDMAEN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>DMA reception requests enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>DMA mode disabled for reception</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>DMA mode enabled for reception</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RXDMAEN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Slave byte control
            This bit is used to enable hardware byte control in slave mode.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Slave byte control disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Slave byte control enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>SBC</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Clock stretching disable
            This bit is used to disable clock stretching in slave mode. It must be kept cleared in master mode.
            Note: This bit can only be programmed when the I2C is disabled (PE = 0).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Clock stretching enabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Clock stretching disabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>NOSTRETCH</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Wakeup from Stop mode enable
            Note: If the Wakeup from Stop mode feature is not supported, this bit is reserved and forced by hardware to '0â. Refer to .
            Note: WUPEN can be set only when DNF = '0000â</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Wakeup from Stop mode disable.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Wakeup from Stop mode enable.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>WUPEN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>General call enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>General call disabled. Address 0b00000000 is NACKed.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>General call enabled. Address 0b00000000 is ACKed.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>GCEN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SMBus Host Address enable
            Note: If the SMBus feature is not supported, this bit is reserved and forced by hardware to '0â. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Host Address disabled. Address 0b0001000x is NACKed.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Host Address enabled. Address 0b0001000x is ACKed.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>SMBHEN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SMBus Device Default Address enable
            Note: If the SMBus feature is not supported, this bit is reserved and forced by hardware to '0â. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Device Default Address disabled. Address 0b1100001x is NACKed.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Device Default Address enabled. Address 0b1100001x is ACKed.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>SMBDEN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SMBus alert enable
            Note: When ALERTEN=0, the SMBA pin can be used as a standard GPIO.
            If the SMBus feature is not supported, this bit is reserved and forced by hardware to '0â. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>The SMBus alert pin (SMBA) is not supported in host mode (SMBHEN=1). In device mode (SMBHEN=0), the SMBA pin is released and the Alert Response Address header is disabled (0001100x followed by NACK). </description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>The SMBus alert pin is supported in host mode (SMBHEN=1). In device mode (SMBHEN=0), the SMBA pin is driven low and the Alert Response Address header is enabled (0001100x followed by ACK).</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>ALERTEN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>PEC enable
            Note: If the SMBus feature is not supported, this bit is reserved and forced by hardware to '0â. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>PEC calculation disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>PEC calculation enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>PECEN</name>
          </field>
        </fields>
        <name>I2C_CR1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x4</addressOffset>
        <description>Control register 2</description>
        <displayName>I2C_CR2</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>Slave address (master mode)
            In 7-bit addressing mode (ADD10 = 0):
            SADD[7:1] should be written with the 7-bit slave address to be sent. The bits SADD[9], SADD[8] and SADD[0] are don't care.
            In 10-bit addressing mode (ADD10 = 1):
            SADD[9:0] should be written with the 10-bit slave address to be sent.
            Note: Changing these bits when the START bit is set is not allowed.</description>
            <name>SADD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transfer direction (master mode)
            Note: Changing this bit when the START bit is set is not allowed.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Master requests a write transfer.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Master requests a read transfer.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RD_WRN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>10-bit addressing mode (master mode)
            Note: Changing this bit when the START bit is set is not allowed.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>The master operates in 7-bit addressing mode,</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>The master operates in 10-bit addressing mode</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>ADD10</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>10-bit address header only read direction (master receiver mode)
            Note: Changing this bit when the START bit is set is not allowed.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>The master sends the complete 10 bit slave address read sequence: Start + 2 bytes 10bit address in write direction + Restart + 1st 7 bits of the 10 bit address in read direction.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>The master only sends the 1st 7 bits of the 10 bit address, followed by Read direction.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>HEAD10R</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Start generation
            This bit is set by software, and cleared by hardware after the Start followed by the address sequence is sent, by an arbitration loss, by a timeout error detection, or when PE = 0. It can also be cleared by software by writing '1â to the ADDRCF bit in the I2C_ICR register.
            If the I2C is already in master mode with AUTOEND = 0, setting this bit generates a Repeated Start condition when RELOAD=0, after the end of the NBYTES transfer.
            Otherwise setting this bit generates a START condition once the bus is free.
            Note: Writing '0â to this bit has no effect.
            The START bit can be set even if the bus is BUSY or I2C is in slave mode.
            This bit has no effect when RELOAD is set.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No Start generation.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Restart/Start generation:</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>START</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Stop generation (master mode)
            The bit is set by software, cleared by hardware when a STOP condition is detected, or when PE = 0.
            In Master Mode:
            Note: Writing '0â to this bit has no effect.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No Stop generation.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Stop generation after current byte transfer.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>STOP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>NACK generation (slave mode)
            The bit is set by software, cleared by hardware when the NACK is sent, or when a STOP condition or an Address matched is received, or when PE=0.
            Note: Writing '0â to this bit has no effect.
            This bit is used in slave mode only: in master receiver mode, NACK is automatically generated after last byte preceding STOP or RESTART condition, whatever the NACK bit value.
            When an overrun occurs in slave receiver NOSTRETCH mode, a NACK is automatically generated whatever the NACK bit value.
            When hardware PEC checking is enabled (PECBYTE=1), the PEC acknowledge value does not depend on the NACK value.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>an ACK is sent after current received byte.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>a NACK is sent after current received byte.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>NACK</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>Number of bytes
            The number of bytes to be transmitted/received is programmed there. This field is donât care in slave mode with SBC=0.
            Note: Changing these bits when the START bit is set is not allowed.</description>
            <name>NBYTES</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>NBYTES reload mode
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>The transfer is completed after the NBYTES data transfer (STOP or RESTART follows).</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>The transfer is not completed after the NBYTES data transfer (NBYTES is reloaded). TCR flag is set when NBYTES data are transferred, stretching SCL low.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RELOAD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Automatic end mode (master mode)
            This bit is set and cleared by software.
            Note: This bit has no effect in slave mode or when the RELOAD bit is set.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>software end mode: TC flag is set when NBYTES data are transferred, stretching SCL low.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Automatic end mode: a STOP condition is automatically sent when NBYTES data are transferred.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>AUTOEND</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Packet error checking byte
            This bit is set by software, and cleared by hardware when the PEC is transferred, or when a STOP condition or an Address matched is received, also when PE=0.
            Note: Writing '0â to this bit has no effect.
            This bit has no effect when RELOAD is set.
            This bit has no effect is slave mode when SBC=0.
            If the SMBus feature is not supported, this bit is reserved and forced by hardware to '0â. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No PEC transfer.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>PEC transmission/reception is requested</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>PECBYTE</name>
          </field>
        </fields>
        <name>I2C_CR2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x8</addressOffset>
        <description>Own address register 1</description>
        <displayName>I2C_OAR1</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xA</bitWidth>
            <description>Interface own slave address
            7-bit addressing mode: OA1[7:1] contains the 7-bit own slave address. The bits OA1[9], OA1[8] and OA1[0] are don't care.
            10-bit addressing mode: OA1[9:0] contains the 10-bit own slave address.
            Note: These bits can be written only when OA1EN=0.</description>
            <name>OA1</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Own Address 1 10-bit mode
            Note: This bit can be written only when OA1EN=0.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Own address 1 is a 7-bit address.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Own address 1 is a 10-bit address.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>OA1MODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Own Address 1 enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Own address 1 disabled. The received slave address OA1 is NACKed.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Own address 1 enabled. The received slave address OA1 is ACKed.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>OA1EN</name>
          </field>
        </fields>
        <name>I2C_OAR1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0xC</addressOffset>
        <description>Own address register 2</description>
        <displayName>I2C_OAR2</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x7</bitWidth>
            <description>Interface address
            7-bit addressing mode: 7-bit address
            Note: These bits can be written only when OA2EN=0.</description>
            <name>OA2</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Own Address 2 masks
            Note: These bits can be written only when OA2EN=0.
            As soon as OA2MSK is not equal to 0, the reserved I2C addresses (0b0000xxx and 0b1111xxx) are not acknowledged even if the comparison matches.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No mask</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>OA2[1] is masked and donât care. Only OA2[7:2] are compared.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>OA2[2:1] are masked and donât care. Only OA2[7:3] are compared.</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>OA2[3:1] are masked and donât care. Only OA2[7:4] are compared.</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>OA2[4:1] are masked and donât care. Only OA2[7:5] are compared.</description>
                <name>B_0x4</name>
                <value>0x4</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>OA2[5:1] are masked and donât care. Only OA2[7:6] are compared.</description>
                <name>B_0x5</name>
                <value>0x5</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>OA2[6:1] are masked and donât care. Only OA2[7] is compared.</description>
                <name>B_0x6</name>
                <value>0x6</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>OA2[7:1] are masked and donât care. No comparison is done, and all (except reserved) 7-bit received addresses are acknowledged.</description>
                <name>B_0x7</name>
                <value>0x7</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>OA2MSK</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Own Address 2 enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Own address 2 disabled. The received slave address OA2 is NACKed.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Own address 2 enabled. The received slave address OA2 is ACKed.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>OA2EN</name>
          </field>
        </fields>
        <name>I2C_OAR2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x10</addressOffset>
        <description>Timing register</description>
        <displayName>I2C_TIMINGR</displayName>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>SCL low period (master
                          mode)</description>
            <name>SCLL</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>SCL high period (master
                          mode)</description>
            <name>SCLH</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Data hold time</description>
            <name>SDADEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Data setup time</description>
            <name>SCLDEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Timing prescaler</description>
            <name>PRESC</name>
          </field>
        </fields>
        <name>I2C_TIMINGR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x14</addressOffset>
        <description>Status register 1</description>
        <displayName>I2C_TIMEOUTR</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xC</bitWidth>
            <description>Bus Timeout A
            This field is used to configure:
            The SCL low timeout condition tTIMEOUT when TIDLE=0
            tTIMEOUT= (TIMEOUTA+1) x 2048 x tI2CCLK
            The bus idle condition (both SCL and SDA high) when TIDLE=1
            tIDLE= (TIMEOUTA+1) x 4 x tI2CCLK
            Note: These bits can be written only when TIMOUTEN=0.</description>
            <name>TIMEOUTA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Idle clock timeout detection
            Note: This bit can be written only when TIMOUTEN=0.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>TIMEOUTA is used to detect SCL low timeout</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>TIMEOUTA is used to detect both SCL and SDA high timeout (bus idle condition)</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TIDLE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Clock timeout enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>SCL timeout detection is disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>SCL timeout detection is enabled: when SCL is low for more than tTIMEOUT (TIDLE=0) or high for more than tIDLE (TIDLE=1), a timeout error is detected (TIMEOUT=1).</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TIMOUTEN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0xC</bitWidth>
            <description>Bus timeout B
            This field is used to configure the cumulative clock extension timeout:
            In master mode, the master cumulative clock low extend time (tLOW:MEXT) is detected
            In slave mode, the slave cumulative clock low extend time (tLOW:SEXT) is detected
            tLOW:EXT= (TIMEOUTB+1) x 2048 x tI2CCLK
            Note: These bits can be written only when TEXTEN=0.</description>
            <name>TIMEOUTB</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Extended clock timeout enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Extended clock timeout detection is disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Extended clock timeout detection is enabled. When a cumulative SCL stretch for more than tLOW:EXT is done by the I2C interface, a timeout error is detected (TIMEOUT=1).</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TEXTEN</name>
          </field>
        </fields>
        <name>I2C_TIMEOUTR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x18</addressOffset>
        <description>Interrupt and Status register</description>
        <displayName>I2C_ISR</displayName>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x7</bitWidth>
            <description>Address match code (Slave
                          mode)</description>
            <name>ADDCODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transfer direction (Slave mode)
            This flag is updated when an address match event occurs (ADDR=1).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Write transfer, slave enters receiver mode.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Read transfer, slave enters transmitter mode.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>DIR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bus busy</description>
            <name>BUSY</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SMBus alert</description>
            <name>ALERT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Timeout or t_low detection
                          flag</description>
            <name>TIMEOUT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>PEC Error in reception</description>
            <name>PECERR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Overrun/Underrun (slave
                          mode)</description>
            <name>OVR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Arbitration lost</description>
            <name>ARLO</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bus error</description>
            <name>BERR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transfer Complete Reload</description>
            <name>TCR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transfer Complete (master
                          mode)</description>
            <name>TC</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Stop detection flag</description>
            <name>STOPF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Not acknowledge received
                          flag</description>
            <name>NACKF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Address matched (slave
                          mode)</description>
            <name>ADDR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receive data register not empty
                          (receivers)</description>
            <name>RXNE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmit interrupt status
                          (transmitters)</description>
            <name>TXIS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmit data register empty
                          (transmitters)</description>
            <name>TXE</name>
          </field>
        </fields>
        <name>I2C_ISR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x1</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>write-only</access>
        <addressOffset>0x1C</addressOffset>
        <description>Interrupt clear register</description>
        <displayName>I2C_ICR</displayName>
        <fields>
          <field>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Alert flag clear</description>
            <name>ALERTCF</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Timeout detection flag
                          clear</description>
            <name>TIMOUTCF</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>PEC Error flag clear</description>
            <name>PECCF</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Overrun/Underrun flag
                          clear</description>
            <name>OVRCF</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Arbitration lost flag
                          clear</description>
            <name>ARLOCF</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Bus error flag clear</description>
            <name>BERRCF</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Stop detection flag clear</description>
            <name>STOPCF</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Not Acknowledge flag clear</description>
            <name>NACKCF</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Address Matched flag clear</description>
            <name>ADDRCF</name>
          </field>
        </fields>
        <name>I2C_ICR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-only</access>
        <addressOffset>0x20</addressOffset>
        <description>PEC register</description>
        <displayName>I2C_PECR</displayName>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>Packet error checking
                          register</description>
            <name>PEC</name>
          </field>
        </fields>
        <name>I2C_PECR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-only</access>
        <addressOffset>0x24</addressOffset>
        <description>Receive data register</description>
        <displayName>I2C_RXDR</displayName>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>8-bit receive data</description>
            <name>RXDATA</name>
          </field>
        </fields>
        <name>I2C_RXDR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x28</addressOffset>
        <description>Transmit data register</description>
        <displayName>I2C_TXDR</displayName>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>8-bit transmit data</description>
            <name>TXDATA</name>
          </field>
        </fields>
        <name>I2C_TXDR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <resetMask>0xFFFFFFFF</resetMask>
    <resetValue>0x0</resetValue>
    <size>0x20</size>
  </peripheral>
</peripherals>
<peripherals>
  <peripheral>
    <addressBlock>
      <offset>0x0</offset>
      <size>0x400</size>
      <usage>registers</usage>
    </addressBlock>
    <baseAddress>0x40003000</baseAddress>
    <description>Independent watchdog</description>
    <groupName>IWDG</groupName>
    <interrupts></interrupts>
    <name>IWDG</name>
    <registers>
      <register>
        <access>write-only</access>
        <addressOffset>0x0</addressOffset>
        <description>Key register</description>
        <displayName>IWDG_KR</displayName>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>Key value (write only, read
                          0x0000)</description>
            <name>KEY</name>
          </field>
        </fields>
        <name>IWDG_KR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x4</addressOffset>
        <description>Prescaler register</description>
        <displayName>IWDG_PR</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Prescaler divider
            These bits are write access protected see . They are written by software to select the prescaler divider feeding the counter clock. PVU bit of the  must be reset in order to be able to change the prescaler divider.
            Note: Reading this register returns the prescaler value from the VDD voltage domain. This value may not be up to date/valid if a write operation to this register is ongoing. For this reason the value read from this register is valid only when the PVU bit in the status register (IWDG_SR) is reset.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>divider /4</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>divider /8</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>divider /16</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>divider /32</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>divider /64</description>
                <name>B_0x4</name>
                <value>0x4</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>divider /128</description>
                <name>B_0x5</name>
                <value>0x5</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>divider /256</description>
                <name>B_0x6</name>
                <value>0x6</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>divider /256</description>
                <name>B_0x7</name>
                <value>0x7</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>PR</name>
          </field>
        </fields>
        <name>IWDG_PR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x8</addressOffset>
        <description>Reload register</description>
        <displayName>IWDG_RLR</displayName>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xC</bitWidth>
            <description>Watchdog counter reload
                          value</description>
            <name>RL</name>
          </field>
        </fields>
        <name>IWDG_RLR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xFFF</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-only</access>
        <addressOffset>0xC</addressOffset>
        <description>Status register</description>
        <displayName>IWDG_SR</displayName>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Watchdog prescaler value update
            This bit is set by hardware to indicate that an update of the prescaler value is ongoing. It is reset by hardware when the prescaler update operation is completed in the VDD voltage domain (takes up to five LSI cycles).
            Prescaler value can be updated only when PVU bit is reset.</description>
            <name>PVU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Watchdog counter reload value update
            This bit is set by hardware to indicate that an update of the reload value is ongoing. It is reset by hardware when the reload value update operation is completed in the VDD voltage domain (takes up to five LSI cycles).
            Reload value can be updated only when RVU bit is reset.</description>
            <name>RVU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Watchdog counter window value update
            This bit is set by hardware to indicate that an update of the window value is ongoing. It is reset by hardware when the reload value update operation is completed in the VDD voltage domain (takes up to five LSI cycles).
            Window value can be updated only when WVU bit is reset.</description>
            <name>WVU</name>
          </field>
        </fields>
        <name>IWDG_SR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x10</addressOffset>
        <description>Window register</description>
        <displayName>IWDG_WINR</displayName>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0xC</bitWidth>
            <description>Watchdog counter window
                          value</description>
            <name>WIN</name>
          </field>
        </fields>
        <name>IWDG_WINR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xFFF</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <resetMask>0xFFFFFFFF</resetMask>
    <resetValue>0x0</resetValue>
    <size>0x20</size>
  </peripheral>
</peripherals>
<peripherals>
  <peripheral>
    <addressBlock>
      <offset>0x0</offset>
      <size>0x400</size>
      <usage>registers</usage>
    </addressBlock>
    <baseAddress>0x40007C00</baseAddress>
    <description>Low power timer</description>
    <groupName>LPTIM</groupName>
    <interrupts></interrupts>
    <name>LPTIM1</name>
    <registers>
      <register>
        <access>read-only</access>
        <addressOffset>0x0</addressOffset>
        <description>Interrupt and Status Register</description>
        <displayName>LPTIM_ISR</displayName>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Compare match
            The CMPM bit is set by hardware to inform application that LPTIM_CNT register value reached the LPTIM_CMP registerâs value.</description>
            <name>CMPM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Autoreload match
            ARRM is set by hardware to inform application that LPTIM_CNT registerâs value reached the LPTIM_ARR registerâs value. ARRM flag can be cleared by writing 1 to the ARRMCF bit in the LPTIM_ICR register.</description>
            <name>ARRM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>External trigger edge event
            EXTTRIG is set by hardware to inform application that a valid edge on the selected external trigger input has occurred. If the trigger is ignored because the timer has already started, then this flag is not set. EXTTRIG flag can be cleared by writing 1 to the EXTTRIGCF bit in the LPTIM_ICR register.</description>
            <name>EXTTRIG</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Compare register update OK
            CMPOK is set by hardware to inform application that the APB bus write operation to the LPTIM_CMP register has been successfully completed.</description>
            <name>CMPOK</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Autoreload register update OK
            ARROK is set by hardware to inform application that the APB bus write operation to the LPTIM_ARR register has been successfully completed. ARROK flag can be cleared by writing 1 to the ARROKCF bit in the LPTIM_ICR register.</description>
            <name>ARROK</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Counter direction change down to up
            In Encoder mode, UP bit is set by hardware to inform application that the counter direction has changed from down to up. UP flag can be cleared by writing 1 to the UPCF bit in the LPTIM_ICR register.
            Note: If the LPTIM does not support encoder mode feature, this bit is reserved. Please refer to .</description>
            <name>UP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Counter direction change up to down
            In Encoder mode, DOWN bit is set by hardware to inform application that the counter direction has changed from up to down. DOWN flag can be cleared by writing 1 to the DOWNCF bit in the LPTIM_ICR register.
            Note: If the LPTIM does not support encoder mode feature, this bit is reserved. Please refer to .</description>
            <name>DOWN</name>
          </field>
        </fields>
        <name>LPTIM_ISR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>write-only</access>
        <addressOffset>0x4</addressOffset>
        <description>Interrupt Clear Register</description>
        <displayName>LPTIM_ICR</displayName>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Compare match clear flag
            Writing 1 to this bit clears the CMP flag in the LPTIM_ISR register</description>
            <name>CMPMCF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Autoreload match clear flag
            Writing 1 to this bit clears the ARRM flag in the LPTIM_ISR register</description>
            <name>ARRMCF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>External trigger valid edge clear flag
            Writing 1 to this bit clears the EXTTRIG flag in the LPTIM_ISR register</description>
            <name>EXTTRIGCF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Compare register update OK clear flag
            Writing 1 to this bit clears the CMPOK flag in the LPTIM_ISR register</description>
            <name>CMPOKCF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Autoreload register update OK clear flag
            Writing 1 to this bit clears the ARROK flag in the LPTIM_ISR register</description>
            <name>ARROKCF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Direction change to UP clear flag
            Writing 1 to this bit clear the UP flag in the LPTIM_ISR register.
            Note: If the LPTIM does not support encoder mode feature, this bit is reserved. Please refer to .</description>
            <name>UPCF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Direction change to down clear flag
            Writing 1 to this bit clear the DOWN flag in the LPTIM_ISR register.
            Note: If the LPTIM does not support encoder mode feature, this bit is reserved. Please refer to .</description>
            <name>DOWNCF</name>
          </field>
        </fields>
        <name>LPTIM_ICR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x8</addressOffset>
        <description>Interrupt Enable Register</description>
        <displayName>LPTIM_IER</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Compare match Interrupt Enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>CMPM interrupt disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CMPM interrupt enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CMPMIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Autoreload match Interrupt Enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>ARRM interrupt disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>ARRM interrupt enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>ARRMIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>External trigger valid edge Interrupt Enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>EXTTRIG interrupt disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>EXTTRIG interrupt enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>EXTTRIGIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Compare register update OK Interrupt Enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>CMPOK interrupt disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CMPOK interrupt enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CMPOKIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Autoreload register update OK Interrupt Enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>ARROK interrupt disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>ARROK interrupt enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>ARROKIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Direction change to UP Interrupt Enable
            Note: If the LPTIM does not support encoder mode feature, this bit is reserved. Please refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>UP interrupt disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>UP interrupt enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>UPIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Direction change to down Interrupt Enable
            Note: If the LPTIM does not support encoder mode feature, this bit is reserved. Please refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>DOWN interrupt disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>DOWN interrupt enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>DOWNIE</name>
          </field>
        </fields>
        <name>LPTIM_IER</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0xC</addressOffset>
        <description>Configuration Register</description>
        <displayName>LPTIM_CFGR</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Clock selector
            The CKSEL bit selects which clock source the LPTIM will use:</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>LPTIM is clocked by internal clock source (APB clock or any of the embedded oscillators)</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>LPTIM is clocked by an external clock source through the LPTIM external Input1</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CKSEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Clock Polarity
            If LPTIM is clocked by an external clock source:
            When the LPTIM is clocked by an external clock source, CKPOL bits is used to configure the active edge or edges used by the counter:
            If the LPTIM is configured in Encoder mode (ENC bit is set), the encoder sub-mode 1 is active.
            If the LPTIM is configured in Encoder mode (ENC bit is set), the encoder sub-mode 2 is active.
            Refer to  for more details about Encoder mode sub-modes.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>the rising edge is the active edge used for counting.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>the falling edge is the active edge used for counting</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>both edges are active edges. When both external clock signal edges are considered active ones, the LPTIM must also be clocked by an internal clock source with a frequency equal to at least four times the external clock frequency.If the LPTIM is configured in Encoder mode (ENC bit is set), the encoder sub-mode 3 is active.</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>not allowed</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CKPOL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Configurable digital filter for external clock
            The CKFLT value sets the number of consecutive equal samples that should be detected when a level change occurs on an external clock signal before it is considered as a valid level transition. An internal clock source must be present to use this feature</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>any external clock signal level change is considered as a valid transition</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>external clock signal level change must be stable for at least 2 clock periods before it is considered as valid transition.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>external clock signal level change must be stable for at least 4 clock periods before it is considered as valid transition.</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>external clock signal level change must be stable for at least 8 clock periods before it is considered as valid transition.</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CKFLT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Configurable digital filter for trigger
            The TRGFLT value sets the number of consecutive equal samples that should be detected when a level change occurs on an internal trigger before it is considered as a valid level transition. An internal clock source must be present to use this feature</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>any trigger active level change is considered as a valid trigger</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>trigger active level change must be stable for at least 2 clock periods before it is considered as valid trigger.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>trigger active level change must be stable for at least 4 clock periods before it is considered as valid trigger.</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>trigger active level change must be stable for at least 8 clock periods before it is considered as valid trigger.</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TRGFLT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Clock prescaler
            The PRESC bits configure the prescaler division factor. It can be one among the following division factors:</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>/1</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>/2</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>/4</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>/8</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>/16</description>
                <name>B_0x4</name>
                <value>0x4</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>/32</description>
                <name>B_0x5</name>
                <value>0x5</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>/64</description>
                <name>B_0x6</name>
                <value>0x6</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>/128</description>
                <name>B_0x7</name>
                <value>0x7</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>PRESC</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Trigger selector
            The TRIGSEL bits select the trigger source that will serve as a trigger event for the LPTIM among the below 8 available sources:
            See  for details.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>lptim_ext_trig0</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>lptim_ext_trig1</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>lptim_ext_trig2</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>lptim_ext_trig3</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>lptim_ext_trig4</description>
                <name>B_0x4</name>
                <value>0x4</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>lptim_ext_trig5</description>
                <name>B_0x5</name>
                <value>0x5</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>lptim_ext_trig6</description>
                <name>B_0x6</name>
                <value>0x6</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>lptim_ext_trig7</description>
                <name>B_0x7</name>
                <value>0x7</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TRIGSEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Trigger enable and polarity
            The TRIGEN bits controls whether the LPTIM counter is started by an external trigger or not. If the external trigger option is selected, three configurations are possible for the trigger active edge:</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>software trigger (counting start is initiated by software)</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>rising edge is the active edge</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>falling edge is the active edge</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>both edges are active edges</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TRIGEN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Timeout enable
            The TIMOUT bit controls the Timeout feature</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>A trigger event arriving when the timer is already started will be ignored</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>A trigger event arriving when the timer is already started will reset and restart the counter</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TIMOUT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Waveform shape
            The WAVE bit controls the output shape</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Deactivate Set-once mode, PWM or One Pulse waveform depending on how the timer was started, CNTSTRT for PWM or SNGSTRT for One Pulse waveform.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Activate the Set-once mode</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>WAVE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Waveform shape polarity
            The WAVEPOL bit controls the output polarity</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>The LPTIM output reflects the compare results between LPTIM_CNT and LPTIM_CMP registers</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>The LPTIM output reflects the inverse of the compare results between LPTIM_CNT and LPTIM_CMP registers</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>WAVPOL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Registers update mode
            The PRELOAD bit controls the LPTIM_ARR and the LPTIM_CMP registers update modality</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Registers are updated after each APB bus write access</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Registers are updated at the end of the current LPTIM period</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>PRELOAD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>counter mode enabled
            The COUNTMODE bit selects which clock source is used by the LPTIM to clock the counter:</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>the counter is incremented following each internal clock pulse</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>the counter is incremented following each valid clock pulse on the LPTIM external Input1</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>COUNTMODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Encoder mode enable
            The ENC bit controls the Encoder mode
            Note: If the LPTIM does not support encoder mode feature, this bit is reserved. Please refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Encoder mode disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Encoder mode enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>ENC</name>
          </field>
        </fields>
        <name>LPTIM_CFGR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x10</addressOffset>
        <description>Control Register</description>
        <displayName>LPTIM_CR</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>LPTIM enable
            The ENABLE bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>LPTIM is disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>LPTIM is enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>ENABLE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>LPTIM start in Single mode
            This bit is set by software and cleared by hardware.
            In case of software start (TRIGEN[1:0] = '00â), setting this bit starts the LPTIM in single pulse mode.
            If the software start is disabled (TRIGEN[1:0] different than '00â), setting this bit starts the LPTIM in single pulse mode as soon as an external trigger is detected.
            If this bit is set when the LPTIM is in continuous counting mode, then the LPTIM will stop at the following match between LPTIM_ARR and LPTIM_CNT registers.
            This bit can only be set when the LPTIM is enabled. It will be automatically reset by hardware.</description>
            <name>SNGSTRT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Timer start in Continuous mode
            This bit is set by software and cleared by hardware.
            In case of software start (TRIGEN[1:0] = '00â), setting this bit starts the LPTIM in Continuous mode.
            If the software start is disabled (TRIGEN[1:0] different than '00â), setting this bit starts the timer in Continuous mode as soon as an external trigger is detected.
            If this bit is set when a single pulse mode counting is ongoing, then the timer will not stop at the next match between the LPTIM_ARR and LPTIM_CNT registers and the LPTIM counter keeps counting in Continuous mode.
            This bit can be set only when the LPTIM is enabled. It will be automatically reset by hardware.</description>
            <name>CNTSTRT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Counter reset
            This bit is set by software and cleared by hardware. When set to '1' this bit will trigger a synchronous reset of the LPTIM_CNT counter register. Due to the synchronous nature of this reset, it only takes place after a synchronization delay of 3 LPTimer core clock cycles (LPTimer core clock may be different from APB clock).
            COUNTRST must never be set to '1' by software before it is already cleared to '0' by hardware. Software should consequently check that COUNTRST bit is already cleared to '0' before attempting to set it to '1'.</description>
            <name>COUNTRST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Reset after read enable
            This bit is set and cleared by software. When RSTARE is set to '1', any read access to LPTIM_CNT register will asynchronously reset LPTIM_CNT register content.</description>
            <name>RSTARE</name>
          </field>
        </fields>
        <name>LPTIM_CR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x14</addressOffset>
        <description>Compare Register</description>
        <displayName>LPTIM_CMP</displayName>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>Compare value</description>
            <name>CMP</name>
          </field>
        </fields>
        <name>LPTIM_CMP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x18</addressOffset>
        <description>Autoreload Register</description>
        <displayName>LPTIM_ARR</displayName>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>Auto reload value</description>
            <name>ARR</name>
          </field>
        </fields>
        <name>LPTIM_ARR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x1</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-only</access>
        <addressOffset>0x1C</addressOffset>
        <description>Counter Register</description>
        <displayName>LPTIM_CNT</displayName>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>Counter value</description>
            <name>CNT</name>
          </field>
        </fields>
        <name>LPTIM_CNT</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x24</addressOffset>
        <description>LPTIM configuration register 2</description>
        <displayName>LPTIM_CFGR2</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>LPTIM input 1 selection
            The IN1SEL bits control the LPTIM Input 1 multiplexer, which connects LPTIM Input 1 to one of the available inputs.
            For connection details refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>lptim_in1_mux0</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>lptim_in1_mux1</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>lptim_in1_mux2</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>lptim_in1_mux3</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>IN1SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>LPTIM input 2 selection
            The IN2SEL bits control the LPTIM Input 2 multiplexer, which connect LPTIM Input 2 to one of the available inputs.
            For connection details refer to .
            Note: If the LPTIM does not support encoder mode feature, these bits are reserved. Please refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>lptim_in2_mux0</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>lptim_in2_mux1</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>lptim_in2_mux2</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>lptim_in2_mux3</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>IN2SEL</name>
          </field>
        </fields>
        <name>LPTIM_CFGR2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <resetMask>0xFFFFFFFF</resetMask>
    <resetValue>0x0</resetValue>
    <size>0x20</size>
  </peripheral>
</peripherals>
<peripherals>
  <peripheral>
    <addressBlock>
      <offset>0x0</offset>
      <size>0x400</size>
      <usage>registers</usage>
    </addressBlock>
    <baseAddress>0x40009400</baseAddress>
    <derivedFrom>LPTIM1</derivedFrom>
    <description>Low power timer</description>
    <groupName>LPTIM</groupName>
    <interrupts></interrupts>
    <name>LPTIM2</name>
    <registers>
      <register>
        <access>read-only</access>
        <addressOffset>0x0</addressOffset>
        <description>Interrupt and Status Register</description>
        <displayName>LPTIM_ISR</displayName>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Compare match
            The CMPM bit is set by hardware to inform application that LPTIM_CNT register value reached the LPTIM_CMP registerâs value.</description>
            <name>CMPM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Autoreload match
            ARRM is set by hardware to inform application that LPTIM_CNT registerâs value reached the LPTIM_ARR registerâs value. ARRM flag can be cleared by writing 1 to the ARRMCF bit in the LPTIM_ICR register.</description>
            <name>ARRM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>External trigger edge event
            EXTTRIG is set by hardware to inform application that a valid edge on the selected external trigger input has occurred. If the trigger is ignored because the timer has already started, then this flag is not set. EXTTRIG flag can be cleared by writing 1 to the EXTTRIGCF bit in the LPTIM_ICR register.</description>
            <name>EXTTRIG</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Compare register update OK
            CMPOK is set by hardware to inform application that the APB bus write operation to the LPTIM_CMP register has been successfully completed.</description>
            <name>CMPOK</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Autoreload register update OK
            ARROK is set by hardware to inform application that the APB bus write operation to the LPTIM_ARR register has been successfully completed. ARROK flag can be cleared by writing 1 to the ARROKCF bit in the LPTIM_ICR register.</description>
            <name>ARROK</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Counter direction change down to up
            In Encoder mode, UP bit is set by hardware to inform application that the counter direction has changed from down to up. UP flag can be cleared by writing 1 to the UPCF bit in the LPTIM_ICR register.
            Note: If the LPTIM does not support encoder mode feature, this bit is reserved. Please refer to .</description>
            <name>UP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Counter direction change up to down
            In Encoder mode, DOWN bit is set by hardware to inform application that the counter direction has changed from up to down. DOWN flag can be cleared by writing 1 to the DOWNCF bit in the LPTIM_ICR register.
            Note: If the LPTIM does not support encoder mode feature, this bit is reserved. Please refer to .</description>
            <name>DOWN</name>
          </field>
        </fields>
        <name>LPTIM_ISR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>write-only</access>
        <addressOffset>0x4</addressOffset>
        <description>Interrupt Clear Register</description>
        <displayName>LPTIM_ICR</displayName>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Compare match clear flag
            Writing 1 to this bit clears the CMP flag in the LPTIM_ISR register</description>
            <name>CMPMCF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Autoreload match clear flag
            Writing 1 to this bit clears the ARRM flag in the LPTIM_ISR register</description>
            <name>ARRMCF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>External trigger valid edge clear flag
            Writing 1 to this bit clears the EXTTRIG flag in the LPTIM_ISR register</description>
            <name>EXTTRIGCF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Compare register update OK clear flag
            Writing 1 to this bit clears the CMPOK flag in the LPTIM_ISR register</description>
            <name>CMPOKCF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Autoreload register update OK clear flag
            Writing 1 to this bit clears the ARROK flag in the LPTIM_ISR register</description>
            <name>ARROKCF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Direction change to UP clear flag
            Writing 1 to this bit clear the UP flag in the LPTIM_ISR register.
            Note: If the LPTIM does not support encoder mode feature, this bit is reserved. Please refer to .</description>
            <name>UPCF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Direction change to down clear flag
            Writing 1 to this bit clear the DOWN flag in the LPTIM_ISR register.
            Note: If the LPTIM does not support encoder mode feature, this bit is reserved. Please refer to .</description>
            <name>DOWNCF</name>
          </field>
        </fields>
        <name>LPTIM_ICR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x8</addressOffset>
        <description>Interrupt Enable Register</description>
        <displayName>LPTIM_IER</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Compare match Interrupt Enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>CMPM interrupt disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CMPM interrupt enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CMPMIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Autoreload match Interrupt Enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>ARRM interrupt disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>ARRM interrupt enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>ARRMIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>External trigger valid edge Interrupt Enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>EXTTRIG interrupt disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>EXTTRIG interrupt enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>EXTTRIGIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Compare register update OK Interrupt Enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>CMPOK interrupt disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CMPOK interrupt enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CMPOKIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Autoreload register update OK Interrupt Enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>ARROK interrupt disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>ARROK interrupt enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>ARROKIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Direction change to UP Interrupt Enable
            Note: If the LPTIM does not support encoder mode feature, this bit is reserved. Please refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>UP interrupt disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>UP interrupt enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>UPIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Direction change to down Interrupt Enable
            Note: If the LPTIM does not support encoder mode feature, this bit is reserved. Please refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>DOWN interrupt disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>DOWN interrupt enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>DOWNIE</name>
          </field>
        </fields>
        <name>LPTIM_IER</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0xC</addressOffset>
        <description>Configuration Register</description>
        <displayName>LPTIM_CFGR</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Clock selector
            The CKSEL bit selects which clock source the LPTIM will use:</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>LPTIM is clocked by internal clock source (APB clock or any of the embedded oscillators)</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>LPTIM is clocked by an external clock source through the LPTIM external Input1</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CKSEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Clock Polarity
            If LPTIM is clocked by an external clock source:
            When the LPTIM is clocked by an external clock source, CKPOL bits is used to configure the active edge or edges used by the counter:
            If the LPTIM is configured in Encoder mode (ENC bit is set), the encoder sub-mode 1 is active.
            If the LPTIM is configured in Encoder mode (ENC bit is set), the encoder sub-mode 2 is active.
            Refer to  for more details about Encoder mode sub-modes.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>the rising edge is the active edge used for counting.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>the falling edge is the active edge used for counting</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>both edges are active edges. When both external clock signal edges are considered active ones, the LPTIM must also be clocked by an internal clock source with a frequency equal to at least four times the external clock frequency.If the LPTIM is configured in Encoder mode (ENC bit is set), the encoder sub-mode 3 is active.</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>not allowed</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CKPOL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Configurable digital filter for external clock
            The CKFLT value sets the number of consecutive equal samples that should be detected when a level change occurs on an external clock signal before it is considered as a valid level transition. An internal clock source must be present to use this feature</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>any external clock signal level change is considered as a valid transition</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>external clock signal level change must be stable for at least 2 clock periods before it is considered as valid transition.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>external clock signal level change must be stable for at least 4 clock periods before it is considered as valid transition.</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>external clock signal level change must be stable for at least 8 clock periods before it is considered as valid transition.</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CKFLT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Configurable digital filter for trigger
            The TRGFLT value sets the number of consecutive equal samples that should be detected when a level change occurs on an internal trigger before it is considered as a valid level transition. An internal clock source must be present to use this feature</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>any trigger active level change is considered as a valid trigger</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>trigger active level change must be stable for at least 2 clock periods before it is considered as valid trigger.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>trigger active level change must be stable for at least 4 clock periods before it is considered as valid trigger.</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>trigger active level change must be stable for at least 8 clock periods before it is considered as valid trigger.</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TRGFLT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Clock prescaler
            The PRESC bits configure the prescaler division factor. It can be one among the following division factors:</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>/1</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>/2</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>/4</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>/8</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>/16</description>
                <name>B_0x4</name>
                <value>0x4</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>/32</description>
                <name>B_0x5</name>
                <value>0x5</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>/64</description>
                <name>B_0x6</name>
                <value>0x6</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>/128</description>
                <name>B_0x7</name>
                <value>0x7</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>PRESC</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Trigger selector
            The TRIGSEL bits select the trigger source that will serve as a trigger event for the LPTIM among the below 8 available sources:
            See  for details.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>lptim_ext_trig0</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>lptim_ext_trig1</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>lptim_ext_trig2</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>lptim_ext_trig3</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>lptim_ext_trig4</description>
                <name>B_0x4</name>
                <value>0x4</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>lptim_ext_trig5</description>
                <name>B_0x5</name>
                <value>0x5</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>lptim_ext_trig6</description>
                <name>B_0x6</name>
                <value>0x6</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>lptim_ext_trig7</description>
                <name>B_0x7</name>
                <value>0x7</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TRIGSEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Trigger enable and polarity
            The TRIGEN bits controls whether the LPTIM counter is started by an external trigger or not. If the external trigger option is selected, three configurations are possible for the trigger active edge:</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>software trigger (counting start is initiated by software)</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>rising edge is the active edge</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>falling edge is the active edge</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>both edges are active edges</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TRIGEN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Timeout enable
            The TIMOUT bit controls the Timeout feature</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>A trigger event arriving when the timer is already started will be ignored</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>A trigger event arriving when the timer is already started will reset and restart the counter</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TIMOUT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Waveform shape
            The WAVE bit controls the output shape</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Deactivate Set-once mode, PWM or One Pulse waveform depending on how the timer was started, CNTSTRT for PWM or SNGSTRT for One Pulse waveform.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Activate the Set-once mode</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>WAVE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Waveform shape polarity
            The WAVEPOL bit controls the output polarity</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>The LPTIM output reflects the compare results between LPTIM_CNT and LPTIM_CMP registers</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>The LPTIM output reflects the inverse of the compare results between LPTIM_CNT and LPTIM_CMP registers</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>WAVPOL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Registers update mode
            The PRELOAD bit controls the LPTIM_ARR and the LPTIM_CMP registers update modality</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Registers are updated after each APB bus write access</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Registers are updated at the end of the current LPTIM period</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>PRELOAD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>counter mode enabled
            The COUNTMODE bit selects which clock source is used by the LPTIM to clock the counter:</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>the counter is incremented following each internal clock pulse</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>the counter is incremented following each valid clock pulse on the LPTIM external Input1</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>COUNTMODE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Encoder mode enable
            The ENC bit controls the Encoder mode
            Note: If the LPTIM does not support encoder mode feature, this bit is reserved. Please refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Encoder mode disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Encoder mode enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>ENC</name>
          </field>
        </fields>
        <name>LPTIM_CFGR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x10</addressOffset>
        <description>Control Register</description>
        <displayName>LPTIM_CR</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>LPTIM enable
            The ENABLE bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>LPTIM is disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>LPTIM is enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>ENABLE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>LPTIM start in Single mode
            This bit is set by software and cleared by hardware.
            In case of software start (TRIGEN[1:0] = '00â), setting this bit starts the LPTIM in single pulse mode.
            If the software start is disabled (TRIGEN[1:0] different than '00â), setting this bit starts the LPTIM in single pulse mode as soon as an external trigger is detected.
            If this bit is set when the LPTIM is in continuous counting mode, then the LPTIM will stop at the following match between LPTIM_ARR and LPTIM_CNT registers.
            This bit can only be set when the LPTIM is enabled. It will be automatically reset by hardware.</description>
            <name>SNGSTRT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Timer start in Continuous mode
            This bit is set by software and cleared by hardware.
            In case of software start (TRIGEN[1:0] = '00â), setting this bit starts the LPTIM in Continuous mode.
            If the software start is disabled (TRIGEN[1:0] different than '00â), setting this bit starts the timer in Continuous mode as soon as an external trigger is detected.
            If this bit is set when a single pulse mode counting is ongoing, then the timer will not stop at the next match between the LPTIM_ARR and LPTIM_CNT registers and the LPTIM counter keeps counting in Continuous mode.
            This bit can be set only when the LPTIM is enabled. It will be automatically reset by hardware.</description>
            <name>CNTSTRT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Counter reset
            This bit is set by software and cleared by hardware. When set to '1' this bit will trigger a synchronous reset of the LPTIM_CNT counter register. Due to the synchronous nature of this reset, it only takes place after a synchronization delay of 3 LPTimer core clock cycles (LPTimer core clock may be different from APB clock).
            COUNTRST must never be set to '1' by software before it is already cleared to '0' by hardware. Software should consequently check that COUNTRST bit is already cleared to '0' before attempting to set it to '1'.</description>
            <name>COUNTRST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Reset after read enable
            This bit is set and cleared by software. When RSTARE is set to '1', any read access to LPTIM_CNT register will asynchronously reset LPTIM_CNT register content.</description>
            <name>RSTARE</name>
          </field>
        </fields>
        <name>LPTIM_CR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x14</addressOffset>
        <description>Compare Register</description>
        <displayName>LPTIM_CMP</displayName>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>Compare value</description>
            <name>CMP</name>
          </field>
        </fields>
        <name>LPTIM_CMP</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x18</addressOffset>
        <description>Autoreload Register</description>
        <displayName>LPTIM_ARR</displayName>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>Auto reload value</description>
            <name>ARR</name>
          </field>
        </fields>
        <name>LPTIM_ARR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x1</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-only</access>
        <addressOffset>0x1C</addressOffset>
        <description>Counter Register</description>
        <displayName>LPTIM_CNT</displayName>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>Counter value</description>
            <name>CNT</name>
          </field>
        </fields>
        <name>LPTIM_CNT</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x24</addressOffset>
        <description>LPTIM configuration register 2</description>
        <displayName>LPTIM_CFGR2</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>LPTIM input 1 selection
            The IN1SEL bits control the LPTIM Input 1 multiplexer, which connects LPTIM Input 1 to one of the available inputs.
            For connection details refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>lptim_in1_mux0</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>lptim_in1_mux1</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>lptim_in1_mux2</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>lptim_in1_mux3</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>IN1SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>LPTIM input 2 selection
            The IN2SEL bits control the LPTIM Input 2 multiplexer, which connect LPTIM Input 2 to one of the available inputs.
            For connection details refer to .
            Note: If the LPTIM does not support encoder mode feature, these bits are reserved. Please refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>lptim_in2_mux0</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>lptim_in2_mux1</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>lptim_in2_mux2</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>lptim_in2_mux3</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>IN2SEL</name>
          </field>
        </fields>
        <name>LPTIM_CFGR2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <resetMask>0xFFFFFFFF</resetMask>
    <resetValue>0x0</resetValue>
    <size>0x20</size>
  </peripheral>
</peripherals>
<peripherals>
  <peripheral>
    <addressBlock>
      <offset>0x0</offset>
      <size>0x400</size>
      <usage>registers</usage>
    </addressBlock>
    <baseAddress>0x40012C00</baseAddress>
    <description>Advanced-timers</description>
    <groupName>TIM</groupName>
    <interrupts>
      <interrupt>
        <name>TIM1_BRK_UP_TRG_COM</name>
        <value>0xD</value>
      </interrupt>
    </interrupts>
    <interrupts>
      <interrupt>
        <name>TIM1_CC</name>
        <value>0xE</value>
      </interrupt>
    </interrupts>
    <name>TIM1</name>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x0</addressOffset>
        <description>control register 1</description>
        <displayName>TIM1_CR1</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Counter enable
            Note: External clock, gated mode and encoder mode can work only if the CEN bit has been previously set by software. However trigger mode can set the CEN bit automatically by hardware.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Counter disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Counter enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CEN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Update disable
            This bit is set and cleared by software to enable/disable UEV event generation.
            Counter overflow/underflow
            Setting the UG bit
            Update generation through the slave mode controller
            Buffered registers are then loaded with their preload values.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>UEV enabled. The Update (UEV) event is generated by one of the following events:</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>UEV disabled. The Update event is not generated, shadow registers keep their value (ARR, PSC, CCRx). However the counter and the prescaler are reinitialized if the UG bit is set or if a hardware reset is received from the slave mode controller.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>UDIS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Update request source
            This bit is set and cleared by software to select the UEV event sources.
            Counter overflow/underflow
            Setting the UG bit
            Update generation through the slave mode controller</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Any of the following events generate an update interrupt or DMA request if enabled. These events can be: </description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Only counter overflow/underflow generates an update interrupt or DMA request if enabled.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>URS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>One pulse mode</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Counter is not stopped at update event</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Counter stops counting at the next update event (clearing the bit CEN)</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>OPM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Direction
            Note: This bit is read only when the timer is configured in Center-aligned mode or Encoder mode.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Counter used as upcounter</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Counter used as downcounter</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>DIR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Center-aligned mode selection
            Note: Switch from edge-aligned mode to center-aligned mode as long as the counter is enabled (CEN=1) is not allowed</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Edge-aligned mode. The counter counts up or down depending on the direction bit (DIR).</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Center-aligned mode 1. The counter counts up and down alternatively. Output compare interrupt flags of channels configured in output (CCxS=00 in TIMx_CCMRx register) are set only when the counter is counting down.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Center-aligned mode 2. The counter counts up and down alternatively. Output compare interrupt flags of channels configured in output (CCxS=00 in TIMx_CCMRx register) are set only when the counter is counting up.</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Center-aligned mode 3. The counter counts up and down alternatively. Output compare interrupt flags of channels configured in output (CCxS=00 in TIMx_CCMRx register) are set both when the counter is counting up or down.</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CMS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Auto-reload preload enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>TIMx_ARR register is not buffered</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>TIMx_ARR register is buffered</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>ARPE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Clock division
            This bit-field indicates the division ratio between the timer clock (CK_INT) frequency and the dead-time and sampling clock (tDTS)used by the dead-time generators and the digital filters (ETR, TIx):
            Note: tDTS = 1/fDTS, tCK_INT = 1/fCK_INT.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>tDTS=tCK_INT</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>tDTS=2*tCK_INT</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>tDTS=4*tCK_INT</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Reserved, do not program this value</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CKD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>UIF status bit remapping</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No remapping. UIF status bit is not copied to TIMx_CNT register bit 31.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Remapping enabled. UIF status bit is copied to TIMx_CNT register bit 31.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>UIFREMAP</name>
          </field>
        </fields>
        <name>TIM1_CR1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x4</addressOffset>
        <description>control register 2</description>
        <displayName>TIM1_CR2</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/compare preloaded control
            Note: This bit acts only on channels that have a complementary output.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>CCxE, CCxNE and OCxM bits are not preloaded</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CCxE, CCxNE and OCxM bits are preloaded, after having been written, they are updated only when a commutation event (COM) occurs (COMG bit set or rising edge detected on TRGI, depending on the CCUS bit).</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CCPC</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/compare control update selection
            Note: This bit acts only on channels that have a complementary output.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>When capture/compare control bits are preloaded (CCPC=1), they are updated by setting the COMG bit only</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>When capture/compare control bits are preloaded (CCPC=1), they are updated by setting the COMG bit or when an rising edge occurs on TRGI</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CCUS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/compare DMA selection</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>CCx DMA request sent when CCx event occurs</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CCx DMA requests sent when update event occurs</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CCDS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Master mode selection
            These bits allow selected information to be sent in master mode to slave timers for synchronization (TRGO). The combination is as follows:
            Note: The clock of the slave timer or ADC must be enabled prior to receive events from the master timer, and must not be changed on-the-fly while triggers are received from the master timer.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Reset - the UG bit from the TIMx_EGR register is used as trigger output (TRGO). If the reset is generated by the trigger input (slave mode controller configured in reset mode) then the signal on TRGO is delayed compared to the actual reset.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Enable - the Counter Enable signal CNT_EN is used as trigger output (TRGO). It is useful to start several timers at the same time or to control a window in which a slave timer is enable. The Counter Enable signal is generated by a logic AND between CEN control bit and the trigger input when configured in gated mode. When the Counter Enable signal is controlled by the trigger input, there is a delay on TRGO, except if the master/slave mode is selected (see the MSM bit description in TIMx_SMCR register).</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Update - The update event is selected as trigger output (TRGO). For instance a master timer can then be used as a prescaler for a slave timer.</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Compare Pulse - The trigger output send a positive pulse when the CC1IF flag is to be set (even if it was already high), as soon as a capture or a compare match occurred. (TRGO).</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Compare - OC1REFC signal is used as trigger output (TRGO)</description>
                <name>B_0x4</name>
                <value>0x4</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Compare - OC2REFC signal is used as trigger output (TRGO)</description>
                <name>B_0x5</name>
                <value>0x5</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Compare - OC3REFC signal is used as trigger output (TRGO)</description>
                <name>B_0x6</name>
                <value>0x6</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Compare - OC4REFC signal is used as trigger output (TRGO)</description>
                <name>B_0x7</name>
                <value>0x7</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>MMS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>TI1 selection</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>The TIMx_CH1 pin is connected to TI1 input</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>The TIMx_CH1, CH2 and CH3 pins are connected to the TI1 input (XOR combination)</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TI1S</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output Idle state 1 (OC1 output)
            Note: This bit can not be modified as long as LOCK level 1, 2 or 3 has been programmed (LOCK bits in TIMx_BDTR register).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>OC1=0 (after a dead-time if OC1N is implemented) when MOE=0</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>OC1=1 (after a dead-time if OC1N is implemented) when MOE=0</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>OIS1</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output Idle state 1 (OC1N output)
            Note: This bit can not be modified as long as LOCK level 1, 2 or 3 has been programmed (LOCK bits in TIMx_BDTR register).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>OC1N=0 after a dead-time when MOE=0</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>OC1N=1 after a dead-time when MOE=0</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>OIS1N</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output Idle state 2 (OC2 output)
            Refer to OIS1 bit</description>
            <name>OIS2</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output Idle state 2 (OC2N output)
            Refer to OIS1N bit</description>
            <name>OIS2N</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output Idle state 3 (OC3 output)
            Refer to OIS1 bit</description>
            <name>OIS3</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output Idle state 3 (OC3N output)
            Refer to OIS1N bit</description>
            <name>OIS3N</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output Idle state 4 (OC4 output)
            Refer to OIS1 bit</description>
            <name>OIS4</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output Idle state 5 (OC5 output)
            Refer to OIS1 bit</description>
            <name>OIS5</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output Idle state 6 (OC6 output)
            Refer to OIS1 bit</description>
            <name>OIS6</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Master mode selection 2
            These bits allow the information to be sent to ADC for synchronization (TRGO2) to be selected. The combination is as follows:
            Note: The clock of the slave timer or ADC must be enabled prior to receive events from the master timer, and must not be changed on-the-fly while triggers are received from the master timer.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Reset - the UG bit from the TIMx_EGR register is used as trigger output (TRGO2). If the reset is generated by the trigger input (slave mode controller configured in reset mode), the signal on TRGO2 is delayed compared to the actual reset.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Enable - the Counter Enable signal CNT_EN is used as trigger output (TRGO2). It is useful to start several timers at the same time or to control a window in which a slave timer is enabled. The Counter Enable signal is generated by a logic AND between the CEN control bit and the trigger input when configured in Gated mode. When the Counter Enable signal is controlled by the trigger input, there is a delay on TRGO2, except if the Master/Slave mode is selected (see the MSM bit description in TIMx_SMCR register).</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Update - the update event is selected as trigger output (TRGO2). For instance, a master timer can then be used as a prescaler for a slave timer.</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Compare pulse - the trigger output sends a positive pulse when the CC1IF flag is to be set (even if it was already high), as soon as a capture or compare match occurs (TRGO2).</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Compare - OC1REFC signal is used as trigger output (TRGO2)</description>
                <name>B_0x4</name>
                <value>0x4</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Compare - OC2REFC signal is used as trigger output (TRGO2)</description>
                <name>B_0x5</name>
                <value>0x5</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Compare - OC3REFC signal is used as trigger output (TRGO2)</description>
                <name>B_0x6</name>
                <value>0x6</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Compare - OC4REFC signal is used as trigger output (TRGO2)</description>
                <name>B_0x7</name>
                <value>0x7</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Compare - OC5REFC signal is used as trigger output (TRGO2)</description>
                <name>B_0x8</name>
                <value>0x8</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Compare - OC6REFC signal is used as trigger output (TRGO2)</description>
                <name>B_0x9</name>
                <value>0x9</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Compare Pulse - OC4REFC rising or falling edges generate pulses on TRGO2</description>
                <name>B_0xA</name>
                <value>0xA</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Compare Pulse - OC6REFC rising or falling edges generate pulses on TRGO2</description>
                <name>B_0xB</name>
                <value>0xB</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Compare Pulse - OC4REFC or OC6REFC rising edges generate pulses on TRGO2</description>
                <name>B_0xC</name>
                <value>0xC</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Compare Pulse - OC4REFC rising or OC6REFC falling edges generate pulses on TRGO2</description>
                <name>B_0xD</name>
                <value>0xD</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Compare Pulse - OC5REFC or OC6REFC rising edges generate pulses on TRGO2</description>
                <name>B_0xE</name>
                <value>0xE</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Compare Pulse - OC5REFC rising or OC6REFC falling edges generate pulses on TRGO2</description>
                <name>B_0xF</name>
                <value>0xF</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>MMS2</name>
          </field>
        </fields>
        <name>TIM1_CR2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x8</addressOffset>
        <description>slave mode control register</description>
        <displayName>TIM1_SMCR</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Slave mode selection
            When external signals are selected the active edge of the trigger signal (TRGI) is linked to the polarity selected on the external input (see Input Control register and Control Register description.
            Note: The gated mode must not be used if TI1F_ED is selected as the trigger input (TS=00100). Indeed, TI1F_ED outputs 1 pulse for each transition on TI1F, whereas the gated mode checks the level of the trigger signal.
            Note: The clock of the slave peripherals (timer, ADC, ...) receiving the TRGO or the TRGO2 signals must be enabled prior to receive events from the master timer, and the clock frequency (prescaler) must not be changed on-the-fly while triggers are received from the master timer.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Slave mode disabled - if CEN = '1â then the prescaler is clocked directly by the internal clock.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Encoder mode 1 - Counter counts up/down on TI1FP1 edge depending on TI2FP2 level.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Encoder mode 2 - Counter counts up/down on TI2FP2 edge depending on TI1FP1 level.</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Encoder mode 3 - Counter counts up/down on both TI1FP1 and TI2FP2 edges depending on the level of the other input.</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Reset Mode - Rising edge of the selected trigger input (TRGI) reinitializes the counter and generates an update of the registers.</description>
                <name>B_0x4</name>
                <value>0x4</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Gated Mode - The counter clock is enabled when the trigger input (TRGI) is high. The counter stops (but is not reset) as soon as the trigger becomes low. Both start and stop of the counter are controlled.</description>
                <name>B_0x5</name>
                <value>0x5</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Trigger Mode - The counter starts at a rising edge of the trigger TRGI (but it is not reset). Only the start of the counter is controlled.</description>
                <name>B_0x6</name>
                <value>0x6</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>External Clock Mode 1 - Rising edges of the selected trigger (TRGI) clock the counter.</description>
                <name>B_0x7</name>
                <value>0x7</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Combined reset + trigger mode - Rising edge of the selected trigger input (TRGI) reinitializes the counter, generates an update of the registers and starts the counter.Codes above 1000: Reserved.</description>
                <name>B_0x8</name>
                <value>0x8</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>SMS1</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>OCREF clear selection
            This bit is used to select the OCREF clear source.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>OCREF_CLR_INT is connected to COMP1 or COMP2 output depending on TIM1_OR1.OCREF_CLR</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>OCREF_CLR_INT is connected to ETRF</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>OCCS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Trigger selection
            This bit-field selects the trigger input to be used to synchronize the counter.
            Others: Reserved
            See  for more details on ITRx meaning for each Timer.
            Note: These bits must be changed only when they are not used (e.g. when SMS=000) to avoid wrong edge detections at the transition.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Internal Trigger 0 (ITR0) </description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Internal Trigger 1 (ITR1)</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Internal Trigger 2 (ITR2)</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Internal Trigger 3 (ITR3)</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>TI1 Edge Detector (TI1F_ED)</description>
                <name>B_0x4</name>
                <value>0x4</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Filtered Timer Input 1 (TI1FP1)</description>
                <name>B_0x5</name>
                <value>0x5</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Filtered Timer Input 2 (TI2FP2)</description>
                <name>B_0x6</name>
                <value>0x6</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>External Trigger input (ETRF)</description>
                <name>B_0x7</name>
                <value>0x7</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TS1</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Master/slave mode</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No action</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>The effect of an event on the trigger input (TRGI) is delayed to allow a perfect synchronization between the current timer and its slaves (through TRGO). It is useful if we want to synchronize several timers on a single external event.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>MSM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>External trigger filter
            This bit-field then defines the frequency used to sample ETRP signal and the length of the digital filter applied to ETRP. The digital filter is made of an event counter in which N consecutive events are needed to validate a transition on the output:</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No filter, sampling is done at fDTS</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fCK_INT, N=2</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fCK_INT, N=4</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fCK_INT, N=8</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/2, N=6</description>
                <name>B_0x4</name>
                <value>0x4</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/2, N=8</description>
                <name>B_0x5</name>
                <value>0x5</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/4, N=6</description>
                <name>B_0x6</name>
                <value>0x6</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/4, N=8</description>
                <name>B_0x7</name>
                <value>0x7</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/8, N=6</description>
                <name>B_0x8</name>
                <value>0x8</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/8, N=8</description>
                <name>B_0x9</name>
                <value>0x9</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/16, N=5</description>
                <name>B_0xA</name>
                <value>0xA</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/16, N=6</description>
                <name>B_0xB</name>
                <value>0xB</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/16, N=8</description>
                <name>B_0xC</name>
                <value>0xC</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/32, N=5</description>
                <name>B_0xD</name>
                <value>0xD</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/32, N=6</description>
                <name>B_0xE</name>
                <value>0xE</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/32, N=8</description>
                <name>B_0xF</name>
                <value>0xF</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>ETF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>External trigger prescaler
            External trigger signal ETRP frequency must be at most 1/4 of fCK_INT frequency. A prescaler can be enabled to reduce ETRP frequency. It is useful when inputting fast external clocks.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Prescaler OFF</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>ETRP frequency divided by 2</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>ETRP frequency divided by 4</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>ETRP frequency divided by 8</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>ETPS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>External clock enable
            This bit enables External clock mode 2.
            Note: Setting the ECE bit has the same effect as selecting external clock mode 1 with TRGI connected to ETRF (SMS=111 and TS=00111).
            It is possible to simultaneously use external clock mode 2 with the following slave modes: reset mode, gated mode and trigger mode. Nevertheless, TRGI must not be connected to ETRF in this case (TS bits must not be 00111).
            If external clock mode 1 and external clock mode 2 are enabled at the same time, the external clock input is ETRF.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>External clock mode 2 disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>External clock mode 2 enabled. The counter is clocked by any active edge on the ETRF signal.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>ECE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>External trigger polarity
            This bit selects whether ETR or ETR is used for trigger operations</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>ETR is non-inverted, active at high level or rising edge.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>ETR is inverted, active at low level or falling edge.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>ETP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Slave mode selection
            When external signals are selected the active edge of the trigger signal (TRGI) is linked to the polarity selected on the external input (see Input Control register and Control Register description.
            Note: The gated mode must not be used if TI1F_ED is selected as the trigger input (TS=00100). Indeed, TI1F_ED outputs 1 pulse for each transition on TI1F, whereas the gated mode checks the level of the trigger signal.
            Note: The clock of the slave peripherals (timer, ADC, ...) receiving the TRGO or the TRGO2 signals must be enabled prior to receive events from the master timer, and the clock frequency (prescaler) must not be changed on-the-fly while triggers are received from the master timer.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Slave mode disabled - if CEN = '1â then the prescaler is clocked directly by the internal clock.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Encoder mode 1 - Counter counts up/down on TI1FP1 edge depending on TI2FP2 level.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Encoder mode 2 - Counter counts up/down on TI2FP2 edge depending on TI1FP1 level.</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Encoder mode 3 - Counter counts up/down on both TI1FP1 and TI2FP2 edges depending on the level of the other input.</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Reset Mode - Rising edge of the selected trigger input (TRGI) reinitializes the counter and generates an update of the registers.</description>
                <name>B_0x4</name>
                <value>0x4</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Gated Mode - The counter clock is enabled when the trigger input (TRGI) is high. The counter stops (but is not reset) as soon as the trigger becomes low. Both start and stop of the counter are controlled.</description>
                <name>B_0x5</name>
                <value>0x5</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Trigger Mode - The counter starts at a rising edge of the trigger TRGI (but it is not reset). Only the start of the counter is controlled.</description>
                <name>B_0x6</name>
                <value>0x6</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>External Clock Mode 1 - Rising edges of the selected trigger (TRGI) clock the counter.</description>
                <name>B_0x7</name>
                <value>0x7</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Combined reset + trigger mode - Rising edge of the selected trigger input (TRGI) reinitializes the counter, generates an update of the registers and starts the counter.Codes above 1000: Reserved.</description>
                <name>B_0x8</name>
                <value>0x8</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>SMS2</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Trigger selection
            This bit-field selects the trigger input to be used to synchronize the counter.
            Others: Reserved
            See  for more details on ITRx meaning for each Timer.
            Note: These bits must be changed only when they are not used (e.g. when SMS=000) to avoid wrong edge detections at the transition.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Internal Trigger 0 (ITR0) </description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Internal Trigger 1 (ITR1)</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Internal Trigger 2 (ITR2)</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Internal Trigger 3 (ITR3)</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>TI1 Edge Detector (TI1F_ED)</description>
                <name>B_0x4</name>
                <value>0x4</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Filtered Timer Input 1 (TI1FP1)</description>
                <name>B_0x5</name>
                <value>0x5</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Filtered Timer Input 2 (TI2FP2)</description>
                <name>B_0x6</name>
                <value>0x6</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>External Trigger input (ETRF)</description>
                <name>B_0x7</name>
                <value>0x7</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TS2</name>
          </field>
        </fields>
        <name>TIM1_SMCR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0xC</addressOffset>
        <description>DMA/Interrupt enable register</description>
        <displayName>TIM1_DIER</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Update interrupt enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Update interrupt disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Update interrupt enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>UIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 1 interrupt enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC1 interrupt disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC1 interrupt enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC1IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 2 interrupt enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC2 interrupt disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC2 interrupt enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC2IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 3 interrupt enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC3 interrupt disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC3 interrupt enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC3IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 4 interrupt enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC4 interrupt disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC4 interrupt enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC4IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>COM interrupt enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>COM interrupt disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>COM interrupt enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>COMIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Trigger interrupt enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Trigger interrupt disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Trigger interrupt enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Break interrupt enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Break interrupt disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Break interrupt enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>BIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Update DMA request enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Update DMA request disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Update DMA request enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>UDE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 1 DMA request enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC1 DMA request disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC1 DMA request enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC1DE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 2 DMA request enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC2 DMA request disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC2 DMA request enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC2DE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 3 DMA request enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC3 DMA request disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC3 DMA request enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC3DE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 4 DMA request enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC4 DMA request disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC4 DMA request enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC4DE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>COM DMA request enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>COM DMA request disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>COM DMA request enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>COMDE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Trigger DMA request enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Trigger DMA request disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Trigger DMA request enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TDE</name>
          </field>
        </fields>
        <name>TIM1_DIER</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x10</addressOffset>
        <description>status register</description>
        <displayName>TIM1_SR</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Update interrupt flag
            This bit is set by hardware on an update event. It is cleared by software.
            At overflow or underflow regarding the repetition counter value (update if repetition counter = 0) and if the UDIS=0 in the TIMx_CR1 register.
            When CNT is reinitialized by software using the UG bit in TIMx_EGR register, if URS=0 and UDIS=0 in the TIMx_CR1 register.
            When CNT is reinitialized by a trigger event (refer to control register (TIM1_SMCRTIMx_SMCR)N/A), if URS=0 and UDIS=0 in the TIMx_CR1 register.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No update occurred.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Update interrupt pending. This bit is set by hardware when the registers are updated:</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>UIF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 1 interrupt flag
            This flag is set by hardware. It is cleared by software (input capture or output compare mode) or by reading the TIMx_CCR1 register (input capture mode only).
            If channel CC1 is configured as output: this flag is set when he content of the counter TIMx_CNT matches the content of the TIMx_CCR1 register. When the content of TIMx_CCR1 is greater than the content of TIMx_ARR, the CC1IF bit goes high on the counter overflow (in up-counting and up/down-counting modes) or underflow (in down-counting mode). There are 3 possible options for flag setting in center-aligned mode, refer to the CMS bits in the TIMx_CR1 register for the full description.
            If channel CC1 is configured as input: this bit is set when counter value has been captured in TIMx_CCR1 register (an edge has been detected on IC1, as per the edge sensitivity defined with the CC1P and CC1NP bits setting, in TIMx_CCER).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No compare match / No input capture occurred</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>A compare match or an input capture occurred.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC1IF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 2 interrupt flag
            Refer to CC1IF description</description>
            <name>CC2IF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 3 interrupt flag
            Refer to CC1IF description</description>
            <name>CC3IF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 4 interrupt flag
            Refer to CC1IF description</description>
            <name>CC4IF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>COM interrupt flag
            This flag is set by hardware on COM event (when Capture/compare Control bits - CCxE, CCxNE, OCxM - have been updated). It is cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No COM event occurred.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>COM interrupt pending.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>COMIF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Trigger interrupt flag
            This flag is set by hardware on the TRG trigger event (active edge detected on TRGI input when the slave mode controller is enabled in all modes but gated mode. It is set when the counter starts or stops when gated mode is selected. It is cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No trigger event occurred.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Trigger interrupt pending.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TIF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Break interrupt flag
            This flag is set by hardware as soon as the break input goes active. It can be cleared by software if the break input is not active.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No break event occurred.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>An active level has been detected on the break input. An interrupt is generated if BIE=1 in the TIMx_DIER register.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>BIF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Break 2 interrupt flag
            This flag is set by hardware as soon as the break 2 input goes active. It can be cleared by software if the break 2 input is not active.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No break event occurred.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>An active level has been detected on the break 2 input. An interrupt is generated if BIE=1 in the TIMx_DIER register.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>B2IF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 1 overcapture flag
            This flag is set by hardware only when the corresponding channel is configured in input capture mode. It is cleared by software by writing it to '0â.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No overcapture has been detected.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>The counter value has been captured in TIMx_CCR1 register while CC1IF flag was already set</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC1OF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 2 overcapture flag
            Refer to CC1OF description</description>
            <name>CC2OF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 3 overcapture flag
            Refer to CC1OF description</description>
            <name>CC3OF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 4 overcapture flag
            Refer to CC1OF description</description>
            <name>CC4OF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>System Break interrupt flag
            This flag is set by hardware as soon as the system break input goes active. It can be cleared by software if the system break input is not active.
            This flag must be reset to re-start PWM operation.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No break event occurred.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>An active level has been detected on the system break input. An interrupt is generated if BIE=1 in the TIMx_DIER register.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>SBIF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Compare 5 interrupt flag
            Refer to CC1IF description (Note: Channel 5 can only be configured as output)</description>
            <name>CC5IF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Compare 6 interrupt flag
            Refer to CC1IF description (Note: Channel 6 can only be configured as output)</description>
            <name>CC6IF</name>
          </field>
        </fields>
        <name>TIM1_SR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>write-only</access>
        <addressOffset>0x14</addressOffset>
        <description>event generation register</description>
        <displayName>TIM1_EGR</displayName>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Update generation
            This bit can be set by software, it is automatically cleared by hardware.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No action</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Reinitialize the counter and generates an update of the registers. The prescaler internal counter is also cleared (the prescaler ratio is not affected). The counter is cleared if the center-aligned mode is selected or if DIR=0 (upcounting), else it takes the auto-reload value (TIMx_ARR) if DIR=1 (downcounting).</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>UG</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 1 generation
            This bit is set by software in order to generate an event, it is automatically cleared by hardware.
            If channel CC1 is configured as output:
            CC1IF flag is set, Corresponding interrupt or DMA request is sent if enabled.
            If channel CC1 is configured as input:
            The current value of the counter is captured in TIMx_CCR1 register. The CC1IF flag is set, the corresponding interrupt or DMA request is sent if enabled. The CC1OF flag is set if the CC1IF flag was already high.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No action</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>A capture/compare event is generated on channel 1:</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC1G</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 2 generation
            Refer to CC1G description</description>
            <name>CC2G</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 3 generation
            Refer to CC1G description</description>
            <name>CC3G</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 4 generation
            Refer to CC1G description</description>
            <name>CC4G</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare control update generation
            This bit can be set by software, it is automatically cleared by hardware
            Note: This bit acts only on channels having a complementary output.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No action</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>When CCPC bit is set, it allows CCxE, CCxNE and OCxM bits to be updated.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>COMG</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Trigger generation
            This bit is set by software in order to generate an event, it is automatically cleared by hardware.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No action</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>The TIF flag is set in TIMx_SR register. Related interrupt or DMA transfer can occur if enabled.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TG</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Break generation
            This bit is set by software in order to generate an event, it is automatically cleared by hardware.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No action</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>A break event is generated. MOE bit is cleared and BIF flag is set. Related interrupt or DMA transfer can occur if enabled.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>BG</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Break 2 generation
            This bit is set by software in order to generate an event, it is automatically cleared by hardware.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No action</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>A break 2 event is generated. MOE bit is cleared and B2IF flag is set. Related interrupt can occur if enabled.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>B2G</name>
          </field>
        </fields>
        <name>TIM1_EGR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x18</addressOffset>
        <description>capture/compare mode register 1 (output
                  mode)</description>
        <displayName>CCMR1_Output</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Capture/Compare 1 selection
            This bit-field defines the direction of the channel (input/output) as well as the used input.
            Note: CC1S bits are writable only when the channel is OFF (CC1E = '0â in TIMx_CCER).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC1 channel is configured as output</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC1 channel is configured as input, IC1 is mapped on TI1</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC1 channel is configured as input, IC1 is mapped on TI2</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC1 channel is configured as input, IC1 is mapped on TRC. This mode is working only if an internal trigger input is selected through TS bit (TIMx_SMCR register)</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC1S</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output Compare 1 fast enable
            This bit decreases the latency between a trigger event and a transition on the timer output. It must be used in one-pulse mode (OPM bit set in TIMx_CR1 register), to have the output pulse starting as soon as possible after the starting trigger.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC1 behaves normally depending on counter and CCR1 values even when the trigger is ON. The minimum delay to activate CC1 output when an edge occurs on the trigger input is 5 clock cycles.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>An active edge on the trigger input acts like a compare match on CC1 output. Then, OC is set to the compare level independently from the result of the comparison. Delay to sample the trigger input and to activate CC1 output is reduced to 3 clock cycles. OCFE acts only if the channel is configured in PWM1 or PWM2 mode.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>OC1FE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output Compare 1 preload enable
            Note: These bits can not be modified as long as LOCK level 3 has been programmed (LOCK bits in TIMx_BDTR register) and CC1S=â00â (the channel is configured in output).
            The PWM mode can be used without validating the preload register only in one pulse mode (OPM bit set in TIMx_CR1 register). Else the behavior is not guaranteed.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Preload register on TIMx_CCR1 disabled. TIMx_CCR1 can be written at anytime, the new value is taken in account immediately.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Preload register on TIMx_CCR1 enabled. Read/Write operations access the preload register. TIMx_CCR1 preload value is loaded in the active register at each update event.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>OC1PE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Output Compare 1 mode
            These bits define the behavior of the output reference signal OC1REF from which OC1 and OC1N are derived. OC1REF is active high whereas OC1 and OC1N active level depends on CC1P and CC1NP bits.
            Note: These bits can not be modified as long as LOCK level 3 has been programmed (LOCK bits in TIMx_BDTR register) and CC1S=â00â (the channel is configured in output).
            Note: In PWM mode, the OCREF level changes only when the result of the comparison changes or when the output compare mode switches from âfrozenâ mode to âPWMâ mode.
            Note: On channels having a complementary output, this bit field is preloaded. If the CCPC bit is set in the TIMx_CR2 register then the OC1M active bits take the new value from the preloaded bits only when a COM event is generated.
            Note: The OC1M[3] bit is not contiguous, located in bit 16.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Frozen - The comparison between the output compare register TIMx_CCR1 and the counter TIMx_CNT has no effect on the outputs.(this mode is used to generate a timing base).</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Set channel 1 to active level on match. OC1REF signal is forced high when the counter TIMx_CNT matches the capture/compare register 1 (TIMx_CCR1).</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Set channel 1 to inactive level on match. OC1REF signal is forced low when the counter TIMx_CNT matches the capture/compare register 1 (TIMx_CCR1).</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Toggle - OC1REF toggles when TIMx_CNT=TIMx_CCR1.</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Force inactive level - OC1REF is forced low.</description>
                <name>B_0x4</name>
                <value>0x4</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Force active level - OC1REF is forced high.</description>
                <name>B_0x5</name>
                <value>0x5</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>PWM mode 1 - In upcounting, channel 1 is active as long as TIMx_CNT&lt;TIMx_CCR1 else inactive. In downcounting, channel 1 is inactive (OC1REF='0â) as long as TIMx_CNT&gt;TIMx_CCR1 else active (OC1REF=â1â).</description>
                <name>B_0x6</name>
                <value>0x6</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>PWM mode 2 - In upcounting, channel 1 is inactive as long as TIMx_CNT&lt;TIMx_CCR1 else active. In downcounting, channel 1 is active as long as TIMx_CNT&gt;TIMx_CCR1 else inactive.</description>
                <name>B_0x7</name>
                <value>0x7</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Retrigerrable OPM mode 1 - In up-counting mode, the channel is active until a trigger event is detected (on TRGI signal). Then, a comparison is performed as in PWM mode 1 and the channels becomes active again at the next update. In down-counting mode, the channel is inactive until a trigger event is detected (on TRGI signal). Then, a comparison is performed as in PWM mode 1 and the channels becomes inactive again at the next update.</description>
                <name>B_0x8</name>
                <value>0x8</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Retrigerrable OPM mode 2 - In up-counting mode, the channel is inactive until a trigger event is detected (on TRGI signal). Then, a comparison is performed as in PWM mode 2 and the channels becomes inactive again at the next update. In down-counting mode, the channel is active until a trigger event is detected (on TRGI signal). Then, a comparison is performed as in PWM mode 1 and the channels becomes active again at the next update.</description>
                <name>B_0x9</name>
                <value>0x9</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Combined PWM mode 1 - OC1REF has the same behavior as in PWM mode 1. OC1REFC is the logical OR between OC1REF and OC2REF.</description>
                <name>B_0xC</name>
                <value>0xC</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Combined PWM mode 2 - OC1REF has the same behavior as in PWM mode 2. OC1REFC is the logical AND between OC1REF and OC2REF.</description>
                <name>B_0xD</name>
                <value>0xD</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Asymmetric PWM mode 1 - OC1REF has the same behavior as in PWM mode 1. OC1REFC outputs OC1REF when the counter is counting up, OC2REF when it is counting down.</description>
                <name>B_0xE</name>
                <value>0xE</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Asymmetric PWM mode 2 - OC1REF has the same behavior as in PWM mode 2. OC1REFC outputs OC1REF when the counter is counting up, OC2REF when it is counting down.</description>
                <name>B_0xF</name>
                <value>0xF</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>OC1M1</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output Compare 1 clear enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>OC1Ref is not affected by the ocref_clr_int signal</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>OC1Ref is cleared as soon as a High level is detected on ocref_clr_int signal (OCREF_CLR input or ETRF input)</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>OC1CE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Capture/Compare 2 selection
            This bit-field defines the direction of the channel (input/output) as well as the used input.
            Note: CC2S bits are writable only when the channel is OFF (CC2E = '0â in TIMx_CCER).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC2 channel is configured as output</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC2 channel is configured as input, IC2 is mapped on TI2</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC2 channel is configured as input, IC2 is mapped on TI1</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC2 channel is configured as input, IC2 is mapped on TRC. This mode is working only if an internal trigger input is selected through the TS bit (TIMx_SMCR register)</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC2S</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output Compare 2 fast enable
            Refer to OC1FE description.</description>
            <name>OC2FE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output Compare 2 preload enable
            Refer to OC1PE description.</description>
            <name>OC2PE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Output Compare 2 mode
            Refer to OC1M[3:0] description.</description>
            <name>OC2M1</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output Compare 2 clear enable
            Refer to OC1CE description.</description>
            <name>OC2CE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output Compare 1 mode
            These bits define the behavior of the output reference signal OC1REF from which OC1 and OC1N are derived. OC1REF is active high whereas OC1 and OC1N active level depends on CC1P and CC1NP bits.
            Note: These bits can not be modified as long as LOCK level 3 has been programmed (LOCK bits in TIMx_BDTR register) and CC1S=â00â (the channel is configured in output).
            Note: In PWM mode, the OCREF level changes only when the result of the comparison changes or when the output compare mode switches from âfrozenâ mode to âPWMâ mode.
            Note: On channels having a complementary output, this bit field is preloaded. If the CCPC bit is set in the TIMx_CR2 register then the OC1M active bits take the new value from the preloaded bits only when a COM event is generated.
            Note: The OC1M[3] bit is not contiguous, located in bit 16.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Frozen - The comparison between the output compare register TIMx_CCR1 and the counter TIMx_CNT has no effect on the outputs.(this mode is used to generate a timing base).</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Set channel 1 to active level on match. OC1REF signal is forced high when the counter TIMx_CNT matches the capture/compare register 1 (TIMx_CCR1).</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Set channel 1 to inactive level on match. OC1REF signal is forced low when the counter TIMx_CNT matches the capture/compare register 1 (TIMx_CCR1).</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Toggle - OC1REF toggles when TIMx_CNT=TIMx_CCR1.</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Force inactive level - OC1REF is forced low.</description>
                <name>B_0x4</name>
                <value>0x4</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Force active level - OC1REF is forced high.</description>
                <name>B_0x5</name>
                <value>0x5</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>PWM mode 1 - In upcounting, channel 1 is active as long as TIMx_CNT&lt;TIMx_CCR1 else inactive. In downcounting, channel 1 is inactive (OC1REF='0â) as long as TIMx_CNT&gt;TIMx_CCR1 else active (OC1REF=â1â).</description>
                <name>B_0x6</name>
                <value>0x6</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>PWM mode 2 - In upcounting, channel 1 is inactive as long as TIMx_CNT&lt;TIMx_CCR1 else active. In downcounting, channel 1 is active as long as TIMx_CNT&gt;TIMx_CCR1 else inactive.</description>
                <name>B_0x7</name>
                <value>0x7</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Retrigerrable OPM mode 1 - In up-counting mode, the channel is active until a trigger event is detected (on TRGI signal). Then, a comparison is performed as in PWM mode 1 and the channels becomes active again at the next update. In down-counting mode, the channel is inactive until a trigger event is detected (on TRGI signal). Then, a comparison is performed as in PWM mode 1 and the channels becomes inactive again at the next update.</description>
                <name>B_0x8</name>
                <value>0x8</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Retrigerrable OPM mode 2 - In up-counting mode, the channel is inactive until a trigger event is detected (on TRGI signal). Then, a comparison is performed as in PWM mode 2 and the channels becomes inactive again at the next update. In down-counting mode, the channel is active until a trigger event is detected (on TRGI signal). Then, a comparison is performed as in PWM mode 1 and the channels becomes active again at the next update.</description>
                <name>B_0x9</name>
                <value>0x9</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Combined PWM mode 1 - OC1REF has the same behavior as in PWM mode 1. OC1REFC is the logical OR between OC1REF and OC2REF.</description>
                <name>B_0xC</name>
                <value>0xC</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Combined PWM mode 2 - OC1REF has the same behavior as in PWM mode 2. OC1REFC is the logical AND between OC1REF and OC2REF.</description>
                <name>B_0xD</name>
                <value>0xD</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Asymmetric PWM mode 1 - OC1REF has the same behavior as in PWM mode 1. OC1REFC outputs OC1REF when the counter is counting up, OC2REF when it is counting down.</description>
                <name>B_0xE</name>
                <value>0xE</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Asymmetric PWM mode 2 - OC1REF has the same behavior as in PWM mode 2. OC1REFC outputs OC1REF when the counter is counting up, OC2REF when it is counting down.</description>
                <name>B_0xF</name>
                <value>0xF</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>OC1M2</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output Compare 2 mode
            Refer to OC1M[3:0] description.</description>
            <name>OC2M2</name>
          </field>
        </fields>
        <name>CCMR1_Output</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x18</addressOffset>
        <description>capture/compare mode register 1 (output
                  mode)</description>
        <displayName>CCMR1_Input</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Capture/Compare 1 Selection
            This bit-field defines the direction of the channel (input/output) as well as the used input.
            Note: CC1S bits are writable only when the channel is OFF (CC1E = '0â in TIMx_CCER).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC1 channel is configured as output</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC1 channel is configured as input, IC1 is mapped on TI1</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC1 channel is configured as input, IC1 is mapped on TI2</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC1 channel is configured as input, IC1 is mapped on TRC. This mode is working only if an internal trigger input is selected through TS bit (TIMx_SMCR register)</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC1S</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Input capture 1 prescaler
            This bit-field defines the ratio of the prescaler acting on CC1 input (IC1). The prescaler is reset as soon as CC1E=â0â (TIMx_CCER register).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>no prescaler, capture is done each time an edge is detected on the capture input</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>capture is done once every 2 events</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>capture is done once every 4 events</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>capture is done once every 8 events</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>IC1PSC</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Input capture 1 filter
            This bit-field defines the frequency used to sample TI1 input and the length of the digital filter applied to TI1. The digital filter is made of an event counter in which N consecutive events are needed to validate a transition on the output:</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No filter, sampling is done at fDTS</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fCK_INT, N=2</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fCK_INT, N=4</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fCK_INT, N=8</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/2, N=6</description>
                <name>B_0x4</name>
                <value>0x4</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/2, N=8</description>
                <name>B_0x5</name>
                <value>0x5</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/4, N=6</description>
                <name>B_0x6</name>
                <value>0x6</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/4, N=8</description>
                <name>B_0x7</name>
                <value>0x7</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/8, N=6</description>
                <name>B_0x8</name>
                <value>0x8</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/8, N=8</description>
                <name>B_0x9</name>
                <value>0x9</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/16, N=5</description>
                <name>B_0xA</name>
                <value>0xA</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/16, N=6</description>
                <name>B_0xB</name>
                <value>0xB</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/16, N=8</description>
                <name>B_0xC</name>
                <value>0xC</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/32, N=5</description>
                <name>B_0xD</name>
                <value>0xD</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/32, N=6</description>
                <name>B_0xE</name>
                <value>0xE</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/32, N=8</description>
                <name>B_0xF</name>
                <value>0xF</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>IC1F</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Capture/Compare 2 selection
            This bit-field defines the direction of the channel (input/output) as well as the used input.
            Note: CC2S bits are writable only when the channel is OFF (CC2E = '0â in TIMx_CCER).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC2 channel is configured as output</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC2 channel is configured as input, IC2 is mapped on TI2</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC2 channel is configured as input, IC2 is mapped on TI1</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC2 channel is configured as input, IC2 is mapped on TRC. This mode is working only if an internal trigger input is selected through TS bit (TIMx_SMCR register)</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC2S</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Input capture 2 prescaler
            Refer to IC1PSC[1:0] description.</description>
            <name>IC2PSC</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Input capture 2 filter
            Refer to IC1F[3:0] description.</description>
            <name>IC2F</name>
          </field>
        </fields>
        <name>CCMR1_Input</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x1C</addressOffset>
        <description>capture/compare mode register 2 (output
                  mode)</description>
        <displayName>CCMR2_Output</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Capture/Compare 3 selection
            This bit-field defines the direction of the channel (input/output) as well as the used input.
            Note: CC3S bits are writable only when the channel is OFF (CC3E = '0â in TIMx_CCER).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC3 channel is configured as output</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC3 channel is configured as input, IC3 is mapped on TI3</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC3 channel is configured as input, IC3 is mapped on TI4</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC3 channel is configured as input, IC3 is mapped on TRC. This mode is working only if an internal trigger input is selected through TS bit (TIMx_SMCR register)</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC3S</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output compare 3 fast enable
            Refer to OC1FE description.</description>
            <name>OC3FE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output compare 3 preload enable
            Refer to OC1PE description.</description>
            <name>OC3PE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Output compare 3 mode
            Refer to OC1M[3:0] description.</description>
            <name>OC3M1</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output compare 3 clear enable
            Refer to OC1CE description.</description>
            <name>OC3CE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Capture/Compare 4 selection
            This bit-field defines the direction of the channel (input/output) as well as the used input.
            Note: CC4S bits are writable only when the channel is OFF (CC4E = '0â in TIMx_CCER).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC4 channel is configured as output</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC4 channel is configured as input, IC4 is mapped on TI4</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC4 channel is configured as input, IC4 is mapped on TI3</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC4 channel is configured as input, IC4 is mapped on TRC. This mode is working only if an internal trigger input is selected through TS bit (TIMx_SMCR register)</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC4S</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output compare 4 fast enable
            Refer to OC1FE description.</description>
            <name>OC4FE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output compare 4 preload enable
            Refer to OC1PE description.</description>
            <name>OC4PE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Output compare 4 mode
            Refer to OC3M[3:0] description.</description>
            <name>OC4M1</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output compare 4 clear enable
            Refer to OC1CE description.</description>
            <name>OC4CE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output compare 3 mode
            Refer to OC1M[3:0] description.</description>
            <name>OC3M2</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output compare 4 mode
            Refer to OC3M[3:0] description.</description>
            <name>OC4M2</name>
          </field>
        </fields>
        <name>CCMR2_Output</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x1C</addressOffset>
        <description>capture/compare mode register 2 (output
                  mode)</description>
        <displayName>CCMR2_Input</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Capture/compare 3 selection
            This bit-field defines the direction of the channel (input/output) as well as the used input.
            Note: CC3S bits are writable only when the channel is OFF (CC3E = '0â in TIMx_CCER).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC3 channel is configured as output</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC3 channel is configured as input, IC3 is mapped on TI3</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC3 channel is configured as input, IC3 is mapped on TI4</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC3 channel is configured as input, IC3 is mapped on TRC. This mode is working only if an internal trigger input is selected through TS bit (TIMx_SMCR register)</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC3S</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Input capture 3 prescaler
            Refer to IC1PSC[1:0] description.</description>
            <name>IC3PSC</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Input capture 3 filter
            Refer to IC1F[3:0] description.</description>
            <name>IC3F</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Capture/Compare 4 selection
            This bit-field defines the direction of the channel (input/output) as well as the used input.
            Note: CC4S bits are writable only when the channel is OFF (CC4E = '0â in TIMx_CCER).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC4 channel is configured as output</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC4 channel is configured as input, IC4 is mapped on TI4</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC4 channel is configured as input, IC4 is mapped on TI3</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC4 channel is configured as input, IC4 is mapped on TRC. This mode is working only if an internal trigger input is selected through TS bit (TIMx_SMCR register)</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC4S</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Input capture 4 prescaler
            Refer to IC1PSC[1:0] description.</description>
            <name>IC4PSC</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Input capture 4 filter
            Refer to IC1F[3:0] description.</description>
            <name>IC4F</name>
          </field>
        </fields>
        <name>CCMR2_Input</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x20</addressOffset>
        <description>capture/compare enable
                  register</description>
        <displayName>TIM1_CCER</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 1 output enable
            When CC1 channel is configured as output, the OC1 level depends on MOE, OSSI, OSSR, OIS1, OIS1N and CC1NE bits, regardless of the CC1E bits state. Refer to  for details.
            Note: On channels having a complementary output, this bit is preloaded. If the CCPC bit is set in the TIMx_CR2 register then the CC1E active bit takes the new value from the preloaded bit only when a Commutation event is generated.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Capture mode disabled / OC1 is not active (see below)</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Capture mode enabled / OC1 signal is output on the corresponding output pin</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC1E</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 1 output polarity
            When CC1 channel is configured as input, both CC1NP/CC1P bits select the active polarity of TI1FP1 and TI2FP1 for trigger or capture operations.
            CC1NP=0, CC1P=0:	non-inverted/rising edge. The circuit is sensitive to TIxFP1 rising edge (capture or trigger operations in reset, external clock or trigger mode), TIxFP1 is not inverted (trigger operation in gated mode or encoder mode).
            CC1NP=0, CC1P=1:	inverted/falling edge. The circuit is sensitive to TIxFP1 falling edge (capture or trigger operations in reset, external clock or trigger mode), TIxFP1 is inverted (trigger operation in gated mode or encoder mode).
            CC1NP=1, CC1P=1:	non-inverted/both edges/ The circuit is sensitive to both TIxFP1 rising and falling edges (capture or trigger operations in reset, external clock or trigger mode), TIxFP1is not inverted (trigger operation in gated mode). This configuration must not be used in encoder mode.
            CC1NP=1, CC1P=0:	The configuration is reserved, it must not be used.
            Note: This bit is not writable as soon as LOCK level 2 or 3 has been programmed (LOCK bits in TIMx_BDTR register).
            On channels having a complementary output, this bit is preloaded. If the CCPC bit is set in the TIMx_CR2 register then the CC1P active bit takes the new value from the preloaded bit only when a Commutation event is generated.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>OC1 active high (output mode) / Edge sensitivity selection (input mode, see below)</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>OC1 active low (output mode) / Edge sensitivity selection (input mode, see below)</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC1P</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 1 complementary output enable
            On channels having a complementary output, this bit is preloaded. If the CCPC bit is set in the TIMx_CR2 register then the CC1NE active bit takes the new value from the preloaded bit only when a Commutation event is generated.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Off - OC1N is not active. OC1N level is then function of MOE, OSSI, OSSR, OIS1, OIS1N and CC1E bits.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>On - OC1N signal is output on the corresponding output pin depending on MOE, OSSI, OSSR, OIS1, OIS1N and CC1E bits.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC1NE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 1 complementary output polarity
            CC1 channel configured as output:
            CC1 channel configured as input:
            This bit is used in conjunction with CC1P to define the polarity of TI1FP1 and TI2FP1. Refer to CC1P description.
            Note: This bit is not writable as soon as LOCK level 2 or 3 has been programmed (LOCK bits in TIMx_BDTR register) and CC1S=â00â (channel configured as output).
            On channels having a complementary output, this bit is preloaded. If the CCPC bit is set in the TIMx_CR2 register then the CC1NP active bit takes the new value from the preloaded bit only when a Commutation event is generated.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>OC1N active high.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>OC1N active low.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC1NP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 2 output enable
            Refer to CC1E description</description>
            <name>CC2E</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 2 output polarity
            Refer to CC1P description</description>
            <name>CC2P</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 2 complementary output enable
            Refer to CC1NE description</description>
            <name>CC2NE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 2 complementary output polarity
            Refer to CC1NP description</description>
            <name>CC2NP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 3 output enable
            Refer to CC1E description</description>
            <name>CC3E</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 3 output polarity
            Refer to CC1P description</description>
            <name>CC3P</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 3 complementary output enable
            Refer to CC1NE description</description>
            <name>CC3NE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 3 complementary output polarity
            Refer to CC1NP description</description>
            <name>CC3NP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 4 output enable
            Refer to CC1E description</description>
            <name>CC4E</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 4 output polarity
            Refer to CC1P description</description>
            <name>CC4P</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 4 complementary output polarity
            Refer to CC1NP description</description>
            <name>CC4NP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 5 output enable
            Refer to CC1E description</description>
            <name>CC5E</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 5 output polarity
            Refer to CC1P description</description>
            <name>CC5P</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 6 output enable
            Refer to CC1E description</description>
            <name>CC6E</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 6 output polarity
            Refer to CC1P description</description>
            <name>CC6P</name>
          </field>
        </fields>
        <name>TIM1_CCER</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x24</addressOffset>
        <description>counter</description>
        <displayName>TIM1_CNT</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>Counter value</description>
            <name>CNT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>UIF copy
            This bit is a read-only copy of the UIF bit of the TIMx_ISR register. If the UIFREMAP bit in the TIMxCR1 is reset, bit 31 is reserved and read at 0.</description>
            <name>UIFCPY</name>
          </field>
        </fields>
        <name>TIM1_CNT</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x28</addressOffset>
        <description>prescaler</description>
        <displayName>TIM1_PSC</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>Prescaler value
            The counter clock frequency (CK_CNT) is equal to fCK_PSC / (PSC[15:0] + 1).
            PSC contains the value to be loaded in the active prescaler register at each update event (including when the counter is cleared through UG bit of TIMx_EGR register or through trigger controller when configured in âreset modeâ).</description>
            <name>PSC</name>
          </field>
        </fields>
        <name>TIM1_PSC</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x2C</addressOffset>
        <description>auto-reload register</description>
        <displayName>TIM1_ARR</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>Auto-reload value
            ARR is the value to be loaded in the actual auto-reload register.
            Refer to the  for more details about ARR update and behavior.
            The counter is blocked while the auto-reload value is null.</description>
            <name>ARR</name>
          </field>
        </fields>
        <name>TIM1_ARR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xFFFF</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x30</addressOffset>
        <description>repetition counter register</description>
        <displayName>TIM1_RCR</displayName>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>Repetition counter value</description>
            <name>REP</name>
          </field>
        </fields>
        <name>TIM1_RCR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x34</addressOffset>
        <description>capture/compare register 1</description>
        <displayName>TIM1_CCR1</displayName>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>Capture/Compare 1 value</description>
            <name>CCR1</name>
          </field>
        </fields>
        <name>TIM1_CCR1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x38</addressOffset>
        <description>capture/compare register 2</description>
        <displayName>TIM1_CCR2</displayName>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>Capture/Compare 2 value</description>
            <name>CCR2</name>
          </field>
        </fields>
        <name>TIM1_CCR2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x3C</addressOffset>
        <description>capture/compare register 3</description>
        <displayName>TIM1_CCR3</displayName>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>Capture/Compare value</description>
            <name>CCR3</name>
          </field>
        </fields>
        <name>TIM1_CCR3</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x40</addressOffset>
        <description>capture/compare register 4</description>
        <displayName>TIM1_CCR4</displayName>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>Capture/Compare value</description>
            <name>CCR4</name>
          </field>
        </fields>
        <name>TIM1_CCR4</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x44</addressOffset>
        <description>break and dead-time register</description>
        <displayName>TIM1_BDTR</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>Dead-time generator setup
            This bit-field defines the duration of the dead-time inserted between the complementary outputs. DT correspond to this duration.
            DTG[7:5]=0xx =&gt; DT=DTG[7:0]x tDTG with tDTG=tDTS.
            DTG[7:5]=10x =&gt; DT=(64+DTG[5:0])xtDTG with tDTG=2xtDTS.
            DTG[7:5]=110 =&gt; DT=(32+DTG[4:0])xtDTG with tDTG=8xtDTS.
            DTG[7:5]=111 =&gt; DT=(32+DTG[4:0])xtDTG with tDTG=16xtDTS.
            Example if tDTS=125Â ns (8Â MHz), dead-time possible values are:
            0 to 15875Â ns by 125Â ns steps,
            16Â Î¼s to 31750Â nsÂ  by 250Â ns steps,
            32Â Î¼s to 63Â Î¼s by 1Â Î¼s steps,
            64Â Î¼s to 126Â Î¼s by 2Â Î¼s steps
            Note: This bit-field can not be modified as long as LOCK level 1, 2 or 3 has been programmed (LOCK bits in TIMx_BDTR register).</description>
            <name>DTG</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Lock configuration
            These bits offer a write protection against software errors.
            Note: The LOCK bits can be written only once after the reset. Once the TIMx_BDTR register has been written, their content is frozen until the next reset.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>LOCK OFF - No bit is write protected.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>LOCK Level 1 = DTG bits in TIMx_BDTR register, OISx and OISxN bits in TIMx_CR2 register and BK2BID, BKBID, BK2DSRM, BKDSRM, BK2P, BK2E, BK2F[3:0], BKF[3:0], AOE, BKP, BKE, OSSI, OSSR and DTG[7:0] bits in TIMx_BDTR register can no longer be written.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>LOCK Level 2 = LOCK Level 1 + CC Polarity bits (CCxP/CCxNP bits in TIMx_CCER register, as long as the related channel is configured in output through the CCxS bits) as well as OSSR and OSSI bits can no longer be written.</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>LOCK Level 3 = LOCK Level 2 + CC Control bits (OCxM and OCxPE bits in TIMx_CCMRx registers, as long as the related channel is configured in output through the CCxS bits) can no longer be written.</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>LOCK</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Off-state selection for Idle mode
            This bit is used when MOE=0 due to a break event or by a software write, on channels configured as outputs.
            See OC/OCN enable description for more details (enable register (TIM1_CCERTIMx_CCER)N/A).
            Note: This bit can not be modified as soon as the LOCK level 2 has been programmed (LOCK bits in TIMx_BDTR register).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>When inactive, OC/OCN outputs are disabled (the timer releases the output control which is taken over by the GPIO logic and which imposes a Hi-Z state).</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>When inactive, OC/OCN outputs are first forced with their inactive level then forced to their idle level after the deadtime. The timer maintains its control over the output.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>OSSI</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Off-state selection for Run mode
            This bit is used when MOE=1 on channels having a complementary output which are configured as outputs. OSSR is not implemented if no complementary output is implemented in the timer.
            See OC/OCN enable description for more details (enable register (TIM1_CCERTIMx_CCER)N/A).
            Note: This bit can not be modified as soon as the LOCK level 2 has been programmed (LOCK bits in TIMx_BDTR register).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>When inactive, OC/OCN outputs are disabled (the timer releases the output control which is taken over by the GPIO logic, which forces a Hi-Z state).</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>When inactive, OC/OCN outputs are enabled with their inactive level as soon as CCxE=1 or CCxNE=1 (the output is still controlled by the timer).</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>OSSR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Break enable
            This bit enables the complete break protection (including all sources connected to bk_acth and BKIN sources, as per ).
            Note: This bit cannot be modified when LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).
            Note: Any write operation to this bit takes a delay of 1 APB clock cycle to become effective.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Break function disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Break function enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>BKE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Break polarity
            Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).
            Note: Any write operation to this bit takes a delay of 1 APB clock cycle to become effective.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Break input BRK is active low</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Break input BRK is active high</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>BKP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Automatic output enable
            Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>MOE can be set only by software</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>MOE can be set by software or automatically at the next update event (if none of the break inputs BRK and BRK2 is active)</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>AOE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Main output enable
            This bit is cleared asynchronously by hardware as soon as one of the break inputs is active (BRK or BRK2). It is set by software or automatically depending on the AOE bit. It is acting only on the channels which are configured in output.
            In response to a break event or if MOE is written to 0: OC and OCN outputs are disabled or forced to idle state depending on the OSSI bit.
            See OC/OCN enable description for more details (enable register (TIM1_CCERTIMx_CCER)N/A).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>In response to a break 2 event. OC and OCN outputs are disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>OC and OCN outputs are enabled if their respective enable bits are set (CCxE, CCxNE in TIMx_CCER register).</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>MOE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Break filter
            This bit-field defines the frequency used to sample BRK input and the length of the digital filter applied to BRK. The digital filter is made of an event counter in which N consecutive events are needed to validate a transition on the output:
            Note: This bit cannot be modified when LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No filter, BRK acts asynchronously</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fCK_INT, N=2</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fCK_INT, N=4</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fCK_INT, N=8</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/2, N=6</description>
                <name>B_0x4</name>
                <value>0x4</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/2, N=8</description>
                <name>B_0x5</name>
                <value>0x5</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/4, N=6</description>
                <name>B_0x6</name>
                <value>0x6</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/4, N=8</description>
                <name>B_0x7</name>
                <value>0x7</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/8, N=6</description>
                <name>B_0x8</name>
                <value>0x8</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/8, N=8</description>
                <name>B_0x9</name>
                <value>0x9</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/16, N=5</description>
                <name>B_0xA</name>
                <value>0xA</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/16, N=6</description>
                <name>B_0xB</name>
                <value>0xB</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/16, N=8</description>
                <name>B_0xC</name>
                <value>0xC</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/32, N=5</description>
                <name>B_0xD</name>
                <value>0xD</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/32, N=6</description>
                <name>B_0xE</name>
                <value>0xE</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/32, N=8</description>
                <name>B_0xF</name>
                <value>0xF</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>BKF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Break 2 filter
            This bit-field defines the frequency used to sample BRK2 input and the length of the digital filter applied to BRK2. The digital filter is made of an event counter in which N consecutive events are needed to validate a transition on the output:
            Note: This bit cannot be modified when LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No filter, BRK2 acts asynchronously</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fCK_INT, N=2</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fCK_INT, N=4</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fCK_INT, N=8</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/2, N=6</description>
                <name>B_0x4</name>
                <value>0x4</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/2, N=8</description>
                <name>B_0x5</name>
                <value>0x5</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/4, N=6</description>
                <name>B_0x6</name>
                <value>0x6</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/4, N=8</description>
                <name>B_0x7</name>
                <value>0x7</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/8, N=6</description>
                <name>B_0x8</name>
                <value>0x8</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/8, N=8</description>
                <name>B_0x9</name>
                <value>0x9</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/16, N=5</description>
                <name>B_0xA</name>
                <value>0xA</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/16, N=6</description>
                <name>B_0xB</name>
                <value>0xB</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/16, N=8</description>
                <name>B_0xC</name>
                <value>0xC</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/32, N=5</description>
                <name>B_0xD</name>
                <value>0xD</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/32, N=6</description>
                <name>B_0xE</name>
                <value>0xE</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/32, N=8</description>
                <name>B_0xF</name>
                <value>0xF</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>BK2F</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Break 2 enable
            Note: The BRK2 must only be used with OSSR = OSSI = 1.
            Note: This bit cannot be modified when LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).
            Note: Any write operation to this bit takes a delay of 1 APB clock cycle to become effective.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Break input BRK2 disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Break input BRK2 enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>BK2E</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Break 2 polarity
            Note: This bit cannot be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).
            Note: Any write operation to this bit takes a delay of 1 APB clock cycle to become effective.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Break input BRK2 is active low</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Break input BRK2 is active high</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>BK2P</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Break Disarm
            This bit is cleared by hardware when no break source is active.
            The BKDSRM bit must be set by software to release the bidirectional output control (open-drain output in Hi-Z state) and then be polled it until it is reset by hardware, indicating that the fault condition has disappeared.
            Note: Any write operation to this bit takes a delay of 1 APB clock cycle to become effective.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Break input BRK is armed</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Break input BRK is disarmed</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>BKDSRM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Break2 Disarm
            Refer to BKDSRM description</description>
            <name>BK2DSRM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Break Bidirectional
            In the bidirectional mode (BKBID bit set to 1), the break input is configured both in input mode and in open drain output mode. Any active break event asserts a low logic level on the Break input to indicate an internal break event to external devices.
            Note: This bit cannot be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).
            Note: Any write operation to this bit takes a delay of 1 APB clock cycle to become effective.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Break input BRK in input mode</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Break input BRK in bidirectional mode</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>BKBID</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Break2 bidirectional
            Refer to BKBID description</description>
            <name>BK2BID</name>
          </field>
        </fields>
        <name>TIM1_BDTR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x48</addressOffset>
        <description>DMA control register</description>
        <displayName>TIM1_DCR</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>DMA base address
            This 5-bits vector defines the base-address for DMA transfers (when read/write access are done through the TIMx_DMAR address). DBA is defined as an offset starting from the address of the TIMx_CR1 register.
            Example:
            ...</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>TIMx_CR1,</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>TIMx_CR2,</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>TIMx_SMCR,</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>DBA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>DMA burst length
            This 5-bit vector defines the length of DMA transfers (the timer recognizes a burst transfer when a read or a write access is done to the TIMx_DMAR address), i.e. the number of transfers. Transfers can be in half-words or in bytes (see example below).
            ...
            Example: Let us consider the following transfer: DBL = 7 bytes &amp; DBA = TIMx_CR1.
            If DBL = 7 bytes and DBA = TIMx_CR1 represents the address of the byte to be transferred, the address of the transfer should be given by the following equation:
            (TIMx_CR1 address) + DBA + (DMA index), where DMA index = DBL
            In this example, 7 bytes are added to (TIMx_CR1 address) + DBA, which gives us the address from/to which the data is copied. In this case, the transfer is done to 7 registers starting from the following address: (TIMx_CR1 address) + DBA
            According to the configuration of the DMA Data Size, several cases may occur:
            If the DMA Data Size is configured in half-words, 16-bit data is transferred to each of the 7 registers.
            If the DMA Data Size is configured in bytes, the data is also transferred to 7 registers: the first register contains the first MSB byte, the second register, the first LSB byte and so on. So with the transfer Timer, one also has to specify the size of data transferred by DMA.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>1 transfer</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>2 transfers</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>3 transfers</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>18 transfers</description>
                <name>B_0x11</name>
                <value>0x11</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>DBL</name>
          </field>
        </fields>
        <name>TIM1_DCR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x4C</addressOffset>
        <description>DMA address for full transfer</description>
        <displayName>TIM1_DMAR</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>DMA register for burst accesses
            	A read or write operation to the DMAR register accesses the register located at the address (TIMx_CR1 address) + (DBA + DMA index) x 4
            	where TIMx_CR1 address is the address of the control register 1, DBA is the DMA base address configured in TIMx_DCR register, DMA index is automatically controlled by the DMA transfer, and ranges from 0 to DBL (DBL configured in TIMx_DCR).</description>
            <name>DMAB</name>
          </field>
        </fields>
        <name>TIM1_DMAR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x50</addressOffset>
        <description>option register 1</description>
        <displayName>TIM1_OR1</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Ocref_clr source selection
            This bit selects the ocref_clr input source.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>COMP1 output is connected to the OCREF_CLR input</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>COMP2 output is connected to the OCREF_CLR input</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>OCREF_CLR</name>
          </field>
        </fields>
        <name>TIM1_OR1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x54</addressOffset>
        <description>capture/compare mode register 2 (output
                  mode)</description>
        <displayName>CCMR3_Output</displayName>
        <fields>
          <field>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output Compare 6 mode bit
                          3</description>
            <name>OC6M_bit3</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output Compare 5 mode bit
                          3</description>
            <name>OC5M_bit3</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output compare 6 clear
                          enable</description>
            <name>OC6CE</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Output compare 6 mode</description>
            <name>OC6M</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output compare 6 preload
                          enable</description>
            <name>OC6PE</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output compare 6 fast
                          enable</description>
            <name>OC6FE</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output compare 5 clear
                          enable</description>
            <name>OC5CE</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Output compare 5 mode</description>
            <name>OC5M</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output compare 5 preload
                          enable</description>
            <name>OC5PE</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output compare 5 fast
                          enable</description>
            <name>OC5FE</name>
          </field>
        </fields>
        <name>CCMR3_Output</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x58</addressOffset>
        <description>capture/compare register 4</description>
        <displayName>TIM1_CCR5</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>Capture/Compare 5 value
            CCR5 is the value to be loaded in the actual capture/compare 5 register (preload value).
            It is loaded permanently if the preload feature is not selected in the TIMx_CCMR3 register (bit OC5PE). Else the preload value is copied in the active capture/compare 5 register when an update event occurs.
            The active capture/compare register contains the value to be compared to the counter TIMx_CNT and signaled on OC5 output.</description>
            <name>CCR5</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Group Channel 5 and Channel 1
            Distortion on Channel 1 output:
            This bit can either have immediate effect or be preloaded and taken into account after an update event (if preload feature is selected in TIMxCCMR1).
            Note: it is also possible to apply this distortion on combined PWM signals.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No effect of OC5REF on OC1REFC5</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>OC1REFC is the logical AND of OC1REFC and OC5REF</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>GC5C1</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Group Channel 5 and Channel 2
            Distortion on Channel 2 output:
            This bit can either have immediate effect or be preloaded and taken into account after an update event (if preload feature is selected in TIMxCCMR1).
            Note: it is also possible to apply this distortion on combined PWM signals.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No effect of OC5REF on OC2REFC</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>OC2REFC is the logical AND of OC2REFC and OC5REF</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>GC5C2</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Group Channel 5 and Channel 3
            Distortion on Channel 3 output:
            This bit can either have immediate effect or be preloaded and taken into account after an update event (if preload feature is selected in TIMxCCMR2).
            Note: it is also possible to apply this distortion on combined PWM signals.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No effect of OC5REF on OC3REFC</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>OC3REFC is the logical AND of OC3REFC and OC5REF</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>GC5C3</name>
          </field>
        </fields>
        <name>TIM1_CCR5</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x5C</addressOffset>
        <description>capture/compare register 4</description>
        <displayName>TIM1_CCR6</displayName>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>Capture/Compare value</description>
            <name>CCR6</name>
          </field>
        </fields>
        <name>TIM1_CCR6</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x60</addressOffset>
        <description>DMA address for full transfer</description>
        <displayName>TIM1_AF1</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>BRK BKIN input enable
            This bit enables the BKIN alternate function input for the timerâs BRK input. BKIN input is 'ORedâ with the other BRK sources.
            Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>BKIN input disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>BKIN input enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>BKINE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>BRK COMP1 enable
            This bit enables the COMP1 for the timerâs BRK input. COMP1 output is 'ORedâ with the other BRK sources.
            Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>COMP1 input disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>COMP1 input enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>BKCMP1E</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>BRK COMP2 enable
            This bit enables the COMP2 for the timerâs BRK input. COMP2 output is 'ORedâ with the other BRK sources.
            Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>COMP2 input disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>COMP2 input enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>BKCMP2E</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>BRK BKIN input polarity
            This bit selects the BKIN alternate function input sensitivity. It must be programmed together with the BKP polarity bit.
            Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>BKIN input polarity is not inverted (active low if BKP=0, active high if BKP=1)</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>BKIN input polarity is inverted (active high if BKP=0, active low if BKP=1)</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>BKINP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>BRK COMP1 input polarity
            This bit selects the COMP1 input sensitivity. It must be programmed together with the BKP polarity bit.
            Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>COMP1 input polarity is not inverted (active low if BKP=0, active high if BKP=1)</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>COMP1 input polarity is inverted (active high if BKP=0, active low if BKP=1)</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>BKCMP1P</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>BRK COMP2 input polarity
            This bit selects the COMP2 input sensitivity. It must be programmed together with the BKP polarity bit.
            Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>COMP2 input polarity is not inverted (active low if BKP=0, active high if BKP=1)</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>COMP2 input polarity is inverted (active high if BKP=0, active low if BKP=1)</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>BKCMP2P</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>ETR source selection
            These bits select the ETR input source.
            Others: Reserved
            Note: These bits can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>ETR legacy mode</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>COMP1 output</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>COMP2 output</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>ADC1 AWD1</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>ADC1 AWD2</description>
                <name>B_0x4</name>
                <value>0x4</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>ADC1 AWD3</description>
                <name>B_0x5</name>
                <value>0x5</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>ETRSEL</name>
          </field>
        </fields>
        <name>TIM1_AF1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x1</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x64</addressOffset>
        <description>DMA address for full transfer</description>
        <displayName>TIM1_AF2</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>BRK2 BKIN input enable
            This bit enables the BKIN2 alternate function input for the timerâs BRK2 input. BKIN2 input is 'ORedâ with the other BRK2 sources.
            Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>BKIN2 input disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>BKIN2 input enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>BK2INE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>BRK2 COMP1 enable
            This bit enables the COMP1 for the timerâs BRK2 input. COMP1 output is 'ORedâ with the other BRK2 sources.
            Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>COMP1 input disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>COMP1 input enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>BK2CMP1E</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>BRK2 COMP2 enable
            This bit enables the COMP2 for the timerâs BRK2 input. COMP2 output is 'ORedâ with the other BRK2 sources.
            Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>COMP2 input disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>COMP2 input enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>BK2CMP2E</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>BRK2 BKIN2 input polarity
            This bit selects the BKIN2 alternate function input sensitivity. It must be programmed together with the BK2P polarity bit.
            Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>BKIN2 input polarity is not inverted (active low if BK2P=0, active high if BK2P=1)</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>BKIN2 input polarity is inverted (active high if BK2P=0, active low if BK2P=1)</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>BK2INP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>BRK2 COMP1 input polarity
            This bit selects the COMP1 input sensitivity. It must be programmed together with the BK2P polarity bit.
            Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>COMP1 input polarity is not inverted (active low if BK2P=0, active high if BK2P=1)</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>COMP1 input polarity is inverted (active high if BK2P=0, active low if BK2P=1)</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>BK2CMP1P</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>BRK2 COMP2 input polarity
            This bit selects the COMP2 input sensitivity. It must be programmed together with the BK2P polarity bit.
            Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>COMP2 input polarity is not inverted (active low if BK2P=0, active high if BK2P=1)</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>COMP2 input polarity is inverted (active high if BK2P=0, active low if BK2P=1)</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>BK2CMP2P</name>
          </field>
        </fields>
        <name>TIM1_AF2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x1</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x68</addressOffset>
        <description>TIM1 timer input selection
                  register</description>
        <displayName>TIM1_TISEL</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>selects TI1[0] to TI1[15] input
            Others: Reserved</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>TIM1_CH1 input</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>COMP1 output</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TI1SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>selects TI2[0] to TI2[15] input
            Others: Reserved</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>TIM1_CH2 input</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>COMP2 output</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TI2SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>selects TI3[0] to TI3[15] input
            Others: Reserved</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>TIM1_CH3 input</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TI3SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>selects TI4[0] to TI4[15] input
            Others: Reserved</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>TIM1_CH4 input</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TI4SEL</name>
          </field>
        </fields>
        <name>TIM1_TISEL</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <resetMask>0xFFFFFFFF</resetMask>
    <resetValue>0x0</resetValue>
    <size>0x20</size>
  </peripheral>
</peripherals>
<peripherals>
  <peripheral>
    <addressBlock>
      <offset>0x0</offset>
      <size>0x400</size>
      <usage>registers</usage>
    </addressBlock>
    <baseAddress>0x40000000</baseAddress>
    <description>General-purpose-timers</description>
    <groupName>TIM</groupName>
    <interrupts>
      <interrupt>
        <name>TIM2</name>
        <value>0xF</value>
      </interrupt>
    </interrupts>
    <name>TIM2</name>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x0</addressOffset>
        <description>control register 1</description>
        <displayName>CR1</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Counter enable
            Note: External clock, gated mode and encoder mode can work only if the CEN bit has been previously set by software. However trigger mode can set the CEN bit automatically by hardware.
            CEN is cleared automatically in one-pulse mode, when an update event occurs.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Counter disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Counter enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CEN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Update disable
            This bit is set and cleared by software to enable/disable UEV event generation.
            Counter overflow/underflow
            Setting the UG bit
            Update generation through the slave mode controller
            Buffered registers are then loaded with their preload values.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>UEV enabled. The Update (UEV) event is generated by one of the following events:</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>UEV disabled. The Update event is not generated, shadow registers keep their value (ARR, PSC, CCRx). However the counter and the prescaler are reinitialized if the UG bit is set or if a hardware reset is received from the slave mode controller.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>UDIS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Update request source
            This bit is set and cleared by software to select the UEV event sources.
            Counter overflow/underflow
            Setting the UG bit
            Update generation through the slave mode controller</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Any of the following events generate an update interrupt or DMA request if enabled. These events can be: </description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Only counter overflow/underflow generates an update interrupt or DMA request if enabled.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>URS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>One-pulse mode</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Counter is not stopped at update event</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Counter stops counting at the next update event (clearing the bit CEN)</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>OPM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Direction
            Note: This bit is read only when the timer is configured in Center-aligned mode or Encoder mode.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Counter used as upcounter</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Counter used as downcounter</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>DIR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Center-aligned mode selection
            Note: It is not allowed to switch from edge-aligned mode to center-aligned mode as long as the counter is enabled (CEN=1)</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Edge-aligned mode. The counter counts up or down depending on the direction bit (DIR).</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Center-aligned mode 1. The counter counts up and down alternatively. Output compare interrupt flags of channels configured in output (CCxS=00 in TIMx_CCMRx register) are set only when the counter is counting down.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Center-aligned mode 2. The counter counts up and down alternatively. Output compare interrupt flags of channels configured in output (CCxS=00 in TIMx_CCMRx register) are set only when the counter is counting up.</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Center-aligned mode 3. The counter counts up and down alternatively. Output compare interrupt flags of channels configured in output (CCxS=00 in TIMx_CCMRx register) are set both when the counter is counting up or down.</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CMS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Auto-reload preload enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>TIMx_ARR register is not buffered</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>TIMx_ARR register is buffered</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>ARPE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Clock division
            This bit-field indicates the division ratio between the timer clock (CK_INT) frequency and sampling clock used by the digital filters (ETR, TIx),</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>tDTS = tCK_INT</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>tDTS = 2 Ã tCK_INT</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>tDTS = 4 Ã tCK_INT</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CKD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>UIF status bit remapping</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No remapping. UIF status bit is not copied to TIMx_CNT register bit 31.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Remapping enabled. UIF status bit is copied to TIMx_CNT register bit 31.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>UIFREMAP</name>
          </field>
        </fields>
        <name>CR1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x4</addressOffset>
        <description>control register 2</description>
        <displayName>CR2</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/compare DMA selection</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>CCx DMA request sent when CCx event occurs</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CCx DMA requests sent when update event occurs</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CCDS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Master mode selection
            These bits permit to select the information to be sent in master mode to slave timers for synchronization (TRGO). The combination is as follows:
            When the Counter Enable signal is controlled by the trigger input, there is a delay on TRGO, except if the master/slave mode is selected (see the MSM bit description in TIMx_SMCR register).
            Note: The clock of the slave timer or ADC must be enabled prior to receive events from the master timer, and must not be changed on-the-fly while triggers are received from the master timer.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Reset - the UG bit from the TIMx_EGR register is used as trigger output (TRGO). If the reset is generated by the trigger input (slave mode controller configured in reset mode) then the signal on TRGO is delayed compared to the actual reset.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Enable - the Counter enable signal, CNT_EN, is used as trigger output (TRGO). It is useful to start several timers at the same time or to control a window in which a slave timer is enabled. The Counter Enable signal is generated by a logic AND between CEN control bit and the trigger input when configured in gated mode. </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Update - The update event is selected as trigger output (TRGO). For instance a master timer can then be used as a prescaler for a slave timer.</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Compare Pulse - The trigger output send a positive pulse when the CC1IF flag is to be set (even if it was already high), as soon as a capture or a compare match occurred. (TRGO)</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Compare - OC1REFC signal is used as trigger output (TRGO)</description>
                <name>B_0x4</name>
                <value>0x4</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Compare - OC2REFC signal is used as trigger output (TRGO)</description>
                <name>B_0x5</name>
                <value>0x5</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Compare - OC3REFC signal is used as trigger output (TRGO)</description>
                <name>B_0x6</name>
                <value>0x6</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Compare - OC4REFC signal is used as trigger output (TRGO)</description>
                <name>B_0x7</name>
                <value>0x7</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>MMS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>TI1 selection</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>The TIMx_CH1 pin is connected to TI1 input</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>The TIMx_CH1, CH2 and CH3 pins are connected to the TI1 input (XOR combination) See also </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TI1S</name>
          </field>
        </fields>
        <name>CR2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x8</addressOffset>
        <description>slave mode control register</description>
        <displayName>SMCR</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Slave mode selection
            When external signals are selected the active edge of the trigger signal (TRGI) is linked to the polarity selected on the external input (see Input Control register and Control Register description.
            reinitializes the counter, generates an update of the registers and starts the counter.
            Note: The gated mode must not be used if TI1F_ED is selected as the trigger input (TS=00100). Indeed, TI1F_ED outputs 1 pulse for each transition on TI1F, whereas the gated mode checks the level of the trigger signal.
            Note: The clock of the slave peripherals (timer, ADC, ...) receiving the TRGO or the TRGO2 signals must be enabled prior to receive events from the master timer, and the clock frequency (prescaler) must not be changed on-the-fly while triggers are received from the master timer.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Slave mode disabled - if CEN = '1 then the prescaler is clocked directly by the internal clock.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Encoder mode 1 - Counter counts up/down on TI1FP1 edge depending on TI2FP2 level.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Encoder mode 2 - Counter counts up/down on TI2FP2 edge depending on TI1FP1 level.</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Encoder mode 3 - Counter counts up/down on both TI1FP1 and TI2FP2 edges depending on the level of the other input.</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Reset Mode - Rising edge of the selected trigger input (TRGI) reinitializes the counter and generates an update of the registers.</description>
                <name>B_0x4</name>
                <value>0x4</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Gated Mode - The counter clock is enabled when the trigger input (TRGI) is high. The counter stops (but is not reset) as soon as the trigger becomes low. Both start and stop of the counter are controlled.</description>
                <name>B_0x5</name>
                <value>0x5</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Trigger Mode - The counter starts at a rising edge of the trigger TRGI (but it is not reset). Only the start of the counter is controlled.</description>
                <name>B_0x6</name>
                <value>0x6</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>External Clock Mode 1 - Rising edges of the selected trigger (TRGI) clock the counter.</description>
                <name>B_0x7</name>
                <value>0x7</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Combined reset + trigger mode - Rising edge of the selected trigger input (TRGI)</description>
                <name>B_0x8</name>
                <value>0x8</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>SMS1</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>OCREF clear selection
            This bit is used to select the OCREF clear source</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>OCREF_CLR_INT is connected to COMP1 or COMP2 output depending on TIMx_OR1.OCREF_CLR</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>OCREF_CLR_INT is connected to ETRF</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>OCCS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Trigger selection
            This bit-field selects the trigger input to be used to synchronize the counter.
            Others: Reserved
            See  for more details on ITRx meaning for each Timer.
            Note: These bits must be changed only when they are not used (e.g. when SMS=000) to avoid wrong edge detections at the transition.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Internal Trigger 0 (ITR0)</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Internal Trigger 1 (ITR1)</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Internal Trigger 2 (ITR2)</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Internal Trigger 3 (ITR3)</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>TI1 Edge Detector (TI1F_ED)</description>
                <name>B_0x4</name>
                <value>0x4</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Filtered Timer Input 1 (TI1FP1)</description>
                <name>B_0x5</name>
                <value>0x5</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Filtered Timer Input 2 (TI2FP2)</description>
                <name>B_0x6</name>
                <value>0x6</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>External Trigger input (ETRF)</description>
                <name>B_0x7</name>
                <value>0x7</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Internal Trigger 4 (ITR4)</description>
                <name>B_0x8</name>
                <value>0x8</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Internal Trigger 5 (ITR5)</description>
                <name>B_0x9</name>
                <value>0x9</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Internal Trigger 6 (ITR6)</description>
                <name>B_0xA</name>
                <value>0xA</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Internal Trigger 7 (ITR7)</description>
                <name>B_0xB</name>
                <value>0xB</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Internal Trigger 8 (ITR8)</description>
                <name>B_0xC</name>
                <value>0xC</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TS1</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Master/Slave mode</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No action</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>The effect of an event on the trigger input (TRGI) is delayed to allow a perfect synchronization between the current timer and its slaves (through TRGO). It is useful if we want to synchronize several timers on a single external event.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>MSM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>External trigger filter
            This bit-field then defines the frequency used to sample ETRP signal and the length of the digital filter applied to ETRP. The digital filter is made of an event counter in which N consecutive events are needed to validate a transition on the output:</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No filter, sampling is done at fDTS</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fCK_INT, N=2</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fCK_INT, N=4</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fCK_INT, N=8</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/2, N=6</description>
                <name>B_0x4</name>
                <value>0x4</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/2, N=8</description>
                <name>B_0x5</name>
                <value>0x5</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/4, N=6</description>
                <name>B_0x6</name>
                <value>0x6</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/4, N=8</description>
                <name>B_0x7</name>
                <value>0x7</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/8, N=6</description>
                <name>B_0x8</name>
                <value>0x8</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/8, N=8</description>
                <name>B_0x9</name>
                <value>0x9</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/16, N=5</description>
                <name>B_0xA</name>
                <value>0xA</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/16, N=6</description>
                <name>B_0xB</name>
                <value>0xB</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/16, N=8</description>
                <name>B_0xC</name>
                <value>0xC</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/32, N=5</description>
                <name>B_0xD</name>
                <value>0xD</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/32, N=6</description>
                <name>B_0xE</name>
                <value>0xE</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/32, N=8</description>
                <name>B_0xF</name>
                <value>0xF</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>ETF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>External trigger prescaler
            External trigger signal ETRP frequency must be at most 1/4 of CK_INT frequency. A prescaler can be enabled to reduce ETRP frequency. It is useful when inputting fast external clocks.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Prescaler OFF</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>ETRP frequency divided by 2</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>ETRP frequency divided by 4</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>ETRP frequency divided by 8</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>ETPS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>External clock enable
            This bit enables External clock mode 2.
            Note: Setting the ECE bit has the same effect as selecting external clock mode 1 with TRGI connected to ETRF (SMS=111 and TS=00111).
            It is possible to simultaneously use external clock mode 2 with the following slave modes: reset mode, gated mode and trigger mode. Nevertheless, TRGI must not be connected to ETRF in this case (TS bits must not be 00111).
            If external clock mode 1 and external clock mode 2 are enabled at the same time, the external clock input is ETRF.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>External clock mode 2 disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>External clock mode 2 enabled. The counter is clocked by any active edge on the ETRF signal.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>ECE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>External trigger polarity
            This bit selects whether ETR or ETR is used for trigger operations</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>ETR is non-inverted, active at high level or rising edge</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>ETR is inverted, active at low level or falling edge</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>ETP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Slave mode selection
            When external signals are selected the active edge of the trigger signal (TRGI) is linked to the polarity selected on the external input (see Input Control register and Control Register description.
            reinitializes the counter, generates an update of the registers and starts the counter.
            Note: The gated mode must not be used if TI1F_ED is selected as the trigger input (TS=00100). Indeed, TI1F_ED outputs 1 pulse for each transition on TI1F, whereas the gated mode checks the level of the trigger signal.
            Note: The clock of the slave peripherals (timer, ADC, ...) receiving the TRGO or the TRGO2 signals must be enabled prior to receive events from the master timer, and the clock frequency (prescaler) must not be changed on-the-fly while triggers are received from the master timer.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Slave mode disabled - if CEN = '1 then the prescaler is clocked directly by the internal clock.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Encoder mode 1 - Counter counts up/down on TI1FP1 edge depending on TI2FP2 level.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Encoder mode 2 - Counter counts up/down on TI2FP2 edge depending on TI1FP1 level.</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Encoder mode 3 - Counter counts up/down on both TI1FP1 and TI2FP2 edges depending on the level of the other input.</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Reset Mode - Rising edge of the selected trigger input (TRGI) reinitializes the counter and generates an update of the registers.</description>
                <name>B_0x4</name>
                <value>0x4</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Gated Mode - The counter clock is enabled when the trigger input (TRGI) is high. The counter stops (but is not reset) as soon as the trigger becomes low. Both start and stop of the counter are controlled.</description>
                <name>B_0x5</name>
                <value>0x5</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Trigger Mode - The counter starts at a rising edge of the trigger TRGI (but it is not reset). Only the start of the counter is controlled.</description>
                <name>B_0x6</name>
                <value>0x6</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>External Clock Mode 1 - Rising edges of the selected trigger (TRGI) clock the counter.</description>
                <name>B_0x7</name>
                <value>0x7</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Combined reset + trigger mode - Rising edge of the selected trigger input (TRGI)</description>
                <name>B_0x8</name>
                <value>0x8</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>SMS2</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Trigger selection
            This bit-field selects the trigger input to be used to synchronize the counter.
            Others: Reserved
            See  for more details on ITRx meaning for each Timer.
            Note: These bits must be changed only when they are not used (e.g. when SMS=000) to avoid wrong edge detections at the transition.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Internal Trigger 0 (ITR0)</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Internal Trigger 1 (ITR1)</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Internal Trigger 2 (ITR2)</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Internal Trigger 3 (ITR3)</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>TI1 Edge Detector (TI1F_ED)</description>
                <name>B_0x4</name>
                <value>0x4</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Filtered Timer Input 1 (TI1FP1)</description>
                <name>B_0x5</name>
                <value>0x5</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Filtered Timer Input 2 (TI2FP2)</description>
                <name>B_0x6</name>
                <value>0x6</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>External Trigger input (ETRF)</description>
                <name>B_0x7</name>
                <value>0x7</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Internal Trigger 4 (ITR4)</description>
                <name>B_0x8</name>
                <value>0x8</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Internal Trigger 5 (ITR5)</description>
                <name>B_0x9</name>
                <value>0x9</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Internal Trigger 6 (ITR6)</description>
                <name>B_0xA</name>
                <value>0xA</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Internal Trigger 7 (ITR7)</description>
                <name>B_0xB</name>
                <value>0xB</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Internal Trigger 8 (ITR8)</description>
                <name>B_0xC</name>
                <value>0xC</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TS2</name>
          </field>
        </fields>
        <name>SMCR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0xC</addressOffset>
        <description>DMA/Interrupt enable register</description>
        <displayName>DIER</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Update interrupt enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Update interrupt disabled.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Update interrupt enabled.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>UIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 1 interrupt enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC1 interrupt disabled.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC1 interrupt enabled.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC1IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 2 interrupt enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC2 interrupt disabled.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC2 interrupt enabled.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC2IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 3 interrupt enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC3 interrupt disabled.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC3 interrupt enabled.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC3IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 4 interrupt enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC4 interrupt disabled.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC4 interrupt enabled.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC4IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Trigger interrupt enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Trigger interrupt disabled.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Trigger interrupt enabled.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Update DMA request enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Update DMA request disabled.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Update DMA request enabled.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>UDE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 1 DMA request enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC1 DMA request disabled.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC1 DMA request enabled.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC1DE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 2 DMA request enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC2 DMA request disabled.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC2 DMA request enabled.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC2DE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 3 DMA request enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC3 DMA request disabled.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC3 DMA request enabled.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC3DE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 4 DMA request enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC4 DMA request disabled.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC4 DMA request enabled.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC4DE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Trigger DMA request enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Trigger DMA request disabled.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Trigger DMA request enabled.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TDE</name>
          </field>
        </fields>
        <name>DIER</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x10</addressOffset>
        <description>status register</description>
        <displayName>SR</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Update interrupt flag
            This bit is set by hardware on an update event. It is cleared by software.
            At overflow or underflow and if UDIS=0 in the TIMx_CR1 register.
            When CNT is reinitialized by software using the UG bit in TIMx_EGR register, if URS=0 and UDIS=0 in the TIMx_CR1 register.
            When CNT is reinitialized by a trigger event (refer to the synchro control register description), if URS=0 and UDIS=0 in the TIMx_CR1 register.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No update occurred</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Update interrupt pending. This bit is set by hardware when the registers are updated:</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>UIF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/compare 1 interrupt flag
            This flag is set by hardware. It is cleared by software (input capture or output compare mode) or by reading the TIMx_CCR1 register (input capture mode only).
            If channel CC1 is configured as output: this flag is set when the content of the counter TIMx_CNT matches the content of the TIMx_CCR1 register. When the content of TIMx_CCR1 is greater than the content of TIMx_ARR, the CC1IF bit goes high on the counter overflow (in up-counting and up/down-counting modes) or underflow (in down-counting mode). There are 3 possible options for flag setting in center-aligned mode, refer to the CMS bits in the TIMx_CR1 register for the full description.
            If channel CC1 is configured as input: this bit is set when counter value has been captured in TIMx_CCR1 register (an edge has been detected on IC1, as per the edge sensitivity defined with the CC1P and CC1NP bits setting, in TIMx_CCER).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No compare match / No input capture occurred</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>A compare match or an input capture occurred</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC1IF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 2 interrupt flag
            Refer to CC1IF description</description>
            <name>CC2IF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 3 interrupt flag
            Refer to CC1IF description</description>
            <name>CC3IF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 4 interrupt flag
            Refer to CC1IF description</description>
            <name>CC4IF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Trigger interrupt flag
            This flag is set by hardware on the TRG trigger event (active edge detected on TRGI input when the slave mode controller is enabled in all modes but gated mode. It is set when the counter starts or stops when gated mode is selected. It is cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No trigger event occurred.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Trigger interrupt pending.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TIF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 1 overcapture flag
            This flag is set by hardware only when the corresponding channel is configured in input capture mode. It is cleared by software by writing it to '0â.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No overcapture has been detected.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>The counter value has been captured in TIMx_CCR1 register while CC1IF flag was already set</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC1OF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/compare 2 overcapture flag
            refer to CC1OF description</description>
            <name>CC2OF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 3 overcapture flag
            refer to CC1OF description</description>
            <name>CC3OF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 4 overcapture flag
            refer to CC1OF description</description>
            <name>CC4OF</name>
          </field>
        </fields>
        <name>SR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>write-only</access>
        <addressOffset>0x14</addressOffset>
        <description>event generation register</description>
        <displayName>EGR</displayName>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Update generation
            This bit can be set by software, it is automatically cleared by hardware.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No action</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Re-initialize the counter and generates an update of the registers. Note that the prescaler counter is cleared too (anyway the prescaler ratio is not affected). The counter is cleared if the center-aligned mode is selected or if DIR=0 (upcounting), else it takes the auto-reload value (TIMx_ARR) if DIR=1 (downcounting).</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>UG</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/compare 1 generation
            This bit is set by software in order to generate an event, it is automatically cleared by hardware.
            If channel CC1 is configured as output:
            CC1IF flag is set, Corresponding interrupt or DMA request is sent if enabled.
            If channel CC1 is configured as input:
            The current value of the counter is captured in TIMx_CCR1 register. The CC1IF flag is set, the corresponding interrupt or DMA request is sent if enabled. The CC1OF flag is set if the CC1IF flag was already high.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No action</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>A capture/compare event is generated on channel 1:</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC1G</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/compare 2 generation
            Refer to CC1G description</description>
            <name>CC2G</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/compare 3 generation
            Refer to CC1G description</description>
            <name>CC3G</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/compare 4 generation
            Refer to CC1G description</description>
            <name>CC4G</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Trigger generation
            This bit is set by software in order to generate an event, it is automatically cleared by hardware.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No action</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>The TIF flag is set in TIMx_SR register. Related interrupt or DMA transfer can occur if enabled.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TG</name>
          </field>
        </fields>
        <name>EGR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x18</addressOffset>
        <description>capture/compare mode register 1 (output
                  mode)</description>
        <displayName>CCMR1_Output</displayName>
        <fields>
          <field>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output Compare 2 mode - bit
                          3</description>
            <name>OC2M_3</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output Compare 1 mode - bit
                          3</description>
            <name>OC1M_3</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output compare 2 clear
                          enable</description>
            <name>OC2CE</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Output compare 2 mode</description>
            <name>OC2M</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output compare 2 preload
                          enable</description>
            <name>OC2PE</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output compare 2 fast
                          enable</description>
            <name>OC2FE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Capture/compare 2 selection
            This bit-field defines the direction of the channel (input/output) as well as the used input.
            Note: CC2S bits are writable only when the channel is OFF (CC2E = 0 in TIMx_CCER).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC2 channel is configured as output.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC2 channel is configured as input, IC2 is mapped on TI2.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC2 channel is configured as input, IC2 is mapped on TI1.</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC2 channel is configured as input, IC2 is mapped on TRC. This mode is working only if an internal trigger input is selected through TS bit (TIMx_SMCR register)</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC2S</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output compare 1 clear enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>OC1Ref is not affected by the ETRF input</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>OC1Ref is cleared as soon as a High level is detected on ETRF input</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>OC1CE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Output compare 1 mode
            These bits define the behavior of the output reference signal OC1REF from which OC1 and OC1N are derived. OC1REF is active high whereas OC1 and OC1N active level depends on CC1P and CC1NP bits.
            Note: In PWM mode, the OCREF level changes only when the result of the comparison changes or when the output compare mode switches from âfrozenâ mode to âPWMâ mode.
            Note: The OC1M[3] bit is not contiguous, located in bit 16.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Frozen - The comparison between the output compare register TIMx_CCR1 and the counter TIMx_CNT has no effect on the outputs.(this mode is used to generate a timing base).</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Set channel 1 to active level on match. OC1REF signal is forced high when the counter TIMx_CNT matches the capture/compare register 1 (TIMx_CCR1).</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Set channel 1 to inactive level on match. OC1REF signal is forced low when the counter TIMx_CNT matches the capture/compare register 1 (TIMx_CCR1).</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Toggle - OC1REF toggles when TIMx_CNT=TIMx_CCR1.</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Force inactive level - OC1REF is forced low.</description>
                <name>B_0x4</name>
                <value>0x4</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Force active level - OC1REF is forced high.</description>
                <name>B_0x5</name>
                <value>0x5</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>PWM mode 1 - In upcounting, channel 1 is active as long as TIMx_CNT&lt;TIMx_CCR1 else inactive. In downcounting, channel 1 is inactive (OC1REF='0) as long as TIMx_CNT&gt;TIMx_CCR1 else active (OC1REF=1).</description>
                <name>B_0x6</name>
                <value>0x6</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>PWM mode 2 - In upcounting, channel 1 is inactive as long as TIMx_CNT&lt;TIMx_CCR1 else active. In downcounting, channel 1 is active as long as TIMx_CNT&gt;TIMx_CCR1 else inactive.</description>
                <name>B_0x7</name>
                <value>0x7</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Retriggerable OPM mode 1 - In up-counting mode, the channel is active until a trigger event is detected (on TRGI signal). Then, a comparison is performed as in PWM mode 1 and the channels becomes inactive again at the next update. In down-counting mode, the channel is inactive until a trigger event is detected (on TRGI signal). Then, a comparison is performed as in PWM mode 1 and the channels becomes inactive again at the next update.</description>
                <name>B_0x8</name>
                <value>0x8</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Retriggerable OPM mode 2 - In up-counting mode, the channel is inactive until a trigger event is detected (on TRGI signal). Then, a comparison is performed as in PWM mode 2 and the channels becomes inactive again at the next update. In down-counting mode, the channel is active until a trigger event is detected (on TRGI signal). Then, a comparison is performed as in PWM mode 1 and the channels becomes active again at the next update.</description>
                <name>B_0x9</name>
                <value>0x9</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Combined PWM mode 1 - OC1REF has the same behavior as in PWM mode 1. OC1REFC is the logical OR between OC1REF and OC2REF.</description>
                <name>B_0xC</name>
                <value>0xC</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Combined PWM mode 2 - OC1REF has the same behavior as in PWM mode 2. OC1REFC is the logical AND between OC1REF and OC2REF.</description>
                <name>B_0xD</name>
                <value>0xD</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Asymmetric PWM mode 1 - OC1REF has the same behavior as in PWM mode 1. OC1REFC outputs OC1REF when the counter is counting up, OC2REF when it is counting down.</description>
                <name>B_0xE</name>
                <value>0xE</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Asymmetric PWM mode 2 - OC1REF has the same behavior as in PWM mode 2. OC1REFC outputs OC1REF when the counter is counting up, OC2REF when it is counting down.</description>
                <name>B_0xF</name>
                <value>0xF</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>OC1M1</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output compare 1 preload enable
            Note: The PWM mode can be used without validating the preload register only in one-pulse mode (OPM bit set in TIMx_CR1 register). Else the behavior is not guaranteed.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Preload register on TIMx_CCR1 disabled. TIMx_CCR1 can be written at anytime, the new value is taken in account immediately.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Preload register on TIMx_CCR1 enabled. Read/Write operations access the preload register. TIMx_CCR1 preload value is loaded in the active register at each update event.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>OC1PE</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output compare 1 fast
                          enable</description>
            <name>OC1FE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Capture/Compare 1 selection
            This bit-field defines the direction of the channel (input/output) as well as the used input.
            Note: CC1S bits are writable only when the channel is OFF (CC1E = 0 in TIMx_CCER).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC1 channel is configured as output</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC1 channel is configured as input, IC1 is mapped on TI1</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC1 channel is configured as input, IC1 is mapped on TI2</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC1 channel is configured as input, IC1 is mapped on TRC. This mode is working only if an internal trigger input is selected through TS bit (TIMx_SMCR register)</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC1S</name>
          </field>
        </fields>
        <name>CCMR1_Output</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x18</addressOffset>
        <description>capture/compare mode register 1 (input
                  mode)</description>
        <displayName>CCMR1_Input</displayName>
        <fields>
          <field>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Input capture 2 filter</description>
            <name>IC2F</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Input capture 2 prescaler</description>
            <name>IC2PSC</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Capture/compare 2
                          selection</description>
            <name>CC2S</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Input capture 1 filter</description>
            <name>IC1F</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Input capture 1 prescaler</description>
            <name>IC1PSC</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Capture/Compare 1
                          selection</description>
            <name>CC1S</name>
          </field>
        </fields>
        <name>CCMR1_Input</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x1C</addressOffset>
        <description>capture/compare mode register 2 (output
                  mode)</description>
        <displayName>CCMR2_Output</displayName>
        <fields>
          <field>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output Compare 4 mode - bit
                          3</description>
            <name>OC4M_3</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output Compare 3 mode - bit
                          3</description>
            <name>OC3M_3</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output compare 4 clear
                          enable</description>
            <name>OC4CE</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Output compare 4 mode</description>
            <name>OC4M</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output compare 4 preload
                          enable</description>
            <name>OC4PE</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output compare 4 fast
                          enable</description>
            <name>OC4FE</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Capture/Compare 4
                          selection</description>
            <name>CC4S</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output compare 3 clear
                          enable</description>
            <name>OC3CE</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Output compare 3 mode</description>
            <name>OC3M</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output compare 3 preload
                          enable</description>
            <name>OC3PE</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output compare 3 fast
                          enable</description>
            <name>OC3FE</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Capture/Compare 3
                          selection</description>
            <name>CC3S</name>
          </field>
        </fields>
        <name>CCMR2_Output</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x1C</addressOffset>
        <description>capture/compare mode register 2 (input
                  mode)</description>
        <displayName>CCMR2_Input</displayName>
        <fields>
          <field>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Input capture 4 filter</description>
            <name>IC4F</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Input capture 4 prescaler</description>
            <name>IC4PSC</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Capture/Compare 4 selection
            This bit-field defines the direction of the channel (input/output) as well as the used input.
            Note: CC4S bits are writable only when the channel is OFF (CC4E = 0 in TIMx_CCER).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC4 channel is configured as output</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC4 channel is configured as input, IC4 is mapped on TI4</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC4 channel is configured as input, IC4 is mapped on TI3</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC4 channel is configured as input, IC4 is mapped on TRC. This mode is working only if an internal trigger input is selected through TS bit (TIMx_SMCR register)</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC4S</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Input capture 3 filter</description>
            <name>IC3F</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Input capture 3 prescaler</description>
            <name>IC3PSC</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Capture/Compare 3 selection
            This bit-field defines the direction of the channel (input/output) as well as the used input.
            Note: CC3S bits are writable only when the channel is OFF (CC3E = 0 in TIMx_CCER).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC3 channel is configured as output</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC3 channel is configured as input, IC3 is mapped on TI3</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC3 channel is configured as input, IC3 is mapped on TI4</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC3 channel is configured as input, IC3 is mapped on TRC. This mode is working only if an internal trigger input is selected through TS bit (TIMx_SMCR register)</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC3S</name>
          </field>
        </fields>
        <name>CCMR2_Input</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x20</addressOffset>
        <description>capture/compare enable
                  register</description>
        <displayName>CCER</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 1 output enable.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Capture mode disabled / OC1 is not active</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Capture mode enabled / OC1 signal is output on the corresponding output pin</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC1E</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 1 output Polarity.
            When CC1 channel is configured as input, both CC1NP/CC1P bits select the active polarity of TI1FP1 and TI2FP1 for trigger or capture operations.
            CC1NP=0, CC1P=0:	non-inverted/rising edge. The circuit is sensitive to TIxFP1 rising edge (capture or trigger operations in reset, external clock or trigger mode), TIxFP1 is not inverted (trigger operation in gated mode or encoder mode).
            CC1NP=0, CC1P=1:	inverted/falling edge. The circuit is sensitive to TIxFP1 falling edge (capture or trigger operations in reset, external clock or trigger mode), TIxFP1 is inverted (trigger operation in gated mode or encoder mode).
            CC1NP=1, CC1P=1:	non-inverted/both edges. The circuit is sensitive to both TIxFP1 rising and falling edges (capture or trigger operations in reset, external clock or trigger mode), TIxFP1is not inverted (trigger operation in gated mode). This configuration must not be used in encoder mode.
            CC1NP=1, CC1P=0:	This configuration is reserved, it must not be used.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>OC1 active high (output mode) / Edge sensitivity selection (input mode, see below)</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>OC1 active low (output mode) / Edge sensitivity selection (input mode, see below)</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC1P</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 1 output Polarity.
            CC1 channel configured as output: CC1NP must be kept cleared in this case.
            CC1 channel configured as input: This bit is used in conjunction with CC1P to define TI1FP1/TI2FP1 polarity. refer to CC1P description.</description>
            <name>CC1NP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 2 output enable.
            Refer to CC1E description</description>
            <name>CC2E</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 2 output Polarity.
            refer to CC1P description</description>
            <name>CC2P</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 2 output Polarity.
            Refer to CC1NP description</description>
            <name>CC2NP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 3 output enable.
            Refer to CC1E description</description>
            <name>CC3E</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 3 output Polarity.
            Refer to CC1P description</description>
            <name>CC3P</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 3 output Polarity.
            Refer to CC1NP description</description>
            <name>CC3NP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 4 output enable.
            refer to CC1E description</description>
            <name>CC4E</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 4 output Polarity.
            Refer to CC1P description</description>
            <name>CC4P</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 4 output Polarity.
            Refer to CC1NP description</description>
            <name>CC4NP</name>
          </field>
        </fields>
        <name>CCER</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x24</addressOffset>
        <description>counter</description>
        <displayName>CNT</displayName>
        <fields>
          <field>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>High counter value (TIM2
                          only)</description>
            <name>CNT_H</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>Low counter value</description>
            <name>CNT_L</name>
          </field>
        </fields>
        <name>CNT</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x24</addressOffset>
        <description>counter</description>
        <displayName>CNT_ALTERNATE5</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1F</bitWidth>
            <description>Most significant part counter value (TIM2)
            nullLeast significant part of counter value</description>
            <name>CNT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>UIF Copy
            This bit is a read-only copy of the UIF bit of the TIMx_ISR register</description>
            <name>UIFCPY</name>
          </field>
        </fields>
        <name>CNT_ALTERNATE5</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x28</addressOffset>
        <description>prescaler</description>
        <displayName>PSC</displayName>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>Prescaler value</description>
            <name>PSC</name>
          </field>
        </fields>
        <name>PSC</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x2C</addressOffset>
        <description>auto-reload register</description>
        <displayName>ARR</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>High auto-reload value (TIM2)
            nullLow Auto-reload value
            ARR is the value to be loaded in the actual auto-reload register.
            Refer to the  for more details about ARR update and behavior.
            The counter is blocked while the auto-reload value is null.</description>
            <name>ARR</name>
          </field>
        </fields>
        <name>ARR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xFFFFFFFF</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x34</addressOffset>
        <description>capture/compare register 1</description>
        <displayName>CCR1</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>High Capture/Compare 1 value (TIM2)
            nullLow Capture/Compare 1 value
            If channel CC1 is configured as output:
            CCR1 is the value to be loaded in the actual capture/compare 1 register (preload value).
            It is loaded permanently if the preload feature is not selected in the TIMx_CCMR1 register (bit OC1PE). Else the preload value is copied in the active capture/compare 1 register when an update event occurs.
            The active capture/compare register contains the value to be compared to the counter TIMx_CNT and signaled on OC1 output.
            If channel CC1is configured as input:
            CCR1 is the counter value transferred by the last input capture 1 event (IC1). The TIMx_CCR1 register is read-only and cannot be programmed.</description>
            <name>CCR1</name>
          </field>
        </fields>
        <name>CCR1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x38</addressOffset>
        <description>capture/compare register 2</description>
        <displayName>CCR2</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>High Capture/Compare 2 value (TIM2)
            nullLow Capture/Compare 2 value
            If channel CC2 is configured as output:
            CCR2 is the value to be loaded in the actual capture/compare 2 register (preload value).
            It is loaded permanently if the preload feature is not selected in the TIMx_CCMR1 register (bit OC2PE). Else the preload value is copied in the active capture/compare 2 register when an update event occurs.
            The active capture/compare register contains the value to be compared to the counter TIMx_CNT and signalled on OC2 output.
            If channel CC2 is configured as input:
            CCR2 is the counter value transferred by the last input capture 2 event (IC2). The TIMx_CCR2 register is read-only and cannot be programmed.</description>
            <name>CCR2</name>
          </field>
        </fields>
        <name>CCR2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x3C</addressOffset>
        <description>capture/compare register 3</description>
        <displayName>CCR3</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>High Capture/Compare 3 value (TIM2)
            nullLow Capture/Compare value
            If channel CC3 is configured as output:
            CCR3 is the value to be loaded in the actual capture/compare 3 register (preload value).
            It is loaded permanently if the preload feature is not selected in the TIMx_CCMR2 register (bit OC3PE). Else the preload value is copied in the active capture/compare 3 register when an update event occurs.
            The active capture/compare register contains the value to be compared to the counter TIMx_CNT and signalled on OC3 output.
            If channel CC3is configured as input:
            CCR3 is the counter value transferred by the last input capture 3 event (IC3). The TIMx_CCR3 register is read-only and cannot be programmed.</description>
            <name>CCR3</name>
          </field>
        </fields>
        <name>CCR3</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x40</addressOffset>
        <description>capture/compare register 4</description>
        <displayName>CCR4</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>High Capture/Compare 4 value (TIM2)
            nullLow Capture/Compare value
            if CC4 channel is configured as output (CC4S bits):
            CCR4 is the value to be loaded in the actual capture/compare 4 register (preload value).
            It is loaded permanently if the preload feature is not selected in the TIMx_CCMR2 register (bit OC4PE). Else the preload value is copied in the active capture/compare 4 register when an update event occurs.
            The active capture/compare register contains the value to be compared to the counter TIMx_CNT and signalled on OC4 output.
            if CC4 channel is configured as input (CC4S bits in TIMx_CCMR4 register):
            CCR4 is the counter value transferred by the last input capture 4 event (IC4). The TIMx_CCR4 register is read-only and cannot be programmed.</description>
            <name>CCR4</name>
          </field>
        </fields>
        <name>CCR4</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x48</addressOffset>
        <description>DMA control register</description>
        <displayName>DCR</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>DMA base address
            This 5-bit vector defines the base-address for DMA transfers (when read/write access are done through the TIMx_DMAR address). DBA is defined as an offset starting from the address of the TIMx_CR1 register.
            Example:
            ...
            Example: Let us consider the following transfer: DBL = 7 transfers &amp; DBA = TIMx_CR1. In this case the transfer is done to/from 7 registers starting from the TIMx_CR1 address.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>TIMx_CR1</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>TIMx_CR2</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>TIMx_SMCR</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>DBA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>DMA burst length
            This 5-bit vector defines the number of DMA transfers (the timer recognizes a burst transfer when a read or a write access is done to the TIMx_DMAR address).
            ...</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>1 transfer,</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>2 transfers,</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>3 transfers,</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>18 transfers.</description>
                <name>B_0x11</name>
                <value>0x11</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>DBL</name>
          </field>
        </fields>
        <name>DCR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x4C</addressOffset>
        <description>DMA address for full transfer</description>
        <displayName>DMAR</displayName>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>DMA register for burst
                          accesses</description>
            <name>DMAB</name>
          </field>
        </fields>
        <name>DMAR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x50</addressOffset>
        <description>TIM option register</description>
        <displayName>OR1</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Ocref_clr source selection
            This bit selects the ocref_clr input source.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>COMP1 output is connected to the OCREF_CLR input</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>COMP2 output is connected to the OCREF_CLR input</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>OCREF_CLR</name>
          </field>
        </fields>
        <name>OR1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x60</addressOffset>
        <description>TIM alternate function option register
                  1</description>
        <displayName>AF1</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>ETR source selection
            These bits select the ETR input source.
            Others: Reserved</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>ETR legacy mode</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>COMP1</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>COMP2</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>LSE</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>ETRSEL</name>
          </field>
        </fields>
        <name>AF1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x68</addressOffset>
        <description>TIM alternate function option register
                  1</description>
        <displayName>TISEL</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>TI1[0] to TI1[15] input selection
            These bits select the TI1[0] to TI1[15] input source.
            Others: Reserved</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>TIM2_CH1 input</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>COMP1 output</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TI1SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>TI2[0] to TI2[15] input selection
            These bits select the TI2[0] to TI2[15] input source.
            Others: Reserved</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>TIM2_CH2 input</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>COMP2 output</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TI2SEL</name>
          </field>
        </fields>
        <name>TISEL</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <resetMask>0xFFFFFFFF</resetMask>
    <resetValue>0x0</resetValue>
    <size>0x20</size>
  </peripheral>
</peripherals>
<peripherals>
  <peripheral>
    <addressBlock>
      <offset>0x0</offset>
      <size>0x400</size>
      <usage>registers</usage>
    </addressBlock>
    <baseAddress>0x40000400</baseAddress>
    <derivedFrom>TIM2</derivedFrom>
    <description>General-purpose-timers</description>
    <groupName>TIM</groupName>
    <interrupts>
      <interrupt>
        <name>TIM3</name>
        <value>0x10</value>
      </interrupt>
    </interrupts>
    <name>TIM3</name>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x0</addressOffset>
        <description>control register 1</description>
        <displayName>CR1</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Counter enable
            Note: External clock, gated mode and encoder mode can work only if the CEN bit has been previously set by software. However trigger mode can set the CEN bit automatically by hardware.
            CEN is cleared automatically in one-pulse mode, when an update event occurs.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Counter disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Counter enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CEN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Update disable
            This bit is set and cleared by software to enable/disable UEV event generation.
            Counter overflow/underflow
            Setting the UG bit
            Update generation through the slave mode controller
            Buffered registers are then loaded with their preload values.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>UEV enabled. The Update (UEV) event is generated by one of the following events:</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>UEV disabled. The Update event is not generated, shadow registers keep their value (ARR, PSC, CCRx). However the counter and the prescaler are reinitialized if the UG bit is set or if a hardware reset is received from the slave mode controller.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>UDIS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Update request source
            This bit is set and cleared by software to select the UEV event sources.
            Counter overflow/underflow
            Setting the UG bit
            Update generation through the slave mode controller</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Any of the following events generate an update interrupt or DMA request if enabled. These events can be: </description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Only counter overflow/underflow generates an update interrupt or DMA request if enabled.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>URS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>One-pulse mode</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Counter is not stopped at update event</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Counter stops counting at the next update event (clearing the bit CEN)</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>OPM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Direction
            Note: This bit is read only when the timer is configured in Center-aligned mode or Encoder mode.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Counter used as upcounter</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Counter used as downcounter</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>DIR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Center-aligned mode selection
            Note: It is not allowed to switch from edge-aligned mode to center-aligned mode as long as the counter is enabled (CEN=1)</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Edge-aligned mode. The counter counts up or down depending on the direction bit (DIR).</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Center-aligned mode 1. The counter counts up and down alternatively. Output compare interrupt flags of channels configured in output (CCxS=00 in TIMx_CCMRx register) are set only when the counter is counting down.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Center-aligned mode 2. The counter counts up and down alternatively. Output compare interrupt flags of channels configured in output (CCxS=00 in TIMx_CCMRx register) are set only when the counter is counting up.</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Center-aligned mode 3. The counter counts up and down alternatively. Output compare interrupt flags of channels configured in output (CCxS=00 in TIMx_CCMRx register) are set both when the counter is counting up or down.</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CMS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Auto-reload preload enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>TIMx_ARR register is not buffered</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>TIMx_ARR register is buffered</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>ARPE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Clock division
            This bit-field indicates the division ratio between the timer clock (CK_INT) frequency and sampling clock used by the digital filters (ETR, TIx),</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>tDTS = tCK_INT</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>tDTS = 2 Ã tCK_INT</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>tDTS = 4 Ã tCK_INT</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CKD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>UIF status bit remapping</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No remapping. UIF status bit is not copied to TIMx_CNT register bit 31.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Remapping enabled. UIF status bit is copied to TIMx_CNT register bit 31.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>UIFREMAP</name>
          </field>
        </fields>
        <name>CR1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x4</addressOffset>
        <description>control register 2</description>
        <displayName>CR2</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/compare DMA selection</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>CCx DMA request sent when CCx event occurs</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CCx DMA requests sent when update event occurs</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CCDS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Master mode selection
            These bits permit to select the information to be sent in master mode to slave timers for synchronization (TRGO). The combination is as follows:
            When the Counter Enable signal is controlled by the trigger input, there is a delay on TRGO, except if the master/slave mode is selected (see the MSM bit description in TIMx_SMCR register).
            Note: The clock of the slave timer or ADC must be enabled prior to receive events from the master timer, and must not be changed on-the-fly while triggers are received from the master timer.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Reset - the UG bit from the TIMx_EGR register is used as trigger output (TRGO). If the reset is generated by the trigger input (slave mode controller configured in reset mode) then the signal on TRGO is delayed compared to the actual reset.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Enable - the Counter enable signal, CNT_EN, is used as trigger output (TRGO). It is useful to start several timers at the same time or to control a window in which a slave timer is enabled. The Counter Enable signal is generated by a logic AND between CEN control bit and the trigger input when configured in gated mode. </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Update - The update event is selected as trigger output (TRGO). For instance a master timer can then be used as a prescaler for a slave timer.</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Compare Pulse - The trigger output send a positive pulse when the CC1IF flag is to be set (even if it was already high), as soon as a capture or a compare match occurred. (TRGO)</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Compare - OC1REFC signal is used as trigger output (TRGO)</description>
                <name>B_0x4</name>
                <value>0x4</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Compare - OC2REFC signal is used as trigger output (TRGO)</description>
                <name>B_0x5</name>
                <value>0x5</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Compare - OC3REFC signal is used as trigger output (TRGO)</description>
                <name>B_0x6</name>
                <value>0x6</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Compare - OC4REFC signal is used as trigger output (TRGO)</description>
                <name>B_0x7</name>
                <value>0x7</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>MMS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>TI1 selection</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>The TIMx_CH1 pin is connected to TI1 input</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>The TIMx_CH1, CH2 and CH3 pins are connected to the TI1 input (XOR combination) See also </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TI1S</name>
          </field>
        </fields>
        <name>CR2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x8</addressOffset>
        <description>slave mode control register</description>
        <displayName>SMCR</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Slave mode selection
            When external signals are selected the active edge of the trigger signal (TRGI) is linked to the polarity selected on the external input (see Input Control register and Control Register description.
            reinitializes the counter, generates an update of the registers and starts the counter.
            Note: The gated mode must not be used if TI1F_ED is selected as the trigger input (TS=00100). Indeed, TI1F_ED outputs 1 pulse for each transition on TI1F, whereas the gated mode checks the level of the trigger signal.
            Note: The clock of the slave peripherals (timer, ADC, ...) receiving the TRGO or the TRGO2 signals must be enabled prior to receive events from the master timer, and the clock frequency (prescaler) must not be changed on-the-fly while triggers are received from the master timer.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Slave mode disabled - if CEN = '1 then the prescaler is clocked directly by the internal clock.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Encoder mode 1 - Counter counts up/down on TI1FP1 edge depending on TI2FP2 level.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Encoder mode 2 - Counter counts up/down on TI2FP2 edge depending on TI1FP1 level.</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Encoder mode 3 - Counter counts up/down on both TI1FP1 and TI2FP2 edges depending on the level of the other input.</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Reset Mode - Rising edge of the selected trigger input (TRGI) reinitializes the counter and generates an update of the registers.</description>
                <name>B_0x4</name>
                <value>0x4</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Gated Mode - The counter clock is enabled when the trigger input (TRGI) is high. The counter stops (but is not reset) as soon as the trigger becomes low. Both start and stop of the counter are controlled.</description>
                <name>B_0x5</name>
                <value>0x5</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Trigger Mode - The counter starts at a rising edge of the trigger TRGI (but it is not reset). Only the start of the counter is controlled.</description>
                <name>B_0x6</name>
                <value>0x6</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>External Clock Mode 1 - Rising edges of the selected trigger (TRGI) clock the counter.</description>
                <name>B_0x7</name>
                <value>0x7</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Combined reset + trigger mode - Rising edge of the selected trigger input (TRGI)</description>
                <name>B_0x8</name>
                <value>0x8</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>SMS1</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>OCREF clear selection
            This bit is used to select the OCREF clear source</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>OCREF_CLR_INT is connected to COMP1 or COMP2 output depending on TIMx_OR1.OCREF_CLR</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>OCREF_CLR_INT is connected to ETRF</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>OCCS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Trigger selection
            This bit-field selects the trigger input to be used to synchronize the counter.
            Others: Reserved
            See  for more details on ITRx meaning for each Timer.
            Note: These bits must be changed only when they are not used (e.g. when SMS=000) to avoid wrong edge detections at the transition.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Internal Trigger 0 (ITR0)</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Internal Trigger 1 (ITR1)</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Internal Trigger 2 (ITR2)</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Internal Trigger 3 (ITR3)</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>TI1 Edge Detector (TI1F_ED)</description>
                <name>B_0x4</name>
                <value>0x4</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Filtered Timer Input 1 (TI1FP1)</description>
                <name>B_0x5</name>
                <value>0x5</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Filtered Timer Input 2 (TI2FP2)</description>
                <name>B_0x6</name>
                <value>0x6</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>External Trigger input (ETRF)</description>
                <name>B_0x7</name>
                <value>0x7</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Internal Trigger 4 (ITR4)</description>
                <name>B_0x8</name>
                <value>0x8</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Internal Trigger 5 (ITR5)</description>
                <name>B_0x9</name>
                <value>0x9</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Internal Trigger 6 (ITR6)</description>
                <name>B_0xA</name>
                <value>0xA</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Internal Trigger 7 (ITR7)</description>
                <name>B_0xB</name>
                <value>0xB</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Internal Trigger 8 (ITR8)</description>
                <name>B_0xC</name>
                <value>0xC</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TS1</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Master/Slave mode</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No action</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>The effect of an event on the trigger input (TRGI) is delayed to allow a perfect synchronization between the current timer and its slaves (through TRGO). It is useful if we want to synchronize several timers on a single external event.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>MSM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>External trigger filter
            This bit-field then defines the frequency used to sample ETRP signal and the length of the digital filter applied to ETRP. The digital filter is made of an event counter in which N consecutive events are needed to validate a transition on the output:</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No filter, sampling is done at fDTS</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fCK_INT, N=2</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fCK_INT, N=4</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fCK_INT, N=8</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/2, N=6</description>
                <name>B_0x4</name>
                <value>0x4</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/2, N=8</description>
                <name>B_0x5</name>
                <value>0x5</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/4, N=6</description>
                <name>B_0x6</name>
                <value>0x6</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/4, N=8</description>
                <name>B_0x7</name>
                <value>0x7</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/8, N=6</description>
                <name>B_0x8</name>
                <value>0x8</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/8, N=8</description>
                <name>B_0x9</name>
                <value>0x9</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/16, N=5</description>
                <name>B_0xA</name>
                <value>0xA</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/16, N=6</description>
                <name>B_0xB</name>
                <value>0xB</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/16, N=8</description>
                <name>B_0xC</name>
                <value>0xC</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/32, N=5</description>
                <name>B_0xD</name>
                <value>0xD</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/32, N=6</description>
                <name>B_0xE</name>
                <value>0xE</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/32, N=8</description>
                <name>B_0xF</name>
                <value>0xF</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>ETF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>External trigger prescaler
            External trigger signal ETRP frequency must be at most 1/4 of CK_INT frequency. A prescaler can be enabled to reduce ETRP frequency. It is useful when inputting fast external clocks.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Prescaler OFF</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>ETRP frequency divided by 2</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>ETRP frequency divided by 4</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>ETRP frequency divided by 8</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>ETPS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>External clock enable
            This bit enables External clock mode 2.
            Note: Setting the ECE bit has the same effect as selecting external clock mode 1 with TRGI connected to ETRF (SMS=111 and TS=00111).
            It is possible to simultaneously use external clock mode 2 with the following slave modes: reset mode, gated mode and trigger mode. Nevertheless, TRGI must not be connected to ETRF in this case (TS bits must not be 00111).
            If external clock mode 1 and external clock mode 2 are enabled at the same time, the external clock input is ETRF.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>External clock mode 2 disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>External clock mode 2 enabled. The counter is clocked by any active edge on the ETRF signal.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>ECE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>External trigger polarity
            This bit selects whether ETR or ETR is used for trigger operations</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>ETR is non-inverted, active at high level or rising edge</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>ETR is inverted, active at low level or falling edge</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>ETP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Slave mode selection
            When external signals are selected the active edge of the trigger signal (TRGI) is linked to the polarity selected on the external input (see Input Control register and Control Register description.
            reinitializes the counter, generates an update of the registers and starts the counter.
            Note: The gated mode must not be used if TI1F_ED is selected as the trigger input (TS=00100). Indeed, TI1F_ED outputs 1 pulse for each transition on TI1F, whereas the gated mode checks the level of the trigger signal.
            Note: The clock of the slave peripherals (timer, ADC, ...) receiving the TRGO or the TRGO2 signals must be enabled prior to receive events from the master timer, and the clock frequency (prescaler) must not be changed on-the-fly while triggers are received from the master timer.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Slave mode disabled - if CEN = '1 then the prescaler is clocked directly by the internal clock.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Encoder mode 1 - Counter counts up/down on TI1FP1 edge depending on TI2FP2 level.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Encoder mode 2 - Counter counts up/down on TI2FP2 edge depending on TI1FP1 level.</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Encoder mode 3 - Counter counts up/down on both TI1FP1 and TI2FP2 edges depending on the level of the other input.</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Reset Mode - Rising edge of the selected trigger input (TRGI) reinitializes the counter and generates an update of the registers.</description>
                <name>B_0x4</name>
                <value>0x4</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Gated Mode - The counter clock is enabled when the trigger input (TRGI) is high. The counter stops (but is not reset) as soon as the trigger becomes low. Both start and stop of the counter are controlled.</description>
                <name>B_0x5</name>
                <value>0x5</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Trigger Mode - The counter starts at a rising edge of the trigger TRGI (but it is not reset). Only the start of the counter is controlled.</description>
                <name>B_0x6</name>
                <value>0x6</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>External Clock Mode 1 - Rising edges of the selected trigger (TRGI) clock the counter.</description>
                <name>B_0x7</name>
                <value>0x7</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Combined reset + trigger mode - Rising edge of the selected trigger input (TRGI)</description>
                <name>B_0x8</name>
                <value>0x8</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>SMS2</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Trigger selection
            This bit-field selects the trigger input to be used to synchronize the counter.
            Others: Reserved
            See  for more details on ITRx meaning for each Timer.
            Note: These bits must be changed only when they are not used (e.g. when SMS=000) to avoid wrong edge detections at the transition.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Internal Trigger 0 (ITR0)</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Internal Trigger 1 (ITR1)</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Internal Trigger 2 (ITR2)</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Internal Trigger 3 (ITR3)</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>TI1 Edge Detector (TI1F_ED)</description>
                <name>B_0x4</name>
                <value>0x4</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Filtered Timer Input 1 (TI1FP1)</description>
                <name>B_0x5</name>
                <value>0x5</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Filtered Timer Input 2 (TI2FP2)</description>
                <name>B_0x6</name>
                <value>0x6</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>External Trigger input (ETRF)</description>
                <name>B_0x7</name>
                <value>0x7</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Internal Trigger 4 (ITR4)</description>
                <name>B_0x8</name>
                <value>0x8</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Internal Trigger 5 (ITR5)</description>
                <name>B_0x9</name>
                <value>0x9</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Internal Trigger 6 (ITR6)</description>
                <name>B_0xA</name>
                <value>0xA</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Internal Trigger 7 (ITR7)</description>
                <name>B_0xB</name>
                <value>0xB</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Internal Trigger 8 (ITR8)</description>
                <name>B_0xC</name>
                <value>0xC</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TS2</name>
          </field>
        </fields>
        <name>SMCR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0xC</addressOffset>
        <description>DMA/Interrupt enable register</description>
        <displayName>DIER</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Update interrupt enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Update interrupt disabled.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Update interrupt enabled.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>UIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 1 interrupt enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC1 interrupt disabled.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC1 interrupt enabled.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC1IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 2 interrupt enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC2 interrupt disabled.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC2 interrupt enabled.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC2IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 3 interrupt enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC3 interrupt disabled.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC3 interrupt enabled.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC3IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 4 interrupt enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC4 interrupt disabled.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC4 interrupt enabled.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC4IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Trigger interrupt enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Trigger interrupt disabled.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Trigger interrupt enabled.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Update DMA request enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Update DMA request disabled.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Update DMA request enabled.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>UDE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 1 DMA request enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC1 DMA request disabled.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC1 DMA request enabled.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC1DE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 2 DMA request enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC2 DMA request disabled.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC2 DMA request enabled.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC2DE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 3 DMA request enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC3 DMA request disabled.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC3 DMA request enabled.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC3DE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 4 DMA request enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC4 DMA request disabled.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC4 DMA request enabled.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC4DE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Trigger DMA request enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Trigger DMA request disabled.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Trigger DMA request enabled.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TDE</name>
          </field>
        </fields>
        <name>DIER</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x10</addressOffset>
        <description>status register</description>
        <displayName>SR</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Update interrupt flag
            This bit is set by hardware on an update event. It is cleared by software.
            At overflow or underflow and if UDIS=0 in the TIMx_CR1 register.
            When CNT is reinitialized by software using the UG bit in TIMx_EGR register, if URS=0 and UDIS=0 in the TIMx_CR1 register.
            When CNT is reinitialized by a trigger event (refer to the synchro control register description), if URS=0 and UDIS=0 in the TIMx_CR1 register.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No update occurred</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Update interrupt pending. This bit is set by hardware when the registers are updated:</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>UIF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/compare 1 interrupt flag
            This flag is set by hardware. It is cleared by software (input capture or output compare mode) or by reading the TIMx_CCR1 register (input capture mode only).
            If channel CC1 is configured as output: this flag is set when the content of the counter TIMx_CNT matches the content of the TIMx_CCR1 register. When the content of TIMx_CCR1 is greater than the content of TIMx_ARR, the CC1IF bit goes high on the counter overflow (in up-counting and up/down-counting modes) or underflow (in down-counting mode). There are 3 possible options for flag setting in center-aligned mode, refer to the CMS bits in the TIMx_CR1 register for the full description.
            If channel CC1 is configured as input: this bit is set when counter value has been captured in TIMx_CCR1 register (an edge has been detected on IC1, as per the edge sensitivity defined with the CC1P and CC1NP bits setting, in TIMx_CCER).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No compare match / No input capture occurred</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>A compare match or an input capture occurred</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC1IF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 2 interrupt flag
            Refer to CC1IF description</description>
            <name>CC2IF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 3 interrupt flag
            Refer to CC1IF description</description>
            <name>CC3IF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 4 interrupt flag
            Refer to CC1IF description</description>
            <name>CC4IF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Trigger interrupt flag
            This flag is set by hardware on the TRG trigger event (active edge detected on TRGI input when the slave mode controller is enabled in all modes but gated mode. It is set when the counter starts or stops when gated mode is selected. It is cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No trigger event occurred.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Trigger interrupt pending.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TIF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 1 overcapture flag
            This flag is set by hardware only when the corresponding channel is configured in input capture mode. It is cleared by software by writing it to '0â.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No overcapture has been detected.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>The counter value has been captured in TIMx_CCR1 register while CC1IF flag was already set</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC1OF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/compare 2 overcapture flag
            refer to CC1OF description</description>
            <name>CC2OF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 3 overcapture flag
            refer to CC1OF description</description>
            <name>CC3OF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 4 overcapture flag
            refer to CC1OF description</description>
            <name>CC4OF</name>
          </field>
        </fields>
        <name>SR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>write-only</access>
        <addressOffset>0x14</addressOffset>
        <description>event generation register</description>
        <displayName>EGR</displayName>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Update generation
            This bit can be set by software, it is automatically cleared by hardware.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No action</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Re-initialize the counter and generates an update of the registers. Note that the prescaler counter is cleared too (anyway the prescaler ratio is not affected). The counter is cleared if the center-aligned mode is selected or if DIR=0 (upcounting), else it takes the auto-reload value (TIMx_ARR) if DIR=1 (downcounting).</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>UG</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/compare 1 generation
            This bit is set by software in order to generate an event, it is automatically cleared by hardware.
            If channel CC1 is configured as output:
            CC1IF flag is set, Corresponding interrupt or DMA request is sent if enabled.
            If channel CC1 is configured as input:
            The current value of the counter is captured in TIMx_CCR1 register. The CC1IF flag is set, the corresponding interrupt or DMA request is sent if enabled. The CC1OF flag is set if the CC1IF flag was already high.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No action</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>A capture/compare event is generated on channel 1:</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC1G</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/compare 2 generation
            Refer to CC1G description</description>
            <name>CC2G</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/compare 3 generation
            Refer to CC1G description</description>
            <name>CC3G</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/compare 4 generation
            Refer to CC1G description</description>
            <name>CC4G</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Trigger generation
            This bit is set by software in order to generate an event, it is automatically cleared by hardware.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No action</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>The TIF flag is set in TIMx_SR register. Related interrupt or DMA transfer can occur if enabled.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TG</name>
          </field>
        </fields>
        <name>EGR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x18</addressOffset>
        <description>capture/compare mode register 1 (output
                  mode)</description>
        <displayName>CCMR1_Output</displayName>
        <fields>
          <field>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output Compare 2 mode - bit
                          3</description>
            <name>OC2M_3</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output Compare 1 mode - bit
                          3</description>
            <name>OC1M_3</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output compare 2 clear
                          enable</description>
            <name>OC2CE</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Output compare 2 mode</description>
            <name>OC2M</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output compare 2 preload
                          enable</description>
            <name>OC2PE</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output compare 2 fast
                          enable</description>
            <name>OC2FE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Capture/compare 2 selection
            This bit-field defines the direction of the channel (input/output) as well as the used input.
            Note: CC2S bits are writable only when the channel is OFF (CC2E = 0 in TIMx_CCER).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC2 channel is configured as output.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC2 channel is configured as input, IC2 is mapped on TI2.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC2 channel is configured as input, IC2 is mapped on TI1.</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC2 channel is configured as input, IC2 is mapped on TRC. This mode is working only if an internal trigger input is selected through TS bit (TIMx_SMCR register)</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC2S</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output compare 1 clear enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>OC1Ref is not affected by the ETRF input</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>OC1Ref is cleared as soon as a High level is detected on ETRF input</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>OC1CE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Output compare 1 mode
            These bits define the behavior of the output reference signal OC1REF from which OC1 and OC1N are derived. OC1REF is active high whereas OC1 and OC1N active level depends on CC1P and CC1NP bits.
            Note: In PWM mode, the OCREF level changes only when the result of the comparison changes or when the output compare mode switches from âfrozenâ mode to âPWMâ mode.
            Note: The OC1M[3] bit is not contiguous, located in bit 16.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Frozen - The comparison between the output compare register TIMx_CCR1 and the counter TIMx_CNT has no effect on the outputs.(this mode is used to generate a timing base).</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Set channel 1 to active level on match. OC1REF signal is forced high when the counter TIMx_CNT matches the capture/compare register 1 (TIMx_CCR1).</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Set channel 1 to inactive level on match. OC1REF signal is forced low when the counter TIMx_CNT matches the capture/compare register 1 (TIMx_CCR1).</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Toggle - OC1REF toggles when TIMx_CNT=TIMx_CCR1.</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Force inactive level - OC1REF is forced low.</description>
                <name>B_0x4</name>
                <value>0x4</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Force active level - OC1REF is forced high.</description>
                <name>B_0x5</name>
                <value>0x5</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>PWM mode 1 - In upcounting, channel 1 is active as long as TIMx_CNT&lt;TIMx_CCR1 else inactive. In downcounting, channel 1 is inactive (OC1REF='0) as long as TIMx_CNT&gt;TIMx_CCR1 else active (OC1REF=1).</description>
                <name>B_0x6</name>
                <value>0x6</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>PWM mode 2 - In upcounting, channel 1 is inactive as long as TIMx_CNT&lt;TIMx_CCR1 else active. In downcounting, channel 1 is active as long as TIMx_CNT&gt;TIMx_CCR1 else inactive.</description>
                <name>B_0x7</name>
                <value>0x7</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Retriggerable OPM mode 1 - In up-counting mode, the channel is active until a trigger event is detected (on TRGI signal). Then, a comparison is performed as in PWM mode 1 and the channels becomes inactive again at the next update. In down-counting mode, the channel is inactive until a trigger event is detected (on TRGI signal). Then, a comparison is performed as in PWM mode 1 and the channels becomes inactive again at the next update.</description>
                <name>B_0x8</name>
                <value>0x8</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Retriggerable OPM mode 2 - In up-counting mode, the channel is inactive until a trigger event is detected (on TRGI signal). Then, a comparison is performed as in PWM mode 2 and the channels becomes inactive again at the next update. In down-counting mode, the channel is active until a trigger event is detected (on TRGI signal). Then, a comparison is performed as in PWM mode 1 and the channels becomes active again at the next update.</description>
                <name>B_0x9</name>
                <value>0x9</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Combined PWM mode 1 - OC1REF has the same behavior as in PWM mode 1. OC1REFC is the logical OR between OC1REF and OC2REF.</description>
                <name>B_0xC</name>
                <value>0xC</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Combined PWM mode 2 - OC1REF has the same behavior as in PWM mode 2. OC1REFC is the logical AND between OC1REF and OC2REF.</description>
                <name>B_0xD</name>
                <value>0xD</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Asymmetric PWM mode 1 - OC1REF has the same behavior as in PWM mode 1. OC1REFC outputs OC1REF when the counter is counting up, OC2REF when it is counting down.</description>
                <name>B_0xE</name>
                <value>0xE</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Asymmetric PWM mode 2 - OC1REF has the same behavior as in PWM mode 2. OC1REFC outputs OC1REF when the counter is counting up, OC2REF when it is counting down.</description>
                <name>B_0xF</name>
                <value>0xF</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>OC1M1</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output compare 1 preload enable
            Note: The PWM mode can be used without validating the preload register only in one-pulse mode (OPM bit set in TIMx_CR1 register). Else the behavior is not guaranteed.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Preload register on TIMx_CCR1 disabled. TIMx_CCR1 can be written at anytime, the new value is taken in account immediately.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Preload register on TIMx_CCR1 enabled. Read/Write operations access the preload register. TIMx_CCR1 preload value is loaded in the active register at each update event.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>OC1PE</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output compare 1 fast
                          enable</description>
            <name>OC1FE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Capture/Compare 1 selection
            This bit-field defines the direction of the channel (input/output) as well as the used input.
            Note: CC1S bits are writable only when the channel is OFF (CC1E = 0 in TIMx_CCER).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC1 channel is configured as output</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC1 channel is configured as input, IC1 is mapped on TI1</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC1 channel is configured as input, IC1 is mapped on TI2</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC1 channel is configured as input, IC1 is mapped on TRC. This mode is working only if an internal trigger input is selected through TS bit (TIMx_SMCR register)</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC1S</name>
          </field>
        </fields>
        <name>CCMR1_Output</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x18</addressOffset>
        <description>capture/compare mode register 1 (input
                  mode)</description>
        <displayName>CCMR1_Input</displayName>
        <fields>
          <field>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Input capture 2 filter</description>
            <name>IC2F</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Input capture 2 prescaler</description>
            <name>IC2PSC</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Capture/compare 2
                          selection</description>
            <name>CC2S</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Input capture 1 filter</description>
            <name>IC1F</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Input capture 1 prescaler</description>
            <name>IC1PSC</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Capture/Compare 1
                          selection</description>
            <name>CC1S</name>
          </field>
        </fields>
        <name>CCMR1_Input</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x1C</addressOffset>
        <description>capture/compare mode register 2 (output
                  mode)</description>
        <displayName>CCMR2_Output</displayName>
        <fields>
          <field>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output Compare 4 mode - bit
                          3</description>
            <name>OC4M_3</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output Compare 3 mode - bit
                          3</description>
            <name>OC3M_3</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output compare 4 clear
                          enable</description>
            <name>OC4CE</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Output compare 4 mode</description>
            <name>OC4M</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output compare 4 preload
                          enable</description>
            <name>OC4PE</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output compare 4 fast
                          enable</description>
            <name>OC4FE</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Capture/Compare 4
                          selection</description>
            <name>CC4S</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output compare 3 clear
                          enable</description>
            <name>OC3CE</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Output compare 3 mode</description>
            <name>OC3M</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output compare 3 preload
                          enable</description>
            <name>OC3PE</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output compare 3 fast
                          enable</description>
            <name>OC3FE</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Capture/Compare 3
                          selection</description>
            <name>CC3S</name>
          </field>
        </fields>
        <name>CCMR2_Output</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x1C</addressOffset>
        <description>capture/compare mode register 2 (input
                  mode)</description>
        <displayName>CCMR2_Input</displayName>
        <fields>
          <field>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Input capture 4 filter</description>
            <name>IC4F</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Input capture 4 prescaler</description>
            <name>IC4PSC</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Capture/Compare 4 selection
            This bit-field defines the direction of the channel (input/output) as well as the used input.
            Note: CC4S bits are writable only when the channel is OFF (CC4E = 0 in TIMx_CCER).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC4 channel is configured as output</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC4 channel is configured as input, IC4 is mapped on TI4</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC4 channel is configured as input, IC4 is mapped on TI3</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC4 channel is configured as input, IC4 is mapped on TRC. This mode is working only if an internal trigger input is selected through TS bit (TIMx_SMCR register)</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC4S</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Input capture 3 filter</description>
            <name>IC3F</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Input capture 3 prescaler</description>
            <name>IC3PSC</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Capture/Compare 3 selection
            This bit-field defines the direction of the channel (input/output) as well as the used input.
            Note: CC3S bits are writable only when the channel is OFF (CC3E = 0 in TIMx_CCER).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC3 channel is configured as output</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC3 channel is configured as input, IC3 is mapped on TI3</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC3 channel is configured as input, IC3 is mapped on TI4</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC3 channel is configured as input, IC3 is mapped on TRC. This mode is working only if an internal trigger input is selected through TS bit (TIMx_SMCR register)</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC3S</name>
          </field>
        </fields>
        <name>CCMR2_Input</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x20</addressOffset>
        <description>capture/compare enable
                  register</description>
        <displayName>CCER</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 1 output enable.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Capture mode disabled / OC1 is not active</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Capture mode enabled / OC1 signal is output on the corresponding output pin</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC1E</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 1 output Polarity.
            When CC1 channel is configured as input, both CC1NP/CC1P bits select the active polarity of TI1FP1 and TI2FP1 for trigger or capture operations.
            CC1NP=0, CC1P=0:	non-inverted/rising edge. The circuit is sensitive to TIxFP1 rising edge (capture or trigger operations in reset, external clock or trigger mode), TIxFP1 is not inverted (trigger operation in gated mode or encoder mode).
            CC1NP=0, CC1P=1:	inverted/falling edge. The circuit is sensitive to TIxFP1 falling edge (capture or trigger operations in reset, external clock or trigger mode), TIxFP1 is inverted (trigger operation in gated mode or encoder mode).
            CC1NP=1, CC1P=1:	non-inverted/both edges. The circuit is sensitive to both TIxFP1 rising and falling edges (capture or trigger operations in reset, external clock or trigger mode), TIxFP1is not inverted (trigger operation in gated mode). This configuration must not be used in encoder mode.
            CC1NP=1, CC1P=0:	This configuration is reserved, it must not be used.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>OC1 active high (output mode) / Edge sensitivity selection (input mode, see below)</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>OC1 active low (output mode) / Edge sensitivity selection (input mode, see below)</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC1P</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 1 output Polarity.
            CC1 channel configured as output: CC1NP must be kept cleared in this case.
            CC1 channel configured as input: This bit is used in conjunction with CC1P to define TI1FP1/TI2FP1 polarity. refer to CC1P description.</description>
            <name>CC1NP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 2 output enable.
            Refer to CC1E description</description>
            <name>CC2E</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 2 output Polarity.
            refer to CC1P description</description>
            <name>CC2P</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 2 output Polarity.
            Refer to CC1NP description</description>
            <name>CC2NP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 3 output enable.
            Refer to CC1E description</description>
            <name>CC3E</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 3 output Polarity.
            Refer to CC1P description</description>
            <name>CC3P</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 3 output Polarity.
            Refer to CC1NP description</description>
            <name>CC3NP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 4 output enable.
            refer to CC1E description</description>
            <name>CC4E</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 4 output Polarity.
            Refer to CC1P description</description>
            <name>CC4P</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 4 output Polarity.
            Refer to CC1NP description</description>
            <name>CC4NP</name>
          </field>
        </fields>
        <name>CCER</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x24</addressOffset>
        <description>counter</description>
        <displayName>CNT</displayName>
        <fields>
          <field>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>High counter value (TIM2
                          only)</description>
            <name>CNT_H</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>Low counter value</description>
            <name>CNT_L</name>
          </field>
        </fields>
        <name>CNT</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x24</addressOffset>
        <description>counter</description>
        <displayName>CNT_ALTERNATE5</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1F</bitWidth>
            <description>Most significant part counter value (TIM2)
            nullLeast significant part of counter value</description>
            <name>CNT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>UIF Copy
            This bit is a read-only copy of the UIF bit of the TIMx_ISR register</description>
            <name>UIFCPY</name>
          </field>
        </fields>
        <name>CNT_ALTERNATE5</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x28</addressOffset>
        <description>prescaler</description>
        <displayName>PSC</displayName>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>Prescaler value</description>
            <name>PSC</name>
          </field>
        </fields>
        <name>PSC</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x2C</addressOffset>
        <description>auto-reload register</description>
        <displayName>ARR</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>High auto-reload value (TIM2)
            nullLow Auto-reload value
            ARR is the value to be loaded in the actual auto-reload register.
            Refer to the  for more details about ARR update and behavior.
            The counter is blocked while the auto-reload value is null.</description>
            <name>ARR</name>
          </field>
        </fields>
        <name>ARR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xFFFFFFFF</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x34</addressOffset>
        <description>capture/compare register 1</description>
        <displayName>CCR1</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>High Capture/Compare 1 value (TIM2)
            nullLow Capture/Compare 1 value
            If channel CC1 is configured as output:
            CCR1 is the value to be loaded in the actual capture/compare 1 register (preload value).
            It is loaded permanently if the preload feature is not selected in the TIMx_CCMR1 register (bit OC1PE). Else the preload value is copied in the active capture/compare 1 register when an update event occurs.
            The active capture/compare register contains the value to be compared to the counter TIMx_CNT and signaled on OC1 output.
            If channel CC1is configured as input:
            CCR1 is the counter value transferred by the last input capture 1 event (IC1). The TIMx_CCR1 register is read-only and cannot be programmed.</description>
            <name>CCR1</name>
          </field>
        </fields>
        <name>CCR1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x38</addressOffset>
        <description>capture/compare register 2</description>
        <displayName>CCR2</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>High Capture/Compare 2 value (TIM2)
            nullLow Capture/Compare 2 value
            If channel CC2 is configured as output:
            CCR2 is the value to be loaded in the actual capture/compare 2 register (preload value).
            It is loaded permanently if the preload feature is not selected in the TIMx_CCMR1 register (bit OC2PE). Else the preload value is copied in the active capture/compare 2 register when an update event occurs.
            The active capture/compare register contains the value to be compared to the counter TIMx_CNT and signalled on OC2 output.
            If channel CC2 is configured as input:
            CCR2 is the counter value transferred by the last input capture 2 event (IC2). The TIMx_CCR2 register is read-only and cannot be programmed.</description>
            <name>CCR2</name>
          </field>
        </fields>
        <name>CCR2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x3C</addressOffset>
        <description>capture/compare register 3</description>
        <displayName>CCR3</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>High Capture/Compare 3 value (TIM2)
            nullLow Capture/Compare value
            If channel CC3 is configured as output:
            CCR3 is the value to be loaded in the actual capture/compare 3 register (preload value).
            It is loaded permanently if the preload feature is not selected in the TIMx_CCMR2 register (bit OC3PE). Else the preload value is copied in the active capture/compare 3 register when an update event occurs.
            The active capture/compare register contains the value to be compared to the counter TIMx_CNT and signalled on OC3 output.
            If channel CC3is configured as input:
            CCR3 is the counter value transferred by the last input capture 3 event (IC3). The TIMx_CCR3 register is read-only and cannot be programmed.</description>
            <name>CCR3</name>
          </field>
        </fields>
        <name>CCR3</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x40</addressOffset>
        <description>capture/compare register 4</description>
        <displayName>CCR4</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x20</bitWidth>
            <description>High Capture/Compare 4 value (TIM2)
            nullLow Capture/Compare value
            if CC4 channel is configured as output (CC4S bits):
            CCR4 is the value to be loaded in the actual capture/compare 4 register (preload value).
            It is loaded permanently if the preload feature is not selected in the TIMx_CCMR2 register (bit OC4PE). Else the preload value is copied in the active capture/compare 4 register when an update event occurs.
            The active capture/compare register contains the value to be compared to the counter TIMx_CNT and signalled on OC4 output.
            if CC4 channel is configured as input (CC4S bits in TIMx_CCMR4 register):
            CCR4 is the counter value transferred by the last input capture 4 event (IC4). The TIMx_CCR4 register is read-only and cannot be programmed.</description>
            <name>CCR4</name>
          </field>
        </fields>
        <name>CCR4</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x48</addressOffset>
        <description>DMA control register</description>
        <displayName>DCR</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>DMA base address
            This 5-bit vector defines the base-address for DMA transfers (when read/write access are done through the TIMx_DMAR address). DBA is defined as an offset starting from the address of the TIMx_CR1 register.
            Example:
            ...
            Example: Let us consider the following transfer: DBL = 7 transfers &amp; DBA = TIMx_CR1. In this case the transfer is done to/from 7 registers starting from the TIMx_CR1 address.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>TIMx_CR1</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>TIMx_CR2</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>TIMx_SMCR</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>DBA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>DMA burst length
            This 5-bit vector defines the number of DMA transfers (the timer recognizes a burst transfer when a read or a write access is done to the TIMx_DMAR address).
            ...</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>1 transfer,</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>2 transfers,</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>3 transfers,</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>18 transfers.</description>
                <name>B_0x11</name>
                <value>0x11</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>DBL</name>
          </field>
        </fields>
        <name>DCR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x4C</addressOffset>
        <description>DMA address for full transfer</description>
        <displayName>DMAR</displayName>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>DMA register for burst
                          accesses</description>
            <name>DMAB</name>
          </field>
        </fields>
        <name>DMAR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x50</addressOffset>
        <description>TIM option register</description>
        <displayName>OR1</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Ocref_clr source selection
            This bit selects the ocref_clr input source.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>COMP1 output is connected to the OCREF_CLR input</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>COMP2 output is connected to the OCREF_CLR input</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>OCREF_CLR</name>
          </field>
        </fields>
        <name>OR1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x60</addressOffset>
        <description>TIM alternate function option register
                  1</description>
        <displayName>AF1</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>ETR source selection
            These bits select the ETR input source.
            Others: Reserved</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>ETR legacy mode</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>COMP1</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>COMP2</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>LSE</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>ETRSEL</name>
          </field>
        </fields>
        <name>AF1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x68</addressOffset>
        <description>TIM alternate function option register
                  1</description>
        <displayName>TISEL</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>TI1[0] to TI1[15] input selection
            These bits select the TI1[0] to TI1[15] input source.
            Others: Reserved</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>TIM2_CH1 input</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>COMP1 output</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TI1SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>TI2[0] to TI2[15] input selection
            These bits select the TI2[0] to TI2[15] input source.
            Others: Reserved</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>TIM2_CH2 input</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>COMP2 output</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TI2SEL</name>
          </field>
        </fields>
        <name>TISEL</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <resetMask>0xFFFFFFFF</resetMask>
    <resetValue>0x0</resetValue>
    <size>0x20</size>
  </peripheral>
</peripherals>
<peripherals>
  <peripheral>
    <addressBlock>
      <offset>0x0</offset>
      <size>0x400</size>
      <usage>registers</usage>
    </addressBlock>
    <baseAddress>0x40001000</baseAddress>
    <description>Basic timers</description>
    <groupName>TIM</groupName>
    <interrupts>
      <interrupt>
        <name>TIM6_DAC</name>
        <value>0x11</value>
      </interrupt>
    </interrupts>
    <name>TIM6</name>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x0</addressOffset>
        <description>control register 1</description>
        <displayName>CR1</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Counter enable
            Note: Gated mode can work only if the CEN bit has been previously set by software. However trigger mode can set the CEN bit automatically by hardware.
            CEN is cleared automatically in one-pulse mode, when an update event occurs.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Counter disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Counter enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CEN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Update disable
            This bit is set and cleared by software to enable/disable UEV event generation.
            Counter overflow/underflow
            Setting the UG bit
            Update generation through the slave mode controller
            Buffered registers are then loaded with their preload values.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>UEV enabled. The Update (UEV) event is generated by one of the following events:</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>UEV disabled. The Update event is not generated, shadow registers keep their value (ARR, PSC). However the counter and the prescaler are reinitialized if the UG bit is set or if a hardware reset is received from the slave mode controller.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>UDIS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Update request source
            This bit is set and cleared by software to select the UEV event sources.
            Counter overflow/underflow
            Setting the UG bit
            Update generation through the slave mode controller</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Any of the following events generates an update interrupt or DMA request if enabled. These events can be: </description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Only counter overflow/underflow generates an update interrupt or DMA request if enabled.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>URS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>One-pulse mode</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Counter is not stopped at update event</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Counter stops counting at the next update event (clearing the CEN bit).</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>OPM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Auto-reload preload enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>TIMx_ARR register is not buffered.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>TIMx_ARR register is buffered.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>ARPE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>UIF status bit remapping</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No remapping. UIF status bit is not copied to TIMx_CNT register bit 31.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Remapping enabled. UIF status bit is copied to TIMx_CNT register bit 31.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>UIFREMAP</name>
          </field>
        </fields>
        <name>CR1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x4</addressOffset>
        <description>control register 2</description>
        <displayName>CR2</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Master mode selection
            These bits are used to select the information to be sent in master mode to slave timers for synchronization (TRGO). The combination is as follows:
            When the Counter Enable signal is controlled by the trigger input, there is a delay on TRGO, except if the master/slave mode is selected (see the MSM bit description in the TIMx_SMCR register).
            Note: The clock of the slave timer or ADC must be enabled prior to receive events from the master timer, and must not be changed on-the-fly while triggers are received from the master timer.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Reset - the UG bit from the TIMx_EGR register is used as a trigger output (TRGO). If reset is generated by the trigger input (slave mode controller configured in reset mode) then the signal on TRGO is delayed compared to the actual reset.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Enable - the Counter enable signal, CNT_EN, is used as a trigger output (TRGO). It is useful to start several timers at the same time or to control a window in which a slave timer is enabled. The Counter Enable signal is generated by a logic OR between CEN control bit and the trigger input when configured in gated mode. </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Update - The update event is selected as a trigger output (TRGO). For instance a master timer can then be used as a prescaler for a slave timer.</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>MMS</name>
          </field>
        </fields>
        <name>CR2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0xC</addressOffset>
        <description>DMA/Interrupt enable register</description>
        <displayName>DIER</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Update interrupt enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Update interrupt disabled.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Update interrupt enabled.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>UIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Update DMA request enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Update DMA request disabled.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Update DMA request enabled.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>UDE</name>
          </field>
        </fields>
        <name>DIER</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x10</addressOffset>
        <description>status register</description>
        <displayName>SR</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Update interrupt flag
            This bit is set by hardware on an update event. It is cleared by software.
            At overflow or underflow regarding the repetition counter value and if UDIS = 0 in the TIMx_CR1 register.
            When CNT is reinitialized by software using the UG bit in the TIMx_EGR register, if URS = 0 and UDIS = 0 in the TIMx_CR1 register.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No update occurred.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Update interrupt pending. This bit is set by hardware when the registers are updated:</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>UIF</name>
          </field>
        </fields>
        <name>SR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>write-only</access>
        <addressOffset>0x14</addressOffset>
        <description>event generation register</description>
        <displayName>EGR</displayName>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Update generation
            This bit can be set by software, it is automatically cleared by hardware.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No action.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Re-initializes the timer counter and generates an update of the registers. Note that the prescaler counter is cleared too (but the prescaler ratio is not affected).</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>UG</name>
          </field>
        </fields>
        <name>EGR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x24</addressOffset>
        <description>counter</description>
        <displayName>CNT</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>Counter value</description>
            <name>CNT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>UIF Copy
            This bit is a read-only copy of the UIF bit of the TIMx_ISR register. If the UIFREMAP bit in TIMx_CR1 is reset, bit 31 is reserved and read as 0.</description>
            <name>UIFCPY</name>
          </field>
        </fields>
        <name>CNT</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x28</addressOffset>
        <description>prescaler</description>
        <displayName>PSC</displayName>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>Prescaler value</description>
            <name>PSC</name>
          </field>
        </fields>
        <name>PSC</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x2C</addressOffset>
        <description>auto-reload register</description>
        <displayName>ARR</displayName>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>Prescaler value</description>
            <name>ARR</name>
          </field>
        </fields>
        <name>ARR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xFFFF</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <resetMask>0xFFFFFFFF</resetMask>
    <resetValue>0x0</resetValue>
    <size>0x20</size>
  </peripheral>
</peripherals>
<peripherals>
  <peripheral>
    <addressBlock>
      <offset>0x0</offset>
      <size>0x400</size>
      <usage>registers</usage>
    </addressBlock>
    <baseAddress>0x40001400</baseAddress>
    <derivedFrom>TIM6</derivedFrom>
    <description>Basic timers</description>
    <groupName>TIM</groupName>
    <interrupts>
      <interrupt>
        <name>TIM7</name>
        <value>0x12</value>
      </interrupt>
    </interrupts>
    <name>TIM7</name>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x0</addressOffset>
        <description>control register 1</description>
        <displayName>CR1</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Counter enable
            Note: Gated mode can work only if the CEN bit has been previously set by software. However trigger mode can set the CEN bit automatically by hardware.
            CEN is cleared automatically in one-pulse mode, when an update event occurs.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Counter disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Counter enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CEN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Update disable
            This bit is set and cleared by software to enable/disable UEV event generation.
            Counter overflow/underflow
            Setting the UG bit
            Update generation through the slave mode controller
            Buffered registers are then loaded with their preload values.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>UEV enabled. The Update (UEV) event is generated by one of the following events:</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>UEV disabled. The Update event is not generated, shadow registers keep their value (ARR, PSC). However the counter and the prescaler are reinitialized if the UG bit is set or if a hardware reset is received from the slave mode controller.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>UDIS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Update request source
            This bit is set and cleared by software to select the UEV event sources.
            Counter overflow/underflow
            Setting the UG bit
            Update generation through the slave mode controller</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Any of the following events generates an update interrupt or DMA request if enabled. These events can be: </description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Only counter overflow/underflow generates an update interrupt or DMA request if enabled.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>URS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>One-pulse mode</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Counter is not stopped at update event</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Counter stops counting at the next update event (clearing the CEN bit).</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>OPM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Auto-reload preload enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>TIMx_ARR register is not buffered.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>TIMx_ARR register is buffered.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>ARPE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>UIF status bit remapping</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No remapping. UIF status bit is not copied to TIMx_CNT register bit 31.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Remapping enabled. UIF status bit is copied to TIMx_CNT register bit 31.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>UIFREMAP</name>
          </field>
        </fields>
        <name>CR1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x4</addressOffset>
        <description>control register 2</description>
        <displayName>CR2</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Master mode selection
            These bits are used to select the information to be sent in master mode to slave timers for synchronization (TRGO). The combination is as follows:
            When the Counter Enable signal is controlled by the trigger input, there is a delay on TRGO, except if the master/slave mode is selected (see the MSM bit description in the TIMx_SMCR register).
            Note: The clock of the slave timer or ADC must be enabled prior to receive events from the master timer, and must not be changed on-the-fly while triggers are received from the master timer.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Reset - the UG bit from the TIMx_EGR register is used as a trigger output (TRGO). If reset is generated by the trigger input (slave mode controller configured in reset mode) then the signal on TRGO is delayed compared to the actual reset.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Enable - the Counter enable signal, CNT_EN, is used as a trigger output (TRGO). It is useful to start several timers at the same time or to control a window in which a slave timer is enabled. The Counter Enable signal is generated by a logic OR between CEN control bit and the trigger input when configured in gated mode. </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Update - The update event is selected as a trigger output (TRGO). For instance a master timer can then be used as a prescaler for a slave timer.</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>MMS</name>
          </field>
        </fields>
        <name>CR2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0xC</addressOffset>
        <description>DMA/Interrupt enable register</description>
        <displayName>DIER</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Update interrupt enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Update interrupt disabled.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Update interrupt enabled.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>UIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Update DMA request enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Update DMA request disabled.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Update DMA request enabled.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>UDE</name>
          </field>
        </fields>
        <name>DIER</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x10</addressOffset>
        <description>status register</description>
        <displayName>SR</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Update interrupt flag
            This bit is set by hardware on an update event. It is cleared by software.
            At overflow or underflow regarding the repetition counter value and if UDIS = 0 in the TIMx_CR1 register.
            When CNT is reinitialized by software using the UG bit in the TIMx_EGR register, if URS = 0 and UDIS = 0 in the TIMx_CR1 register.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No update occurred.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Update interrupt pending. This bit is set by hardware when the registers are updated:</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>UIF</name>
          </field>
        </fields>
        <name>SR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>write-only</access>
        <addressOffset>0x14</addressOffset>
        <description>event generation register</description>
        <displayName>EGR</displayName>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Update generation
            This bit can be set by software, it is automatically cleared by hardware.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No action.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Re-initializes the timer counter and generates an update of the registers. Note that the prescaler counter is cleared too (but the prescaler ratio is not affected).</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>UG</name>
          </field>
        </fields>
        <name>EGR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x24</addressOffset>
        <description>counter</description>
        <displayName>CNT</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>Counter value</description>
            <name>CNT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>UIF Copy
            This bit is a read-only copy of the UIF bit of the TIMx_ISR register. If the UIFREMAP bit in TIMx_CR1 is reset, bit 31 is reserved and read as 0.</description>
            <name>UIFCPY</name>
          </field>
        </fields>
        <name>CNT</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x28</addressOffset>
        <description>prescaler</description>
        <displayName>PSC</displayName>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>Prescaler value</description>
            <name>PSC</name>
          </field>
        </fields>
        <name>PSC</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x2C</addressOffset>
        <description>auto-reload register</description>
        <displayName>ARR</displayName>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>Prescaler value</description>
            <name>ARR</name>
          </field>
        </fields>
        <name>ARR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xFFFF</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <resetMask>0xFFFFFFFF</resetMask>
    <resetValue>0x0</resetValue>
    <size>0x20</size>
  </peripheral>
</peripherals>
<peripherals>
  <peripheral>
    <addressBlock>
      <offset>0x0</offset>
      <size>0x400</size>
      <usage>registers</usage>
    </addressBlock>
    <baseAddress>0x40002000</baseAddress>
    <description>General purpose timers</description>
    <groupName>TIM</groupName>
    <interrupts>
      <interrupt>
        <name>TIM14</name>
        <value>0x13</value>
      </interrupt>
    </interrupts>
    <name>TIM14</name>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x0</addressOffset>
        <description>control register 1</description>
        <displayName>CR1</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Counter enable
            Note: External clock and gated mode can work only if the CEN bit has been previously set by
            software. However trigger mode can set the CEN bit automatically by hardware.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Counter disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Counter enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CEN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Update disable
            This bit is set and cleared by software to enable/disable update interrupt (UEV) event generation.
            Counter overflow
            Setting the UG bit.
            Buffered registers are then loaded with their preload values.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>UEV enabled. An UEV is generated by one of the following events:</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>UEV disabled. No UEV is generated, shadow registers keep their value (ARR, PSC, CCRx). The counter and the prescaler are reinitialized if the UG bit is set.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>UDIS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Update request source
            This bit is set and cleared by software to select the update interrupt (UEV) sources.
            Counter overflow
            Setting the UG bit</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Any of the following events generate an UEV if enabled: </description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Only counter overflow generates an UEV if enabled.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>URS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>One-pulse mode</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Counter is not stopped on the update event</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Counter stops counting on the next update event (clearing the CEN bit).</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>OPM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Auto-reload preload enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>TIMx_ARR register is not buffered</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>TIMx_ARR register is buffered</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>ARPE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Clock division
            This bit-field indicates the division ratio between the timer clock (CK_INT) frequency and sampling clock used by the digital filters (TIx),</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>tDTS = tCK_INT</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>tDTS = 2 Ã tCK_INT</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>tDTS = 4 Ã tCK_INT</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CKD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>UIF status bit remapping</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No remapping. UIF status bit is not copied to TIMx_CNT register bit 31.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Remapping enabled. UIF status bit is copied to TIMx_CNT register bit 31.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>UIFREMAP</name>
          </field>
        </fields>
        <name>CR1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0xC</addressOffset>
        <description>DMA/Interrupt enable register</description>
        <displayName>DIER</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Update interrupt enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Update interrupt disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Update interrupt enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>UIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 1 interrupt enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC1 interrupt disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC1 interrupt enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC1IE</name>
          </field>
        </fields>
        <name>DIER</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x10</addressOffset>
        <description>status register</description>
        <displayName>SR</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Update interrupt flag
            This bit is set by hardware on an update event. It is cleared by software.
            At overflow and if UDIS=â0â in the TIMx_CR1 register.
            When CNT is reinitialized by software using the UG bit in TIMx_EGR register, if URS=â0â and UDIS=â0â in the TIMx_CR1 register.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No update occurred.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Update interrupt pending. This bit is set by hardware when the registers are updated:</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>UIF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/compare 1 interrupt flag
            This flag is set by hardware. It is cleared by software (input capture or output compare mode) or by reading the TIMx_CCR1 register (input capture mode only).
            If channel CC1 is configured as output: this flag is set when he content of the counter TIMx_CNT matches the content of the TIMx_CCR1 register. When the content of TIMx_CCR1 is greater than the content of TIMx_ARR, the CC1IF bit goes high on the counter overflow (in up-counting and up/down-counting modes) or underflow (in down-counting mode). There are 3 possible options for flag setting in center-aligned mode, refer to the CMS bits in the TIMx_CR1 register for the full description.
            If channel CC1 is configured as input: this bit is set when counter value has been captured in TIMx_CCR1 register (an edge has been detected on IC1, as per the edge sensitivity defined with the CC1P and CC1NP bits setting, in TIMx_CCER).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No compare match / No input capture occurred</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>A compare match or an input capture occurred.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC1IF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 1 overcapture flag
            This flag is set by hardware only when the corresponding channel is configured in input capture mode. It is cleared by software by writing it to '0â.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No overcapture has been detected.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>The counter value has been captured in TIMx_CCR1 register while CC1IF flag was already set</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC1OF</name>
          </field>
        </fields>
        <name>SR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>write-only</access>
        <addressOffset>0x14</addressOffset>
        <description>event generation register</description>
        <displayName>EGR</displayName>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Update generation
            This bit can be set by software, it is automatically cleared by hardware.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No action</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Re-initialize the counter and generates an update of the registers. Note that the prescaler counter is cleared too (anyway the prescaler ratio is not affected). The counter is cleared. </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>UG</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/compare 1 generation
            This bit is set by software in order to generate an event, it is automatically cleared by hardware.
            If channel CC1 is configured as output:
            CC1IF flag is set, Corresponding interrupt or is sent if enabled.
            If channel CC1 is configured as input:
            The current value of the counter is captured in TIMx_CCR1 register. The CC1IF flag is set, the corresponding interrupt is sent if enabled. The CC1OF flag is set if the CC1IF flag was already high.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No action</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>A capture/compare event is generated on channel 1:</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC1G</name>
          </field>
        </fields>
        <name>EGR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x18</addressOffset>
        <description>capture/compare mode register 1 (output
                  mode)</description>
        <displayName>CCMR1_Output</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Capture/Compare 1 selection
            This bit-field defines the direction of the channel (input/output) as well as the used input.
            Note: CC1S bits are writable only when the channel is OFF (CC1E = 0 in TIMx_CCER).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC1 channel is configured as output.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC1 channel is configured as input, IC1 is mapped on TI1.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC1S</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output compare 1 fast enable
            This bit decreases the latency between a trigger event and a transition on the timer output. It must be used in one-pulse mode (OPM bit set in TIMx_CR1 register), to have the output pulse starting as soon as possible after the starting trigger.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC1 behaves normally depending on counter and CCR1 values even when the trigger is ON. The minimum delay to activate CC1 output when an edge occurs on the trigger input is 5 clock cycles.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>An active edge on the trigger input acts like a compare match on CC1 output. OC is then set to the compare level independently of the result of the comparison. Delay to sample the trigger input and to activate CC1 output is reduced to 3 clock cycles. OC1FE acts only if the channel is configured in PWM1 or PWM2 mode.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>OC1FE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output compare 1 preload enable
            Note: The PWM mode can be used without validating the preload register only in one pulse mode (OPM bit set in TIMx_CR1 register). Else the behavior is not guaranteed.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Preload register on TIMx_CCR1 disabled. TIMx_CCR1 can be written at anytime, the new value is taken in account immediately. </description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Preload register on TIMx_CCR1 enabled. Read/Write operations access the preload register. TIMx_CCR1 preload value is loaded in the active register at each update event.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>OC1PE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Output compare 1 mode (refer to bit 16 for OC1M[3])
            These bits define the behavior of the output reference signal OC1REF from which OC1 is derived. OC1REF is active high whereas OC1 active level depends on CC1P bit.
            Others: Reserved
            Note: In PWM mode 1 or 2, the OCREF level changes when the result of the comparison changes or when the output compare mode switches from frozen to PWM mode.
            Note: The OC1M[3] bit is not contiguous, located in bit 16.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Frozen. The comparison between the output compare register TIMx_CCR1 and the counter TIMx_CNT has no effect on the outputs. </description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Set channel 1 to active level on match. OC1REF signal is forced high when the counter TIMx_CNT matches the capture/compare register 1 (TIMx_CCR1). </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Set channel 1 to inactive level on match. OC1REF signal is forced low when the counter TIMx_CNT matches the capture/compare register 1 (TIMx_CCR1). </description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Toggle - OC1REF toggles when TIMx_CNT = TIMx_CCR1. </description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Force inactive level - OC1REF is forced low. </description>
                <name>B_0x4</name>
                <value>0x4</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Force active level - OC1REF is forced high.</description>
                <name>B_0x5</name>
                <value>0x5</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>PWM mode 1 - Channel 1 is active as long as TIMx_CNT &lt; TIMx_CCR1 else inactive.</description>
                <name>B_0x6</name>
                <value>0x6</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>PWM mode 2 - Channel 1 is inactive as long as TIMx_CNT &lt; TIMx_CCR1 else active</description>
                <name>B_0x7</name>
                <value>0x7</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>OC1M1</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output compare 1 mode (refer to bit 16 for OC1M[3])
            These bits define the behavior of the output reference signal OC1REF from which OC1 is derived. OC1REF is active high whereas OC1 active level depends on CC1P bit.
            Others: Reserved
            Note: In PWM mode 1 or 2, the OCREF level changes when the result of the comparison changes or when the output compare mode switches from frozen to PWM mode.
            Note: The OC1M[3] bit is not contiguous, located in bit 16.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Frozen. The comparison between the output compare register TIMx_CCR1 and the counter TIMx_CNT has no effect on the outputs. </description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Set channel 1 to active level on match. OC1REF signal is forced high when the counter TIMx_CNT matches the capture/compare register 1 (TIMx_CCR1). </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Set channel 1 to inactive level on match. OC1REF signal is forced low when the counter TIMx_CNT matches the capture/compare register 1 (TIMx_CCR1). </description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Toggle - OC1REF toggles when TIMx_CNT = TIMx_CCR1. </description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Force inactive level - OC1REF is forced low. </description>
                <name>B_0x4</name>
                <value>0x4</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Force active level - OC1REF is forced high.</description>
                <name>B_0x5</name>
                <value>0x5</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>PWM mode 1 - Channel 1 is active as long as TIMx_CNT &lt; TIMx_CCR1 else inactive.</description>
                <name>B_0x6</name>
                <value>0x6</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>PWM mode 2 - Channel 1 is inactive as long as TIMx_CNT &lt; TIMx_CCR1 else active</description>
                <name>B_0x7</name>
                <value>0x7</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>OC1M2</name>
          </field>
        </fields>
        <name>CCMR1_Output</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x18</addressOffset>
        <description>capture/compare mode register 1 (input
                  mode)</description>
        <displayName>CCMR1_Input</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Capture/Compare 1 selection
            This bit-field defines the direction of the channel (input/output) as well as the used input.
            Note: CC1S bits are writable only when the channel is OFF (CC1E = 0 in TIMx_CCER).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC1 channel is configured as output</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC1 channel is configured as input, IC1 is mapped on TI1</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC1S</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Input capture 1 prescaler
            This bit-field defines the ratio of the prescaler acting on CC1 input (IC1).
            The prescaler is reset as soon as CC1E=â0â (TIMx_CCER register).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>no prescaler, capture is done each time an edge is detected on the capture input</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>capture is done once every 2 events</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>capture is done once every 4 events</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>capture is done once every 8 events</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>IC1PSC</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Input capture 1 filter
            This bit-field defines the frequency used to sample TI1 input and the length of the digital filter applied to TI1. The digital filter is made of an event counter in which N consecutive events are needed to validate a transition on the output:</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No filter, sampling is done at fDTS</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fCK_INT, N=2</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fCK_INT, N=4</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fCK_INT, N=8</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/2, N=6</description>
                <name>B_0x4</name>
                <value>0x4</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/2, N=8</description>
                <name>B_0x5</name>
                <value>0x5</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/4, N=6</description>
                <name>B_0x6</name>
                <value>0x6</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/4, N=8</description>
                <name>B_0x7</name>
                <value>0x7</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/8, N=6</description>
                <name>B_0x8</name>
                <value>0x8</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/8, N=8</description>
                <name>B_0x9</name>
                <value>0x9</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/16, N=5</description>
                <name>B_0xA</name>
                <value>0xA</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/16, N=6</description>
                <name>B_0xB</name>
                <value>0xB</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/16, N=8</description>
                <name>B_0xC</name>
                <value>0xC</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/32, N=5</description>
                <name>B_0xD</name>
                <value>0xD</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/32, N=6</description>
                <name>B_0xE</name>
                <value>0xE</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/32, N=8</description>
                <name>B_0xF</name>
                <value>0xF</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>IC1F</name>
          </field>
        </fields>
        <name>CCMR1_Input</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x20</addressOffset>
        <description>capture/compare enable
                  register</description>
        <displayName>CCER</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 1 output enable.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Capture mode disabled / OC1 is not active</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Capture mode enabled / OC1 signal is output on the corresponding output pin</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC1E</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 1 output Polarity.
            When CC1 channel is configured as input, both CC1NP/CC1P bits select the active polarity of TI1FP1 and TI2FP1 for trigger or capture operations.
            CC1NP=0, CC1P=0:	non-inverted/rising edge. The circuit is sensitive to TIxFP1 rising edge (capture or trigger operations in reset, external clock or trigger mode), TIxFP1 is not inverted (trigger operation in gated mode or encoder mode).
            CC1NP=0, CC1P=1:	inverted/falling edge. The circuit is sensitive to TIxFP1 falling edge (capture or trigger operations in reset, external clock or trigger mode), TIxFP1 is inverted (trigger operation in gated mode or encoder mode).
            CC1NP=1, CC1P=1:	non-inverted/both edges/ The circuit is sensitive to both TIxFP1 rising and falling edges (capture or trigger operations in reset, external clock or trigger mode), TIxFP1is not inverted (trigger operation in gated mode). This configuration must not be used in encoder mode.
            CC1NP=1, CC1P=0:	This configuration is reserved, it must not be used.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>OC1 active high (output mode) / Edge sensitivity selection (input mode, see below)</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>OC1 active low (output mode) / Edge sensitivity selection (input mode, see below)</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC1P</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 1 complementary output Polarity.
            CC1 channel configured as output: CC1NP must be kept cleared.
            CC1 channel configured as input: CC1NP bit is used in conjunction with CC1P to define TI1FP1 polarity (refer to CC1P description).</description>
            <name>CC1NP</name>
          </field>
        </fields>
        <name>CCER</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x24</addressOffset>
        <description>counter</description>
        <displayName>CNT</displayName>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>low counter value</description>
            <name>CNT</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>UIF Copy</description>
            <name>UIFCPY</name>
          </field>
        </fields>
        <name>CNT</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x28</addressOffset>
        <description>prescaler</description>
        <displayName>PSC</displayName>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>Prescaler value</description>
            <name>PSC</name>
          </field>
        </fields>
        <name>PSC</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x2C</addressOffset>
        <description>auto-reload register</description>
        <displayName>ARR</displayName>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>Low Auto-reload value</description>
            <name>ARR</name>
          </field>
        </fields>
        <name>ARR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x34</addressOffset>
        <description>capture/compare register 1</description>
        <displayName>CCR1</displayName>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>Low Capture/Compare 1
                          value</description>
            <name>CCR1</name>
          </field>
        </fields>
        <name>CCR1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x68</addressOffset>
        <description>TIM timer input selection
                  register</description>
        <displayName>TISEL</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>selects TI1[0] to TI1[15] input
            Others: Reserved</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>TIM14_CH1 input</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>RTC CLK</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>HSE/32</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>MCO</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TI1SEL</name>
          </field>
        </fields>
        <name>TISEL</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <resetMask>0xFFFFFFFF</resetMask>
    <resetValue>0x0</resetValue>
    <size>0x20</size>
  </peripheral>
</peripherals>
<peripherals>
  <peripheral>
    <addressBlock>
      <offset>0x0</offset>
      <size>0x400</size>
      <usage>registers</usage>
    </addressBlock>
    <baseAddress>0x40014000</baseAddress>
    <description>General purpose timers</description>
    <groupName>TIM</groupName>
    <interrupts>
      <interrupt>
        <name>TIM15</name>
        <value>0x14</value>
      </interrupt>
    </interrupts>
    <name>TIM15</name>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x0</addressOffset>
        <description>control register 1</description>
        <displayName>CR1</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Counter enable
            Note: External clock and gated mode can work only if the CEN bit has been previously set by software. However trigger mode can set the CEN bit automatically by hardware.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Counter disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Counter enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CEN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Update disable
            This bit is set and cleared by software to enable/disable UEV event generation.
            Counter overflow/underflow
            Setting the UG bit
            Update generation through the slave mode controller
            Buffered registers are then loaded with their preload values.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>UEV enabled. The Update (UEV) event is generated by one of the following events:</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>UEV disabled. The Update event is not generated, shadow registers keep their value (ARR, PSC, CCRx). However the counter and the prescaler are reinitialized if the UG bit is set or if a hardware reset is received from the slave mode controller.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>UDIS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Update request source
            This bit is set and cleared by software to select the UEV event sources.
            Counter overflow/underflow
            Setting the UG bit
            Update generation through the slave mode controller</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Any of the following events generate an update interrupt if enabled. These events can be: </description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Only counter overflow/underflow generates an update interrupt if enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>URS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>One-pulse mode</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Counter is not stopped at update event</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Counter stops counting at the next update event (clearing the bit CEN)</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>OPM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Auto-reload preload enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>TIMx_ARR register is not buffered</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>TIMx_ARR register is buffered</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>ARPE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Clock division
            This bitfield indicates the division ratio between the timer clock (CK_INT) frequency and the dead-time and sampling clock (tDTS) used by the dead-time generators and the digital filters (TIx)</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>tDTS = tCK_INT</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>tDTS = 2*tCK_INT</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>tDTS = 4*tCK_INT</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Reserved, do not program this value</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CKD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>UIF status bit remapping</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No remapping. UIF status bit is not copied to TIMx_CNT register bit 31.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Remapping enabled. UIF status bit is copied to TIMx_CNT register bit 31.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>UIFREMAP</name>
          </field>
        </fields>
        <name>CR1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x4</addressOffset>
        <description>control register 2</description>
        <displayName>CR2</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/compare preloaded control
            Note: This bit acts only on channels that have a complementary output.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>CCxE, CCxNE and OCxM bits are not preloaded</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CCxE, CCxNE and OCxM bits are preloaded, after having been written, they are updated only when a commutation event (COM) occurs (COMG bit set or rising edge detected on TRGI, depending on the CCUS bit).</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CCPC</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/compare control update selection
            Note: This bit acts only on channels that have a complementary output.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>When capture/compare control bits are preloaded (CCPC=1), they are updated by setting the COMG bit only.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>When capture/compare control bits are preloaded (CCPC=1), they are updated by setting the COMG bit or when an rising edge occurs on TRGI.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CCUS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/compare DMA selection</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>CCx DMA request sent when CCx event occurs</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CCx DMA requests sent when update event occurs</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CCDS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Master mode selection
            These bits allow to select the information to be sent in master mode to slave timers for synchronization (TRGO). The combination is as follows:</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Reset - the UG bit from the TIMx_EGR register is used as trigger output (TRGO). If the reset is generated by the trigger input (slave mode controller configured in reset mode) then the signal on TRGO is delayed compared to the actual reset.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Enable - the Counter Enable signal CNT_EN is used as trigger output (TRGO). It is useful to start several timers at the same time or to control a window in which a slave timer is enable. The Counter Enable signal is generated by a logic AND between CEN control bit and the trigger input when configured in gated mode. When the Counter Enable signal is controlled by the trigger input, there is a delay on TRGO, except if the master/slave mode is selected (see the MSM bit description in TIMx_SMCR register).</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Update - The update event is selected as trigger output (TRGO). For instance a master timer can then be used as a prescaler for a slave timer.</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Compare Pulse - The trigger output send a positive pulse when the CC1IF flag is to be set (even if it was already high), as soon as a capture or a compare match occurred. (TRGO).</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Compare - OC1REFC signal is used as trigger output (TRGO).</description>
                <name>B_0x4</name>
                <value>0x4</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Compare - OC2REFC signal is used as trigger output (TRGO).</description>
                <name>B_0x5</name>
                <value>0x5</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>MMS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>TI1 selection</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>The TIMx_CH1 pin is connected to TI1 input</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>The TIMx_CH1, CH2 pins are connected to the TI1 input (XOR combination)</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TI1S</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output Idle state 1 (OC1 output)
            Note: This bit can not be modified as long as LOCK level 1, 2 or 3 has been programmed (LOCK bits in TIM15_BDTR register).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>OC1=0 (after a dead-time if OC1N is implemented) when MOE=0</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>OC1=1 (after a dead-time if OC1N is implemented) when MOE=0</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>OIS1</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output Idle state 1 (OC1N output)
            Note: This bit can not be modified as long as LOCK level 1, 2 or 3 has been programmed (LOCK bits in TIM15_BDTR register).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>OC1N=0 after a dead-time when MOE=0</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>OC1N=1 after a dead-time when MOE=0</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>OIS1N</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output idle state 2 (OC2 output)
            Note: This bit cannot be modified as long as LOCK level 1, 2 or 3 has been programmed (LOCK bits in the TIM15_BDTR register).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>OC2=0 when MOE=0</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>OC2=1 when MOE=0</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>OIS2</name>
          </field>
        </fields>
        <name>CR2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x8</addressOffset>
        <description>slave mode control register</description>
        <displayName>SMCR</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Slave mode selection
            When external signals are selected the active edge of the trigger signal (TRGI) is linked to the polarity selected on the external input (see Input Control register and Control Register description.
            Other codes: reserved.
            Note: The gated mode must not be used if TI1F_ED is selected as the trigger input (TS=â00100â). Indeed, TI1F_ED outputs 1 pulse for each transition on TI1F, whereas the gated mode checks the level of the trigger signal.
            Note: The clock of the slave peripherals (timer, ADC, ...) receiving the TRGO or the TRGO2 signals must be enabled prior to receive events from the master timer, and the clock frequency (prescaler) must not be changed on-the-fly while triggers are received from the master timer.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Slave mode disabled - if CEN = '1â then the prescaler is clocked directly by the internal clock.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Reset Mode - Rising edge of the selected trigger input (TRGI) reinitializes the counter and generates an update of the registers.</description>
                <name>B_0x4</name>
                <value>0x4</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Gated Mode - The counter clock is enabled when the trigger input (TRGI) is high. The counter stops (but is not reset) as soon as the trigger becomes low. Both start and stop of the counter are controlled.</description>
                <name>B_0x5</name>
                <value>0x5</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Trigger Mode - The counter starts at a rising edge of the trigger TRGI (but it is not reset). Only the start of the counter is controlled.</description>
                <name>B_0x6</name>
                <value>0x6</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>External Clock Mode 1 - Rising edges of the selected trigger (TRGI) clock the counter.</description>
                <name>B_0x7</name>
                <value>0x7</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Combined reset + trigger mode - Rising edge of the selected trigger input (TRGI) reinitializes the counter, generates an update of the registers and starts the counter.</description>
                <name>B_0x8</name>
                <value>0x8</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>SMS1</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Trigger selection
            This bit field selects the trigger input to be used to synchronize the counter.
            Other: Reserved
            See  for more details on ITRx meaning for each Timer.
            Note: These bits must be changed only when they are not used (e.g. when SMS=000) to avoid wrong edge detections at the transition.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Internal Trigger 0 (ITR0)</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Internal Trigger 1 (ITR1)</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Internal Trigger 2 (ITR2)</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Internal Trigger 3 (ITR3)</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>TI1 Edge Detector (TI1F_ED)</description>
                <name>B_0x4</name>
                <value>0x4</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Filtered Timer Input 1 (TI1FP1)</description>
                <name>B_0x5</name>
                <value>0x5</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Filtered Timer Input 2 (TI2FP2)</description>
                <name>B_0x6</name>
                <value>0x6</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TS1</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Master/slave mode</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No action</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>The effect of an event on the trigger input (TRGI) is delayed to allow a perfect synchronization between the current timer and its slaves (through TRGO). It is useful if we want to synchronize several timers on a single external event.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>MSM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Slave mode selection
            When external signals are selected the active edge of the trigger signal (TRGI) is linked to the polarity selected on the external input (see Input Control register and Control Register description.
            Other codes: reserved.
            Note: The gated mode must not be used if TI1F_ED is selected as the trigger input (TS=â00100â). Indeed, TI1F_ED outputs 1 pulse for each transition on TI1F, whereas the gated mode checks the level of the trigger signal.
            Note: The clock of the slave peripherals (timer, ADC, ...) receiving the TRGO or the TRGO2 signals must be enabled prior to receive events from the master timer, and the clock frequency (prescaler) must not be changed on-the-fly while triggers are received from the master timer.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Slave mode disabled - if CEN = '1â then the prescaler is clocked directly by the internal clock.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Reset Mode - Rising edge of the selected trigger input (TRGI) reinitializes the counter and generates an update of the registers.</description>
                <name>B_0x4</name>
                <value>0x4</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Gated Mode - The counter clock is enabled when the trigger input (TRGI) is high. The counter stops (but is not reset) as soon as the trigger becomes low. Both start and stop of the counter are controlled.</description>
                <name>B_0x5</name>
                <value>0x5</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Trigger Mode - The counter starts at a rising edge of the trigger TRGI (but it is not reset). Only the start of the counter is controlled.</description>
                <name>B_0x6</name>
                <value>0x6</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>External Clock Mode 1 - Rising edges of the selected trigger (TRGI) clock the counter.</description>
                <name>B_0x7</name>
                <value>0x7</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Combined reset + trigger mode - Rising edge of the selected trigger input (TRGI) reinitializes the counter, generates an update of the registers and starts the counter.</description>
                <name>B_0x8</name>
                <value>0x8</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>SMS2</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Trigger selection
            This bit field selects the trigger input to be used to synchronize the counter.
            Other: Reserved
            See  for more details on ITRx meaning for each Timer.
            Note: These bits must be changed only when they are not used (e.g. when SMS=000) to avoid wrong edge detections at the transition.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Internal Trigger 0 (ITR0)</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Internal Trigger 1 (ITR1)</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Internal Trigger 2 (ITR2)</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Internal Trigger 3 (ITR3)</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>TI1 Edge Detector (TI1F_ED)</description>
                <name>B_0x4</name>
                <value>0x4</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Filtered Timer Input 1 (TI1FP1)</description>
                <name>B_0x5</name>
                <value>0x5</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Filtered Timer Input 2 (TI2FP2)</description>
                <name>B_0x6</name>
                <value>0x6</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TS2</name>
          </field>
        </fields>
        <name>SMCR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0xC</addressOffset>
        <description>DMA/Interrupt enable register</description>
        <displayName>DIER</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Update interrupt enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Update interrupt disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Update interrupt enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>UIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 1 interrupt enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC1 interrupt disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC1 interrupt enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC1IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 2 interrupt enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC2 interrupt disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC2 interrupt enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC2IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>COM interrupt enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>COM interrupt disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>COM interrupt enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>COMIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Trigger interrupt enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Trigger interrupt disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Trigger interrupt enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Break interrupt enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Break interrupt disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Break interrupt enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>BIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Update DMA request enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Update DMA request disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Update DMA request enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>UDE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 1 DMA request enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC1 DMA request disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC1 DMA request enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC1DE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 2 DMA request enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC2 DMA request disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC2 DMA request enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC2DE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>COM DMA request enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>COM DMA request disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>COM DMA request enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>COMDE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Trigger DMA request enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Trigger DMA request disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Trigger DMA request enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TDE</name>
          </field>
        </fields>
        <name>DIER</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x10</addressOffset>
        <description>status register</description>
        <displayName>SR</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Update interrupt flag
            This bit is set by hardware on an update event. It is cleared by software.
            At overflow regarding the repetition counter value (update if repetition counter = 0) and if the UDIS=0 in the TIMx_CR1 register.
            When CNT is reinitialized by software using the UG bit in TIMx_EGR register, if URS=0 and UDIS=0 in the TIMx_CR1 register.
            When CNT is reinitialized by a trigger event (refer to control register (TIM15_SMCR)), if URS=0 and UDIS=0 in the TIMx_CR1 register.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No update occurred.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Update interrupt pending. This bit is set by hardware when the registers are updated:</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>UIF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 1 interrupt flag
            This flag is set by hardware. It is cleared by software (input capture or output compare mode) or by reading the TIMx_CCR1 register (input capture mode only).
            If channel CC1 is configured as output: this flag is set when the content of the counter TIMx_CNT matches the content of the TIMx_CCR1 register. When the content of TIMx_CCR1 is greater than the content of TIMx_ARR, the CC1IF bit goes high on the counter overflow (in up-counting and up/down-counting modes) or underflow (in down-counting mode). There are 3 possible options for flag setting in center-aligned mode, refer to the CMS bits in the TIMx_CR1 register for the full description.
            If channel CC1 is configured as input: this bit is set when counter value has been captured in TIMx_CCR1 register (an edge has been detected on IC1, as per the edge sensitivity defined with the CC1P and CC1NP bits setting, in TIMx_CCER).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No compare match / No input capture occurred</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>A compare match or an input capture occurred</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC1IF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 2 interrupt flag
            refer to CC1IF description</description>
            <name>CC2IF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>COM interrupt flag
            This flag is set by hardware on a COM event (once the capture/compare control bits âCCxE, CCxNE, OCxMâ have been updated). It is cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No COM event occurred</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>COM interrupt pending</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>COMIF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Trigger interrupt flag
            This flag is set by hardware on the TRG trigger event (active edge detected on TRGI input when the slave mode controller is enabled in all modes but gated mode, both edges in case gated mode is selected). It is set when the counter starts or stops when gated mode is selected. It is cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No trigger event occurred</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Trigger interrupt pending</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TIF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Break interrupt flag
            This flag is set by hardware as soon as the break input goes active. It can be cleared by software if the break input is not active.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No break event occurred</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>An active level has been detected on the break input</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>BIF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 1 overcapture flag
            This flag is set by hardware only when the corresponding channel is configured in input capture mode. It is cleared by software by writing it to '0â.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No overcapture has been detected</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>The counter value has been captured in TIMx_CCR1 register while CC1IF flag was already set</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC1OF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 2 overcapture flag
            Refer to CC1OF description</description>
            <name>CC2OF</name>
          </field>
        </fields>
        <name>SR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>write-only</access>
        <addressOffset>0x14</addressOffset>
        <description>event generation register</description>
        <displayName>EGR</displayName>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Update generation
            This bit can be set by software, it is automatically cleared by hardware.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No action</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Reinitialize the counter and generates an update of the registers. Note that the prescaler counter is cleared too (anyway the prescaler ratio is not affected).</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>UG</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 1 generation
            This bit is set by software in order to generate an event, it is automatically cleared by hardware.
            If channel CC1 is configured as output:
            CC1IF flag is set, Corresponding interrupt or DMA request is sent if enabled.
            If channel CC1 is configured as input:
            The current value of the counter is captured in TIMx_CCR1 register. The CC1IF flag is set, the corresponding interrupt or DMA request is sent if enabled. The CC1OF flag is set if the CC1IF flag was already high.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No action</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>A capture/compare event is generated on channel 1:</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC1G</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 2 generation
            Refer to CC1G description</description>
            <name>CC2G</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare control update generation
            This bit can be set by software, it is automatically cleared by hardware.
            Note: This bit acts only on channels that have a complementary output.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No action</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>When the CCPC bit is set, it is possible to update the CCxE, CCxNE and OCxM bits</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>COMG</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Trigger generation
            This bit is set by software in order to generate an event, it is automatically cleared by hardware.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No action</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>The TIF flag is set in TIMx_SR register. Related interrupt or DMA transfer can occur if enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TG</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Break generation
            This bit is set by software in order to generate an event, it is automatically cleared by hardware.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No action</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>A break event is generated. MOE bit is cleared and BIF flag is set. Related interrupt or DMA transfer can occur if enabled.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>BG</name>
          </field>
        </fields>
        <name>EGR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x18</addressOffset>
        <description>capture/compare mode register (output
                  mode)</description>
        <displayName>CCMR1_Output</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Capture/Compare 1 selection
            This bit-field defines the direction of the channel (input/output) as well as the used input.
            Note: CC1S bits are writable only when the channel is OFF (CC1E = '0â in TIMx_CCER).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC1 channel is configured as output.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC1 channel is configured as input, IC1 is mapped on TI1.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC1 channel is configured as input, IC1 is mapped on TI2.</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC1 channel is configured as input, IC1 is mapped on TRC. This mode is working only if an internal trigger input is selected through TS bit (TIMx_SMCR register)</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC1S</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output Compare 1 fast enable
            This bit decreases the latency between a trigger event and a transition on the timer output. It must be used in one-pulse mode (OPM bit set in TIMx_CR1 register), to have the output pulse starting as soon as possible after the starting trigger.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC1 behaves normally depending on counter and CCR1 values even when the trigger is ON. The minimum delay to activate CC1 output when an edge occurs on the trigger input is 5 clock cycles.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>An active edge on the trigger input acts like a compare match on CC1 output. Then, OC is set to the compare level independently of the result of the comparison. Delay to sample the trigger input and to activate CC1 output is reduced to 3 clock cycles. OCFE acts only if the channel is configured in PWM1 or PWM2 mode.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>OC1FE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output Compare 1 preload enable
            Note: These bits can not be modified as long as LOCK level 3 has been programmed (LOCK bits in TIMx_BDTR register) and CC1S=â00â (the channel is configured in output).
            The PWM mode can be used without validating the preload register only in one pulse mode (OPM bit set in TIMx_CR1 register). Else the behavior is not guaranteed.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Preload register on TIMx_CCR1 disabled. TIMx_CCR1 can be written at anytime, the new value is taken in account immediately.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Preload register on TIMx_CCR1 enabled. Read/Write operations access the preload register. TIMx_CCR1 preload value is loaded in the active register at each update event.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>OC1PE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Output Compare 1 mode
            These bits define the behavior of the output reference signal OC1REF from which OC1 and OC1N are derived. OC1REF is active high whereas OC1 and OC1N active level depends on CC1P and CC1NP bits.
            Note: These bits can not be modified as long as LOCK level 3 has been programmed (LOCK bits in TIMx_BDTR register) and CC1S=â00â (the channel is configured in output).
            In PWM mode, the OCREF level changes only when the result of the comparison changes or when the output compare mode switches from âfrozenâ mode to âPWMâ mode.
            On channels that have a complementary output, this bit field is preloaded. If the CCPC bit is set in the TIMx_CR2 register then the OC1M active bits take the new value from the preloaded bits only when a COM event is generated.
            The OC1M[3] bit is not contiguous, located in bit 16.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Frozen - The comparison between the output compare register TIMx_CCR1 and the counter TIMx_CNT has no effect on the outputs.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Set channel 1 to active level on match. OC1REF signal is forced high when the counter TIMx_CNT matches the capture/compare register 1 (TIMx_CCR1).</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Set channel 1 to inactive level on match. OC1REF signal is forced low when the counter TIMx_CNT matches the capture/compare register 1 (TIMx_CCR1).</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Toggle - OC1REF toggles when TIMx_CNT=TIMx_CCR1.</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Force inactive level - OC1REF is forced low.</description>
                <name>B_0x4</name>
                <value>0x4</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Force active level - OC1REF is forced high.</description>
                <name>B_0x5</name>
                <value>0x5</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>PWM mode 1 - Channel 1 is active as long as TIMx_CNT&lt;TIMx_CCR1 else inactive.</description>
                <name>B_0x6</name>
                <value>0x6</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>PWM mode 2 - Channel 1 is inactive as long as TIMx_CNT&lt;TIMx_CCR1 else active.</description>
                <name>B_0x7</name>
                <value>0x7</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Retrigerrable OPM mode 1 - In up-counting mode, the channel is active until a trigger event is detected (on TRGI signal). Then, a comparison is performed as in PWM mode 1 and the channels becomes active again at the next update. In down-counting mode, the channel is inactive until a trigger event is detected (on TRGI signal). Then, a comparison is performed as in PWM mode 1 and the channels becomes inactive again at the next update.</description>
                <name>B_0x8</name>
                <value>0x8</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Retrigerrable OPM mode 2 - In up-counting mode, the channel is inactive until a trigger event is detected (on TRGI signal). Then, a comparison is performed as in PWM mode 2 and the channels becomes inactive again at the next update. In down-counting mode, the channel is active until a trigger event is detected (on TRGI signal). Then, a comparison is performed as in PWM mode 1 and the channels becomes active again at the next update.</description>
                <name>B_0x9</name>
                <value>0x9</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Combined PWM mode 1 - OC1REF has the same behavior as in PWM mode 1. OC1REFC is the logical OR between OC1REF and OC2REF.</description>
                <name>B_0xC</name>
                <value>0xC</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Combined PWM mode 2 - OC1REF has the same behavior as in PWM mode 2. OC1REFC is the logical AND between OC1REF and OC2REF.</description>
                <name>B_0xD</name>
                <value>0xD</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>OC1M1</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Capture/Compare 2 selection
            This bit-field defines the direction of the channel (input/output) as well as the used input.
            Note: CC2S bits are writable only when the channel is OFF (CC2E = '0â in TIMx_CCER).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC2 channel is configured as output.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC2 channel is configured as input, IC2 is mapped on TI2.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC2 channel is configured as input, IC2 is mapped on TI1.</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC2 channel is configured as input, IC2 is mapped on TRC. This mode is working only if an internal trigger input is selected through the TS bit (TIMx_SMCR register)</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC2S</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output Compare 2 fast enable</description>
            <name>OC2FE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output Compare 2 preload enable</description>
            <name>OC2PE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Output Compare 2 mode</description>
            <name>OC2M1</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output Compare 1 mode
            These bits define the behavior of the output reference signal OC1REF from which OC1 and OC1N are derived. OC1REF is active high whereas OC1 and OC1N active level depends on CC1P and CC1NP bits.
            Note: These bits can not be modified as long as LOCK level 3 has been programmed (LOCK bits in TIMx_BDTR register) and CC1S=â00â (the channel is configured in output).
            In PWM mode, the OCREF level changes only when the result of the comparison changes or when the output compare mode switches from âfrozenâ mode to âPWMâ mode.
            On channels that have a complementary output, this bit field is preloaded. If the CCPC bit is set in the TIMx_CR2 register then the OC1M active bits take the new value from the preloaded bits only when a COM event is generated.
            The OC1M[3] bit is not contiguous, located in bit 16.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Frozen - The comparison between the output compare register TIMx_CCR1 and the counter TIMx_CNT has no effect on the outputs.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Set channel 1 to active level on match. OC1REF signal is forced high when the counter TIMx_CNT matches the capture/compare register 1 (TIMx_CCR1).</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Set channel 1 to inactive level on match. OC1REF signal is forced low when the counter TIMx_CNT matches the capture/compare register 1 (TIMx_CCR1).</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Toggle - OC1REF toggles when TIMx_CNT=TIMx_CCR1.</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Force inactive level - OC1REF is forced low.</description>
                <name>B_0x4</name>
                <value>0x4</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Force active level - OC1REF is forced high.</description>
                <name>B_0x5</name>
                <value>0x5</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>PWM mode 1 - Channel 1 is active as long as TIMx_CNT&lt;TIMx_CCR1 else inactive.</description>
                <name>B_0x6</name>
                <value>0x6</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>PWM mode 2 - Channel 1 is inactive as long as TIMx_CNT&lt;TIMx_CCR1 else active.</description>
                <name>B_0x7</name>
                <value>0x7</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Retrigerrable OPM mode 1 - In up-counting mode, the channel is active until a trigger event is detected (on TRGI signal). Then, a comparison is performed as in PWM mode 1 and the channels becomes active again at the next update. In down-counting mode, the channel is inactive until a trigger event is detected (on TRGI signal). Then, a comparison is performed as in PWM mode 1 and the channels becomes inactive again at the next update.</description>
                <name>B_0x8</name>
                <value>0x8</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Retrigerrable OPM mode 2 - In up-counting mode, the channel is inactive until a trigger event is detected (on TRGI signal). Then, a comparison is performed as in PWM mode 2 and the channels becomes inactive again at the next update. In down-counting mode, the channel is active until a trigger event is detected (on TRGI signal). Then, a comparison is performed as in PWM mode 1 and the channels becomes active again at the next update.</description>
                <name>B_0x9</name>
                <value>0x9</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Combined PWM mode 1 - OC1REF has the same behavior as in PWM mode 1. OC1REFC is the logical OR between OC1REF and OC2REF.</description>
                <name>B_0xC</name>
                <value>0xC</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Combined PWM mode 2 - OC1REF has the same behavior as in PWM mode 2. OC1REFC is the logical AND between OC1REF and OC2REF.</description>
                <name>B_0xD</name>
                <value>0xD</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>OC1M2</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output Compare 2 mode</description>
            <name>OC2M2</name>
          </field>
        </fields>
        <name>CCMR1_Output</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x18</addressOffset>
        <description>capture/compare mode register 1 (input
                  mode)</description>
        <displayName>CCMR1_Input</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Capture/Compare 1 Selection
            This bit-field defines the direction of the channel (input/output) as well as the used input.
            Note: CC1S bits are writable only when the channel is OFF (CC1E = '0â in TIMx_CCER).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC1 channel is configured as output</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC1 channel is configured as input, IC1 is mapped on TI1</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC1 channel is configured as input, IC1 is mapped on TI2</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC1 channel is configured as input, IC1 is mapped on TRC. This mode is working only if an internal trigger input is selected through TS bit (TIMx_SMCR register)</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC1S</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Input capture 1 prescaler
            This bit-field defines the ratio of the prescaler acting on CC1 input (IC1). The prescaler is reset as soon as CC1E=â0â (TIMx_CCER register).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>no prescaler, capture is done each time an edge is detected on the capture input</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>capture is done once every 2 events</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>capture is done once every 4 events</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>capture is done once every 8 events</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>IC1PSC</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Input capture 1 filter
            This bit-field defines the frequency used to sample TI1 input and the length of the digital filter applied to TI1. The digital filter is made of an event counter in which N consecutive events are needed to validate a transition on the output:</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No filter, sampling is done at fDTS</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fCK_INT, N=2</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fCK_INT, N=4</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fCK_INT, N=8</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/2, N=6</description>
                <name>B_0x4</name>
                <value>0x4</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/2, N=8</description>
                <name>B_0x5</name>
                <value>0x5</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/4, N=6</description>
                <name>B_0x6</name>
                <value>0x6</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/4, N=8</description>
                <name>B_0x7</name>
                <value>0x7</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/8, N=6</description>
                <name>B_0x8</name>
                <value>0x8</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/8, N=8</description>
                <name>B_0x9</name>
                <value>0x9</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/16, N=5</description>
                <name>B_0xA</name>
                <value>0xA</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/16, N=6</description>
                <name>B_0xB</name>
                <value>0xB</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/16, N=8</description>
                <name>B_0xC</name>
                <value>0xC</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/32, N=5</description>
                <name>B_0xD</name>
                <value>0xD</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/32, N=6</description>
                <name>B_0xE</name>
                <value>0xE</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/32, N=8</description>
                <name>B_0xF</name>
                <value>0xF</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>IC1F</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Capture/Compare 2 selection
            This bit-field defines the direction of the channel (input/output) as well as the used input.
            Note: CC2S bits are writable only when the channel is OFF (CC2E = '0â in TIMx_CCER).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC2 channel is configured as output</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC2 channel is configured as input, IC2 is mapped on TI2</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC2 channel is configured as input, IC2 is mapped on TI1</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC2 channel is configured as input, IC2 is mapped on TRC. This mode is working only if an internal trigger input is selected through TS bit (TIMx_SMCR register)</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC2S</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Input capture 2 prescaler</description>
            <name>IC2PSC</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Input capture 2 filter</description>
            <name>IC2F</name>
          </field>
        </fields>
        <name>CCMR1_Input</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x20</addressOffset>
        <description>capture/compare enable
                  register</description>
        <displayName>CCER</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 1 output enable
            When CC1 channel is configured as output, the OC1 level depends on MOE, OSSI, OSSR, OIS1, OIS1N and CC1NE bits, regardless of the CC1E bits state. Refer to  for details.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Capture mode disabled / OC1 is not active (see below)</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Capture mode enabled / OC1 signal is output on the corresponding output pin</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC1E</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 1 output polarity
            When CC1 channel is configured as input, both CC1NP/CC1P bits select the active polarity of TI1FP1 and TI2FP1 for trigger or capture operations.
            CC1NP=0, CC1P=0:	non-inverted/rising edge. The circuit is sensitive to TIxFP1 rising edge (capture or trigger operations in reset, external clock or trigger mode), TIxFP1 is not inverted (trigger operation in gated mode or encoder mode).
            CC1NP=0, CC1P=1:	inverted/falling edge. The circuit is sensitive to TIxFP1 falling edge (capture or trigger operations in reset, external clock or trigger mode), TIxFP1 is inverted (trigger operation in gated mode or encoder mode).
            CC1NP=1, CC1P=1:	non-inverted/both edges/ The circuit is sensitive to both TIxFP1 rising and falling edges (capture or trigger operations in reset, external clock or trigger mode), TIxFP1is not inverted (trigger operation in gated mode). This configuration must not be used in encoder mode.
            CC1NP=1, CC1P=0: this configuration is reserved, it must not be used.
            Note: This bit is not writable as soon as LOCK level 2 or 3 has been programmed (LOCK bits in TIMx_BDTR register).
            On channels that have a complementary output, this bit is preloaded. If the CCPC bit is set in the TIMx_CR2 register then the CC1P active bit takes the new value from the preloaded bit only when a Commutation event is generated.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>OC1 active high (output mode) / Edge sensitivity selection (input mode, see below)</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>OC1 active low (output mode) / Edge sensitivity selection (input mode, see below)</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC1P</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 1 complementary output enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Off - OC1N is not active. OC1N level is then function of MOE, OSSI, OSSR, OIS1, OIS1N and CC1E bits.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>On - OC1N signal is output on the corresponding output pin depending on MOE, OSSI, OSSR, OIS1, OIS1N and CC1E bits.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC1NE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 1 complementary output polarity
            CC1 channel configured as output:
            CC1 channel configured as input:
            This bit is used in conjunction with CC1P to define the polarity of TI1FP1 and TI2FP1. Refer
            to CC1P description.
            Note: This bit is not writable as soon as LOCK level 2 or 3 has been programmed (LOCK bits in TIMx_BDTR register) and CC1S=â00â (the channel is configured in output).
            On channels that have a complementary output, this bit is preloaded. If the CCPC bit is set in the TIMx_CR2 register then the CC1NP active bit takes the new value from the preloaded bit only when a Commutation event is generated.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>OC1N active high</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>OC1N active low</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC1NP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 2 output enable
            Refer to CC1E description</description>
            <name>CC2E</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 2 output polarity
            Refer to CC1P description</description>
            <name>CC2P</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 2 complementary output polarity
            Refer to CC1NP description</description>
            <name>CC2NP</name>
          </field>
        </fields>
        <name>CCER</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x24</addressOffset>
        <description>counter</description>
        <displayName>CNT</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>counter value</description>
            <name>CNT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>UIF Copy</description>
            <name>UIFCPY</name>
          </field>
        </fields>
        <name>CNT</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x28</addressOffset>
        <description>prescaler</description>
        <displayName>PSC</displayName>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>Prescaler value</description>
            <name>PSC</name>
          </field>
        </fields>
        <name>PSC</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x2C</addressOffset>
        <description>auto-reload register</description>
        <displayName>ARR</displayName>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>Auto-reload value</description>
            <name>ARR</name>
          </field>
        </fields>
        <name>ARR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xFFFF</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x30</addressOffset>
        <description>repetition counter register</description>
        <displayName>RCR</displayName>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>Repetition counter value</description>
            <name>REP</name>
          </field>
        </fields>
        <name>RCR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x34</addressOffset>
        <description>capture/compare register 1</description>
        <displayName>CCR1</displayName>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>Capture/Compare 1 value</description>
            <name>CCR1</name>
          </field>
        </fields>
        <name>CCR1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x38</addressOffset>
        <description>capture/compare register 2</description>
        <displayName>CCR2</displayName>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>Capture/Compare 2 value</description>
            <name>CCR2</name>
          </field>
        </fields>
        <name>CCR2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x44</addressOffset>
        <description>break and dead-time register</description>
        <displayName>BDTR</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>Dead-time generator setup
            This bit-field defines the duration of the dead-time inserted between the complementary outputs. DT correspond to this duration.
            DTG[7:5]=0xx =&gt; DT=DTG[7:0]x tdtg with tdtg=tDTS
            DTG[7:5]=10x =&gt; DT=(64+DTG[5:0])xtdtg with Tdtg=2xtDTS
            DTG[7:5]=110 =&gt; DT=(32+DTG[4:0])xtdtg with Tdtg=8xtDTS
            DTG[7:5]=111 =&gt; DT=(32+DTG[4:0])xtdtg with Tdtg=16xtDTS
            Example if TDTS=125ns (8MHz), dead-time possible values are:
            0 to 15875 ns by 125 ns steps,
            16 Âµs to 31750 ns by 250 ns steps,
            32 Âµs to 63 Âµs by 1 Âµs steps,
            64 Âµs to 126 Âµs by 2 Âµs steps
            Note: This bit-field can not be modified as long as LOCK level 1, 2 or 3 has been programmed (LOCK bits in TIMx_BDTR register).</description>
            <name>DTG</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Lock configuration
            These bits offer a write protection against software errors.
            Note: The LOCK bits can be written only once after the reset. Once the TIMx_BDTR register has been written, their content is frozen until the next reset.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>LOCK OFF - No bit is write protected</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>LOCK Level 1 = DTG bits in TIMx_BDTR register, OISx and OISxN bits in TIMx_CR2 register and BKE/BKP/AOE bits in TIMx_BDTR register can no longer be written</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>LOCK Level 2 = LOCK Level 1 + CC Polarity bits (CCxP/CCxNP bits in TIMx_CCER register, as long as the related channel is configured in output through the CCxS bits) as well as OSSR and OSSI bits can no longer be written.</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>LOCK Level 3 = LOCK Level 2 + CC Control bits (OCxM and OCxPE bits in TIMx_CCMRx registers, as long as the related channel is configured in output through the CCxS bits) can no longer be written.</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>LOCK</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Off-state selection for Idle mode
            This bit is used when MOE=0 on channels configured as outputs.
            See OC/OCN enable description for more details (enable register (TIM15_CCER) on pageÂ 818).
            Note: This bit can not be modified as soon as the LOCK level 2 has been programmed (LOCK bits in TIMx_BDTR register).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>When inactive, OC/OCN outputs are disabled (OC/OCN enable output signal=0)</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>When inactive, OC/OCN outputs are forced first with their idle level as soon as CCxE=1 or CCxNE=1. OC/OCN enable output signal=1)</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>OSSI</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Off-state selection for Run mode
            This bit is used when MOE=1 on channels that have a complementary output which are configured as outputs. OSSR is not implemented if no complementary output is implemented in the timer.
            See OC/OCN enable description for more details (enable register (TIM15_CCER) on pageÂ 818).
            Note: This bit can not be modified as soon as the LOCK level 2 has been programmed (LOCK bits in TIMx_BDTR register).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>When inactive, OC/OCN outputs are disabled (the timer releases the output control which is taken over by the AFIO logic, which forces a Hi-Z state)</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>When inactive, OC/OCN outputs are enabled with their inactive level as soon as CCxE=1 or CCxNE=1 (the output is still controlled by the timer). </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>OSSR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Break enable
            1; Break inputs (BRK and CCS clock failure event) enabled
            This bit cannot be modified when LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).
            Note: Any write operation to this bit takes a delay of 1 APB clock cycle to become effective.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Break inputs (BRK and CCS clock failure event) disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>BKE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Break polarity
            Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).
            Any write operation to this bit takes a delay of 1 APB clock cycle to become effective.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Break input BRK is active low</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Break input BRK is active high</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>BKP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Automatic output enable
            Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>MOE can be set only by software</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>MOE can be set by software or automatically at the next update event (if the break input is not be active)</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>AOE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Main output enable
            This bit is cleared asynchronously by hardware as soon as the break input is active. It is set by software or automatically depending on the AOE bit. It is acting only on the channels which are configured in output.
            See OC/OCN enable description for more details (enable register (TIM15_CCER) on pageÂ 818).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>OC and OCN outputs are disabled or forced to idle state depending on the OSSI bit.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>OC and OCN outputs are enabled if their respective enable bits are set (CCxE, CCxNE in TIMx_CCER register)</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>MOE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Break filter
            This bit-field defines the frequency used to sample the BRK input signal and the length of the digital filter applied to BRK. The digital filter is made of an event counter in which N events are needed to validate a transition on the output:
            Note: This bit cannot be modified when LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No filter, BRK acts asynchronously</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fCK_INT, N=2</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fCK_INT, N=4</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fCK_INT, N=8</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/2, N=6</description>
                <name>B_0x4</name>
                <value>0x4</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/2, N=8</description>
                <name>B_0x5</name>
                <value>0x5</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/4, N=6</description>
                <name>B_0x6</name>
                <value>0x6</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/4, N=8</description>
                <name>B_0x7</name>
                <value>0x7</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/8, N=6</description>
                <name>B_0x8</name>
                <value>0x8</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/8, N=8</description>
                <name>B_0x9</name>
                <value>0x9</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/16, N=5</description>
                <name>B_0xA</name>
                <value>0xA</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/16, N=6</description>
                <name>B_0xB</name>
                <value>0xB</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/16, N=8</description>
                <name>B_0xC</name>
                <value>0xC</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/32, N=5</description>
                <name>B_0xD</name>
                <value>0xD</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/32, N=6</description>
                <name>B_0xE</name>
                <value>0xE</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/32, N=8</description>
                <name>B_0xF</name>
                <value>0xF</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>BKF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Break Disarm
            This bit is cleared by hardware when no break source is active.
            The BKDSRM bit must be set by software to release the bidirectional output control (open-drain output in Hi-Z state) and then be polled it until it is reset by hardware, indicating that the fault condition has disappeared.
            Note: Any write operation to this bit takes a delay of 1 APB clock cycle to become effective.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Break input BRK is armed</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Break input BRK is disarmed</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>BKDSRM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Break Bidirectional
            In the bidirectional mode (BKBID bit set to 1), the break input is configured both in input mode and in open drain output mode. Any active break event asserts a low logic level on the Break input to indicate an internal break event to external devices.
            Note: This bit cannot be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).
            Note: Any write operation to this bit takes a delay of 1 APB clock cycle to become effective.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Break input BRK in input mode</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Break input BRK in bidirectional mode</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>BKBID</name>
          </field>
        </fields>
        <name>BDTR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x48</addressOffset>
        <description>DMA control register</description>
        <displayName>DCR</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>DMA base address
            This 5-bit field defines the base-address for DMA transfers (when read/write access are done through the TIMx_DMAR address). DBA is defined as an offset starting from the address of the TIMx_CR1 register.
            Example:
            ...</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>TIMx_CR1,</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>TIMx_CR2,</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>TIMx_SMCR,</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>DBA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>DMA burst length
            This 5-bit field defines the length of DMA transfers (the timer recognizes a burst transfer when a read or a write access is done to the TIMx_DMAR address).
            ...</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>1 transfer,</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>2 transfers,</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>3 transfers,</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>18 transfers.</description>
                <name>B_0x11</name>
                <value>0x11</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>DBL</name>
          </field>
        </fields>
        <name>DCR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x4C</addressOffset>
        <description>DMA address for full transfer</description>
        <displayName>DMAR</displayName>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>DMA register for burst
                          accesses</description>
            <name>DMAB</name>
          </field>
        </fields>
        <name>DMAR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x60</addressOffset>
        <description>TIM15 alternate register 1</description>
        <displayName>AF1</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>BRK BKIN input enable
            This bit enables the BKIN alternate function input for the timerâs BRK input. BKIN input is 'ORedâ with the other BRK sources.
            Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>BKIN input disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>BKIN input enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>BKINE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>BRK COMP1 enable
            This bit enables the COMP1 for the timerâs BRK input. COMP1 output is 'ORedâ with the other BRK sources.
            Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>COMP1 input disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>COMP1 input enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>BKCMP1E</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>BRK COMP2 enable
            This bit enables the COMP2 for the timerâs BRK input. COMP2 output is 'ORedâ with the other BRK sources.
            Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>COMP2 input disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>COMP2 input enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>BKCMP2E</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>BRK BKIN input polarity
            This bit selects the BKIN alternate function input sensitivity. It must be programmed together with the BKP polarity bit.
            Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>BKIN input is active low</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>BKIN input is active high</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>BKINP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>BRK COMP1 input polarity
            This bit selects the COMP1 input sensitivity. It must be programmed together with the BKP polarity bit.
            Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>COMP1 input is active low</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>COMP1 input is active high</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>BKCMP1P</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>BRK COMP2 input polarity
            This bit selects the COMP2 input sensitivity. It must be programmed together with the BKP polarity bit.
            Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>COMP2 input is active low</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>COMP2 input is active high</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>BKCMP2P</name>
          </field>
        </fields>
        <name>AF1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x1</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x68</addressOffset>
        <description>input selection register</description>
        <displayName>TISEL</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>selects TI1[0] to TI1[15] input
            Others: Reserved</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>TIM15_CH1 input</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>TIM2_IC1</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>TIM3_IC1</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TI1SEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>selects TI2[0] to TI2[15] input
            Others: Reserved</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>TIM15_CH2 input</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>TIM2_IC2</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>TIM3_IC2</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TI2SEL</name>
          </field>
        </fields>
        <name>TISEL</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <resetMask>0xFFFFFFFF</resetMask>
    <resetValue>0x0</resetValue>
    <size>0x20</size>
  </peripheral>
</peripherals>
<peripherals>
  <peripheral>
    <addressBlock>
      <offset>0x0</offset>
      <size>0x400</size>
      <usage>registers</usage>
    </addressBlock>
    <baseAddress>0x40014400</baseAddress>
    <description>General purpose timers</description>
    <groupName>TIM</groupName>
    <interrupts>
      <interrupt>
        <name>TIM16</name>
        <value>0x15</value>
      </interrupt>
    </interrupts>
    <name>TIM16</name>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x0</addressOffset>
        <description>control register 1</description>
        <displayName>CR1</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Counter enable
            Note: External clock and gated mode can work only if the CEN bit has been previously set by software. However trigger mode can set the CEN bit automatically by hardware.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Counter disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Counter enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CEN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Update disable
            This bit is set and cleared by software to enable/disable UEV event generation.
            Counter overflow/underflow
            Setting the UG bit
            Update generation through the slave mode controller
            Buffered registers are then loaded with their preload values.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>UEV enabled. The Update (UEV) event is generated by one of the following events:</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>UEV disabled. The Update event is not generated, shadow registers keep their value (ARR, PSC, CCRx). However the counter and the prescaler are reinitialized if the UG bit is set or if a hardware reset is received from the slave mode controller.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>UDIS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Update request source
            This bit is set and cleared by software to select the UEV event sources.
            Counter overflow/underflow
            Setting the UG bit
            Update generation through the slave mode controller</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Any of the following events generate an update interrupt or DMA request if enabled. These events can be: </description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Only counter overflow/underflow generates an update interrupt or DMA request if enabled.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>URS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>One pulse mode</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Counter is not stopped at update event</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Counter stops counting at the next update event (clearing the bit CEN)</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>OPM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Auto-reload preload enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>TIMx_ARR register is not buffered</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>TIMx_ARR register is buffered</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>ARPE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Clock division
            This bit-field indicates the division ratio between the timer clock (CK_INT) frequency and the dead-time and sampling clock (tDTS)used by the dead-time generators and the digital filters (TIx),</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>tDTS=tCK_INT</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>tDTS=2*tCK_INT</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>tDTS=4*tCK_INT</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Reserved, do not program this value</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CKD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>UIF status bit remapping</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No remapping. UIF status bit is not copied to TIMx_CNT register bit 31.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Remapping enabled. UIF status bit is copied to TIMx_CNT register bit 31.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>UIFREMAP</name>
          </field>
        </fields>
        <name>CR1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x4</addressOffset>
        <description>control register 2</description>
        <displayName>CR2</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/compare preloaded control
            Note: This bit acts only on channels that have a complementary output.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>CCxE, CCxNE and OCxM bits are not preloaded</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CCxE, CCxNE and OCxM bits are preloaded, after having been written, they are updated only when COM bit is set.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CCPC</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/compare control update selection
            Note: This bit acts only on channels that have a complementary output.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>When capture/compare control bits are preloaded (CCPC=1), they are updated by setting the COMG bit only.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>When capture/compare control bits are preloaded (CCPC=1), they are updated by setting the COMG bit or when an rising edge occurs on TRGI.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CCUS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/compare DMA selection</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>CCx DMA request sent when CCx event occurs</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CCx DMA requests sent when update event occurs</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CCDS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output Idle state 1 (OC1 output)
            Note: This bit can not be modified as long as LOCK level 1, 2 or 3 has been programmed (LOCK bits in TIMx_BDTR register).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>OC1=0 (after a dead-time if OC1N is implemented) when MOE=0</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>OC1=1 (after a dead-time if OC1N is implemented) when MOE=0</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>OIS1</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output Idle state 1 (OC1N output)
            Note: This bit can not be modified as long as LOCK level 1, 2 or 3 has been programmed (LOCK bits in TIMx_BDTR register).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>OC1N=0 after a dead-time when MOE=0</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>OC1N=1 after a dead-time when MOE=0</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>OIS1N</name>
          </field>
        </fields>
        <name>CR2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0xC</addressOffset>
        <description>DMA/Interrupt enable register</description>
        <displayName>DIER</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Update interrupt enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Update interrupt disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Update interrupt enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>UIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 1 interrupt enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC1 interrupt disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC1 interrupt enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC1IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>COM interrupt enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>COM interrupt disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>COM interrupt enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>COMIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Break interrupt enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Break interrupt disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Break interrupt enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>BIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Update DMA request enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Update DMA request disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Update DMA request enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>UDE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 1 DMA request enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC1 DMA request disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC1 DMA request enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC1DE</name>
          </field>
        </fields>
        <name>DIER</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x10</addressOffset>
        <description>status register</description>
        <displayName>SR</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Update interrupt flag
            This bit is set by hardware on an update event. It is cleared by software.
            At overflow regarding the repetition counter value (update if repetition counter = 0) and if the UDIS=0 in the TIMx_CR1 register.
            When CNT is reinitialized by software using the UG bit in TIMx_EGR register, if URS=0 and UDIS=0 in the TIMx_CR1 register.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No update occurred.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Update interrupt pending. This bit is set by hardware when the registers are updated:</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>UIF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 1 interrupt flag
            This flag is set by hardware. It is cleared by software (input capture or output compare mode) or by reading the TIMx_CCR1 register (input capture mode only).
            If channel CC1 is configured as output: this flag is set when the content of the counter TIMx_CNT matches the content of the TIMx_CCR1 register. When the content of TIMx_CCR1 is greater than the content of TIMx_ARR, the CC1IF bit goes high on the counter overflow (in up-counting and up/down-counting modes) or underflow (in down-counting mode). There are 3 possible options for flag setting in center-aligned mode, refer to the CMS bits in the TIMx_CR1 register for the full description.
            If channel CC1 is configured as input: this bit is set when counter value has been captured in TIMx_CCR1 register (an edge has been detected on IC1, as per the edge sensitivity defined with the CC1P and CC1NP bits setting, in TIMx_CCER).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No compare match / No input capture occurred</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>A compare match or an input capture occurred</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC1IF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>COM interrupt flag
            This flag is set by hardware on a COM event (once the capture/compare control bits âCCxE, CCxNE, OCxMâ have been updated). It is cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No COM event occurred</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>COM interrupt pending</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>COMIF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Break interrupt flag
            This flag is set by hardware as soon as the break input goes active. It can be cleared by software if the break input is not active.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No break event occurred</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>An active level has been detected on the break input</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>BIF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 1 overcapture flag
            This flag is set by hardware only when the corresponding channel is configured in input capture mode. It is cleared by software by writing it to '0â.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No overcapture has been detected</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>The counter value has been captured in TIMx_CCR1 register while CC1IF flag was already set</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC1OF</name>
          </field>
        </fields>
        <name>SR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>write-only</access>
        <addressOffset>0x14</addressOffset>
        <description>event generation register</description>
        <displayName>EGR</displayName>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Update generation
            This bit can be set by software, it is automatically cleared by hardware.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No action.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Reinitialize the counter and generates an update of the registers. Note that the prescaler counter is cleared too (anyway the prescaler ratio is not affected). </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>UG</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 1 generation
            This bit is set by software in order to generate an event, it is automatically cleared by hardware.
            If channel CC1 is configured as output:
            CC1IF flag is set, Corresponding interrupt or DMA request is sent if enabled.
            If channel CC1 is configured as input:
            The current value of the counter is captured in TIMx_CCR1 register. The CC1IF flag is set, the corresponding interrupt or DMA request is sent if enabled. The CC1OF flag is set if the CC1IF flag was already high.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No action.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>A capture/compare event is generated on channel 1:</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC1G</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare control update generation
            This bit can be set by software, it is automatically cleared by hardware.
            Note: This bit acts only on channels that have a complementary output.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No action</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>When the CCPC bit is set, it is possible to update the CCxE, CCxNE and OCxM bits</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>COMG</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Break generation
            This bit is set by software in order to generate an event, it is automatically cleared by hardware.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No action.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>A break event is generated. MOE bit is cleared and BIF flag is set. Related interrupt or DMA transfer can occur if enabled.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>BG</name>
          </field>
        </fields>
        <name>EGR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x18</addressOffset>
        <description>capture/compare mode register (output
                  mode)</description>
        <displayName>CCMR1_Output</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Capture/Compare 1 selection
            This bit-field defines the direction of the channel (input/output) as well as the used input.
            Others: Reserved
            Note: CC1S bits are writable only when the channel is OFF (CC1E = '0â in TIMx_CCER).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC1 channel is configured as output</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC1 channel is configured as input, IC1 is mapped on TI1</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC1S</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output Compare 1 fast enable
            This bit decreases the latency between a trigger event and a transition on the timer output. It must be used in one-pulse mode (OPM bit set in TIMx_CR1 register), to have the output pulse starting as soon as possible after the starting trigger.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC1 behaves normally depending on counter and CCR1 values even when the trigger is ON. The minimum delay to activate CC1 output when an edge occurs on the trigger input is 5 clock cycles.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>An active edge on the trigger input acts like a compare match on CC1 output. Then, OC is set to the compare level independently of the result of the comparison. Delay to sample the trigger input and to activate CC1 output is reduced to 3 clock cycles. OC1FE acts only if the channel is configured in PWM1 or PWM2 mode.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>OC1FE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output Compare 1 preload enable
            Note: These bits can not be modified as long as LOCK level 3 has been programmed (LOCK bits in TIMx_BDTR register) and CC1S=â00â (the channel is configured in output).
            The PWM mode can be used without validating the preload register only in one pulse mode (OPM bit set in TIMx_CR1 register). Else the behavior is not guaranteed.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Preload register on TIMx_CCR1 disabled. TIMx_CCR1 can be written at anytime, the new value is taken in account immediately.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Preload register on TIMx_CCR1 enabled. Read/Write operations access the preload register. TIMx_CCR1 preload value is loaded in the active register at each update event.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>OC1PE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Output Compare 1 mode
            These bits define the behavior of the output reference signal OC1REF from which OC1 and OC1N are derived. OC1REF is active high whereas OC1 and OC1N active level depends on CC1P and CC1NP bits.
            All other values: Reserved
            Note: These bits can not be modified as long as LOCK level 3 has been programmed (LOCK bits in TIMx_BDTR register) and CC1S=â00â (the channel is configured in output).
            In PWM mode 1 or 2, the OCREF level changes only when the result of the comparison changes or when the output compare mode switches from âfrozenâ mode to âPWMâ mode.
            The OC1M[3] bit is not contiguous, located in bit 16.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Frozen - The comparison between the output compare register TIMx_CCR1 and the counter TIMx_CNT has no effect on the outputs.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Set channel 1 to active level on match. OC1REF signal is forced high when the counter TIMx_CNT matches the capture/compare register 1 (TIMx_CCR1).</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Set channel 1 to inactive level on match. OC1REF signal is forced low when the counter TIMx_CNT matches the capture/compare register 1 (TIMx_CCR1).</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Toggle - OC1REF toggles when TIMx_CNT=TIMx_CCR1.</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Force inactive level - OC1REF is forced low.</description>
                <name>B_0x4</name>
                <value>0x4</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Force active level - OC1REF is forced high.</description>
                <name>B_0x5</name>
                <value>0x5</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>PWM mode 1 - Channel 1 is active as long as TIMx_CNT&lt;TIMx_CCR1 else inactive. </description>
                <name>B_0x6</name>
                <value>0x6</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>PWM mode 2 - Channel 1 is inactive as long as TIMx_CNT&lt;TIMx_CCR1 else active. </description>
                <name>B_0x7</name>
                <value>0x7</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>OC1M1</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output Compare 1 mode
            These bits define the behavior of the output reference signal OC1REF from which OC1 and OC1N are derived. OC1REF is active high whereas OC1 and OC1N active level depends on CC1P and CC1NP bits.
            All other values: Reserved
            Note: These bits can not be modified as long as LOCK level 3 has been programmed (LOCK bits in TIMx_BDTR register) and CC1S=â00â (the channel is configured in output).
            In PWM mode 1 or 2, the OCREF level changes only when the result of the comparison changes or when the output compare mode switches from âfrozenâ mode to âPWMâ mode.
            The OC1M[3] bit is not contiguous, located in bit 16.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Frozen - The comparison between the output compare register TIMx_CCR1 and the counter TIMx_CNT has no effect on the outputs.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Set channel 1 to active level on match. OC1REF signal is forced high when the counter TIMx_CNT matches the capture/compare register 1 (TIMx_CCR1).</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Set channel 1 to inactive level on match. OC1REF signal is forced low when the counter TIMx_CNT matches the capture/compare register 1 (TIMx_CCR1).</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Toggle - OC1REF toggles when TIMx_CNT=TIMx_CCR1.</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Force inactive level - OC1REF is forced low.</description>
                <name>B_0x4</name>
                <value>0x4</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Force active level - OC1REF is forced high.</description>
                <name>B_0x5</name>
                <value>0x5</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>PWM mode 1 - Channel 1 is active as long as TIMx_CNT&lt;TIMx_CCR1 else inactive. </description>
                <name>B_0x6</name>
                <value>0x6</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>PWM mode 2 - Channel 1 is inactive as long as TIMx_CNT&lt;TIMx_CCR1 else active. </description>
                <name>B_0x7</name>
                <value>0x7</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>OC1M2</name>
          </field>
        </fields>
        <name>CCMR1_Output</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x18</addressOffset>
        <description>capture/compare mode register 1 (input
                  mode)</description>
        <displayName>CCMR1_Input</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Capture/Compare 1 Selection
            This bit-field defines the direction of the channel (input/output) as well as the used input.
            Others: Reserved
            Note: CC1S bits are writable only when the channel is OFF (CC1E = '0â in TIMx_CCER).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC1 channel is configured as output</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC1 channel is configured as input, IC1 is mapped on TI1</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC1S</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Input capture 1 prescaler
            This bit-field defines the ratio of the prescaler acting on CC1 input (IC1).
            The prescaler is reset as soon as CC1E=â0â (TIMx_CCER register).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>no prescaler, capture is done each time an edge is detected on the capture input.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>capture is done once every 2 events</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>capture is done once every 4 events</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>capture is done once every 8 events</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>IC1PSC</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Input capture 1 filter
            This bit-field defines the frequency used to sample TI1 input and the length of the digital filter applied to TI1. The digital filter is made of an event counter in which N consecutive events are needed to validate a transition on the output:</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No filter, sampling is done at fDTS</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fCK_INT, N=2</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fCK_INT, N=4</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fCK_INT, N=8</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/2, N=</description>
                <name>B_0x4</name>
                <value>0x4</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/2, N=8</description>
                <name>B_0x5</name>
                <value>0x5</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/4, N=6</description>
                <name>B_0x6</name>
                <value>0x6</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/4, N=8</description>
                <name>B_0x7</name>
                <value>0x7</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/8, N=6</description>
                <name>B_0x8</name>
                <value>0x8</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/8, N=8</description>
                <name>B_0x9</name>
                <value>0x9</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/16, N=5</description>
                <name>B_0xA</name>
                <value>0xA</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/16, N=6</description>
                <name>B_0xB</name>
                <value>0xB</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/16, N=8</description>
                <name>B_0xC</name>
                <value>0xC</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/32, N=5</description>
                <name>B_0xD</name>
                <value>0xD</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/32, N=6</description>
                <name>B_0xE</name>
                <value>0xE</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/32, N=8</description>
                <name>B_0xF</name>
                <value>0xF</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>IC1F</name>
          </field>
        </fields>
        <name>CCMR1_Input</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x20</addressOffset>
        <description>capture/compare enable
                  register</description>
        <displayName>CCER</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 1 output enable
            When CC1 channel is configured as output, the OC1 level depends on MOE, OSSI, OSSR, OIS1, OIS1N and CC1NE bits, regardless of the CC1E bits state. Refer to  for details.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Capture mode disabled / OC1 is not active (see below)</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Capture mode enabled / OC1 signal is output on the corresponding output pin</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC1E</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 1 output polarity
            When CC1 channel is configured as input, both CC1NP/CC1P bits select the active polarity of TI1FP1 and TI2FP1 for trigger or capture operations.
            CC1NP=0, CC1P=0:	non-inverted/rising edge. The circuit is sensitive to TIxFP1 rising edge (capture or trigger operations in reset, external clock or trigger mode), TIxFP1 is not inverted (trigger operation in gated mode or encoder mode).
            CC1NP=0, CC1P=1:	inverted/falling edge. The circuit is sensitive to TIxFP1 falling edge (capture or trigger operations in reset, external clock or trigger mode), TIxFP1 is inverted (trigger operation in gated mode or encoder mode).
            CC1NP=1, CC1P=1:	non-inverted/both edges/ The circuit is sensitive to both TIxFP1 rising and falling edges (capture or trigger operations in reset, external clock or trigger mode), TIxFP1is not inverted (trigger operation in gated mode). This configuration must not be used in encoder mode.
            CC1NP=1, CC1P=0:	this configuration is reserved, it must not be used.
            Note: This bit is not writable as soon as LOCK level 2 or 3 has been programmed (LOCK bits in TIMx_BDTR register).
            On channels that have a complementary output, this bit is preloaded. If the CCPC bit is set in the TIMx_CR2 register then the CC1P active bit takes the new value from the preloaded bit only when a Commutation event is generated.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>OC1 active high (output mode) / Edge sensitivity selection (input mode, see below)</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>OC1 active low (output mode) / Edge sensitivity selection (input mode, see below)</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC1P</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 1 complementary output enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Off - OC1N is not active. OC1N level is then function of MOE, OSSI, OSSR, OIS1, OIS1N and CC1E bits.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>On - OC1N signal is output on the corresponding output pin depending on MOE, OSSI, OSSR, OIS1, OIS1N and CC1E bits.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC1NE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 1 complementary output polarity
            CC1 channel configured as output:
            CC1 channel configured as input:
            This bit is used in conjunction with CC1P to define the polarity of TI1FP1 and TI2FP1. Refer
            to the description of CC1P.
            Note: This bit is not writable as soon as LOCK level 2 or 3 has been programmed (LOCK bits in TIMx_BDTR register) and CC1S=â00â (the channel is configured in output).
            On channels that have a complementary output, this bit is preloaded. If the CCPC bit is set in the TIMx_CR2 register then the CC1NP active bit takes the new value from the preloaded bit only when a commutation event is generated.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>OC1N active high</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>OC1N active low</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC1NP</name>
          </field>
        </fields>
        <name>CCER</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x24</addressOffset>
        <description>counter</description>
        <displayName>CNT</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>counter value</description>
            <name>CNT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>UIF Copy</description>
            <name>UIFCPY</name>
          </field>
        </fields>
        <name>CNT</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x28</addressOffset>
        <description>prescaler</description>
        <displayName>PSC</displayName>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>Prescaler value</description>
            <name>PSC</name>
          </field>
        </fields>
        <name>PSC</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x2C</addressOffset>
        <description>auto-reload register</description>
        <displayName>ARR</displayName>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>Auto-reload value</description>
            <name>ARR</name>
          </field>
        </fields>
        <name>ARR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xFFFF</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x30</addressOffset>
        <description>repetition counter register</description>
        <displayName>RCR</displayName>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>Repetition counter value</description>
            <name>REP</name>
          </field>
        </fields>
        <name>RCR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x34</addressOffset>
        <description>capture/compare register 1</description>
        <displayName>CCR1</displayName>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>Capture/Compare 1 value</description>
            <name>CCR1</name>
          </field>
        </fields>
        <name>CCR1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x44</addressOffset>
        <description>break and dead-time register</description>
        <displayName>BDTR</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>Dead-time generator setup
            This bit-field defines the duration of the dead-time inserted between the complementary outputs. DT correspond to this duration.
            DTG[7:5]=0xx =&gt; DT=DTG[7:0]x tdtg with tdtg=tDTS
            DTG[7:5]=10x =&gt; DT=(64+DTG[5:0])xtdtg with Tdtg=2xtDTS
            DTG[7:5]=110 =&gt; DT=(32+DTG[4:0])xtdtg with Tdtg=8xtDTS
            DTG[7:5]=111 =&gt; DT=(32+DTG[4:0])xtdtg with Tdtg=16xtDTS
            Example if TDTS=125ns (8MHz), dead-time possible values are:
            0 to 15875 ns by 125 ns steps,
            16 Âµs to 31750 ns by 250 ns steps,
            32 Âµs to 63 Âµs by 1 Âµs steps,
            64 Âµs to 126 Âµs by 2 Âµs steps
            Note: This bit-field can not be modified as long as LOCK level 1, 2 or 3 has been programmed (LOCK bits in TIMx_BDTR register).</description>
            <name>DTG</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Lock configuration
            These bits offer a write protection against software errors.
            Note: The LOCK bits can be written only once after the reset. Once the TIMx_BDTR register has been written, their content is frozen until the next reset.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>LOCK OFF - No bit is write protected</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>LOCK Level 1 = DTG bits in TIMx_BDTR register, OISx and OISxN bits in TIMx_CR2 register and BKE/BKP/AOE bits in TIMx_BDTR register can no longer be written.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>LOCK Level 2 = LOCK Level 1 + CC Polarity bits (CCxP/CCxNP bits in TIMx_CCER register, as long as the related channel is configured in output through the CCxS bits) as well as OSSR and OSSI bits can no longer be written.</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>LOCK Level 3 = LOCK Level 2 + CC Control bits (OCxM and OCxPE bits in TIMx_CCMRx registers, as long as the related channel is configured in output through the CCxS bits) can no longer be written.</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>LOCK</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Off-state selection for Idle mode
            This bit is used when MOE=0 on channels configured as outputs.
            See OC/OCN enable description for more details (enable register (TIM16_CCER)(TIMx_CCER)(x = 16 to 17) on pageÂ 846).
            Note: This bit can not be modified as soon as the LOCK level 2 has been programmed (LOCK bits in TIMx_BDTR register).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>When inactive, OC/OCN outputs are disabled (OC/OCN enable output signal=0)</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>When inactive, OC/OCN outputs are forced first with their idle level as soon as CCxE=1 or CCxNE=1. OC/OCN enable output signal=1)</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>OSSI</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Off-state selection for Run mode
            This bit is used when MOE=1 on channels that have a complementary output which are configured as outputs. OSSR is not implemented if no complementary output is implemented in the timer.
            See OC/OCN enable description for more details (enable register (TIM16_CCER)(TIMx_CCER)(x = 16 to 17) on pageÂ 846).
            Note: This bit can not be modified as soon as the LOCK level 2 has been programmed (LOCK bits in TIMx_BDTR register).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>When inactive, OC/OCN outputs are disabled (the timer releases the output control which is taken over by the AFIO logic, which forces a Hi-Z state)</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>When inactive, OC/OCN outputs are enabled with their inactive level as soon as CCxE=1 or CCxNE=1 (the output is still controlled by the timer).</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>OSSR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Break enable
            1; Break inputs (BRK and CCS clock failure event) enabled
            Note: This bit cannot be modified when LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).
            Any write operation to this bit takes a delay of 1 APB clock cycle to become effective.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Break inputs (BRK and CCS clock failure event) disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>BKE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Break polarity
            Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).
            Any write operation to this bit takes a delay of 1 APB clock cycle to become effective.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Break input BRK is active low</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Break input BRK is active high</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>BKP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Automatic output enable
            Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>MOE can be set only by software</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>MOE can be set by software or automatically at the next update event (if the break input is not be active)</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>AOE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Main output enable
            This bit is cleared asynchronously by hardware as soon as the break input is active. It is set by software or automatically depending on the AOE bit. It is acting only on the channels which are configured in output.
            enable register (TIM16_CCER)(TIMx_CCER)(x = 16 to 17) on pageÂ 846).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>OC and OCN outputs are disabled or forced to idle state depending on the OSSI bit.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>OC and OCN outputs are enabled if their respective enable bits are set (CCxE, CCxNE in TIMx_CCER register)See OC/OCN enable description for more details (</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>MOE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Break filter
            This bit-field defines the frequency used to sample BRK input and the length of the digital filter applied to BRK. The digital filter is made of an event counter in which N events are needed to validate a transition on the output:
            This bit cannot be modified when LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No filter, BRK acts asynchronously</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fCK_INT, N=2</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fCK_INT, N=4</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fCK_INT, N=8</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/2, N=6</description>
                <name>B_0x4</name>
                <value>0x4</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/2, N=8</description>
                <name>B_0x5</name>
                <value>0x5</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/4, N=6</description>
                <name>B_0x6</name>
                <value>0x6</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/4, N=8</description>
                <name>B_0x7</name>
                <value>0x7</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/8, N=6</description>
                <name>B_0x8</name>
                <value>0x8</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/8, N=8</description>
                <name>B_0x9</name>
                <value>0x9</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/16, N=5</description>
                <name>B_0xA</name>
                <value>0xA</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/16, N=6</description>
                <name>B_0xB</name>
                <value>0xB</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/16, N=8</description>
                <name>B_0xC</name>
                <value>0xC</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/32, N=5</description>
                <name>B_0xD</name>
                <value>0xD</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/32, N=6</description>
                <name>B_0xE</name>
                <value>0xE</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/32, N=8</description>
                <name>B_0xF</name>
                <value>0xF</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>BKF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Break Disarm
            This bit is cleared by hardware when no break source is active.
            The BKDSRM bit must be set by software to release the bidirectional output control (open-drain output in Hi-Z state) and then be polled it until it is reset by hardware, indicating that the fault condition has disappeared.
            Note: Any write operation to this bit takes a delay of 1 APB clock cycle to become effective.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Break input BRK is armed</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Break input BRK is disarmed</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>BKDSRM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Break Bidirectional
            In the bidirectional mode (BKBID bit set to 1), the break input is configured both in input mode and in open drain output mode. Any active break event asserts a low logic level on the Break input to indicate an internal break event to external devices.
            Note: This bit cannot be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).
            Note: Any write operation to this bit takes a delay of 1 APB clock cycle to become effective.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Break input BRK in input mode</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Break input BRK in bidirectional mode</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>BKBID</name>
          </field>
        </fields>
        <name>BDTR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x48</addressOffset>
        <description>DMA control register</description>
        <displayName>DCR</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>DMA base address
            This 5-bit field defines the base-address for DMA transfers (when read/write access are done through the TIMx_DMAR address). DBA is defined as an offset starting from the address of the TIMx_CR1 register.
            Example:
            ...
            Example: Let us consider the following transfer: DBL = 7 transfers and DBA = TIMx_CR1. In this case the transfer is done to/from 7 registers starting from the TIMx_CR1 address.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>TIMx_CR1,</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>TIMx_CR2,</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>TIMx_SMCR,</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>DBA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>DMA burst length
            This 5-bit field defines the length of DMA transfers (the timer recognizes a burst transfer when a read or a write access is done to the TIMx_DMAR address), i.e. the number of transfers. Transfers can be in half-words or in bytes (see example below).
            ...</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>1 transfer,</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>2 transfers,</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>3 transfers,</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>18 transfers.</description>
                <name>B_0x11</name>
                <value>0x11</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>DBL</name>
          </field>
        </fields>
        <name>DCR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x4C</addressOffset>
        <description>DMA address for full transfer</description>
        <displayName>DMAR</displayName>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>DMA register for burst
                          accesses</description>
            <name>DMAB</name>
          </field>
        </fields>
        <name>DMAR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x60</addressOffset>
        <description>TIM17 option register 1</description>
        <displayName>AF1</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>BRK BKIN input enable
            This bit enables the BKIN alternate function input for the timerâs BRK input. BKIN input is 'ORedâ with the other BRK sources.
            Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>BKIN input disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>BKIN input enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>BKINE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>BRK COMP1 enable
            This bit enables the COMP1 for the timerâs BRK input. COMP1 output is 'ORedâ with the other BRK sources.
            Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>COMP1 input disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>COMP1 input enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>BKCMP1E</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>BRK COMP2 enable
            This bit enables the COMP2 for the timerâs BRK input. COMP2 output is 'ORedâ with the other BRK sources.
            Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>COMP2 input disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>COMP2 input enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>BKCMP2E</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>BRK BKIN input polarity
            This bit selects the BKIN alternate function input sensitivity. It must be programmed together with the BKP polarity bit.
            Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>BKIN input is active low</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>BKIN input is active high</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>BKINP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>BRK COMP1 input polarity
            This bit selects the COMP1 input sensitivity. It must be programmed together with the BKP polarity bit.
            Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>COMP1 input is active low</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>COMP1 input is active high</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>BKCMP1P</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>BRK COMP2 input polarity
            This bit selects the COMP2 input sensitivity. It must be programmed together with the BKP polarity bit.
            Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>COMP2 input is active low</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>COMP2 input is active high</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>BKCMP2P</name>
          </field>
        </fields>
        <name>AF1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x1</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x68</addressOffset>
        <description>input selection register</description>
        <displayName>TISEL</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>selects TI1[0] to TI1[15] input
            Others: Reserved</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>TIM16_CH1 input</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>LSI</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>LSE</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>RTC wakeup</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TI1SEL</name>
          </field>
        </fields>
        <name>TISEL</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <resetMask>0xFFFFFFFF</resetMask>
    <resetValue>0x0</resetValue>
    <size>0x20</size>
  </peripheral>
</peripherals>
<peripherals>
  <peripheral>
    <addressBlock>
      <offset>0x0</offset>
      <size>0x400</size>
      <usage>registers</usage>
    </addressBlock>
    <baseAddress>0x40014800</baseAddress>
    <derivedFrom>TIM16</derivedFrom>
    <description>General purpose timers</description>
    <groupName>TIM</groupName>
    <interrupts>
      <interrupt>
        <name>TIM17</name>
        <value>0x16</value>
      </interrupt>
    </interrupts>
    <name>TIM17</name>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x0</addressOffset>
        <description>control register 1</description>
        <displayName>CR1</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Counter enable
            Note: External clock and gated mode can work only if the CEN bit has been previously set by software. However trigger mode can set the CEN bit automatically by hardware.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Counter disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Counter enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CEN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Update disable
            This bit is set and cleared by software to enable/disable UEV event generation.
            Counter overflow/underflow
            Setting the UG bit
            Update generation through the slave mode controller
            Buffered registers are then loaded with their preload values.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>UEV enabled. The Update (UEV) event is generated by one of the following events:</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>UEV disabled. The Update event is not generated, shadow registers keep their value (ARR, PSC, CCRx). However the counter and the prescaler are reinitialized if the UG bit is set or if a hardware reset is received from the slave mode controller.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>UDIS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Update request source
            This bit is set and cleared by software to select the UEV event sources.
            Counter overflow/underflow
            Setting the UG bit
            Update generation through the slave mode controller</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Any of the following events generate an update interrupt or DMA request if enabled. These events can be: </description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Only counter overflow/underflow generates an update interrupt or DMA request if enabled.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>URS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>One pulse mode</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Counter is not stopped at update event</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Counter stops counting at the next update event (clearing the bit CEN)</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>OPM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Auto-reload preload enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>TIMx_ARR register is not buffered</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>TIMx_ARR register is buffered</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>ARPE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Clock division
            This bit-field indicates the division ratio between the timer clock (CK_INT) frequency and the dead-time and sampling clock (tDTS)used by the dead-time generators and the digital filters (TIx),</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>tDTS=tCK_INT</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>tDTS=2*tCK_INT</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>tDTS=4*tCK_INT</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Reserved, do not program this value</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CKD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>UIF status bit remapping</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No remapping. UIF status bit is not copied to TIMx_CNT register bit 31.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Remapping enabled. UIF status bit is copied to TIMx_CNT register bit 31.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>UIFREMAP</name>
          </field>
        </fields>
        <name>CR1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x4</addressOffset>
        <description>control register 2</description>
        <displayName>CR2</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/compare preloaded control
            Note: This bit acts only on channels that have a complementary output.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>CCxE, CCxNE and OCxM bits are not preloaded</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CCxE, CCxNE and OCxM bits are preloaded, after having been written, they are updated only when COM bit is set.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CCPC</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/compare control update selection
            Note: This bit acts only on channels that have a complementary output.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>When capture/compare control bits are preloaded (CCPC=1), they are updated by setting the COMG bit only.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>When capture/compare control bits are preloaded (CCPC=1), they are updated by setting the COMG bit or when an rising edge occurs on TRGI.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CCUS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/compare DMA selection</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>CCx DMA request sent when CCx event occurs</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CCx DMA requests sent when update event occurs</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CCDS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output Idle state 1 (OC1 output)
            Note: This bit can not be modified as long as LOCK level 1, 2 or 3 has been programmed (LOCK bits in TIMx_BDTR register).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>OC1=0 (after a dead-time if OC1N is implemented) when MOE=0</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>OC1=1 (after a dead-time if OC1N is implemented) when MOE=0</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>OIS1</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output Idle state 1 (OC1N output)
            Note: This bit can not be modified as long as LOCK level 1, 2 or 3 has been programmed (LOCK bits in TIMx_BDTR register).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>OC1N=0 after a dead-time when MOE=0</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>OC1N=1 after a dead-time when MOE=0</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>OIS1N</name>
          </field>
        </fields>
        <name>CR2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0xC</addressOffset>
        <description>DMA/Interrupt enable register</description>
        <displayName>DIER</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Update interrupt enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Update interrupt disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Update interrupt enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>UIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 1 interrupt enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC1 interrupt disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC1 interrupt enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC1IE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>COM interrupt enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>COM interrupt disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>COM interrupt enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>COMIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Break interrupt enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Break interrupt disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Break interrupt enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>BIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Update DMA request enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Update DMA request disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Update DMA request enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>UDE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 1 DMA request enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC1 DMA request disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC1 DMA request enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC1DE</name>
          </field>
        </fields>
        <name>DIER</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x10</addressOffset>
        <description>status register</description>
        <displayName>SR</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Update interrupt flag
            This bit is set by hardware on an update event. It is cleared by software.
            At overflow regarding the repetition counter value (update if repetition counter = 0) and if the UDIS=0 in the TIMx_CR1 register.
            When CNT is reinitialized by software using the UG bit in TIMx_EGR register, if URS=0 and UDIS=0 in the TIMx_CR1 register.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No update occurred.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Update interrupt pending. This bit is set by hardware when the registers are updated:</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>UIF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 1 interrupt flag
            This flag is set by hardware. It is cleared by software (input capture or output compare mode) or by reading the TIMx_CCR1 register (input capture mode only).
            If channel CC1 is configured as output: this flag is set when the content of the counter TIMx_CNT matches the content of the TIMx_CCR1 register. When the content of TIMx_CCR1 is greater than the content of TIMx_ARR, the CC1IF bit goes high on the counter overflow (in up-counting and up/down-counting modes) or underflow (in down-counting mode). There are 3 possible options for flag setting in center-aligned mode, refer to the CMS bits in the TIMx_CR1 register for the full description.
            If channel CC1 is configured as input: this bit is set when counter value has been captured in TIMx_CCR1 register (an edge has been detected on IC1, as per the edge sensitivity defined with the CC1P and CC1NP bits setting, in TIMx_CCER).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No compare match / No input capture occurred</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>A compare match or an input capture occurred</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC1IF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>COM interrupt flag
            This flag is set by hardware on a COM event (once the capture/compare control bits âCCxE, CCxNE, OCxMâ have been updated). It is cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No COM event occurred</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>COM interrupt pending</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>COMIF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Break interrupt flag
            This flag is set by hardware as soon as the break input goes active. It can be cleared by software if the break input is not active.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No break event occurred</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>An active level has been detected on the break input</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>BIF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 1 overcapture flag
            This flag is set by hardware only when the corresponding channel is configured in input capture mode. It is cleared by software by writing it to '0â.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No overcapture has been detected</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>The counter value has been captured in TIMx_CCR1 register while CC1IF flag was already set</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC1OF</name>
          </field>
        </fields>
        <name>SR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>write-only</access>
        <addressOffset>0x14</addressOffset>
        <description>event generation register</description>
        <displayName>EGR</displayName>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Update generation
            This bit can be set by software, it is automatically cleared by hardware.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No action.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Reinitialize the counter and generates an update of the registers. Note that the prescaler counter is cleared too (anyway the prescaler ratio is not affected). </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>UG</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 1 generation
            This bit is set by software in order to generate an event, it is automatically cleared by hardware.
            If channel CC1 is configured as output:
            CC1IF flag is set, Corresponding interrupt or DMA request is sent if enabled.
            If channel CC1 is configured as input:
            The current value of the counter is captured in TIMx_CCR1 register. The CC1IF flag is set, the corresponding interrupt or DMA request is sent if enabled. The CC1OF flag is set if the CC1IF flag was already high.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No action.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>A capture/compare event is generated on channel 1:</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC1G</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare control update generation
            This bit can be set by software, it is automatically cleared by hardware.
            Note: This bit acts only on channels that have a complementary output.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No action</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>When the CCPC bit is set, it is possible to update the CCxE, CCxNE and OCxM bits</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>COMG</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Break generation
            This bit is set by software in order to generate an event, it is automatically cleared by hardware.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No action.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>A break event is generated. MOE bit is cleared and BIF flag is set. Related interrupt or DMA transfer can occur if enabled.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>BG</name>
          </field>
        </fields>
        <name>EGR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x18</addressOffset>
        <description>capture/compare mode register (output
                  mode)</description>
        <displayName>CCMR1_Output</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Capture/Compare 1 selection
            This bit-field defines the direction of the channel (input/output) as well as the used input.
            Others: Reserved
            Note: CC1S bits are writable only when the channel is OFF (CC1E = '0â in TIMx_CCER).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC1 channel is configured as output</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC1 channel is configured as input, IC1 is mapped on TI1</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC1S</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output Compare 1 fast enable
            This bit decreases the latency between a trigger event and a transition on the timer output. It must be used in one-pulse mode (OPM bit set in TIMx_CR1 register), to have the output pulse starting as soon as possible after the starting trigger.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC1 behaves normally depending on counter and CCR1 values even when the trigger is ON. The minimum delay to activate CC1 output when an edge occurs on the trigger input is 5 clock cycles.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>An active edge on the trigger input acts like a compare match on CC1 output. Then, OC is set to the compare level independently of the result of the comparison. Delay to sample the trigger input and to activate CC1 output is reduced to 3 clock cycles. OC1FE acts only if the channel is configured in PWM1 or PWM2 mode.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>OC1FE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output Compare 1 preload enable
            Note: These bits can not be modified as long as LOCK level 3 has been programmed (LOCK bits in TIMx_BDTR register) and CC1S=â00â (the channel is configured in output).
            The PWM mode can be used without validating the preload register only in one pulse mode (OPM bit set in TIMx_CR1 register). Else the behavior is not guaranteed.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Preload register on TIMx_CCR1 disabled. TIMx_CCR1 can be written at anytime, the new value is taken in account immediately.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Preload register on TIMx_CCR1 enabled. Read/Write operations access the preload register. TIMx_CCR1 preload value is loaded in the active register at each update event.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>OC1PE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Output Compare 1 mode
            These bits define the behavior of the output reference signal OC1REF from which OC1 and OC1N are derived. OC1REF is active high whereas OC1 and OC1N active level depends on CC1P and CC1NP bits.
            All other values: Reserved
            Note: These bits can not be modified as long as LOCK level 3 has been programmed (LOCK bits in TIMx_BDTR register) and CC1S=â00â (the channel is configured in output).
            In PWM mode 1 or 2, the OCREF level changes only when the result of the comparison changes or when the output compare mode switches from âfrozenâ mode to âPWMâ mode.
            The OC1M[3] bit is not contiguous, located in bit 16.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Frozen - The comparison between the output compare register TIMx_CCR1 and the counter TIMx_CNT has no effect on the outputs.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Set channel 1 to active level on match. OC1REF signal is forced high when the counter TIMx_CNT matches the capture/compare register 1 (TIMx_CCR1).</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Set channel 1 to inactive level on match. OC1REF signal is forced low when the counter TIMx_CNT matches the capture/compare register 1 (TIMx_CCR1).</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Toggle - OC1REF toggles when TIMx_CNT=TIMx_CCR1.</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Force inactive level - OC1REF is forced low.</description>
                <name>B_0x4</name>
                <value>0x4</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Force active level - OC1REF is forced high.</description>
                <name>B_0x5</name>
                <value>0x5</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>PWM mode 1 - Channel 1 is active as long as TIMx_CNT&lt;TIMx_CCR1 else inactive. </description>
                <name>B_0x6</name>
                <value>0x6</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>PWM mode 2 - Channel 1 is inactive as long as TIMx_CNT&lt;TIMx_CCR1 else active. </description>
                <name>B_0x7</name>
                <value>0x7</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>OC1M1</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Output Compare 1 mode
            These bits define the behavior of the output reference signal OC1REF from which OC1 and OC1N are derived. OC1REF is active high whereas OC1 and OC1N active level depends on CC1P and CC1NP bits.
            All other values: Reserved
            Note: These bits can not be modified as long as LOCK level 3 has been programmed (LOCK bits in TIMx_BDTR register) and CC1S=â00â (the channel is configured in output).
            In PWM mode 1 or 2, the OCREF level changes only when the result of the comparison changes or when the output compare mode switches from âfrozenâ mode to âPWMâ mode.
            The OC1M[3] bit is not contiguous, located in bit 16.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Frozen - The comparison between the output compare register TIMx_CCR1 and the counter TIMx_CNT has no effect on the outputs.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Set channel 1 to active level on match. OC1REF signal is forced high when the counter TIMx_CNT matches the capture/compare register 1 (TIMx_CCR1).</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Set channel 1 to inactive level on match. OC1REF signal is forced low when the counter TIMx_CNT matches the capture/compare register 1 (TIMx_CCR1).</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Toggle - OC1REF toggles when TIMx_CNT=TIMx_CCR1.</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Force inactive level - OC1REF is forced low.</description>
                <name>B_0x4</name>
                <value>0x4</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Force active level - OC1REF is forced high.</description>
                <name>B_0x5</name>
                <value>0x5</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>PWM mode 1 - Channel 1 is active as long as TIMx_CNT&lt;TIMx_CCR1 else inactive. </description>
                <name>B_0x6</name>
                <value>0x6</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>PWM mode 2 - Channel 1 is inactive as long as TIMx_CNT&lt;TIMx_CCR1 else active. </description>
                <name>B_0x7</name>
                <value>0x7</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>OC1M2</name>
          </field>
        </fields>
        <name>CCMR1_Output</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x18</addressOffset>
        <description>capture/compare mode register 1 (input
                  mode)</description>
        <displayName>CCMR1_Input</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Capture/Compare 1 Selection
            This bit-field defines the direction of the channel (input/output) as well as the used input.
            Others: Reserved
            Note: CC1S bits are writable only when the channel is OFF (CC1E = '0â in TIMx_CCER).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC1 channel is configured as output</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CC1 channel is configured as input, IC1 is mapped on TI1</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC1S</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Input capture 1 prescaler
            This bit-field defines the ratio of the prescaler acting on CC1 input (IC1).
            The prescaler is reset as soon as CC1E=â0â (TIMx_CCER register).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>no prescaler, capture is done each time an edge is detected on the capture input.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>capture is done once every 2 events</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>capture is done once every 4 events</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>capture is done once every 8 events</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>IC1PSC</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Input capture 1 filter
            This bit-field defines the frequency used to sample TI1 input and the length of the digital filter applied to TI1. The digital filter is made of an event counter in which N consecutive events are needed to validate a transition on the output:</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No filter, sampling is done at fDTS</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fCK_INT, N=2</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fCK_INT, N=4</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fCK_INT, N=8</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/2, N=</description>
                <name>B_0x4</name>
                <value>0x4</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/2, N=8</description>
                <name>B_0x5</name>
                <value>0x5</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/4, N=6</description>
                <name>B_0x6</name>
                <value>0x6</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/4, N=8</description>
                <name>B_0x7</name>
                <value>0x7</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/8, N=6</description>
                <name>B_0x8</name>
                <value>0x8</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/8, N=8</description>
                <name>B_0x9</name>
                <value>0x9</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/16, N=5</description>
                <name>B_0xA</name>
                <value>0xA</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/16, N=6</description>
                <name>B_0xB</name>
                <value>0xB</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/16, N=8</description>
                <name>B_0xC</name>
                <value>0xC</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/32, N=5</description>
                <name>B_0xD</name>
                <value>0xD</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/32, N=6</description>
                <name>B_0xE</name>
                <value>0xE</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/32, N=8</description>
                <name>B_0xF</name>
                <value>0xF</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>IC1F</name>
          </field>
        </fields>
        <name>CCMR1_Input</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x20</addressOffset>
        <description>capture/compare enable
                  register</description>
        <displayName>CCER</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 1 output enable
            When CC1 channel is configured as output, the OC1 level depends on MOE, OSSI, OSSR, OIS1, OIS1N and CC1NE bits, regardless of the CC1E bits state. Refer to  for details.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Capture mode disabled / OC1 is not active (see below)</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Capture mode enabled / OC1 signal is output on the corresponding output pin</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC1E</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 1 output polarity
            When CC1 channel is configured as input, both CC1NP/CC1P bits select the active polarity of TI1FP1 and TI2FP1 for trigger or capture operations.
            CC1NP=0, CC1P=0:	non-inverted/rising edge. The circuit is sensitive to TIxFP1 rising edge (capture or trigger operations in reset, external clock or trigger mode), TIxFP1 is not inverted (trigger operation in gated mode or encoder mode).
            CC1NP=0, CC1P=1:	inverted/falling edge. The circuit is sensitive to TIxFP1 falling edge (capture or trigger operations in reset, external clock or trigger mode), TIxFP1 is inverted (trigger operation in gated mode or encoder mode).
            CC1NP=1, CC1P=1:	non-inverted/both edges/ The circuit is sensitive to both TIxFP1 rising and falling edges (capture or trigger operations in reset, external clock or trigger mode), TIxFP1is not inverted (trigger operation in gated mode). This configuration must not be used in encoder mode.
            CC1NP=1, CC1P=0:	this configuration is reserved, it must not be used.
            Note: This bit is not writable as soon as LOCK level 2 or 3 has been programmed (LOCK bits in TIMx_BDTR register).
            On channels that have a complementary output, this bit is preloaded. If the CCPC bit is set in the TIMx_CR2 register then the CC1P active bit takes the new value from the preloaded bit only when a Commutation event is generated.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>OC1 active high (output mode) / Edge sensitivity selection (input mode, see below)</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>OC1 active low (output mode) / Edge sensitivity selection (input mode, see below)</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC1P</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 1 complementary output enable</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Off - OC1N is not active. OC1N level is then function of MOE, OSSI, OSSR, OIS1, OIS1N and CC1E bits.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>On - OC1N signal is output on the corresponding output pin depending on MOE, OSSI, OSSR, OIS1, OIS1N and CC1E bits.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC1NE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Capture/Compare 1 complementary output polarity
            CC1 channel configured as output:
            CC1 channel configured as input:
            This bit is used in conjunction with CC1P to define the polarity of TI1FP1 and TI2FP1. Refer
            to the description of CC1P.
            Note: This bit is not writable as soon as LOCK level 2 or 3 has been programmed (LOCK bits in TIMx_BDTR register) and CC1S=â00â (the channel is configured in output).
            On channels that have a complementary output, this bit is preloaded. If the CCPC bit is set in the TIMx_CR2 register then the CC1NP active bit takes the new value from the preloaded bit only when a commutation event is generated.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>OC1N active high</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>OC1N active low</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CC1NP</name>
          </field>
        </fields>
        <name>CCER</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <addressOffset>0x24</addressOffset>
        <description>counter</description>
        <displayName>CNT</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>counter value</description>
            <name>CNT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>UIF Copy</description>
            <name>UIFCPY</name>
          </field>
        </fields>
        <name>CNT</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x28</addressOffset>
        <description>prescaler</description>
        <displayName>PSC</displayName>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>Prescaler value</description>
            <name>PSC</name>
          </field>
        </fields>
        <name>PSC</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x2C</addressOffset>
        <description>auto-reload register</description>
        <displayName>ARR</displayName>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>Auto-reload value</description>
            <name>ARR</name>
          </field>
        </fields>
        <name>ARR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xFFFF</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x30</addressOffset>
        <description>repetition counter register</description>
        <displayName>RCR</displayName>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>Repetition counter value</description>
            <name>REP</name>
          </field>
        </fields>
        <name>RCR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x34</addressOffset>
        <description>capture/compare register 1</description>
        <displayName>CCR1</displayName>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>Capture/Compare 1 value</description>
            <name>CCR1</name>
          </field>
        </fields>
        <name>CCR1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x44</addressOffset>
        <description>break and dead-time register</description>
        <displayName>BDTR</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>Dead-time generator setup
            This bit-field defines the duration of the dead-time inserted between the complementary outputs. DT correspond to this duration.
            DTG[7:5]=0xx =&gt; DT=DTG[7:0]x tdtg with tdtg=tDTS
            DTG[7:5]=10x =&gt; DT=(64+DTG[5:0])xtdtg with Tdtg=2xtDTS
            DTG[7:5]=110 =&gt; DT=(32+DTG[4:0])xtdtg with Tdtg=8xtDTS
            DTG[7:5]=111 =&gt; DT=(32+DTG[4:0])xtdtg with Tdtg=16xtDTS
            Example if TDTS=125ns (8MHz), dead-time possible values are:
            0 to 15875 ns by 125 ns steps,
            16 Âµs to 31750 ns by 250 ns steps,
            32 Âµs to 63 Âµs by 1 Âµs steps,
            64 Âµs to 126 Âµs by 2 Âµs steps
            Note: This bit-field can not be modified as long as LOCK level 1, 2 or 3 has been programmed (LOCK bits in TIMx_BDTR register).</description>
            <name>DTG</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Lock configuration
            These bits offer a write protection against software errors.
            Note: The LOCK bits can be written only once after the reset. Once the TIMx_BDTR register has been written, their content is frozen until the next reset.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>LOCK OFF - No bit is write protected</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>LOCK Level 1 = DTG bits in TIMx_BDTR register, OISx and OISxN bits in TIMx_CR2 register and BKE/BKP/AOE bits in TIMx_BDTR register can no longer be written.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>LOCK Level 2 = LOCK Level 1 + CC Polarity bits (CCxP/CCxNP bits in TIMx_CCER register, as long as the related channel is configured in output through the CCxS bits) as well as OSSR and OSSI bits can no longer be written.</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>LOCK Level 3 = LOCK Level 2 + CC Control bits (OCxM and OCxPE bits in TIMx_CCMRx registers, as long as the related channel is configured in output through the CCxS bits) can no longer be written.</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>LOCK</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Off-state selection for Idle mode
            This bit is used when MOE=0 on channels configured as outputs.
            See OC/OCN enable description for more details (enable register (TIM16_CCER)(TIMx_CCER)(x = 16 to 17) on pageÂ 846).
            Note: This bit can not be modified as soon as the LOCK level 2 has been programmed (LOCK bits in TIMx_BDTR register).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>When inactive, OC/OCN outputs are disabled (OC/OCN enable output signal=0)</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>When inactive, OC/OCN outputs are forced first with their idle level as soon as CCxE=1 or CCxNE=1. OC/OCN enable output signal=1)</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>OSSI</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Off-state selection for Run mode
            This bit is used when MOE=1 on channels that have a complementary output which are configured as outputs. OSSR is not implemented if no complementary output is implemented in the timer.
            See OC/OCN enable description for more details (enable register (TIM16_CCER)(TIMx_CCER)(x = 16 to 17) on pageÂ 846).
            Note: This bit can not be modified as soon as the LOCK level 2 has been programmed (LOCK bits in TIMx_BDTR register).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>When inactive, OC/OCN outputs are disabled (the timer releases the output control which is taken over by the AFIO logic, which forces a Hi-Z state)</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>When inactive, OC/OCN outputs are enabled with their inactive level as soon as CCxE=1 or CCxNE=1 (the output is still controlled by the timer).</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>OSSR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Break enable
            1; Break inputs (BRK and CCS clock failure event) enabled
            Note: This bit cannot be modified when LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).
            Any write operation to this bit takes a delay of 1 APB clock cycle to become effective.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Break inputs (BRK and CCS clock failure event) disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>BKE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Break polarity
            Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).
            Any write operation to this bit takes a delay of 1 APB clock cycle to become effective.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Break input BRK is active low</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Break input BRK is active high</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>BKP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Automatic output enable
            Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>MOE can be set only by software</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>MOE can be set by software or automatically at the next update event (if the break input is not be active)</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>AOE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Main output enable
            This bit is cleared asynchronously by hardware as soon as the break input is active. It is set by software or automatically depending on the AOE bit. It is acting only on the channels which are configured in output.
            enable register (TIM16_CCER)(TIMx_CCER)(x = 16 to 17) on pageÂ 846).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>OC and OCN outputs are disabled or forced to idle state depending on the OSSI bit.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>OC and OCN outputs are enabled if their respective enable bits are set (CCxE, CCxNE in TIMx_CCER register)See OC/OCN enable description for more details (</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>MOE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Break filter
            This bit-field defines the frequency used to sample BRK input and the length of the digital filter applied to BRK. The digital filter is made of an event counter in which N events are needed to validate a transition on the output:
            This bit cannot be modified when LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No filter, BRK acts asynchronously</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fCK_INT, N=2</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fCK_INT, N=4</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fCK_INT, N=8</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/2, N=6</description>
                <name>B_0x4</name>
                <value>0x4</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/2, N=8</description>
                <name>B_0x5</name>
                <value>0x5</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/4, N=6</description>
                <name>B_0x6</name>
                <value>0x6</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/4, N=8</description>
                <name>B_0x7</name>
                <value>0x7</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/8, N=6</description>
                <name>B_0x8</name>
                <value>0x8</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/8, N=8</description>
                <name>B_0x9</name>
                <value>0x9</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/16, N=5</description>
                <name>B_0xA</name>
                <value>0xA</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/16, N=6</description>
                <name>B_0xB</name>
                <value>0xB</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/16, N=8</description>
                <name>B_0xC</name>
                <value>0xC</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/32, N=5</description>
                <name>B_0xD</name>
                <value>0xD</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/32, N=6</description>
                <name>B_0xE</name>
                <value>0xE</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>fSAMPLING=fDTS/32, N=8</description>
                <name>B_0xF</name>
                <value>0xF</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>BKF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Break Disarm
            This bit is cleared by hardware when no break source is active.
            The BKDSRM bit must be set by software to release the bidirectional output control (open-drain output in Hi-Z state) and then be polled it until it is reset by hardware, indicating that the fault condition has disappeared.
            Note: Any write operation to this bit takes a delay of 1 APB clock cycle to become effective.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Break input BRK is armed</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Break input BRK is disarmed</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>BKDSRM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Break Bidirectional
            In the bidirectional mode (BKBID bit set to 1), the break input is configured both in input mode and in open drain output mode. Any active break event asserts a low logic level on the Break input to indicate an internal break event to external devices.
            Note: This bit cannot be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).
            Note: Any write operation to this bit takes a delay of 1 APB clock cycle to become effective.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Break input BRK in input mode</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Break input BRK in bidirectional mode</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>BKBID</name>
          </field>
        </fields>
        <name>BDTR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x48</addressOffset>
        <description>DMA control register</description>
        <displayName>DCR</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>DMA base address
            This 5-bit field defines the base-address for DMA transfers (when read/write access are done through the TIMx_DMAR address). DBA is defined as an offset starting from the address of the TIMx_CR1 register.
            Example:
            ...
            Example: Let us consider the following transfer: DBL = 7 transfers and DBA = TIMx_CR1. In this case the transfer is done to/from 7 registers starting from the TIMx_CR1 address.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>TIMx_CR1,</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>TIMx_CR2,</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>TIMx_SMCR,</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>DBA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>DMA burst length
            This 5-bit field defines the length of DMA transfers (the timer recognizes a burst transfer when a read or a write access is done to the TIMx_DMAR address), i.e. the number of transfers. Transfers can be in half-words or in bytes (see example below).
            ...</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>1 transfer,</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>2 transfers,</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>3 transfers,</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>18 transfers.</description>
                <name>B_0x11</name>
                <value>0x11</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>DBL</name>
          </field>
        </fields>
        <name>DCR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x4C</addressOffset>
        <description>DMA address for full transfer</description>
        <displayName>DMAR</displayName>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>DMA register for burst
                          accesses</description>
            <name>DMAB</name>
          </field>
        </fields>
        <name>DMAR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x60</addressOffset>
        <description>TIM17 option register 1</description>
        <displayName>AF1</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>BRK BKIN input enable
            This bit enables the BKIN alternate function input for the timerâs BRK input. BKIN input is 'ORedâ with the other BRK sources.
            Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>BKIN input disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>BKIN input enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>BKINE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>BRK COMP1 enable
            This bit enables the COMP1 for the timerâs BRK input. COMP1 output is 'ORedâ with the other BRK sources.
            Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>COMP1 input disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>COMP1 input enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>BKCMP1E</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>BRK COMP2 enable
            This bit enables the COMP2 for the timerâs BRK input. COMP2 output is 'ORedâ with the other BRK sources.
            Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>COMP2 input disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>COMP2 input enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>BKCMP2E</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>BRK BKIN input polarity
            This bit selects the BKIN alternate function input sensitivity. It must be programmed together with the BKP polarity bit.
            Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>BKIN input is active low</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>BKIN input is active high</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>BKINP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>BRK COMP1 input polarity
            This bit selects the COMP1 input sensitivity. It must be programmed together with the BKP polarity bit.
            Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>COMP1 input is active low</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>COMP1 input is active high</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>BKCMP1P</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>BRK COMP2 input polarity
            This bit selects the COMP2 input sensitivity. It must be programmed together with the BKP polarity bit.
            Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>COMP2 input is active low</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>COMP2 input is active high</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>BKCMP2P</name>
          </field>
        </fields>
        <name>AF1</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x1</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x68</addressOffset>
        <description>input selection register</description>
        <displayName>TISEL</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>selects TI1[0] to TI1[15] input
            Others: Reserved</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>TIM16_CH1 input</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>LSI</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>LSE</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>RTC wakeup</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TI1SEL</name>
          </field>
        </fields>
        <name>TISEL</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <resetMask>0xFFFFFFFF</resetMask>
    <resetValue>0x0</resetValue>
    <size>0x20</size>
  </peripheral>
</peripherals>
<peripherals>
  <peripheral>
    <addressBlock>
      <offset>0x0</offset>
      <size>0x400</size>
      <usage>registers</usage>
    </addressBlock>
    <baseAddress>0x40013800</baseAddress>
    <description>Universal synchronous asynchronous receiver
          transmitter</description>
    <groupName>USART</groupName>
    <interrupts>
      <interrupt>
        <name>USART1</name>
        <value>0x1B</value>
      </interrupt>
    </interrupts>
    <name>USART1</name>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x0</addressOffset>
        <description>Control register 1</description>
        <displayName>CR1_FIFO_ENABLED</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>USART enable
            When this bit is cleared, the USART prescalers and outputs are stopped immediately, and all current operations are discarded. The USART configuration is kept, but all the USART_ISR status flags are reset. This bit is set and cleared by software.
            Note: To enter low-power mode without generating errors on the line, the TE bit must be previously reset and the software must wait for the TC bit in the USART_ISR to be set before resetting the UE bit.
            The DMA requests are also reset when UE = 0 so the DMA channel must be disabled before resetting the UE bit.
            In Smartcard mode, (SCEN = 1), the SCLK is always available when CLKEN = 1, regardless of the UE bit value.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART prescaler and outputs disabled, low-power mode</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>UE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>USART enable in low-power mode
            When this bit is cleared, the USART cannot wake up the MCU from low-power mode.
            When this bit is set, the USART can wake up the MCU from low-power mode.
            This bit is set and cleared by software.
            Note: It is recommended to set the UESM bit just before entering low-power mode and clear it when exit from low-power mode.
            If the USART does not support the wakeup from Stop feature, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART not able to wake up the MCU from low-power mode.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART able to wake up the MCU from low-power mode. </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>UESM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receiver enable
            This bit enables the receiver. It is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receiver is disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receiver is enabled and begins searching for a start bit</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmitter enable
            This bit enables the transmitter. It is set and cleared by software.
            Note: During transmission, a low pulse on the TE bit ('0â followed by '1â) sends a preamble (idle line) after the current word, except in Smartcard mode. In order to generate an idle character, the TE must not be immediately written to '1â. To ensure the required duration, the software can poll the TEACK bit in the USART_ISR register.
            In Smartcard mode, when TE is set, there is a 1 bit-time delay before the transmission starts.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Transmitter is disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Transmitter is enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>IDLE interrupt enable
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated whenever IDLE = 1 in the USART_ISR register  </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>IDLEIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RXFIFO not empty interrupt enable
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated whenever ORE = 1 or RXFNE = 1 in the USART_ISR register    </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RXFNEIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmission complete interrupt enable
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated whenever TC = 1 in the USART_ISR register  </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TCIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>TXFIFO not full interrupt enable
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated whenever TXFNF =1 in the USART_ISR register</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TXFNFIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>PE interrupt enable
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated whenever PE = 1 in the USART_ISR register  </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>PEIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Parity selection
            This bit selects the odd or even parity when the parity generation/detection is enabled (PCE bit set). It is set and cleared by software. The parity is selected after the current byte.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Even parity</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Odd parity</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>PS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Parity control enable
            This bit selects the hardware parity control (generation and detection). When the parity control is enabled, the computed parity is inserted at the MSB position (9th bit if MÂ =Â 1; 8th bit if MÂ =Â 0) and the parity is checked on the received data. This bit is set and cleared by software. Once it is set, PCE is active after the current byte (in reception and in transmission).
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Parity control disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Parity control enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>PCE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receiver wakeup method
            This bit determines the USART wakeup method from Mute mode. It is set or cleared by software.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Idle line</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Address mark</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>WAKE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Word length
            This bit is used in conjunction with bit 28 (M1) to determine the word length. It is set or cleared by software (refer to bit 28 (M1)description).
            This bit can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <name>M0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Mute mode enable
            This bit enables the USART Mute mode function. When set, the USART can switch between active and Mute mode, as defined by the WAKE bit. It is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receiver in active mode permanently</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receiver can switch between Mute mode and active mode. </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>MME</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Character match interrupt enable
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated when the CMF bit is set in the USART_ISR register.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CMIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Oversampling mode
            This bit can only be written when the USART is disabled (UEÂ =Â 0).
            Note: In LIN, IrDA and Smartcard modes, this bit must be kept cleared.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Oversampling by 16</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Oversampling by 8</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>OVER8</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Driver Enable deassertion time
            This 5-bit value defines the time between the end of the last stop bit, in a transmitted message, and the de-activation of the DE (Driver Enable) signal. It is expressed in sample time units (1/8 or 1/16 bit time, depending on the oversampling rate).
            If the USART_TDR register is written during the DEDT time, the new data is transmitted only when the DEDT and DEAT times have both elapsed.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If the Driver Enable feature is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <name>DEDT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Driver Enable assertion time
            This 5-bit value defines the time between the activation of the DE (Driver Enable) signal and the beginning of the start bit. It is expressed in sample time units (1/8 or 1/16 bit time, depending on the oversampling rate).
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If the Driver Enable feature is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <name>DEAT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receiver timeout interrupt enable
            This bit is set and cleared by software.
            Note: If the USART does not support the Receiver timeout feature, this bit is reserved and must be kept at reset value. .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated when the RTOF bit is set in the USART_ISR register.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RTOIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>End of Block interrupt enable
            This bit is set and cleared by software.
            Note: If the USART does not support Smartcard mode, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated when the EOBF flag is set in the USART_ISR register</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>EOBIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Word length
            This bit must be used in conjunction with bit 12 (M0) to determine the word length. It is set or cleared by software.
            M[1:0] = '00â: 1 start bit, 8 Data bits, n Stop bit
            M[1:0] = '01â: 1 start bit, 9 Data bits, n Stop bit
            M[1:0] = '10â: 1 start bit, 7 Data bits, n Stop bit
            This bit can only be written when the USART is disabled (UEÂ =Â 0).
            Note: In 7-bits data length mode, the Smartcard mode, LIN master mode and Auto baud rate (0x7F and 0x55 frames detection) are not supported.</description>
            <name>M1</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>FIFO mode enable
            This bit is set and cleared by software.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).
            Note: FIFO mode can be used on standard UART communication, in SPI master/slave mode and in Smartcard modes only. It must not be enabled in IrDA and LIN modes.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>FIFO mode is disabled.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>FIFO mode is enabled.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>FIFOEN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>TXFIFO empty interrupt enable
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated when TXFE = 1 in the USART_ISR register  </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TXFEIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RXFIFO Full interrupt enable
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated when RXFF = 1 in the USART_ISR register  </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RXFFIE</name>
          </field>
        </fields>
        <name>CR1_FIFO_ENABLED</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x0</addressOffset>
        <description>Control register 1</description>
        <displayName>CR1_FIFO_DISABLED</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>USART enable
            When this bit is cleared, the USART prescalers and outputs are stopped immediately, and all current operations are discarded. The USART configuration is kept, but all the USART_ISR status flags are reset. This bit is set and cleared by software.
            Note: To enter low-power mode without generating errors on the line, the TE bit must be previously reset and the software must wait for the TC bit in the USART_ISR to be set before resetting the UE bit.
            The DMA requests are also reset when UE = 0 so the DMA channel must be disabled before resetting the UE bit.
            In Smartcard mode, (SCEN = 1), the SCLK is always available when CLKEN = 1, regardless of the UE bit value.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART prescaler and outputs disabled, low-power mode</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>UE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>USART enable in low-power mode
            When this bit is cleared, the USART cannot wake up the MCU from low-power mode.
            When this bit is set, the USART can wake up the MCU from low-power mode.
            This bit is set and cleared by software.
            Note: It is recommended to set the UESM bit just before entering low-power mode and clear it when exit from low-power mode.
            If the USART does not support the wakeup from Stop feature, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART not able to wake up the MCU from low-power mode.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART able to wake up the MCU from low-power mode. </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>UESM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receiver enable
            This bit enables the receiver. It is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receiver is disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receiver is enabled and begins searching for a start bit</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmitter enable
            This bit enables the transmitter. It is set and cleared by software.
            Note: During transmission, a low pulse on the TE bit ('0â followed by '1â) sends a preamble (idle line) after the current word, except in Smartcard mode. In order to generate an idle character, the TE must not be immediately written to '1â. To ensure the required duration, the software can poll the TEACK bit in the USART_ISR register.
            In Smartcard mode, when TE is set, there is a 1 bit-time delay before the transmission starts.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Transmitter is disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Transmitter is enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>IDLE interrupt enable
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated whenever IDLE = 1 in the USART_ISR register  </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>IDLEIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receive data register not empty
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated whenever ORE = 1 or RXNE = 1 in the USART_ISR register    </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RXNEIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmission complete interrupt enable
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated whenever TC = 1 in the USART_ISR register  </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TCIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmit data register empty
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated whenever TXE =1 in the USART_ISR register</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TXEIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>PE interrupt enable
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated whenever PE = 1 in the USART_ISR register  </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>PEIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Parity selection
            This bit selects the odd or even parity when the parity generation/detection is enabled (PCE bit set). It is set and cleared by software. The parity is selected after the current byte.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Even parity</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Odd parity</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>PS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Parity control enable
            This bit selects the hardware parity control (generation and detection). When the parity control is enabled, the computed parity is inserted at the MSB position (9th bit if MÂ =Â 1; 8th bit if MÂ =Â 0) and the parity is checked on the received data. This bit is set and cleared by software. Once it is set, PCE is active after the current byte (in reception and in transmission).
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Parity control disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Parity control enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>PCE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receiver wakeup method
            This bit determines the USART wakeup method from Mute mode. It is set or cleared by software.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Idle line</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Address mark</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>WAKE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Word length
            This bit is used in conjunction with bit 28 (M1) to determine the word length. It is set or cleared by software (refer to bit 28 (M1)description).
            This bit can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <name>M0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Mute mode enable
            This bit enables the USART Mute mode function. When set, the USART can switch between active and Mute mode, as defined by the WAKE bit. It is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receiver in active mode permanently</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receiver can switch between Mute mode and active mode. </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>MME</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Character match interrupt enable
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated when the CMF bit is set in the USART_ISR register.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CMIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Oversampling mode
            This bit can only be written when the USART is disabled (UEÂ =Â 0).
            Note: In LIN, IrDA and Smartcard modes, this bit must be kept cleared.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Oversampling by 16</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Oversampling by 8</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>OVER8</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Driver Enable deassertion time
            This 5-bit value defines the time between the end of the last stop bit, in a transmitted message, and the de-activation of the DE (Driver Enable) signal. It is expressed in sample time units (1/8 or 1/16 bit time, depending on the oversampling rate).
            If the USART_TDR register is written during the DEDT time, the new data is transmitted only when the DEDT and DEAT times have both elapsed.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If the Driver Enable feature is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <name>DEDT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Driver Enable assertion time
            This 5-bit value defines the time between the activation of the DE (Driver Enable) signal and the beginning of the start bit. It is expressed in sample time units (1/8 or 1/16 bit time, depending on the oversampling rate).
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If the Driver Enable feature is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <name>DEAT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receiver timeout interrupt enable
            This bit is set and cleared by software.
            Note: If the USART does not support the Receiver timeout feature, this bit is reserved and must be kept at reset value. .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated when the RTOF bit is set in the USART_ISR register.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RTOIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>End of Block interrupt enable
            This bit is set and cleared by software.
            Note: If the USART does not support Smartcard mode, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated when the EOBF flag is set in the USART_ISR register</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>EOBIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Word length
            This bit must be used in conjunction with bit 12 (M0) to determine the word length. It is set or cleared by software.
            M[1:0] = '00â: 1 start bit, 8 Data bits, n Stop bit
            M[1:0] = '01â: 1 start bit, 9 Data bits, n Stop bit
            M[1:0] = '10â: 1 start bit, 7 Data bits, n Stop bit
            This bit can only be written when the USART is disabled (UEÂ =Â 0).
            Note: In 7-bits data length mode, the Smartcard mode, LIN master mode and Auto baud rate (0x7F and 0x55 frames detection) are not supported.</description>
            <name>M1</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>FIFO mode enable
            This bit is set and cleared by software.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).
            Note: FIFO mode can be used on standard UART communication, in SPI master/slave mode and in Smartcard modes only. It must not be enabled in IrDA and LIN modes.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>FIFO mode is disabled.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>FIFO mode is enabled.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>FIFOEN</name>
          </field>
        </fields>
        <name>CR1_FIFO_DISABLED</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x4</addressOffset>
        <description>Control register 2</description>
        <displayName>CR2</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Synchronous Slave mode enable
            When the SLVEN bit is set, the synchronous slave mode is enabled.
            Note: When SPI slave mode is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Slave mode disabled.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Slave mode enabled.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>SLVEN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When the DIS_NSS bit is set, the NSS pin input is ignored.
            Note: When SPI slave mode is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>SPI slave selection depends on NSS input pin.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>SPI slave is always selected and NSS input pin is ignored.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>DIS_NSS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>7-bit Address Detection/4-bit Address Detection
            This bit is for selection between 4-bit address detection or 7-bit address detection.
            This bit can only be written when the USART is disabled (UEÂ =Â 0)
            Note: In 7-bit and 9-bit data modes, the address detection is done on 6-bit and 8-bit address (ADD[5:0] and ADD[7:0]) respectively.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>4-bit address detection</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>7-bit address detection (in 8-bit data mode)</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>ADDM7</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>LIN break detection length
            This bit is for selection between 11 bit or 10 bit break detection.
            This bit can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If LIN mode is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>10-bit break detection</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>11-bit break detection</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>LBDL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>LIN break detection interrupt enable
            Break interrupt mask (break detection using break delimiter).
            Note: If LIN mode is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt is inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>An interrupt is generated whenever LBDF = 1 in the USART_ISR register  </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>LBDIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Last bit clock pulse
            This bit is used to select whether the clock pulse associated with the last data bit transmitted (MSB) has to be output on the SCLK pin in synchronous mode.
            The last bit is the 7th or 8th or 9th data bit transmitted depending on the 7 or 8 or 9 bit format selected by the M bit in the USART_CR1 register.
            This bit can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If synchronous mode is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>The clock pulse of the last data bit is not output to the SCLK pin</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>The clock pulse of the last data bit is output to the SCLK pin</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>LBCL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Clock phase
            This bit is used to select the phase of the clock output on the SCLK pin in synchronous mode. It works in conjunction with the CPOL bit to produce the desired clock/data relationship (see  and )
            This bit can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If synchronous mode is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>The first clock transition is the first data capture edge</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>The second clock transition is the first data capture edge</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CPHA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Clock polarity
            This bit enables the user to select the polarity of the clock output on the SCLK pin in synchronous mode. It works in conjunction with the CPHA bit to produce the desired clock/data relationship
            This bit can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If synchronous mode is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Steady low value on SCLK pin outside transmission window</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Steady high value on SCLK pin outside transmission window</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CPOL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Clock enable
            This bit enables the user to enable the SCLK pin.
            This bit can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If neither synchronous mode nor Smartcard mode is supported, this bit is reserved and must be kept at reset value. Refer to .
            In Smartcard mode, in order to provide correctly the SCLK clock to the smartcard, the steps below must be respected:
            UE = 0
            SCEN = 1
            GTPR configuration
            CLKEN= 1
            UE = 1</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>SCLK pin disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>SCLK pin enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CLKEN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>stop bits
            These bits are used for programming the stop bits.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>1 stop bit</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>0.5 stop bit.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>2 stop bits</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>1.5 stop bits</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>STOP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>LIN mode enable
            This bit is set and cleared by software.
            The LIN mode enables the capability to send LIN synchronous breaks (13 low bits) using the SBKRQ bit in the USART_CR1 register, and to detect LIN Sync breaks.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If the USART does not support LIN mode, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>LIN mode disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>LIN mode enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>LINEN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Swap TX/RX pins
            This bit is set and cleared by software.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>TX/RX pins are used as defined in standard pinout</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>The TX and RX pins functions are swapped. This enables to work in the case of a cross-wired connection to another UART. </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>SWAP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RX pin active level inversion
            This bit is set and cleared by software.
            This enables the use of an external inverter on the RX line.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>RX pin signal works using the standard logic levels (VDD =1/idle, Gnd = 0/mark)   </description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>RX pin signal values are inverted (VDD =0/mark, Gnd = 1/idle).   </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RXINV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>TX pin active level inversion
            This bit is set and cleared by software.
            This enables the use of an external inverter on the TX line.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>TX pin signal works using the standard logic levels (VDD =1/idle, Gnd = 0/mark)   </description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>TX pin signal values are inverted (VDD =0/mark, Gnd = 1/idle).   </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TXINV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Binary data inversion
            This bit is set and cleared by software.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Logical data from the data register are send/received in positive/direct logic. (1 = H, 0 = L)     </description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Logical data from the data register are send/received in negative/inverse logic. (1 = L, 0 = H).     The parity bit is also inverted.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>DATAINV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Most significant bit first
            This bit is set and cleared by software.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>data is transmitted/received with data bit 0 first, following the start bit. </description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>data is transmitted/received with the MSB (bit 7/8) first, following the start bit. </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>MSBFIRST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Auto baud rate enable
            This bit is set and cleared by software.
            Note: If the USART does not support the auto baud rate feature, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Auto baud rate detection is disabled. </description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Auto baud rate detection is enabled. </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>ABREN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Auto baud rate mode
            These bits are set and cleared by software.
            This bitfield can only be written when ABREN = 0 or the USART is disabled (UEÂ =Â 0).
            Note: If DATAINVÂ =Â 1 and/or MSBFIRSTÂ =Â 1 the patterns must be the same on the line, for example 0xAA for MSBFIRST)
            If the USART does not support the auto baud rate feature, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Measurement of the start bit is used to detect the baud rate. </description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Falling edge to falling edge measurement (the received frame must start with a single bit = 1 and Frame = Start10xxxxxx)</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>0x7F frame detection.</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>0x55 frame detection</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>ABRMOD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receiver timeout enable
            This bit is set and cleared by software.
            When this feature is enabled, the RTOF flag in the USART_ISR register is set if the RX line is idle (no reception) for the duration programmed in the RTOR (receiver timeout register).
            Note: If the USART does not support the Receiver timeout feature, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receiver timeout feature disabled. </description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receiver timeout feature enabled. </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RTOEN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>Address of the USART node
            ADD[7:4]:
            These bits give the address of the USART node or a character code to be recognized.
            They are used to wake up the MCU with 7-bit address mark detection in multiprocessor communication during Mute mode or low-power mode. The MSB of the character sent by the transmitter should be equal to 1. They can also be used for character detection during normal reception, Mute mode inactive (for example, end of block detection in ModBus protocol). In this case, the whole received character (8-bit) is compared to the ADD[7:0] value and CMF flag is set on match.
            These bits can only be written when reception is disabled (RE = 0) or the USART is disabled (UEÂ =Â 0).
            ADD[3:0]:
            These bits give the address of the USART node or a character code to be recognized.
            They are used for wakeup with address mark detection, in multiprocessor communication during Mute mode or low-power mode.
            These bits can only be written when reception is disabled (RE = 0) or the USART is disabled (UEÂ =Â 0).</description>
            <name>ADD</name>
          </field>
        </fields>
        <name>CR2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x8</addressOffset>
        <description>Control register 3</description>
        <displayName>CR3</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Error interrupt enable
            Error Interrupt Enable Bit is required to enable interrupt generation in case of a framing error, overrun error noise flag or SPI slave underrun error (FEÂ =Â 1 or OREÂ =Â 1 or NEÂ =Â 1 or UDR = 1 in the USART_ISR register).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>interrupt generated when FE = 1 or ORE = 1 or NE = 1 or UDR = 1 (in SPI slave mode) in       the USART_ISR register.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>EIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>IrDA mode enable
            This bit is set and cleared by software.
            This bit can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If IrDA mode is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>IrDA disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>IrDA enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>IREN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>IrDA low-power
            This bit is used for selecting between normal and low-power IrDA modes
            This bit can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If IrDA mode is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Normal mode</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Low-power mode</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>IRLP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Half-duplex selection
            Selection of Single-wire Half-duplex mode
            This bit can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Half duplex mode is not selected</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Half duplex mode is selected </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>HDSEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Smartcard NACK enable
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If the USART does not support Smartcard mode, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>NACK transmission in case of parity error is disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>NACK transmission during parity error is enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>NACK</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Smartcard mode enable
            This bit is used for enabling Smartcard mode.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If the USART does not support Smartcard mode, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Smartcard Mode disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Smartcard Mode enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>SCEN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>DMA enable receiver
            This bit is set/reset by software</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>DMA mode is enabled for reception</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>DMA mode is disabled for reception</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>DMAR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>DMA enable transmitter
            This bit is set/reset by software</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>DMA mode is enabled for transmission</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>DMA mode is disabled for transmission</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>DMAT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RTS enable
            This bit can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If the hardware flow control feature is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>RTS hardware flow control disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>RTS output enabled, data is only requested when there is space in the receive buffer. The transmission of data is expected to cease after the current character has been transmitted. The nRTS output is asserted (pulled to 0) when data can be received.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RTSE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>CTS enable
            This bit can only be written when the USART is disabled (UEÂ =Â 0)
            Note: If the hardware flow control feature is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>CTS hardware flow control disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CTS mode enabled, data is only transmitted when the nCTS input is asserted (tied to 0). If the nCTS input is deasserted while data is being transmitted, then the transmission is completed before stopping. If data is written into the data register while nCTS is asserted, the transmission is postponed until nCTS is asserted.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CTSE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>CTS interrupt enable
            Note: If the hardware flow control feature is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt is inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>An interrupt is generated whenever CTSIF = 1 in the USART_ISR register  </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CTSIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>One sample bit method enable
            This bit enables the user to select the sample method. When the one sample bit method is selected the noise detection flag (NE) is disabled.
            This bit can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Three sample bit method</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>One sample bit method</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>ONEBIT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Overrun Disable
            This bit is used to disable the receive overrun detection.
            the ORE flag is not set and the new received data overwrites the previous content of the USART_RDR register. When FIFO mode is enabled, the RXFIFO is bypassed and data is written directly in USART_RDR register. Even when FIFO management is enabled, the RXNE flag is to be used.
            This bit can only be written when the USART is disabled (UEÂ =Â 0).
            Note: This control bit enables checking the communication flow w/o reading the data</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Overrun Error Flag, ORE, is set when received data is not read before receiving new data. </description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Overrun functionality is disabled. If new data is received while the RXNE flag is still set</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>OVRDIS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>DMA Disable on Reception Error
            This bit can only be written when the USART is disabled (UE=0).
            Note: The reception errors are: parity error, framing error or noise error.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>DMA is not disabled in case of reception error. The corresponding error flag is set but RXNE is kept 0 preventing from overrun. As a consequence, the DMA request is not asserted, so the erroneous data is not transferred (no DMA request), but next correct received data is transferred (used for Smartcard mode).</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>DMA is disabled following a reception error. The corresponding error flag is set, as well as RXNE. The DMA request is masked until the error flag is cleared. This means that the software must first disable the DMA request (DMAR = 0) or clear RXNE/RXFNE is case FIFO mode is enabled) before clearing the error flag.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>DDRE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Driver enable mode
            This bit enables the user to activate the external transceiver control, through the DE signal.
            This bit can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If the Driver Enable feature is not supported, this bit is reserved and must be kept at reset value. .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>DE function is disabled. </description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>DE function is enabled. The DE signal is output on the RTS pin.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>DEM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Driver enable polarity selection
            This bit can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If the Driver Enable feature is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>DE signal is active high. </description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>DE signal is active low.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>DEP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Smartcard auto-retry count
            This bitfield specifies the number of retries for transmission and reception in Smartcard mode.
            In transmission mode, it specifies the number of automatic retransmission retries, before generating a transmission error (FE bit set).
            In reception mode, it specifies the number or erroneous reception trials, before generating a reception error (RXNE/RXFNE and PE bits set).
            This bitfield must be programmed only when the USART is disabled (UEÂ =Â 0).
            When the USART is enabled (UEÂ =Â 1), this bitfield may only be written to 0x0, in order to stop retransmission.
            Note: If Smartcard mode is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>retransmission disabled - No automatic retransmission in transmit mode. </description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>number of automatic retransmission attempts (before signaling error)</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>number of automatic retransmission attempts (before signaling error)</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>number of automatic retransmission attempts (before signaling error)</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>number of automatic retransmission attempts (before signaling error)</description>
                <name>B_0x4</name>
                <value>0x4</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>number of automatic retransmission attempts (before signaling error)</description>
                <name>B_0x5</name>
                <value>0x5</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>number of automatic retransmission attempts (before signaling error)</description>
                <name>B_0x6</name>
                <value>0x6</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>number of automatic retransmission attempts (before signaling error)</description>
                <name>B_0x7</name>
                <value>0x7</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>SCARCNT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Wakeup from low-power mode interrupt flag selection
            This bitfield specifies the event which activates the WUF (Wakeup from low-power mode flag).
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).
            If the USART does not support the wakeup from Stop feature, this bit is reserved and must be kept at reset value. Refer to pageÂ 835.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>WUF active on address match (as defined by ADD[7:0] and ADDM7)</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>WUF active on start bit detection</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>WUF active on RXNE/RXFNE. </description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>WUS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Wakeup from low-power mode interrupt enable
            This bit is set and cleared by software.
            Note: WUFIE must be set before entering in low-power mode.
            If the USART does not support the wakeup from Stop feature, this bit is reserved and must be kept at reset value. Refer to pageÂ 835.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated whenever WUF = 1 in the USART_ISR register  </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>WUFIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>TXFIFO threshold interrupt enable
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated when TXFIFO reaches the threshold programmed in TXFTCFG.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TXFTIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmission Complete before guard time, interrupt enable
            This bit is set and cleared by software.
            Note: If the USART does not support the Smartcard mode, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated whenever TCBGT=1 in the USART_ISR register</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TCBGTIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Receive FIFO threshold configuration
            Remaining combinations: Reserved</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receive FIFO reaches 1/8 of its depth</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receive FIFO reaches 1/4 of its depth</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receive FIFO reaches 1/2 of its depth</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receive FIFO reaches 3/4 of its depth</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receive FIFO reaches 7/8 of its depth</description>
                <name>B_0x4</name>
                <value>0x4</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receive FIFO becomes full</description>
                <name>B_0x5</name>
                <value>0x5</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RXFTCFG</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RXFIFO threshold interrupt enable
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated when Receive FIFO reaches the threshold programmed in RXFTCFG.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RXFTIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>TXFIFO threshold configuration
            Remaining combinations: Reserved</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>TXFIFO reaches 1/8 of its depth</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>TXFIFO reaches 1/4 of its depth</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>TXFIFO reaches 1/2 of its depth</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>TXFIFO reaches 3/4 of its depth</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>TXFIFO reaches 7/8 of its depth</description>
                <name>B_0x4</name>
                <value>0x4</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>TXFIFO becomes empty</description>
                <name>B_0x5</name>
                <value>0x5</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TXFTCFG</name>
          </field>
        </fields>
        <name>CR3</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0xC</addressOffset>
        <description>Baud rate register</description>
        <displayName>BRR</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>USART baud rate</description>
            <name>BRR</name>
          </field>
        </fields>
        <name>BRR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x10</addressOffset>
        <description>Guard time and prescaler
                  register</description>
        <displayName>GTPR</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>Prescaler value
            In IrDA low-power and normal IrDA mode:
            PSC[7:0] = IrDA Normal and Low-Power baud rate
            PSC[7:0] is used to program the prescaler for dividing the USART source clock to achieve the low-power frequency: the source clock is divided by the value given in the register (8 significant bits):
            In Smartcard mode:
            PSC[4:0]Â =Â Prescaler value
            PSC[4:0] is used to program the prescaler for dividing the USART source clock to provide the Smartcard clock. The value given in the register (5 significant bits) is multiplied by 2 to give the division factor of the source clock frequency:
            ...
            0010Â 0000: Divides the source clock by 32 (IrDA mode)
            ...
            1111Â 1111: Divides the source clock by 255 (IrDA mode)
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).
            Note: Bits [7:5] must be kept cleared if Smartcard mode is used.
            This bitfield is reserved and forced by hardware to '0â when the Smartcard and IrDA modes are not supported. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Reserved - do not program this value</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Divides the source clock by 1 (IrDA mode) / by 2 (Smarcard mode)</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Divides the source clock by 2 (IrDA mode) / by 4 (Smartcard mode)</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Divides the source clock by 3 (IrDA mode) / by 6 (Smartcard mode)</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Divides the source clock by 31 (IrDA mode) / by 62 (Smartcard mode)</description>
                <name>B_0x1F</name>
                <value>0x1F</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>PSC</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>Guard time value
            This bitfield is used to program the Guard time value in terms of number of baud clock periods.
            This is used in Smartcard mode. The Transmission Complete flag is set after this guard time value.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If Smartcard mode is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <name>GT</name>
          </field>
        </fields>
        <name>GTPR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x14</addressOffset>
        <description>Receiver timeout register</description>
        <displayName>RTOR</displayName>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x18</bitWidth>
            <description>Receiver timeout value</description>
            <name>RTO</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>Block Length</description>
            <name>BLEN</name>
          </field>
        </fields>
        <name>RTOR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>write-only</access>
        <addressOffset>0x18</addressOffset>
        <description>Request register</description>
        <displayName>RQR</displayName>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Auto baud rate request
            Writing 1 to this bit resets the ABRF flag in the USART_ISR and requests an automatic baud rate measurement on the next received data frame.
            Note: If the USART does not support the auto baud rate feature, this bit is reserved and must be kept at reset value. Refer to .</description>
            <name>ABRRQ</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Send break request
            Writing 1 to this bit sets the SBKF flag and request to send a BREAK on the line, as soon as the transmit machine is available.
            Note: When the application needs to send the break character following all previously inserted data, including the ones not yet transmitted, the software should wait for the TXE flag assertion before setting the SBKRQ bit.</description>
            <name>SBKRQ</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Mute mode request
            Writing 1 to this bit puts the USART in Mute mode and resets the RWU flag.</description>
            <name>MMRQ</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receive data flush request
            Writing 1 to this bit empties the entire receive FIFO i.e. clears the bit RXFNE.
            This enables to discard the received data without reading them, and avoid an overrun condition.</description>
            <name>RXFRQ</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmit data flush request
            When FIFO mode is disabled, writing '1â to this bit sets the TXE flag. This enables to discard the transmit data. This bit must be used only in Smartcard mode, when data have not been sent due to errors (NACK) and the FE flag is active in the USART_ISR register. If the USART does not support Smartcard mode, this bit is reserved and must be kept at reset value.
            When FIFO is enabled, TXFRQ bit is set to flush the whole FIFO. This sets the TXFE flag (Transmit FIFO empty, bit 23 in the USART_ISR register). Flushing the Transmit FIFO is supported in both UART and Smartcard modes.
            Note: In FIFO mode, the TXFNF flag is reset during the flush request until TxFIFO is empty in order to ensure that no data are written in the data register.</description>
            <name>TXFRQ</name>
          </field>
        </fields>
        <name>RQR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-only</access>
        <addressOffset>0x1C</addressOffset>
        <description>Interrupt &amp; status
                  register</description>
        <displayName>ISR_FIFO_ENABLED</displayName>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Parity error
            This bit is set by hardware when a parity error occurs in receiver mode. It is cleared by software, writing 1 to the PECF in the USART_ICR register.
            An interrupt is generated if PEIE = 1 in the USART_CR1 register.
            Note: This error is associated with the character in the USART_RDR.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No parity error</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Parity error</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>PE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Framing error
            This bit is set by hardware when a de-synchronization, excessive noise or a break character is detected. It is cleared by software, writing 1 to the FECF bit in the USART_ICR register.
            When transmitting data in Smartcard mode, this bit is set when the maximum number of transmit attempts is reached without success (the card NACKs the data frame).
            An interrupt is generated if EIEÂ =Â 1 in the USART_CR1 register.
            Note: This error is associated with the character in the USART_RDR.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No Framing error is detected</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Framing error or break character is detected</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>FE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Noise detection flag
            This bit is set by hardware when noise is detected on a received frame. It is cleared by software, writing 1 to the NECF bit in the USART_ICR register.
            Note: This bit does not generate an interrupt as it appears at the same time as the RXFNE bit which itself generates an interrupt. An interrupt is generated when the NE flag is set during multi buffer communication if the EIE bit is set.
            When the line is noise-free, the NE flag can be disabled by programming the ONEBIT bit to 1 to increase the USART tolerance to deviations (Refer to Tolerance of the USART receiver to clock deviation on pageÂ 861).
            This error is associated with the character in the USART_RDR.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No noise is detected</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Noise is detected</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>NE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Overrun error
            This bit is set by hardware when the data currently being received in the shift register is
            ready to be transferred into the USART_RDR register while RXFF = 1. It is cleared by a software, writing 1 to the ORECF, in the USART_ICR register.
            An interrupt is generated if RXFNEIEÂ =Â 1 or EIE = 1 in the USART_CR1 register.
            Note: When this bit is set, the USART_RDR register content is not lost but the shift register is overwritten. An interrupt is generated if the ORE flag is set during multi buffer communication if the EIE bit is set.
            This bit is permanently forced to 0 (no overrun detection) when the bit OVRDIS is set in the USART_CR3 register.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No overrun error</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Overrun error is detected</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>ORE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Idle line detected
            This bit is set by hardware when an Idle Line is detected. An interrupt is generated if IDLEIEÂ =Â 1 in the USART_CR1 register. It is cleared by software, writing 1 to the IDLECF in the USART_ICR register.
            Note: The IDLE bit is not set again until the RXFNE bit has been set (i.e. a new idle line occurs).
            If Mute mode is enabled (MMEÂ =Â 1), IDLE is set if the USART is not mute (RWUÂ =Â 0), whatever the Mute mode selected by the WAKE bit. If RWUÂ =Â 1, IDLE is not set.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No Idle line is detected</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Idle line is detected</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>IDLE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RXFIFO not empty
            RXFNE bit is set by hardware when the RXFIFO is not empty, meaning that data can be read from the USART_RDR register. Every read operation from the USART_RDR frees a location in the RXFIFO.
            RXFNE is cleared when the RXFIFO is empty. The RXFNE flag can also be cleared by writing 1 to the RXFRQ in the USART_RQR register.
            An interrupt is generated if RXFNEIEÂ =Â 1 in the USART_CR1 register.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Data is not received</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Received data is ready to be read.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RXFNE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmission complete
            This bit indicates that the last data written in the USART_TDR has been transmitted out of the shift register.
            It is set by hardware when the transmission of a frame containing data is complete and when TXFE is set.
            An interrupt is generated if TCIEÂ =Â 1 in the USART_CR1 register.
            TC bit is is cleared by software, by writing 1 to the TCCF in the USART_ICR register or by a write to the USART_TDR register.
            Note: If TE bit is reset and no transmission is on going, the TC bit is immediately set.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Transmission is not complete</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Transmission is complete</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TC</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>TXFIFO not full
            TXFNF is set by hardware when TXFIFO is not full meaning that data can be written in the USART_TDR. Every write operation to the USART_TDR places the data in the TXFIFO. This flag remains set until the TXFIFO is full. When the TXFIFO is full, this flag is cleared indicating that data can not be written into the USART_TDR.
            An interrupt is generated if the TXFNFIE bit =1 in the USART_CR1 register.
            Note: The TXFNF is kept reset during the flush request until TXFIFO is empty. After sending the flush request (by setting TXFRQ bit), the flag TXFNF should be checked prior to writing in TXFIFO (TXFNF and TXFE are set at the same time).
            This bit is used during single buffer transmission.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Transmit FIFO is full</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Transmit FIFO is not full</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TXFNF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>LIN break detection flag
            This bit is set by hardware when the LIN break is detected. It is cleared by software, by writing 1 to the LBDCF in the USART_ICR.
            An interrupt is generated if LBDIE = 1 in the USART_CR2 register.
            Note: If the USART does not support LIN mode, this bit is reserved and kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>LIN Break not detected</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>LIN break detected</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>LBDF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>CTS interrupt flag
            This bit is set by hardware when the nCTS input toggles, if the CTSE bit is set. It is cleared by software, by writing 1 to the CTSCF bit in the USART_ICR register.
            An interrupt is generated if CTSIEÂ =Â 1 in the USART_CR3 register.
            Note: If the hardware flow control feature is not supported, this bit is reserved and kept at reset value.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No change occurred on the nCTS status line</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>A change occurred on the nCTS status line</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CTSIF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>CTS flag
            This bit is set/reset by hardware. It is an inverted copy of the status of the nCTS input pin.
            Note: If the hardware flow control feature is not supported, this bit is reserved and kept at reset value.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>nCTS line set</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>nCTS line reset</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CTS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receiver timeout
            This bit is set by hardware when the timeout value, programmed in the RTOR register has lapsed, without any communication. It is cleared by software, writing 1 to the RTOCF bit in the USART_ICR register.
            An interrupt is generated if RTOIEÂ =Â 1 in the USART_CR2 register.
            In Smartcard mode, the timeout corresponds to the CWT or BWT timings.
            Note: If a time equal to the value programmed in RTOR register separates 2 characters, RTOF is not set. If this time exceeds this value + 2 sample times (2/16 or 2/8, depending on the oversampling method), RTOF flag is set.
            The counter counts even if RE = 0 but RTOF is set only when RE = 1. If the timeout has already elapsed when RE is set, then RTOF is set.
            If the USART does not support the Receiver timeout feature, this bit is reserved and kept at reset value.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Timeout value not reached</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Timeout value reached without any data reception</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RTOF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>End of block flag
            This bit is set by hardware when a complete block has been received (for example TÂ =Â 1 Smartcard mode). The detection is done when the number of received bytes (from the start of the block, including the prologue) is equal or greater than BLEN + 4.
            An interrupt is generated if the EOBIEÂ =Â 1 in the USART_CR2 register.
            It is cleared by software, writing 1 to the EOBCF in the USART_ICR register.
            Note: If Smartcard mode is not supported, this bit is reserved and kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>End of Block not reached</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>End of Block (number of characters) reached</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>EOBF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI slave underrun error flag
            In slave transmission mode, this flag is set when the first clock pulse for data transmission appears while the software has not yet loaded any value into USART_TDR. This flag is reset by setting UDRCF bit in the USART_ICR register.
            Note: If the USART does not support the SPI slave mode, this bit is reserved and kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No underrun error</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>underrun error</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>UDR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Auto baud rate error
            This bit is set by hardware if the baud rate measurement failed (baud rate out of range or character comparison failed)
            It is cleared by software, by writing 1 to the ABRRQ bit in the USART_CR3 register.
            Note: If the USART does not support the auto baud rate feature, this bit is reserved and kept at reset value.</description>
            <name>ABRE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Auto baud rate flag
            This bit is set by hardware when the automatic baud rate has been set (RXFNE is also set, generating an interrupt if RXFNEIE = 1) or when the auto baud rate operation was completed without success (ABREÂ =Â 1) (ABRE, RXFNE and FE are also set in this case)
            It is cleared by software, in order to request a new auto baud rate detection, by writing 1 to the ABRRQ in the USART_RQR register.
            Note: If the USART does not support the auto baud rate feature, this bit is reserved and kept at reset value.</description>
            <name>ABRF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Busy flag
            This bit is set and reset by hardware. It is active when a communication is ongoing on the RX line (successful start bit detected). It is reset at the end of the reception (successful or not).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART is idle (no reception)</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Reception on going</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>BUSY</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Character match flag
            This bit is set by hardware, when a the character defined by ADD[7:0] is received. It is cleared by software, writing 1 to the CMCF in the USART_ICR register.
            An interrupt is generated if CMIEÂ =Â 1in the USART_CR1 register.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No Character match detected</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Character Match detected</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CMF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Send break flag
            This bit indicates that a send break character was requested. It is set by software, by writing 1 to the SBKRQ bit in the USART_CR3 register. It is automatically reset by hardware during the stop bit of break transmission.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Break character transmitted</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Break character requested by setting SBKRQ bit in USART_RQR register</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>SBKF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receiver wakeup from Mute mode
            This bit indicates if the USART is in Mute mode. It is cleared/set by hardware when a wakeup/mute sequence is recognized. The Mute mode control sequence (address or IDLE) is selected by the WAKE bit in the USART_CR1 register.
            When wakeup on IDLE mode is selected, this bit can only be set by software, writing 1 to the MMRQ bit in the USART_RQR register.
            Note: If the USART does not support the wakeup from Stop feature, this bit is reserved and kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receiver in active mode</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receiver in Mute mode</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RWU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Wakeup from low-power mode flag
            This bit is set by hardware, when a wakeup event is detected. The event is defined by the WUS bitfield. It is cleared by software, writing a 1 to the WUCF in the USART_ICR register.
            An interrupt is generated if WUFIEÂ =Â 1 in the USART_CR3 register.
            Note: When UESM is cleared, WUF flag is also cleared.
            If the USART does not support the wakeup from Stop feature, this bit is reserved and kept at reset value. Refer to .</description>
            <name>WUF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmit enable acknowledge flag
            This bit is set/reset by hardware, when the Transmit Enable value is taken into account by the USART.
            It can be used when an idle frame request is generated by writing TEÂ =Â 0, followed by TEÂ =Â 1 in the USART_CR1 register, in order to respect the TEÂ =Â 0 minimum period.</description>
            <name>TEACK</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receive enable acknowledge flag
            This bit is set/reset by hardware, when the Receive Enable value is taken into account by the USART.
            It can be used to verify that the USART is ready for reception before entering low-power mode.
            Note: If the USART does not support the wakeup from Stop feature, this bit is reserved and kept at reset value. Refer to .</description>
            <name>REACK</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>TXFIFO empty
            This bit is set by hardware when TXFIFO is empty. When the TXFIFO contains at least one data, this flag is cleared. The TXFE flag can also be set by writing 1 to the bit TXFRQ (bit 4) in the USART_RQR register.
            An interrupt is generated if the TXFEIE bit Â =Â 1 (bit 30) in the USART_CR1 register.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>TXFIFO not empty.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>TXFIFO empty.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TXFE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RXFIFO full
            This bit is set by hardware when the number of received data corresponds to RXFIFOÂ sizeÂ +Â 1 (RXFIFO full + 1 data in the USART_RDR register.
            An interrupt is generated if the RXFFIE bit Â =Â 1 in the USART_CR1 register.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>RXFIFO not full.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>RXFIFO Full.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RXFF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmission complete before guard time flag
            This bit is set when the last data written in the USART_TDR has been transmitted correctly out of the shift register.
            It is set by hardware in Smartcard mode, if the transmission of a frame containing data is complete and if the smartcard did not send back any NACK. An interrupt is generated if TCBGTIEÂ =Â 1 in the USART_CR3 register.
            This bit is cleared by software, by writing 1 to the TCBGTCF in the USART_ICR register or by a write to the USART_TDR register.
            Note: If the USART does not support the Smartcard mode, this bit is reserved and kept at reset value. If the USART supports the Smartcard mode and the Smartcard mode is enabled, the TCBGT reset value is '1â. Refer to on pageÂ 835.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Transmission is not complete or transmission is complete unsuccessfully (i.e. a NACK is received from the card)</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Transmission is complete successfully (before Guard time completion and there is no NACK from the smart card).</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TCBGT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RXFIFO threshold flag
            This bit is set by hardware when the threshold programmed in RXFTCFG in USART_CR3 register is reached. This means that there are (RXFTCFG - 1) data in the Receive FIFO and one data in the USART_RDR register. An interrupt is generated if the RXFTIE bit Â =Â 1 (bit 27) in the USART_CR3 register.
            Note: When the RXFTCFG threshold is configured to '101â, RXFT flag is set if 16 data are available i.e. 15 data in the RXFIFO and 1 data in the USART_RDR. Consequently, the 17th received data does not cause an overrun error. The overrun error occurs after receiving the 18th data.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receive FIFO does not reach the programmed threshold.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receive FIFO reached the programmed threshold.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RXFT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>TXFIFO threshold flag
            This bit is set by hardware when the TXFIFO reaches the threshold programmed in TXFTCFG of USART_CR3 register i.e. the TXFIFO contains TXFTCFG empty locations. An interrupt is generated if the TXFTIE bit Â =Â 1 (bit 31) in the USART_CR3 register.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>TXFIFO does not reach the programmed threshold.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>TXFIFO reached the programmed threshold.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TXFT</name>
          </field>
        </fields>
        <name>ISR_FIFO_ENABLED</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x8000C0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-only</access>
        <addressOffset>0x1C</addressOffset>
        <description>Interrupt &amp; status
                  register</description>
        <displayName>ISR_FIFO_DISABLED</displayName>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Parity error
            This bit is set by hardware when a parity error occurs in receiver mode. It is cleared by software, writing 1 to the PECF in the USART_ICR register.
            An interrupt is generated if PEIE = 1 in the USART_CR1 register.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No parity error</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Parity error</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>PE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Framing error
            This bit is set by hardware when a de-synchronization, excessive noise or a break character is detected. It is cleared by software, writing 1 to the FECF bit in the USART_ICR register.
            When transmitting data in Smartcard mode, this bit is set when the maximum number of transmit attempts is reached without success (the card NACKs the data frame).
            An interrupt is generated if EIEÂ =Â 1 in the USART_CR1 register.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No Framing error is detected</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Framing error or break character is detected</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>FE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Noise detection flag
            This bit is set by hardware when noise is detected on a received frame. It is cleared by software, writing 1 to the NECF bit in the USART_ICR register.
            Note: This bit does not generate an interrupt as it appears at the same time as the RXNE bit which itself generates an interrupt. An interrupt is generated when the NE flag is set during multi buffer communication if the EIE bit is set.
            When the line is noise-free, the NE flag can be disabled by programming the ONEBIT bit to 1 to increase the USART tolerance to deviations (Refer to Tolerance of the USART receiver to clock deviation on pageÂ 861).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No noise is detected</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Noise is detected</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>NE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Overrun error
            This bit is set by hardware when the data currently being received in the shift register is
            ready to be transferred into the USART_RDR register while RXNEÂ =Â 1. It is cleared by a software, writing 1 to the ORECF, in the USART_ICR register.
            An interrupt is generated if RXNEIEÂ =Â 1 or EIE Â =Â  1 in the USART_CR1 register.
            Note: When this bit is set, the USART_RDR register content is not lost but the shift register is overwritten. An interrupt is generated if the ORE flag is set during multi buffer communication if the EIE bit is set.
            This bit is permanently forced to 0 (no overrun detection) when the bit OVRDIS is set in the USART_CR3 register.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No overrun error</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Overrun error is detected</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>ORE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Idle line detected
            This bit is set by hardware when an Idle Line is detected. An interrupt is generated if IDLEIEÂ =Â 1 in the USART_CR1 register. It is cleared by software, writing 1 to the IDLECF in the USART_ICR register.
            Note: The IDLE bit is not set again until the RXNE bit has been set (i.e. a new idle line occurs).
            If Mute mode is enabled (MMEÂ =Â 1), IDLE is set if the USART is not mute (RWUÂ =Â 0), whatever the Mute mode selected by the WAKE bit. If RWUÂ =Â 1, IDLE is not set.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No Idle line is detected</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Idle line is detected</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>IDLE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Read data register not empty
            RXNE bit is set by hardware when the content of the USART_RDR shift register has been transferred to the USART_RDR register. It is cleared by reading from the USART_RDR register. The RXNE flag can also be cleared by writing 1 to the RXFRQ in the USART_RQR register.
            An interrupt is generated if RXNEIEÂ =Â 1 in the USART_CR1 register.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Data is not received</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Received data is ready to be read.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RXNE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmission complete
            This bit indicates that the last data written in the USART_TDR has been transmitted out of the shift register.
            It is set by hardware when the transmission of a frame containing data is complete and when TXE is set.
            An interrupt is generated if TCIEÂ =Â 1 in the USART_CR1 register.
            TC bit is is cleared by software, by writing 1 to the TCCF in the USART_ICR register or by a write to the USART_TDR register.
            Note: If TE bit is reset and no transmission is on going, the TC bit is set immediately.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Transmission is not complete</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Transmission is complete</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TC</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmit data register empty
            TXE is set by hardware when the content of the USART_TDR register has been transferred into the shift register. It is cleared by writing to the USART_TDR register. The TXE flag can also be set by writing 1 to the TXFRQ in the USART_RQR register, in order to discard the data (only in Smartcard TÂ =Â 0 mode, in case of transmission failure).
            An interrupt is generated if the TXEIE bit Â =Â 1 in the USART_CR1 register.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Data register full</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Data register not full</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TXE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>LIN break detection flag
            This bit is set by hardware when the LIN break is detected. It is cleared by software, by writing 1 to the LBDCF in the USART_ICR.
            An interrupt is generated if LBDIE = 1 in the USART_CR2 register.
            Note: If the USART does not support LIN mode, this bit is reserved and kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>LIN Break not detected</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>LIN break detected</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>LBDF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>CTS interrupt flag
            This bit is set by hardware when the nCTS input toggles, if the CTSE bit is set. It is cleared by software, by writing 1 to the CTSCF bit in the USART_ICR register.
            An interrupt is generated if CTSIEÂ =Â 1 in the USART_CR3 register.
            Note: If the hardware flow control feature is not supported, this bit is reserved and kept at reset value.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No change occurred on the nCTS status line</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>A change occurred on the nCTS status line</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CTSIF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>CTS flag
            This bit is set/reset by hardware. It is an inverted copy of the status of the nCTS input pin.
            Note: If the hardware flow control feature is not supported, this bit is reserved and kept at reset value.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>nCTS line set</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>nCTS line reset</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CTS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receiver timeout
            This bit is set by hardware when the timeout value, programmed in the RTOR register has lapsed, without any communication. It is cleared by software, writing 1 to the RTOCF bit in the USART_ICR register.
            An interrupt is generated if RTOIEÂ =Â 1 in the USART_CR2 register.
            In Smartcard mode, the timeout corresponds to the CWT or BWT timings.
            Note: If a time equal to the value programmed in RTOR register separates 2 characters, RTOF is not set. If this time exceeds this value + 2 sample times (2/16 or 2/8, depending on the oversampling method), RTOF flag is set.
            The counter counts even if RE = 0 but RTOF is set only when RE = 1. If the timeout has already elapsed when RE is set, then RTOF is set.
            If the USART does not support the Receiver timeout feature, this bit is reserved and kept at reset value.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Timeout value not reached</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Timeout value reached without any data reception</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RTOF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>End of block flag
            This bit is set by hardware when a complete block has been received (for example TÂ =Â 1 Smartcard mode). The detection is done when the number of received bytes (from the start of the block, including the prologue) is equal or greater than BLEN + 4.
            An interrupt is generated if the EOBIEÂ =Â 1 in the USART_CR2 register.
            It is cleared by software, writing 1 to the EOBCF in the USART_ICR register.
            Note: If Smartcard mode is not supported, this bit is reserved and kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>End of Block not reached</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>End of Block (number of characters) reached</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>EOBF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI slave underrun error flag
            In slave transmission mode, this flag is set when the first clock pulse for data transmission appears while the software has not yet loaded any value into USART_TDR. This flag is reset by setting UDRCF bit in the USART_ICR register.
            Note: If the USART does not support the SPI slave mode, this bit is reserved and kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No underrun error</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>underrun error</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>UDR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Auto baud rate error
            This bit is set by hardware if the baud rate measurement failed (baud rate out of range or character comparison failed)
            It is cleared by software, by writing 1 to the ABRRQ bit in the USART_CR3 register.
            Note: If the USART does not support the auto baud rate feature, this bit is reserved and kept at reset value.</description>
            <name>ABRE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Auto baud rate flag
            This bit is set by hardware when the automatic baud rate has been set (RXNE is also set, generating an interrupt if RXNEIE = 1) or when the auto baud rate operation was completed without success (ABREÂ =Â 1) (ABRE, RXNE and FE are also set in this case)
            It is cleared by software, in order to request a new auto baud rate detection, by writing 1 to the ABRRQ in the USART_RQR register.
            Note: If the USART does not support the auto baud rate feature, this bit is reserved and kept at reset value.</description>
            <name>ABRF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Busy flag
            This bit is set and reset by hardware. It is active when a communication is ongoing on the RX line (successful start bit detected). It is reset at the end of the reception (successful or not).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART is idle (no reception)</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Reception on going</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>BUSY</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Character match flag
            This bit is set by hardware, when a the character defined by ADD[7:0] is received. It is cleared by software, writing 1 to the CMCF in the USART_ICR register.
            An interrupt is generated if CMIEÂ =Â 1in the USART_CR1 register.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No Character match detected</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Character Match detected</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CMF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Send break flag
            This bit indicates that a send break character was requested. It is set by software, by writing 1 to the SBKRQ bit in the USART_CR3 register. It is automatically reset by hardware during the stop bit of break transmission.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Break character transmitted</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Break character requested by setting SBKRQ bit in USART_RQR register</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>SBKF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receiver wakeup from Mute mode
            This bit indicates if the USART is in Mute mode. It is cleared/set by hardware when a wakeup/mute sequence is recognized. The Mute mode control sequence (address or IDLE) is selected by the WAKE bit in the USART_CR1 register.
            When wakeup on IDLE mode is selected, this bit can only be set by software, writing 1 to the MMRQ bit in the USART_RQR register.
            Note: If the USART does not support the wakeup from Stop feature, this bit is reserved and kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receiver in active mode</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receiver in Mute mode</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RWU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Wakeup from low-power mode flag
            This bit is set by hardware, when a wakeup event is detected. The event is defined by the WUS bitfield. It is cleared by software, writing a 1 to the WUCF in the USART_ICR register.
            An interrupt is generated if WUFIEÂ =Â 1 in the USART_CR3 register.
            Note: When UESM is cleared, WUF flag is also cleared.
            If the USART does not support the wakeup from Stop feature, this bit is reserved and kept at reset value. Refer to .</description>
            <name>WUF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmit enable acknowledge flag
            This bit is set/reset by hardware, when the Transmit Enable value is taken into account by the USART.
            It can be used when an idle frame request is generated by writing TEÂ =Â 0, followed by TEÂ =Â 1 in the USART_CR1 register, in order to respect the TEÂ =Â 0 minimum period.</description>
            <name>TEACK</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receive enable acknowledge flag
            This bit is set/reset by hardware, when the Receive Enable value is taken into account by the USART.
            It can be used to verify that the USART is ready for reception before entering low-power mode.
            Note: If the USART does not support the wakeup from Stop feature, this bit is reserved and kept at reset value. Refer to .</description>
            <name>REACK</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmission complete before guard time flag
            This bit is set when the last data written in the USART_TDR has been transmitted correctly out of the shift register.
            It is set by hardware in Smartcard mode, if the transmission of a frame containing data is complete and if the smartcard did not send back any NACK. An interrupt is generated if TCBGTIEÂ =Â 1 in the USART_CR3 register.
            This bit is cleared by software, by writing 1 to the TCBGTCF in the USART_ICR register or by a write to the USART_TDR register.
            Note: If the USART does not support the Smartcard mode, this bit is reserved and kept at reset value. If the USART supports the Smartcard mode and the Smartcard mode is enabled, the TCBGT reset value is '1â. Refer to on pageÂ 835.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Transmission is not complete or transmission is complete unsuccessfully (i.e. a NACK is received from the card)</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Transmission is complete successfully (before Guard time completion and there is no NACK from the smart card).</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TCBGT</name>
          </field>
        </fields>
        <name>ISR_FIFO_DISABLED</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xC0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>write-only</access>
        <addressOffset>0x20</addressOffset>
        <description>Interrupt flag clear register</description>
        <displayName>ICR</displayName>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Parity error clear flag
            Writing 1 to this bit clears the PE flag in the USART_ISR register.</description>
            <name>PECF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Framing error clear flag
            Writing 1 to this bit clears the FE flag in the USART_ISR register.</description>
            <name>FECF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Noise detected clear flag
            Writing 1 to this bit clears the NE flag in the USART_ISR register.</description>
            <name>NECF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Overrun error clear flag
            Writing 1 to this bit clears the ORE flag in the USART_ISR register.</description>
            <name>ORECF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Idle line detected clear flag
            Writing 1 to this bit clears the IDLE flag in the USART_ISR register.</description>
            <name>IDLECF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>TXFIFO empty clear flag
            Writing 1 to this bit clears the TXFE flag in the USART_ISR register.</description>
            <name>TXFECF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmission complete clear flag
            Writing 1 to this bit clears the TC flag in the USART_ISR register.</description>
            <name>TCCF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmission complete before Guard time clear flag
            Writing 1 to this bit clears the TCBGT flag in the USART_ISR register.</description>
            <name>TCBGTCF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>LIN break detection clear flag
            Writing 1 to this bit clears the LBDF flag in the USART_ISR register.
            Note: If LIN mode is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <name>LBDCF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>CTS clear flag
            Writing 1 to this bit clears the CTSIF flag in the USART_ISR register.
            Note: If the hardware flow control feature is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <name>CTSCF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receiver timeout clear flag
            Writing 1 to this bit clears the RTOF flag in the USART_ISR register.
            Note: If the USART does not support the Receiver timeout feature, this bit is reserved and must be kept at reset value. Refer to pageÂ 835.</description>
            <name>RTOCF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>End of block clear flag
            Writing 1 to this bit clears the EOBF flag in the USART_ISR register.
            Note: If the USART does not support Smartcard mode, this bit is reserved and must be kept at reset value. Refer to .</description>
            <name>EOBCF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI slave underrun clear flag
            Writing 1 to this bit clears the UDRF flag in the USART_ISR register.
            Note: If the USART does not support SPI slave mode, this bit is reserved and must be kept at reset value. Refer to</description>
            <name>UDRCF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Character match clear flag
            Writing 1 to this bit clears the CMF flag in the USART_ISR register.</description>
            <name>CMCF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Wakeup from low-power mode clear flag
            Writing 1 to this bit clears the WUF flag in the USART_ISR register.
            Note: If the USART does not support the wakeup from Stop feature, this bit is reserved and must be kept at reset value. Refer to pageÂ 835.</description>
            <name>WUCF</name>
          </field>
        </fields>
        <name>ICR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-only</access>
        <addressOffset>0x24</addressOffset>
        <description>Receive data register</description>
        <displayName>RDR</displayName>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>Receive data value</description>
            <name>RDR</name>
          </field>
        </fields>
        <name>RDR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x28</addressOffset>
        <description>Transmit data register</description>
        <displayName>TDR</displayName>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>Transmit data value</description>
            <name>TDR</name>
          </field>
        </fields>
        <name>TDR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x2C</addressOffset>
        <description>Prescaler register</description>
        <displayName>PRESC</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Clock prescaler
            The USART input clock can be divided by a prescaler factor:
            Remaining combinations: Reserved
            Note: When PRESCALER is programmed with a value different of the allowed ones, programmed prescaler value is 1011 i.e. input clock divided by 256.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>input clock not divided</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>input clock divided by 2</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>input clock divided by 4</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>input clock divided by 6</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>input clock divided by 8</description>
                <name>B_0x4</name>
                <value>0x4</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>input clock divided by 10</description>
                <name>B_0x5</name>
                <value>0x5</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>input clock divided by 12</description>
                <name>B_0x6</name>
                <value>0x6</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>input clock divided by 16</description>
                <name>B_0x7</name>
                <value>0x7</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>input clock divided by 32</description>
                <name>B_0x8</name>
                <value>0x8</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>input clock divided by 64</description>
                <name>B_0x9</name>
                <value>0x9</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>input clock divided by 128</description>
                <name>B_0xA</name>
                <value>0xA</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>input clock divided by 256</description>
                <name>B_0xB</name>
                <value>0xB</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>PRESCALER</name>
          </field>
        </fields>
        <name>PRESC</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <resetMask>0xFFFFFFFF</resetMask>
    <resetValue>0x0</resetValue>
    <size>0x20</size>
  </peripheral>
</peripherals>
<peripherals>
  <peripheral>
    <addressBlock>
      <offset>0x0</offset>
      <size>0x400</size>
      <usage>registers</usage>
    </addressBlock>
    <baseAddress>0x40004400</baseAddress>
    <derivedFrom>USART1</derivedFrom>
    <description>Universal synchronous asynchronous receiver
          transmitter</description>
    <groupName>USART</groupName>
    <interrupts>
      <interrupt>
        <name>USART2</name>
        <value>0x1C</value>
      </interrupt>
    </interrupts>
    <name>USART2</name>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x0</addressOffset>
        <description>Control register 1</description>
        <displayName>CR1_FIFO_ENABLED</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>USART enable
            When this bit is cleared, the USART prescalers and outputs are stopped immediately, and all current operations are discarded. The USART configuration is kept, but all the USART_ISR status flags are reset. This bit is set and cleared by software.
            Note: To enter low-power mode without generating errors on the line, the TE bit must be previously reset and the software must wait for the TC bit in the USART_ISR to be set before resetting the UE bit.
            The DMA requests are also reset when UE = 0 so the DMA channel must be disabled before resetting the UE bit.
            In Smartcard mode, (SCEN = 1), the SCLK is always available when CLKEN = 1, regardless of the UE bit value.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART prescaler and outputs disabled, low-power mode</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>UE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>USART enable in low-power mode
            When this bit is cleared, the USART cannot wake up the MCU from low-power mode.
            When this bit is set, the USART can wake up the MCU from low-power mode.
            This bit is set and cleared by software.
            Note: It is recommended to set the UESM bit just before entering low-power mode and clear it when exit from low-power mode.
            If the USART does not support the wakeup from Stop feature, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART not able to wake up the MCU from low-power mode.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART able to wake up the MCU from low-power mode. </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>UESM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receiver enable
            This bit enables the receiver. It is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receiver is disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receiver is enabled and begins searching for a start bit</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmitter enable
            This bit enables the transmitter. It is set and cleared by software.
            Note: During transmission, a low pulse on the TE bit ('0â followed by '1â) sends a preamble (idle line) after the current word, except in Smartcard mode. In order to generate an idle character, the TE must not be immediately written to '1â. To ensure the required duration, the software can poll the TEACK bit in the USART_ISR register.
            In Smartcard mode, when TE is set, there is a 1 bit-time delay before the transmission starts.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Transmitter is disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Transmitter is enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>IDLE interrupt enable
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated whenever IDLE = 1 in the USART_ISR register  </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>IDLEIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RXFIFO not empty interrupt enable
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated whenever ORE = 1 or RXFNE = 1 in the USART_ISR register    </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RXFNEIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmission complete interrupt enable
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated whenever TC = 1 in the USART_ISR register  </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TCIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>TXFIFO not full interrupt enable
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated whenever TXFNF =1 in the USART_ISR register</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TXFNFIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>PE interrupt enable
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated whenever PE = 1 in the USART_ISR register  </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>PEIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Parity selection
            This bit selects the odd or even parity when the parity generation/detection is enabled (PCE bit set). It is set and cleared by software. The parity is selected after the current byte.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Even parity</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Odd parity</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>PS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Parity control enable
            This bit selects the hardware parity control (generation and detection). When the parity control is enabled, the computed parity is inserted at the MSB position (9th bit if MÂ =Â 1; 8th bit if MÂ =Â 0) and the parity is checked on the received data. This bit is set and cleared by software. Once it is set, PCE is active after the current byte (in reception and in transmission).
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Parity control disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Parity control enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>PCE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receiver wakeup method
            This bit determines the USART wakeup method from Mute mode. It is set or cleared by software.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Idle line</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Address mark</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>WAKE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Word length
            This bit is used in conjunction with bit 28 (M1) to determine the word length. It is set or cleared by software (refer to bit 28 (M1)description).
            This bit can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <name>M0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Mute mode enable
            This bit enables the USART Mute mode function. When set, the USART can switch between active and Mute mode, as defined by the WAKE bit. It is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receiver in active mode permanently</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receiver can switch between Mute mode and active mode. </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>MME</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Character match interrupt enable
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated when the CMF bit is set in the USART_ISR register.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CMIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Oversampling mode
            This bit can only be written when the USART is disabled (UEÂ =Â 0).
            Note: In LIN, IrDA and Smartcard modes, this bit must be kept cleared.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Oversampling by 16</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Oversampling by 8</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>OVER8</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Driver Enable deassertion time
            This 5-bit value defines the time between the end of the last stop bit, in a transmitted message, and the de-activation of the DE (Driver Enable) signal. It is expressed in sample time units (1/8 or 1/16 bit time, depending on the oversampling rate).
            If the USART_TDR register is written during the DEDT time, the new data is transmitted only when the DEDT and DEAT times have both elapsed.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If the Driver Enable feature is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <name>DEDT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Driver Enable assertion time
            This 5-bit value defines the time between the activation of the DE (Driver Enable) signal and the beginning of the start bit. It is expressed in sample time units (1/8 or 1/16 bit time, depending on the oversampling rate).
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If the Driver Enable feature is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <name>DEAT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receiver timeout interrupt enable
            This bit is set and cleared by software.
            Note: If the USART does not support the Receiver timeout feature, this bit is reserved and must be kept at reset value. .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated when the RTOF bit is set in the USART_ISR register.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RTOIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>End of Block interrupt enable
            This bit is set and cleared by software.
            Note: If the USART does not support Smartcard mode, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated when the EOBF flag is set in the USART_ISR register</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>EOBIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Word length
            This bit must be used in conjunction with bit 12 (M0) to determine the word length. It is set or cleared by software.
            M[1:0] = '00â: 1 start bit, 8 Data bits, n Stop bit
            M[1:0] = '01â: 1 start bit, 9 Data bits, n Stop bit
            M[1:0] = '10â: 1 start bit, 7 Data bits, n Stop bit
            This bit can only be written when the USART is disabled (UEÂ =Â 0).
            Note: In 7-bits data length mode, the Smartcard mode, LIN master mode and Auto baud rate (0x7F and 0x55 frames detection) are not supported.</description>
            <name>M1</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>FIFO mode enable
            This bit is set and cleared by software.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).
            Note: FIFO mode can be used on standard UART communication, in SPI master/slave mode and in Smartcard modes only. It must not be enabled in IrDA and LIN modes.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>FIFO mode is disabled.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>FIFO mode is enabled.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>FIFOEN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>TXFIFO empty interrupt enable
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated when TXFE = 1 in the USART_ISR register  </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TXFEIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RXFIFO Full interrupt enable
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated when RXFF = 1 in the USART_ISR register  </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RXFFIE</name>
          </field>
        </fields>
        <name>CR1_FIFO_ENABLED</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x0</addressOffset>
        <description>Control register 1</description>
        <displayName>CR1_FIFO_DISABLED</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>USART enable
            When this bit is cleared, the USART prescalers and outputs are stopped immediately, and all current operations are discarded. The USART configuration is kept, but all the USART_ISR status flags are reset. This bit is set and cleared by software.
            Note: To enter low-power mode without generating errors on the line, the TE bit must be previously reset and the software must wait for the TC bit in the USART_ISR to be set before resetting the UE bit.
            The DMA requests are also reset when UE = 0 so the DMA channel must be disabled before resetting the UE bit.
            In Smartcard mode, (SCEN = 1), the SCLK is always available when CLKEN = 1, regardless of the UE bit value.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART prescaler and outputs disabled, low-power mode</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>UE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>USART enable in low-power mode
            When this bit is cleared, the USART cannot wake up the MCU from low-power mode.
            When this bit is set, the USART can wake up the MCU from low-power mode.
            This bit is set and cleared by software.
            Note: It is recommended to set the UESM bit just before entering low-power mode and clear it when exit from low-power mode.
            If the USART does not support the wakeup from Stop feature, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART not able to wake up the MCU from low-power mode.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART able to wake up the MCU from low-power mode. </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>UESM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receiver enable
            This bit enables the receiver. It is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receiver is disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receiver is enabled and begins searching for a start bit</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmitter enable
            This bit enables the transmitter. It is set and cleared by software.
            Note: During transmission, a low pulse on the TE bit ('0â followed by '1â) sends a preamble (idle line) after the current word, except in Smartcard mode. In order to generate an idle character, the TE must not be immediately written to '1â. To ensure the required duration, the software can poll the TEACK bit in the USART_ISR register.
            In Smartcard mode, when TE is set, there is a 1 bit-time delay before the transmission starts.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Transmitter is disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Transmitter is enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>IDLE interrupt enable
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated whenever IDLE = 1 in the USART_ISR register  </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>IDLEIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receive data register not empty
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated whenever ORE = 1 or RXNE = 1 in the USART_ISR register    </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RXNEIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmission complete interrupt enable
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated whenever TC = 1 in the USART_ISR register  </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TCIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmit data register empty
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated whenever TXE =1 in the USART_ISR register</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TXEIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>PE interrupt enable
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated whenever PE = 1 in the USART_ISR register  </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>PEIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Parity selection
            This bit selects the odd or even parity when the parity generation/detection is enabled (PCE bit set). It is set and cleared by software. The parity is selected after the current byte.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Even parity</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Odd parity</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>PS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Parity control enable
            This bit selects the hardware parity control (generation and detection). When the parity control is enabled, the computed parity is inserted at the MSB position (9th bit if MÂ =Â 1; 8th bit if MÂ =Â 0) and the parity is checked on the received data. This bit is set and cleared by software. Once it is set, PCE is active after the current byte (in reception and in transmission).
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Parity control disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Parity control enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>PCE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receiver wakeup method
            This bit determines the USART wakeup method from Mute mode. It is set or cleared by software.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Idle line</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Address mark</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>WAKE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Word length
            This bit is used in conjunction with bit 28 (M1) to determine the word length. It is set or cleared by software (refer to bit 28 (M1)description).
            This bit can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <name>M0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Mute mode enable
            This bit enables the USART Mute mode function. When set, the USART can switch between active and Mute mode, as defined by the WAKE bit. It is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receiver in active mode permanently</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receiver can switch between Mute mode and active mode. </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>MME</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Character match interrupt enable
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated when the CMF bit is set in the USART_ISR register.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CMIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Oversampling mode
            This bit can only be written when the USART is disabled (UEÂ =Â 0).
            Note: In LIN, IrDA and Smartcard modes, this bit must be kept cleared.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Oversampling by 16</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Oversampling by 8</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>OVER8</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Driver Enable deassertion time
            This 5-bit value defines the time between the end of the last stop bit, in a transmitted message, and the de-activation of the DE (Driver Enable) signal. It is expressed in sample time units (1/8 or 1/16 bit time, depending on the oversampling rate).
            If the USART_TDR register is written during the DEDT time, the new data is transmitted only when the DEDT and DEAT times have both elapsed.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If the Driver Enable feature is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <name>DEDT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Driver Enable assertion time
            This 5-bit value defines the time between the activation of the DE (Driver Enable) signal and the beginning of the start bit. It is expressed in sample time units (1/8 or 1/16 bit time, depending on the oversampling rate).
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If the Driver Enable feature is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <name>DEAT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receiver timeout interrupt enable
            This bit is set and cleared by software.
            Note: If the USART does not support the Receiver timeout feature, this bit is reserved and must be kept at reset value. .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated when the RTOF bit is set in the USART_ISR register.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RTOIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>End of Block interrupt enable
            This bit is set and cleared by software.
            Note: If the USART does not support Smartcard mode, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated when the EOBF flag is set in the USART_ISR register</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>EOBIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Word length
            This bit must be used in conjunction with bit 12 (M0) to determine the word length. It is set or cleared by software.
            M[1:0] = '00â: 1 start bit, 8 Data bits, n Stop bit
            M[1:0] = '01â: 1 start bit, 9 Data bits, n Stop bit
            M[1:0] = '10â: 1 start bit, 7 Data bits, n Stop bit
            This bit can only be written when the USART is disabled (UEÂ =Â 0).
            Note: In 7-bits data length mode, the Smartcard mode, LIN master mode and Auto baud rate (0x7F and 0x55 frames detection) are not supported.</description>
            <name>M1</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>FIFO mode enable
            This bit is set and cleared by software.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).
            Note: FIFO mode can be used on standard UART communication, in SPI master/slave mode and in Smartcard modes only. It must not be enabled in IrDA and LIN modes.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>FIFO mode is disabled.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>FIFO mode is enabled.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>FIFOEN</name>
          </field>
        </fields>
        <name>CR1_FIFO_DISABLED</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x4</addressOffset>
        <description>Control register 2</description>
        <displayName>CR2</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Synchronous Slave mode enable
            When the SLVEN bit is set, the synchronous slave mode is enabled.
            Note: When SPI slave mode is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Slave mode disabled.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Slave mode enabled.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>SLVEN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When the DIS_NSS bit is set, the NSS pin input is ignored.
            Note: When SPI slave mode is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>SPI slave selection depends on NSS input pin.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>SPI slave is always selected and NSS input pin is ignored.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>DIS_NSS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>7-bit Address Detection/4-bit Address Detection
            This bit is for selection between 4-bit address detection or 7-bit address detection.
            This bit can only be written when the USART is disabled (UEÂ =Â 0)
            Note: In 7-bit and 9-bit data modes, the address detection is done on 6-bit and 8-bit address (ADD[5:0] and ADD[7:0]) respectively.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>4-bit address detection</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>7-bit address detection (in 8-bit data mode)</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>ADDM7</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>LIN break detection length
            This bit is for selection between 11 bit or 10 bit break detection.
            This bit can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If LIN mode is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>10-bit break detection</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>11-bit break detection</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>LBDL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>LIN break detection interrupt enable
            Break interrupt mask (break detection using break delimiter).
            Note: If LIN mode is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt is inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>An interrupt is generated whenever LBDF = 1 in the USART_ISR register  </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>LBDIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Last bit clock pulse
            This bit is used to select whether the clock pulse associated with the last data bit transmitted (MSB) has to be output on the SCLK pin in synchronous mode.
            The last bit is the 7th or 8th or 9th data bit transmitted depending on the 7 or 8 or 9 bit format selected by the M bit in the USART_CR1 register.
            This bit can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If synchronous mode is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>The clock pulse of the last data bit is not output to the SCLK pin</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>The clock pulse of the last data bit is output to the SCLK pin</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>LBCL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Clock phase
            This bit is used to select the phase of the clock output on the SCLK pin in synchronous mode. It works in conjunction with the CPOL bit to produce the desired clock/data relationship (see  and )
            This bit can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If synchronous mode is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>The first clock transition is the first data capture edge</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>The second clock transition is the first data capture edge</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CPHA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Clock polarity
            This bit enables the user to select the polarity of the clock output on the SCLK pin in synchronous mode. It works in conjunction with the CPHA bit to produce the desired clock/data relationship
            This bit can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If synchronous mode is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Steady low value on SCLK pin outside transmission window</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Steady high value on SCLK pin outside transmission window</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CPOL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Clock enable
            This bit enables the user to enable the SCLK pin.
            This bit can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If neither synchronous mode nor Smartcard mode is supported, this bit is reserved and must be kept at reset value. Refer to .
            In Smartcard mode, in order to provide correctly the SCLK clock to the smartcard, the steps below must be respected:
            UE = 0
            SCEN = 1
            GTPR configuration
            CLKEN= 1
            UE = 1</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>SCLK pin disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>SCLK pin enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CLKEN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>stop bits
            These bits are used for programming the stop bits.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>1 stop bit</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>0.5 stop bit.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>2 stop bits</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>1.5 stop bits</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>STOP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>LIN mode enable
            This bit is set and cleared by software.
            The LIN mode enables the capability to send LIN synchronous breaks (13 low bits) using the SBKRQ bit in the USART_CR1 register, and to detect LIN Sync breaks.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If the USART does not support LIN mode, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>LIN mode disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>LIN mode enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>LINEN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Swap TX/RX pins
            This bit is set and cleared by software.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>TX/RX pins are used as defined in standard pinout</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>The TX and RX pins functions are swapped. This enables to work in the case of a cross-wired connection to another UART. </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>SWAP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RX pin active level inversion
            This bit is set and cleared by software.
            This enables the use of an external inverter on the RX line.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>RX pin signal works using the standard logic levels (VDD =1/idle, Gnd = 0/mark)   </description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>RX pin signal values are inverted (VDD =0/mark, Gnd = 1/idle).   </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RXINV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>TX pin active level inversion
            This bit is set and cleared by software.
            This enables the use of an external inverter on the TX line.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>TX pin signal works using the standard logic levels (VDD =1/idle, Gnd = 0/mark)   </description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>TX pin signal values are inverted (VDD =0/mark, Gnd = 1/idle).   </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TXINV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Binary data inversion
            This bit is set and cleared by software.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Logical data from the data register are send/received in positive/direct logic. (1 = H, 0 = L)     </description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Logical data from the data register are send/received in negative/inverse logic. (1 = L, 0 = H).     The parity bit is also inverted.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>DATAINV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Most significant bit first
            This bit is set and cleared by software.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>data is transmitted/received with data bit 0 first, following the start bit. </description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>data is transmitted/received with the MSB (bit 7/8) first, following the start bit. </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>MSBFIRST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Auto baud rate enable
            This bit is set and cleared by software.
            Note: If the USART does not support the auto baud rate feature, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Auto baud rate detection is disabled. </description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Auto baud rate detection is enabled. </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>ABREN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Auto baud rate mode
            These bits are set and cleared by software.
            This bitfield can only be written when ABREN = 0 or the USART is disabled (UEÂ =Â 0).
            Note: If DATAINVÂ =Â 1 and/or MSBFIRSTÂ =Â 1 the patterns must be the same on the line, for example 0xAA for MSBFIRST)
            If the USART does not support the auto baud rate feature, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Measurement of the start bit is used to detect the baud rate. </description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Falling edge to falling edge measurement (the received frame must start with a single bit = 1 and Frame = Start10xxxxxx)</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>0x7F frame detection.</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>0x55 frame detection</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>ABRMOD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receiver timeout enable
            This bit is set and cleared by software.
            When this feature is enabled, the RTOF flag in the USART_ISR register is set if the RX line is idle (no reception) for the duration programmed in the RTOR (receiver timeout register).
            Note: If the USART does not support the Receiver timeout feature, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receiver timeout feature disabled. </description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receiver timeout feature enabled. </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RTOEN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>Address of the USART node
            ADD[7:4]:
            These bits give the address of the USART node or a character code to be recognized.
            They are used to wake up the MCU with 7-bit address mark detection in multiprocessor communication during Mute mode or low-power mode. The MSB of the character sent by the transmitter should be equal to 1. They can also be used for character detection during normal reception, Mute mode inactive (for example, end of block detection in ModBus protocol). In this case, the whole received character (8-bit) is compared to the ADD[7:0] value and CMF flag is set on match.
            These bits can only be written when reception is disabled (RE = 0) or the USART is disabled (UEÂ =Â 0).
            ADD[3:0]:
            These bits give the address of the USART node or a character code to be recognized.
            They are used for wakeup with address mark detection, in multiprocessor communication during Mute mode or low-power mode.
            These bits can only be written when reception is disabled (RE = 0) or the USART is disabled (UEÂ =Â 0).</description>
            <name>ADD</name>
          </field>
        </fields>
        <name>CR2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x8</addressOffset>
        <description>Control register 3</description>
        <displayName>CR3</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Error interrupt enable
            Error Interrupt Enable Bit is required to enable interrupt generation in case of a framing error, overrun error noise flag or SPI slave underrun error (FEÂ =Â 1 or OREÂ =Â 1 or NEÂ =Â 1 or UDR = 1 in the USART_ISR register).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>interrupt generated when FE = 1 or ORE = 1 or NE = 1 or UDR = 1 (in SPI slave mode) in       the USART_ISR register.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>EIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>IrDA mode enable
            This bit is set and cleared by software.
            This bit can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If IrDA mode is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>IrDA disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>IrDA enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>IREN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>IrDA low-power
            This bit is used for selecting between normal and low-power IrDA modes
            This bit can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If IrDA mode is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Normal mode</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Low-power mode</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>IRLP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Half-duplex selection
            Selection of Single-wire Half-duplex mode
            This bit can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Half duplex mode is not selected</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Half duplex mode is selected </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>HDSEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Smartcard NACK enable
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If the USART does not support Smartcard mode, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>NACK transmission in case of parity error is disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>NACK transmission during parity error is enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>NACK</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Smartcard mode enable
            This bit is used for enabling Smartcard mode.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If the USART does not support Smartcard mode, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Smartcard Mode disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Smartcard Mode enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>SCEN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>DMA enable receiver
            This bit is set/reset by software</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>DMA mode is enabled for reception</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>DMA mode is disabled for reception</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>DMAR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>DMA enable transmitter
            This bit is set/reset by software</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>DMA mode is enabled for transmission</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>DMA mode is disabled for transmission</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>DMAT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RTS enable
            This bit can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If the hardware flow control feature is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>RTS hardware flow control disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>RTS output enabled, data is only requested when there is space in the receive buffer. The transmission of data is expected to cease after the current character has been transmitted. The nRTS output is asserted (pulled to 0) when data can be received.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RTSE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>CTS enable
            This bit can only be written when the USART is disabled (UEÂ =Â 0)
            Note: If the hardware flow control feature is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>CTS hardware flow control disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CTS mode enabled, data is only transmitted when the nCTS input is asserted (tied to 0). If the nCTS input is deasserted while data is being transmitted, then the transmission is completed before stopping. If data is written into the data register while nCTS is asserted, the transmission is postponed until nCTS is asserted.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CTSE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>CTS interrupt enable
            Note: If the hardware flow control feature is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt is inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>An interrupt is generated whenever CTSIF = 1 in the USART_ISR register  </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CTSIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>One sample bit method enable
            This bit enables the user to select the sample method. When the one sample bit method is selected the noise detection flag (NE) is disabled.
            This bit can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Three sample bit method</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>One sample bit method</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>ONEBIT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Overrun Disable
            This bit is used to disable the receive overrun detection.
            the ORE flag is not set and the new received data overwrites the previous content of the USART_RDR register. When FIFO mode is enabled, the RXFIFO is bypassed and data is written directly in USART_RDR register. Even when FIFO management is enabled, the RXNE flag is to be used.
            This bit can only be written when the USART is disabled (UEÂ =Â 0).
            Note: This control bit enables checking the communication flow w/o reading the data</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Overrun Error Flag, ORE, is set when received data is not read before receiving new data. </description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Overrun functionality is disabled. If new data is received while the RXNE flag is still set</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>OVRDIS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>DMA Disable on Reception Error
            This bit can only be written when the USART is disabled (UE=0).
            Note: The reception errors are: parity error, framing error or noise error.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>DMA is not disabled in case of reception error. The corresponding error flag is set but RXNE is kept 0 preventing from overrun. As a consequence, the DMA request is not asserted, so the erroneous data is not transferred (no DMA request), but next correct received data is transferred (used for Smartcard mode).</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>DMA is disabled following a reception error. The corresponding error flag is set, as well as RXNE. The DMA request is masked until the error flag is cleared. This means that the software must first disable the DMA request (DMAR = 0) or clear RXNE/RXFNE is case FIFO mode is enabled) before clearing the error flag.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>DDRE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Driver enable mode
            This bit enables the user to activate the external transceiver control, through the DE signal.
            This bit can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If the Driver Enable feature is not supported, this bit is reserved and must be kept at reset value. .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>DE function is disabled. </description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>DE function is enabled. The DE signal is output on the RTS pin.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>DEM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Driver enable polarity selection
            This bit can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If the Driver Enable feature is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>DE signal is active high. </description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>DE signal is active low.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>DEP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Smartcard auto-retry count
            This bitfield specifies the number of retries for transmission and reception in Smartcard mode.
            In transmission mode, it specifies the number of automatic retransmission retries, before generating a transmission error (FE bit set).
            In reception mode, it specifies the number or erroneous reception trials, before generating a reception error (RXNE/RXFNE and PE bits set).
            This bitfield must be programmed only when the USART is disabled (UEÂ =Â 0).
            When the USART is enabled (UEÂ =Â 1), this bitfield may only be written to 0x0, in order to stop retransmission.
            Note: If Smartcard mode is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>retransmission disabled - No automatic retransmission in transmit mode. </description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>number of automatic retransmission attempts (before signaling error)</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>number of automatic retransmission attempts (before signaling error)</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>number of automatic retransmission attempts (before signaling error)</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>number of automatic retransmission attempts (before signaling error)</description>
                <name>B_0x4</name>
                <value>0x4</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>number of automatic retransmission attempts (before signaling error)</description>
                <name>B_0x5</name>
                <value>0x5</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>number of automatic retransmission attempts (before signaling error)</description>
                <name>B_0x6</name>
                <value>0x6</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>number of automatic retransmission attempts (before signaling error)</description>
                <name>B_0x7</name>
                <value>0x7</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>SCARCNT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Wakeup from low-power mode interrupt flag selection
            This bitfield specifies the event which activates the WUF (Wakeup from low-power mode flag).
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).
            If the USART does not support the wakeup from Stop feature, this bit is reserved and must be kept at reset value. Refer to pageÂ 835.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>WUF active on address match (as defined by ADD[7:0] and ADDM7)</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>WUF active on start bit detection</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>WUF active on RXNE/RXFNE. </description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>WUS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Wakeup from low-power mode interrupt enable
            This bit is set and cleared by software.
            Note: WUFIE must be set before entering in low-power mode.
            If the USART does not support the wakeup from Stop feature, this bit is reserved and must be kept at reset value. Refer to pageÂ 835.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated whenever WUF = 1 in the USART_ISR register  </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>WUFIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>TXFIFO threshold interrupt enable
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated when TXFIFO reaches the threshold programmed in TXFTCFG.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TXFTIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmission Complete before guard time, interrupt enable
            This bit is set and cleared by software.
            Note: If the USART does not support the Smartcard mode, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated whenever TCBGT=1 in the USART_ISR register</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TCBGTIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Receive FIFO threshold configuration
            Remaining combinations: Reserved</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receive FIFO reaches 1/8 of its depth</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receive FIFO reaches 1/4 of its depth</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receive FIFO reaches 1/2 of its depth</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receive FIFO reaches 3/4 of its depth</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receive FIFO reaches 7/8 of its depth</description>
                <name>B_0x4</name>
                <value>0x4</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receive FIFO becomes full</description>
                <name>B_0x5</name>
                <value>0x5</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RXFTCFG</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RXFIFO threshold interrupt enable
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated when Receive FIFO reaches the threshold programmed in RXFTCFG.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RXFTIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>TXFIFO threshold configuration
            Remaining combinations: Reserved</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>TXFIFO reaches 1/8 of its depth</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>TXFIFO reaches 1/4 of its depth</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>TXFIFO reaches 1/2 of its depth</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>TXFIFO reaches 3/4 of its depth</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>TXFIFO reaches 7/8 of its depth</description>
                <name>B_0x4</name>
                <value>0x4</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>TXFIFO becomes empty</description>
                <name>B_0x5</name>
                <value>0x5</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TXFTCFG</name>
          </field>
        </fields>
        <name>CR3</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0xC</addressOffset>
        <description>Baud rate register</description>
        <displayName>BRR</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>USART baud rate</description>
            <name>BRR</name>
          </field>
        </fields>
        <name>BRR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x10</addressOffset>
        <description>Guard time and prescaler
                  register</description>
        <displayName>GTPR</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>Prescaler value
            In IrDA low-power and normal IrDA mode:
            PSC[7:0] = IrDA Normal and Low-Power baud rate
            PSC[7:0] is used to program the prescaler for dividing the USART source clock to achieve the low-power frequency: the source clock is divided by the value given in the register (8 significant bits):
            In Smartcard mode:
            PSC[4:0]Â =Â Prescaler value
            PSC[4:0] is used to program the prescaler for dividing the USART source clock to provide the Smartcard clock. The value given in the register (5 significant bits) is multiplied by 2 to give the division factor of the source clock frequency:
            ...
            0010Â 0000: Divides the source clock by 32 (IrDA mode)
            ...
            1111Â 1111: Divides the source clock by 255 (IrDA mode)
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).
            Note: Bits [7:5] must be kept cleared if Smartcard mode is used.
            This bitfield is reserved and forced by hardware to '0â when the Smartcard and IrDA modes are not supported. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Reserved - do not program this value</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Divides the source clock by 1 (IrDA mode) / by 2 (Smarcard mode)</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Divides the source clock by 2 (IrDA mode) / by 4 (Smartcard mode)</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Divides the source clock by 3 (IrDA mode) / by 6 (Smartcard mode)</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Divides the source clock by 31 (IrDA mode) / by 62 (Smartcard mode)</description>
                <name>B_0x1F</name>
                <value>0x1F</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>PSC</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>Guard time value
            This bitfield is used to program the Guard time value in terms of number of baud clock periods.
            This is used in Smartcard mode. The Transmission Complete flag is set after this guard time value.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If Smartcard mode is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <name>GT</name>
          </field>
        </fields>
        <name>GTPR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x14</addressOffset>
        <description>Receiver timeout register</description>
        <displayName>RTOR</displayName>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x18</bitWidth>
            <description>Receiver timeout value</description>
            <name>RTO</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>Block Length</description>
            <name>BLEN</name>
          </field>
        </fields>
        <name>RTOR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>write-only</access>
        <addressOffset>0x18</addressOffset>
        <description>Request register</description>
        <displayName>RQR</displayName>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Auto baud rate request
            Writing 1 to this bit resets the ABRF flag in the USART_ISR and requests an automatic baud rate measurement on the next received data frame.
            Note: If the USART does not support the auto baud rate feature, this bit is reserved and must be kept at reset value. Refer to .</description>
            <name>ABRRQ</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Send break request
            Writing 1 to this bit sets the SBKF flag and request to send a BREAK on the line, as soon as the transmit machine is available.
            Note: When the application needs to send the break character following all previously inserted data, including the ones not yet transmitted, the software should wait for the TXE flag assertion before setting the SBKRQ bit.</description>
            <name>SBKRQ</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Mute mode request
            Writing 1 to this bit puts the USART in Mute mode and resets the RWU flag.</description>
            <name>MMRQ</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receive data flush request
            Writing 1 to this bit empties the entire receive FIFO i.e. clears the bit RXFNE.
            This enables to discard the received data without reading them, and avoid an overrun condition.</description>
            <name>RXFRQ</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmit data flush request
            When FIFO mode is disabled, writing '1â to this bit sets the TXE flag. This enables to discard the transmit data. This bit must be used only in Smartcard mode, when data have not been sent due to errors (NACK) and the FE flag is active in the USART_ISR register. If the USART does not support Smartcard mode, this bit is reserved and must be kept at reset value.
            When FIFO is enabled, TXFRQ bit is set to flush the whole FIFO. This sets the TXFE flag (Transmit FIFO empty, bit 23 in the USART_ISR register). Flushing the Transmit FIFO is supported in both UART and Smartcard modes.
            Note: In FIFO mode, the TXFNF flag is reset during the flush request until TxFIFO is empty in order to ensure that no data are written in the data register.</description>
            <name>TXFRQ</name>
          </field>
        </fields>
        <name>RQR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-only</access>
        <addressOffset>0x1C</addressOffset>
        <description>Interrupt &amp; status
                  register</description>
        <displayName>ISR_FIFO_ENABLED</displayName>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Parity error
            This bit is set by hardware when a parity error occurs in receiver mode. It is cleared by software, writing 1 to the PECF in the USART_ICR register.
            An interrupt is generated if PEIE = 1 in the USART_CR1 register.
            Note: This error is associated with the character in the USART_RDR.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No parity error</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Parity error</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>PE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Framing error
            This bit is set by hardware when a de-synchronization, excessive noise or a break character is detected. It is cleared by software, writing 1 to the FECF bit in the USART_ICR register.
            When transmitting data in Smartcard mode, this bit is set when the maximum number of transmit attempts is reached without success (the card NACKs the data frame).
            An interrupt is generated if EIEÂ =Â 1 in the USART_CR1 register.
            Note: This error is associated with the character in the USART_RDR.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No Framing error is detected</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Framing error or break character is detected</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>FE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Noise detection flag
            This bit is set by hardware when noise is detected on a received frame. It is cleared by software, writing 1 to the NECF bit in the USART_ICR register.
            Note: This bit does not generate an interrupt as it appears at the same time as the RXFNE bit which itself generates an interrupt. An interrupt is generated when the NE flag is set during multi buffer communication if the EIE bit is set.
            When the line is noise-free, the NE flag can be disabled by programming the ONEBIT bit to 1 to increase the USART tolerance to deviations (Refer to Tolerance of the USART receiver to clock deviation on pageÂ 861).
            This error is associated with the character in the USART_RDR.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No noise is detected</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Noise is detected</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>NE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Overrun error
            This bit is set by hardware when the data currently being received in the shift register is
            ready to be transferred into the USART_RDR register while RXFF = 1. It is cleared by a software, writing 1 to the ORECF, in the USART_ICR register.
            An interrupt is generated if RXFNEIEÂ =Â 1 or EIE = 1 in the USART_CR1 register.
            Note: When this bit is set, the USART_RDR register content is not lost but the shift register is overwritten. An interrupt is generated if the ORE flag is set during multi buffer communication if the EIE bit is set.
            This bit is permanently forced to 0 (no overrun detection) when the bit OVRDIS is set in the USART_CR3 register.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No overrun error</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Overrun error is detected</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>ORE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Idle line detected
            This bit is set by hardware when an Idle Line is detected. An interrupt is generated if IDLEIEÂ =Â 1 in the USART_CR1 register. It is cleared by software, writing 1 to the IDLECF in the USART_ICR register.
            Note: The IDLE bit is not set again until the RXFNE bit has been set (i.e. a new idle line occurs).
            If Mute mode is enabled (MMEÂ =Â 1), IDLE is set if the USART is not mute (RWUÂ =Â 0), whatever the Mute mode selected by the WAKE bit. If RWUÂ =Â 1, IDLE is not set.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No Idle line is detected</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Idle line is detected</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>IDLE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RXFIFO not empty
            RXFNE bit is set by hardware when the RXFIFO is not empty, meaning that data can be read from the USART_RDR register. Every read operation from the USART_RDR frees a location in the RXFIFO.
            RXFNE is cleared when the RXFIFO is empty. The RXFNE flag can also be cleared by writing 1 to the RXFRQ in the USART_RQR register.
            An interrupt is generated if RXFNEIEÂ =Â 1 in the USART_CR1 register.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Data is not received</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Received data is ready to be read.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RXFNE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmission complete
            This bit indicates that the last data written in the USART_TDR has been transmitted out of the shift register.
            It is set by hardware when the transmission of a frame containing data is complete and when TXFE is set.
            An interrupt is generated if TCIEÂ =Â 1 in the USART_CR1 register.
            TC bit is is cleared by software, by writing 1 to the TCCF in the USART_ICR register or by a write to the USART_TDR register.
            Note: If TE bit is reset and no transmission is on going, the TC bit is immediately set.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Transmission is not complete</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Transmission is complete</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TC</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>TXFIFO not full
            TXFNF is set by hardware when TXFIFO is not full meaning that data can be written in the USART_TDR. Every write operation to the USART_TDR places the data in the TXFIFO. This flag remains set until the TXFIFO is full. When the TXFIFO is full, this flag is cleared indicating that data can not be written into the USART_TDR.
            An interrupt is generated if the TXFNFIE bit =1 in the USART_CR1 register.
            Note: The TXFNF is kept reset during the flush request until TXFIFO is empty. After sending the flush request (by setting TXFRQ bit), the flag TXFNF should be checked prior to writing in TXFIFO (TXFNF and TXFE are set at the same time).
            This bit is used during single buffer transmission.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Transmit FIFO is full</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Transmit FIFO is not full</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TXFNF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>LIN break detection flag
            This bit is set by hardware when the LIN break is detected. It is cleared by software, by writing 1 to the LBDCF in the USART_ICR.
            An interrupt is generated if LBDIE = 1 in the USART_CR2 register.
            Note: If the USART does not support LIN mode, this bit is reserved and kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>LIN Break not detected</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>LIN break detected</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>LBDF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>CTS interrupt flag
            This bit is set by hardware when the nCTS input toggles, if the CTSE bit is set. It is cleared by software, by writing 1 to the CTSCF bit in the USART_ICR register.
            An interrupt is generated if CTSIEÂ =Â 1 in the USART_CR3 register.
            Note: If the hardware flow control feature is not supported, this bit is reserved and kept at reset value.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No change occurred on the nCTS status line</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>A change occurred on the nCTS status line</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CTSIF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>CTS flag
            This bit is set/reset by hardware. It is an inverted copy of the status of the nCTS input pin.
            Note: If the hardware flow control feature is not supported, this bit is reserved and kept at reset value.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>nCTS line set</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>nCTS line reset</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CTS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receiver timeout
            This bit is set by hardware when the timeout value, programmed in the RTOR register has lapsed, without any communication. It is cleared by software, writing 1 to the RTOCF bit in the USART_ICR register.
            An interrupt is generated if RTOIEÂ =Â 1 in the USART_CR2 register.
            In Smartcard mode, the timeout corresponds to the CWT or BWT timings.
            Note: If a time equal to the value programmed in RTOR register separates 2 characters, RTOF is not set. If this time exceeds this value + 2 sample times (2/16 or 2/8, depending on the oversampling method), RTOF flag is set.
            The counter counts even if RE = 0 but RTOF is set only when RE = 1. If the timeout has already elapsed when RE is set, then RTOF is set.
            If the USART does not support the Receiver timeout feature, this bit is reserved and kept at reset value.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Timeout value not reached</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Timeout value reached without any data reception</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RTOF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>End of block flag
            This bit is set by hardware when a complete block has been received (for example TÂ =Â 1 Smartcard mode). The detection is done when the number of received bytes (from the start of the block, including the prologue) is equal or greater than BLEN + 4.
            An interrupt is generated if the EOBIEÂ =Â 1 in the USART_CR2 register.
            It is cleared by software, writing 1 to the EOBCF in the USART_ICR register.
            Note: If Smartcard mode is not supported, this bit is reserved and kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>End of Block not reached</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>End of Block (number of characters) reached</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>EOBF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI slave underrun error flag
            In slave transmission mode, this flag is set when the first clock pulse for data transmission appears while the software has not yet loaded any value into USART_TDR. This flag is reset by setting UDRCF bit in the USART_ICR register.
            Note: If the USART does not support the SPI slave mode, this bit is reserved and kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No underrun error</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>underrun error</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>UDR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Auto baud rate error
            This bit is set by hardware if the baud rate measurement failed (baud rate out of range or character comparison failed)
            It is cleared by software, by writing 1 to the ABRRQ bit in the USART_CR3 register.
            Note: If the USART does not support the auto baud rate feature, this bit is reserved and kept at reset value.</description>
            <name>ABRE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Auto baud rate flag
            This bit is set by hardware when the automatic baud rate has been set (RXFNE is also set, generating an interrupt if RXFNEIE = 1) or when the auto baud rate operation was completed without success (ABREÂ =Â 1) (ABRE, RXFNE and FE are also set in this case)
            It is cleared by software, in order to request a new auto baud rate detection, by writing 1 to the ABRRQ in the USART_RQR register.
            Note: If the USART does not support the auto baud rate feature, this bit is reserved and kept at reset value.</description>
            <name>ABRF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Busy flag
            This bit is set and reset by hardware. It is active when a communication is ongoing on the RX line (successful start bit detected). It is reset at the end of the reception (successful or not).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART is idle (no reception)</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Reception on going</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>BUSY</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Character match flag
            This bit is set by hardware, when a the character defined by ADD[7:0] is received. It is cleared by software, writing 1 to the CMCF in the USART_ICR register.
            An interrupt is generated if CMIEÂ =Â 1in the USART_CR1 register.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No Character match detected</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Character Match detected</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CMF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Send break flag
            This bit indicates that a send break character was requested. It is set by software, by writing 1 to the SBKRQ bit in the USART_CR3 register. It is automatically reset by hardware during the stop bit of break transmission.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Break character transmitted</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Break character requested by setting SBKRQ bit in USART_RQR register</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>SBKF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receiver wakeup from Mute mode
            This bit indicates if the USART is in Mute mode. It is cleared/set by hardware when a wakeup/mute sequence is recognized. The Mute mode control sequence (address or IDLE) is selected by the WAKE bit in the USART_CR1 register.
            When wakeup on IDLE mode is selected, this bit can only be set by software, writing 1 to the MMRQ bit in the USART_RQR register.
            Note: If the USART does not support the wakeup from Stop feature, this bit is reserved and kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receiver in active mode</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receiver in Mute mode</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RWU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Wakeup from low-power mode flag
            This bit is set by hardware, when a wakeup event is detected. The event is defined by the WUS bitfield. It is cleared by software, writing a 1 to the WUCF in the USART_ICR register.
            An interrupt is generated if WUFIEÂ =Â 1 in the USART_CR3 register.
            Note: When UESM is cleared, WUF flag is also cleared.
            If the USART does not support the wakeup from Stop feature, this bit is reserved and kept at reset value. Refer to .</description>
            <name>WUF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmit enable acknowledge flag
            This bit is set/reset by hardware, when the Transmit Enable value is taken into account by the USART.
            It can be used when an idle frame request is generated by writing TEÂ =Â 0, followed by TEÂ =Â 1 in the USART_CR1 register, in order to respect the TEÂ =Â 0 minimum period.</description>
            <name>TEACK</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receive enable acknowledge flag
            This bit is set/reset by hardware, when the Receive Enable value is taken into account by the USART.
            It can be used to verify that the USART is ready for reception before entering low-power mode.
            Note: If the USART does not support the wakeup from Stop feature, this bit is reserved and kept at reset value. Refer to .</description>
            <name>REACK</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>TXFIFO empty
            This bit is set by hardware when TXFIFO is empty. When the TXFIFO contains at least one data, this flag is cleared. The TXFE flag can also be set by writing 1 to the bit TXFRQ (bit 4) in the USART_RQR register.
            An interrupt is generated if the TXFEIE bit Â =Â 1 (bit 30) in the USART_CR1 register.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>TXFIFO not empty.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>TXFIFO empty.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TXFE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RXFIFO full
            This bit is set by hardware when the number of received data corresponds to RXFIFOÂ sizeÂ +Â 1 (RXFIFO full + 1 data in the USART_RDR register.
            An interrupt is generated if the RXFFIE bit Â =Â 1 in the USART_CR1 register.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>RXFIFO not full.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>RXFIFO Full.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RXFF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmission complete before guard time flag
            This bit is set when the last data written in the USART_TDR has been transmitted correctly out of the shift register.
            It is set by hardware in Smartcard mode, if the transmission of a frame containing data is complete and if the smartcard did not send back any NACK. An interrupt is generated if TCBGTIEÂ =Â 1 in the USART_CR3 register.
            This bit is cleared by software, by writing 1 to the TCBGTCF in the USART_ICR register or by a write to the USART_TDR register.
            Note: If the USART does not support the Smartcard mode, this bit is reserved and kept at reset value. If the USART supports the Smartcard mode and the Smartcard mode is enabled, the TCBGT reset value is '1â. Refer to on pageÂ 835.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Transmission is not complete or transmission is complete unsuccessfully (i.e. a NACK is received from the card)</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Transmission is complete successfully (before Guard time completion and there is no NACK from the smart card).</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TCBGT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RXFIFO threshold flag
            This bit is set by hardware when the threshold programmed in RXFTCFG in USART_CR3 register is reached. This means that there are (RXFTCFG - 1) data in the Receive FIFO and one data in the USART_RDR register. An interrupt is generated if the RXFTIE bit Â =Â 1 (bit 27) in the USART_CR3 register.
            Note: When the RXFTCFG threshold is configured to '101â, RXFT flag is set if 16 data are available i.e. 15 data in the RXFIFO and 1 data in the USART_RDR. Consequently, the 17th received data does not cause an overrun error. The overrun error occurs after receiving the 18th data.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receive FIFO does not reach the programmed threshold.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receive FIFO reached the programmed threshold.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RXFT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>TXFIFO threshold flag
            This bit is set by hardware when the TXFIFO reaches the threshold programmed in TXFTCFG of USART_CR3 register i.e. the TXFIFO contains TXFTCFG empty locations. An interrupt is generated if the TXFTIE bit Â =Â 1 (bit 31) in the USART_CR3 register.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>TXFIFO does not reach the programmed threshold.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>TXFIFO reached the programmed threshold.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TXFT</name>
          </field>
        </fields>
        <name>ISR_FIFO_ENABLED</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x8000C0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-only</access>
        <addressOffset>0x1C</addressOffset>
        <description>Interrupt &amp; status
                  register</description>
        <displayName>ISR_FIFO_DISABLED</displayName>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Parity error
            This bit is set by hardware when a parity error occurs in receiver mode. It is cleared by software, writing 1 to the PECF in the USART_ICR register.
            An interrupt is generated if PEIE = 1 in the USART_CR1 register.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No parity error</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Parity error</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>PE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Framing error
            This bit is set by hardware when a de-synchronization, excessive noise or a break character is detected. It is cleared by software, writing 1 to the FECF bit in the USART_ICR register.
            When transmitting data in Smartcard mode, this bit is set when the maximum number of transmit attempts is reached without success (the card NACKs the data frame).
            An interrupt is generated if EIEÂ =Â 1 in the USART_CR1 register.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No Framing error is detected</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Framing error or break character is detected</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>FE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Noise detection flag
            This bit is set by hardware when noise is detected on a received frame. It is cleared by software, writing 1 to the NECF bit in the USART_ICR register.
            Note: This bit does not generate an interrupt as it appears at the same time as the RXNE bit which itself generates an interrupt. An interrupt is generated when the NE flag is set during multi buffer communication if the EIE bit is set.
            When the line is noise-free, the NE flag can be disabled by programming the ONEBIT bit to 1 to increase the USART tolerance to deviations (Refer to Tolerance of the USART receiver to clock deviation on pageÂ 861).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No noise is detected</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Noise is detected</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>NE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Overrun error
            This bit is set by hardware when the data currently being received in the shift register is
            ready to be transferred into the USART_RDR register while RXNEÂ =Â 1. It is cleared by a software, writing 1 to the ORECF, in the USART_ICR register.
            An interrupt is generated if RXNEIEÂ =Â 1 or EIE Â =Â  1 in the USART_CR1 register.
            Note: When this bit is set, the USART_RDR register content is not lost but the shift register is overwritten. An interrupt is generated if the ORE flag is set during multi buffer communication if the EIE bit is set.
            This bit is permanently forced to 0 (no overrun detection) when the bit OVRDIS is set in the USART_CR3 register.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No overrun error</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Overrun error is detected</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>ORE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Idle line detected
            This bit is set by hardware when an Idle Line is detected. An interrupt is generated if IDLEIEÂ =Â 1 in the USART_CR1 register. It is cleared by software, writing 1 to the IDLECF in the USART_ICR register.
            Note: The IDLE bit is not set again until the RXNE bit has been set (i.e. a new idle line occurs).
            If Mute mode is enabled (MMEÂ =Â 1), IDLE is set if the USART is not mute (RWUÂ =Â 0), whatever the Mute mode selected by the WAKE bit. If RWUÂ =Â 1, IDLE is not set.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No Idle line is detected</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Idle line is detected</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>IDLE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Read data register not empty
            RXNE bit is set by hardware when the content of the USART_RDR shift register has been transferred to the USART_RDR register. It is cleared by reading from the USART_RDR register. The RXNE flag can also be cleared by writing 1 to the RXFRQ in the USART_RQR register.
            An interrupt is generated if RXNEIEÂ =Â 1 in the USART_CR1 register.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Data is not received</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Received data is ready to be read.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RXNE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmission complete
            This bit indicates that the last data written in the USART_TDR has been transmitted out of the shift register.
            It is set by hardware when the transmission of a frame containing data is complete and when TXE is set.
            An interrupt is generated if TCIEÂ =Â 1 in the USART_CR1 register.
            TC bit is is cleared by software, by writing 1 to the TCCF in the USART_ICR register or by a write to the USART_TDR register.
            Note: If TE bit is reset and no transmission is on going, the TC bit is set immediately.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Transmission is not complete</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Transmission is complete</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TC</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmit data register empty
            TXE is set by hardware when the content of the USART_TDR register has been transferred into the shift register. It is cleared by writing to the USART_TDR register. The TXE flag can also be set by writing 1 to the TXFRQ in the USART_RQR register, in order to discard the data (only in Smartcard TÂ =Â 0 mode, in case of transmission failure).
            An interrupt is generated if the TXEIE bit Â =Â 1 in the USART_CR1 register.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Data register full</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Data register not full</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TXE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>LIN break detection flag
            This bit is set by hardware when the LIN break is detected. It is cleared by software, by writing 1 to the LBDCF in the USART_ICR.
            An interrupt is generated if LBDIE = 1 in the USART_CR2 register.
            Note: If the USART does not support LIN mode, this bit is reserved and kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>LIN Break not detected</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>LIN break detected</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>LBDF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>CTS interrupt flag
            This bit is set by hardware when the nCTS input toggles, if the CTSE bit is set. It is cleared by software, by writing 1 to the CTSCF bit in the USART_ICR register.
            An interrupt is generated if CTSIEÂ =Â 1 in the USART_CR3 register.
            Note: If the hardware flow control feature is not supported, this bit is reserved and kept at reset value.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No change occurred on the nCTS status line</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>A change occurred on the nCTS status line</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CTSIF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>CTS flag
            This bit is set/reset by hardware. It is an inverted copy of the status of the nCTS input pin.
            Note: If the hardware flow control feature is not supported, this bit is reserved and kept at reset value.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>nCTS line set</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>nCTS line reset</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CTS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receiver timeout
            This bit is set by hardware when the timeout value, programmed in the RTOR register has lapsed, without any communication. It is cleared by software, writing 1 to the RTOCF bit in the USART_ICR register.
            An interrupt is generated if RTOIEÂ =Â 1 in the USART_CR2 register.
            In Smartcard mode, the timeout corresponds to the CWT or BWT timings.
            Note: If a time equal to the value programmed in RTOR register separates 2 characters, RTOF is not set. If this time exceeds this value + 2 sample times (2/16 or 2/8, depending on the oversampling method), RTOF flag is set.
            The counter counts even if RE = 0 but RTOF is set only when RE = 1. If the timeout has already elapsed when RE is set, then RTOF is set.
            If the USART does not support the Receiver timeout feature, this bit is reserved and kept at reset value.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Timeout value not reached</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Timeout value reached without any data reception</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RTOF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>End of block flag
            This bit is set by hardware when a complete block has been received (for example TÂ =Â 1 Smartcard mode). The detection is done when the number of received bytes (from the start of the block, including the prologue) is equal or greater than BLEN + 4.
            An interrupt is generated if the EOBIEÂ =Â 1 in the USART_CR2 register.
            It is cleared by software, writing 1 to the EOBCF in the USART_ICR register.
            Note: If Smartcard mode is not supported, this bit is reserved and kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>End of Block not reached</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>End of Block (number of characters) reached</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>EOBF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI slave underrun error flag
            In slave transmission mode, this flag is set when the first clock pulse for data transmission appears while the software has not yet loaded any value into USART_TDR. This flag is reset by setting UDRCF bit in the USART_ICR register.
            Note: If the USART does not support the SPI slave mode, this bit is reserved and kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No underrun error</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>underrun error</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>UDR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Auto baud rate error
            This bit is set by hardware if the baud rate measurement failed (baud rate out of range or character comparison failed)
            It is cleared by software, by writing 1 to the ABRRQ bit in the USART_CR3 register.
            Note: If the USART does not support the auto baud rate feature, this bit is reserved and kept at reset value.</description>
            <name>ABRE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Auto baud rate flag
            This bit is set by hardware when the automatic baud rate has been set (RXNE is also set, generating an interrupt if RXNEIE = 1) or when the auto baud rate operation was completed without success (ABREÂ =Â 1) (ABRE, RXNE and FE are also set in this case)
            It is cleared by software, in order to request a new auto baud rate detection, by writing 1 to the ABRRQ in the USART_RQR register.
            Note: If the USART does not support the auto baud rate feature, this bit is reserved and kept at reset value.</description>
            <name>ABRF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Busy flag
            This bit is set and reset by hardware. It is active when a communication is ongoing on the RX line (successful start bit detected). It is reset at the end of the reception (successful or not).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART is idle (no reception)</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Reception on going</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>BUSY</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Character match flag
            This bit is set by hardware, when a the character defined by ADD[7:0] is received. It is cleared by software, writing 1 to the CMCF in the USART_ICR register.
            An interrupt is generated if CMIEÂ =Â 1in the USART_CR1 register.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No Character match detected</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Character Match detected</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CMF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Send break flag
            This bit indicates that a send break character was requested. It is set by software, by writing 1 to the SBKRQ bit in the USART_CR3 register. It is automatically reset by hardware during the stop bit of break transmission.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Break character transmitted</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Break character requested by setting SBKRQ bit in USART_RQR register</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>SBKF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receiver wakeup from Mute mode
            This bit indicates if the USART is in Mute mode. It is cleared/set by hardware when a wakeup/mute sequence is recognized. The Mute mode control sequence (address or IDLE) is selected by the WAKE bit in the USART_CR1 register.
            When wakeup on IDLE mode is selected, this bit can only be set by software, writing 1 to the MMRQ bit in the USART_RQR register.
            Note: If the USART does not support the wakeup from Stop feature, this bit is reserved and kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receiver in active mode</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receiver in Mute mode</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RWU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Wakeup from low-power mode flag
            This bit is set by hardware, when a wakeup event is detected. The event is defined by the WUS bitfield. It is cleared by software, writing a 1 to the WUCF in the USART_ICR register.
            An interrupt is generated if WUFIEÂ =Â 1 in the USART_CR3 register.
            Note: When UESM is cleared, WUF flag is also cleared.
            If the USART does not support the wakeup from Stop feature, this bit is reserved and kept at reset value. Refer to .</description>
            <name>WUF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmit enable acknowledge flag
            This bit is set/reset by hardware, when the Transmit Enable value is taken into account by the USART.
            It can be used when an idle frame request is generated by writing TEÂ =Â 0, followed by TEÂ =Â 1 in the USART_CR1 register, in order to respect the TEÂ =Â 0 minimum period.</description>
            <name>TEACK</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receive enable acknowledge flag
            This bit is set/reset by hardware, when the Receive Enable value is taken into account by the USART.
            It can be used to verify that the USART is ready for reception before entering low-power mode.
            Note: If the USART does not support the wakeup from Stop feature, this bit is reserved and kept at reset value. Refer to .</description>
            <name>REACK</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmission complete before guard time flag
            This bit is set when the last data written in the USART_TDR has been transmitted correctly out of the shift register.
            It is set by hardware in Smartcard mode, if the transmission of a frame containing data is complete and if the smartcard did not send back any NACK. An interrupt is generated if TCBGTIEÂ =Â 1 in the USART_CR3 register.
            This bit is cleared by software, by writing 1 to the TCBGTCF in the USART_ICR register or by a write to the USART_TDR register.
            Note: If the USART does not support the Smartcard mode, this bit is reserved and kept at reset value. If the USART supports the Smartcard mode and the Smartcard mode is enabled, the TCBGT reset value is '1â. Refer to on pageÂ 835.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Transmission is not complete or transmission is complete unsuccessfully (i.e. a NACK is received from the card)</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Transmission is complete successfully (before Guard time completion and there is no NACK from the smart card).</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TCBGT</name>
          </field>
        </fields>
        <name>ISR_FIFO_DISABLED</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xC0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>write-only</access>
        <addressOffset>0x20</addressOffset>
        <description>Interrupt flag clear register</description>
        <displayName>ICR</displayName>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Parity error clear flag
            Writing 1 to this bit clears the PE flag in the USART_ISR register.</description>
            <name>PECF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Framing error clear flag
            Writing 1 to this bit clears the FE flag in the USART_ISR register.</description>
            <name>FECF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Noise detected clear flag
            Writing 1 to this bit clears the NE flag in the USART_ISR register.</description>
            <name>NECF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Overrun error clear flag
            Writing 1 to this bit clears the ORE flag in the USART_ISR register.</description>
            <name>ORECF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Idle line detected clear flag
            Writing 1 to this bit clears the IDLE flag in the USART_ISR register.</description>
            <name>IDLECF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>TXFIFO empty clear flag
            Writing 1 to this bit clears the TXFE flag in the USART_ISR register.</description>
            <name>TXFECF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmission complete clear flag
            Writing 1 to this bit clears the TC flag in the USART_ISR register.</description>
            <name>TCCF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmission complete before Guard time clear flag
            Writing 1 to this bit clears the TCBGT flag in the USART_ISR register.</description>
            <name>TCBGTCF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>LIN break detection clear flag
            Writing 1 to this bit clears the LBDF flag in the USART_ISR register.
            Note: If LIN mode is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <name>LBDCF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>CTS clear flag
            Writing 1 to this bit clears the CTSIF flag in the USART_ISR register.
            Note: If the hardware flow control feature is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <name>CTSCF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receiver timeout clear flag
            Writing 1 to this bit clears the RTOF flag in the USART_ISR register.
            Note: If the USART does not support the Receiver timeout feature, this bit is reserved and must be kept at reset value. Refer to pageÂ 835.</description>
            <name>RTOCF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>End of block clear flag
            Writing 1 to this bit clears the EOBF flag in the USART_ISR register.
            Note: If the USART does not support Smartcard mode, this bit is reserved and must be kept at reset value. Refer to .</description>
            <name>EOBCF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI slave underrun clear flag
            Writing 1 to this bit clears the UDRF flag in the USART_ISR register.
            Note: If the USART does not support SPI slave mode, this bit is reserved and must be kept at reset value. Refer to</description>
            <name>UDRCF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Character match clear flag
            Writing 1 to this bit clears the CMF flag in the USART_ISR register.</description>
            <name>CMCF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Wakeup from low-power mode clear flag
            Writing 1 to this bit clears the WUF flag in the USART_ISR register.
            Note: If the USART does not support the wakeup from Stop feature, this bit is reserved and must be kept at reset value. Refer to pageÂ 835.</description>
            <name>WUCF</name>
          </field>
        </fields>
        <name>ICR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-only</access>
        <addressOffset>0x24</addressOffset>
        <description>Receive data register</description>
        <displayName>RDR</displayName>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>Receive data value</description>
            <name>RDR</name>
          </field>
        </fields>
        <name>RDR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x28</addressOffset>
        <description>Transmit data register</description>
        <displayName>TDR</displayName>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>Transmit data value</description>
            <name>TDR</name>
          </field>
        </fields>
        <name>TDR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x2C</addressOffset>
        <description>Prescaler register</description>
        <displayName>PRESC</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Clock prescaler
            The USART input clock can be divided by a prescaler factor:
            Remaining combinations: Reserved
            Note: When PRESCALER is programmed with a value different of the allowed ones, programmed prescaler value is 1011 i.e. input clock divided by 256.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>input clock not divided</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>input clock divided by 2</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>input clock divided by 4</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>input clock divided by 6</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>input clock divided by 8</description>
                <name>B_0x4</name>
                <value>0x4</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>input clock divided by 10</description>
                <name>B_0x5</name>
                <value>0x5</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>input clock divided by 12</description>
                <name>B_0x6</name>
                <value>0x6</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>input clock divided by 16</description>
                <name>B_0x7</name>
                <value>0x7</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>input clock divided by 32</description>
                <name>B_0x8</name>
                <value>0x8</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>input clock divided by 64</description>
                <name>B_0x9</name>
                <value>0x9</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>input clock divided by 128</description>
                <name>B_0xA</name>
                <value>0xA</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>input clock divided by 256</description>
                <name>B_0xB</name>
                <value>0xB</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>PRESCALER</name>
          </field>
        </fields>
        <name>PRESC</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <resetMask>0xFFFFFFFF</resetMask>
    <resetValue>0x0</resetValue>
    <size>0x20</size>
  </peripheral>
</peripherals>
<peripherals>
  <peripheral>
    <addressBlock>
      <offset>0x0</offset>
      <size>0x400</size>
      <usage>registers</usage>
    </addressBlock>
    <baseAddress>0x40004800</baseAddress>
    <derivedFrom>USART1</derivedFrom>
    <description>Universal synchronous asynchronous receiver
          transmitter</description>
    <groupName>USART</groupName>
    <interrupts>
      <interrupt>
        <name>USART3_USART4_USART5_USART6_LPUART1</name>
        <value>0x1D</value>
      </interrupt>
    </interrupts>
    <name>USART3</name>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x0</addressOffset>
        <description>Control register 1</description>
        <displayName>CR1_FIFO_ENABLED</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>USART enable
            When this bit is cleared, the USART prescalers and outputs are stopped immediately, and all current operations are discarded. The USART configuration is kept, but all the USART_ISR status flags are reset. This bit is set and cleared by software.
            Note: To enter low-power mode without generating errors on the line, the TE bit must be previously reset and the software must wait for the TC bit in the USART_ISR to be set before resetting the UE bit.
            The DMA requests are also reset when UE = 0 so the DMA channel must be disabled before resetting the UE bit.
            In Smartcard mode, (SCEN = 1), the SCLK is always available when CLKEN = 1, regardless of the UE bit value.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART prescaler and outputs disabled, low-power mode</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>UE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>USART enable in low-power mode
            When this bit is cleared, the USART cannot wake up the MCU from low-power mode.
            When this bit is set, the USART can wake up the MCU from low-power mode.
            This bit is set and cleared by software.
            Note: It is recommended to set the UESM bit just before entering low-power mode and clear it when exit from low-power mode.
            If the USART does not support the wakeup from Stop feature, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART not able to wake up the MCU from low-power mode.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART able to wake up the MCU from low-power mode. </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>UESM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receiver enable
            This bit enables the receiver. It is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receiver is disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receiver is enabled and begins searching for a start bit</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmitter enable
            This bit enables the transmitter. It is set and cleared by software.
            Note: During transmission, a low pulse on the TE bit ('0â followed by '1â) sends a preamble (idle line) after the current word, except in Smartcard mode. In order to generate an idle character, the TE must not be immediately written to '1â. To ensure the required duration, the software can poll the TEACK bit in the USART_ISR register.
            In Smartcard mode, when TE is set, there is a 1 bit-time delay before the transmission starts.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Transmitter is disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Transmitter is enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>IDLE interrupt enable
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated whenever IDLE = 1 in the USART_ISR register  </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>IDLEIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RXFIFO not empty interrupt enable
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated whenever ORE = 1 or RXFNE = 1 in the USART_ISR register    </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RXFNEIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmission complete interrupt enable
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated whenever TC = 1 in the USART_ISR register  </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TCIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>TXFIFO not full interrupt enable
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated whenever TXFNF =1 in the USART_ISR register</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TXFNFIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>PE interrupt enable
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated whenever PE = 1 in the USART_ISR register  </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>PEIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Parity selection
            This bit selects the odd or even parity when the parity generation/detection is enabled (PCE bit set). It is set and cleared by software. The parity is selected after the current byte.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Even parity</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Odd parity</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>PS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Parity control enable
            This bit selects the hardware parity control (generation and detection). When the parity control is enabled, the computed parity is inserted at the MSB position (9th bit if MÂ =Â 1; 8th bit if MÂ =Â 0) and the parity is checked on the received data. This bit is set and cleared by software. Once it is set, PCE is active after the current byte (in reception and in transmission).
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Parity control disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Parity control enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>PCE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receiver wakeup method
            This bit determines the USART wakeup method from Mute mode. It is set or cleared by software.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Idle line</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Address mark</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>WAKE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Word length
            This bit is used in conjunction with bit 28 (M1) to determine the word length. It is set or cleared by software (refer to bit 28 (M1)description).
            This bit can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <name>M0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Mute mode enable
            This bit enables the USART Mute mode function. When set, the USART can switch between active and Mute mode, as defined by the WAKE bit. It is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receiver in active mode permanently</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receiver can switch between Mute mode and active mode. </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>MME</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Character match interrupt enable
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated when the CMF bit is set in the USART_ISR register.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CMIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Oversampling mode
            This bit can only be written when the USART is disabled (UEÂ =Â 0).
            Note: In LIN, IrDA and Smartcard modes, this bit must be kept cleared.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Oversampling by 16</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Oversampling by 8</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>OVER8</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Driver Enable deassertion time
            This 5-bit value defines the time between the end of the last stop bit, in a transmitted message, and the de-activation of the DE (Driver Enable) signal. It is expressed in sample time units (1/8 or 1/16 bit time, depending on the oversampling rate).
            If the USART_TDR register is written during the DEDT time, the new data is transmitted only when the DEDT and DEAT times have both elapsed.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If the Driver Enable feature is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <name>DEDT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Driver Enable assertion time
            This 5-bit value defines the time between the activation of the DE (Driver Enable) signal and the beginning of the start bit. It is expressed in sample time units (1/8 or 1/16 bit time, depending on the oversampling rate).
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If the Driver Enable feature is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <name>DEAT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receiver timeout interrupt enable
            This bit is set and cleared by software.
            Note: If the USART does not support the Receiver timeout feature, this bit is reserved and must be kept at reset value. .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated when the RTOF bit is set in the USART_ISR register.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RTOIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>End of Block interrupt enable
            This bit is set and cleared by software.
            Note: If the USART does not support Smartcard mode, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated when the EOBF flag is set in the USART_ISR register</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>EOBIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Word length
            This bit must be used in conjunction with bit 12 (M0) to determine the word length. It is set or cleared by software.
            M[1:0] = '00â: 1 start bit, 8 Data bits, n Stop bit
            M[1:0] = '01â: 1 start bit, 9 Data bits, n Stop bit
            M[1:0] = '10â: 1 start bit, 7 Data bits, n Stop bit
            This bit can only be written when the USART is disabled (UEÂ =Â 0).
            Note: In 7-bits data length mode, the Smartcard mode, LIN master mode and Auto baud rate (0x7F and 0x55 frames detection) are not supported.</description>
            <name>M1</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>FIFO mode enable
            This bit is set and cleared by software.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).
            Note: FIFO mode can be used on standard UART communication, in SPI master/slave mode and in Smartcard modes only. It must not be enabled in IrDA and LIN modes.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>FIFO mode is disabled.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>FIFO mode is enabled.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>FIFOEN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>TXFIFO empty interrupt enable
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated when TXFE = 1 in the USART_ISR register  </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TXFEIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RXFIFO Full interrupt enable
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated when RXFF = 1 in the USART_ISR register  </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RXFFIE</name>
          </field>
        </fields>
        <name>CR1_FIFO_ENABLED</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x0</addressOffset>
        <description>Control register 1</description>
        <displayName>CR1_FIFO_DISABLED</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>USART enable
            When this bit is cleared, the USART prescalers and outputs are stopped immediately, and all current operations are discarded. The USART configuration is kept, but all the USART_ISR status flags are reset. This bit is set and cleared by software.
            Note: To enter low-power mode without generating errors on the line, the TE bit must be previously reset and the software must wait for the TC bit in the USART_ISR to be set before resetting the UE bit.
            The DMA requests are also reset when UE = 0 so the DMA channel must be disabled before resetting the UE bit.
            In Smartcard mode, (SCEN = 1), the SCLK is always available when CLKEN = 1, regardless of the UE bit value.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART prescaler and outputs disabled, low-power mode</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>UE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>USART enable in low-power mode
            When this bit is cleared, the USART cannot wake up the MCU from low-power mode.
            When this bit is set, the USART can wake up the MCU from low-power mode.
            This bit is set and cleared by software.
            Note: It is recommended to set the UESM bit just before entering low-power mode and clear it when exit from low-power mode.
            If the USART does not support the wakeup from Stop feature, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART not able to wake up the MCU from low-power mode.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART able to wake up the MCU from low-power mode. </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>UESM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receiver enable
            This bit enables the receiver. It is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receiver is disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receiver is enabled and begins searching for a start bit</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmitter enable
            This bit enables the transmitter. It is set and cleared by software.
            Note: During transmission, a low pulse on the TE bit ('0â followed by '1â) sends a preamble (idle line) after the current word, except in Smartcard mode. In order to generate an idle character, the TE must not be immediately written to '1â. To ensure the required duration, the software can poll the TEACK bit in the USART_ISR register.
            In Smartcard mode, when TE is set, there is a 1 bit-time delay before the transmission starts.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Transmitter is disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Transmitter is enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>IDLE interrupt enable
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated whenever IDLE = 1 in the USART_ISR register  </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>IDLEIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receive data register not empty
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated whenever ORE = 1 or RXNE = 1 in the USART_ISR register    </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RXNEIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmission complete interrupt enable
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated whenever TC = 1 in the USART_ISR register  </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TCIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmit data register empty
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated whenever TXE =1 in the USART_ISR register</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TXEIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>PE interrupt enable
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated whenever PE = 1 in the USART_ISR register  </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>PEIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Parity selection
            This bit selects the odd or even parity when the parity generation/detection is enabled (PCE bit set). It is set and cleared by software. The parity is selected after the current byte.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Even parity</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Odd parity</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>PS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Parity control enable
            This bit selects the hardware parity control (generation and detection). When the parity control is enabled, the computed parity is inserted at the MSB position (9th bit if MÂ =Â 1; 8th bit if MÂ =Â 0) and the parity is checked on the received data. This bit is set and cleared by software. Once it is set, PCE is active after the current byte (in reception and in transmission).
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Parity control disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Parity control enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>PCE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receiver wakeup method
            This bit determines the USART wakeup method from Mute mode. It is set or cleared by software.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Idle line</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Address mark</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>WAKE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Word length
            This bit is used in conjunction with bit 28 (M1) to determine the word length. It is set or cleared by software (refer to bit 28 (M1)description).
            This bit can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <name>M0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Mute mode enable
            This bit enables the USART Mute mode function. When set, the USART can switch between active and Mute mode, as defined by the WAKE bit. It is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receiver in active mode permanently</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receiver can switch between Mute mode and active mode. </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>MME</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Character match interrupt enable
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated when the CMF bit is set in the USART_ISR register.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CMIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Oversampling mode
            This bit can only be written when the USART is disabled (UEÂ =Â 0).
            Note: In LIN, IrDA and Smartcard modes, this bit must be kept cleared.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Oversampling by 16</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Oversampling by 8</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>OVER8</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Driver Enable deassertion time
            This 5-bit value defines the time between the end of the last stop bit, in a transmitted message, and the de-activation of the DE (Driver Enable) signal. It is expressed in sample time units (1/8 or 1/16 bit time, depending on the oversampling rate).
            If the USART_TDR register is written during the DEDT time, the new data is transmitted only when the DEDT and DEAT times have both elapsed.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If the Driver Enable feature is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <name>DEDT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Driver Enable assertion time
            This 5-bit value defines the time between the activation of the DE (Driver Enable) signal and the beginning of the start bit. It is expressed in sample time units (1/8 or 1/16 bit time, depending on the oversampling rate).
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If the Driver Enable feature is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <name>DEAT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receiver timeout interrupt enable
            This bit is set and cleared by software.
            Note: If the USART does not support the Receiver timeout feature, this bit is reserved and must be kept at reset value. .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated when the RTOF bit is set in the USART_ISR register.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RTOIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>End of Block interrupt enable
            This bit is set and cleared by software.
            Note: If the USART does not support Smartcard mode, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated when the EOBF flag is set in the USART_ISR register</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>EOBIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Word length
            This bit must be used in conjunction with bit 12 (M0) to determine the word length. It is set or cleared by software.
            M[1:0] = '00â: 1 start bit, 8 Data bits, n Stop bit
            M[1:0] = '01â: 1 start bit, 9 Data bits, n Stop bit
            M[1:0] = '10â: 1 start bit, 7 Data bits, n Stop bit
            This bit can only be written when the USART is disabled (UEÂ =Â 0).
            Note: In 7-bits data length mode, the Smartcard mode, LIN master mode and Auto baud rate (0x7F and 0x55 frames detection) are not supported.</description>
            <name>M1</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>FIFO mode enable
            This bit is set and cleared by software.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).
            Note: FIFO mode can be used on standard UART communication, in SPI master/slave mode and in Smartcard modes only. It must not be enabled in IrDA and LIN modes.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>FIFO mode is disabled.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>FIFO mode is enabled.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>FIFOEN</name>
          </field>
        </fields>
        <name>CR1_FIFO_DISABLED</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x4</addressOffset>
        <description>Control register 2</description>
        <displayName>CR2</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Synchronous Slave mode enable
            When the SLVEN bit is set, the synchronous slave mode is enabled.
            Note: When SPI slave mode is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Slave mode disabled.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Slave mode enabled.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>SLVEN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When the DIS_NSS bit is set, the NSS pin input is ignored.
            Note: When SPI slave mode is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>SPI slave selection depends on NSS input pin.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>SPI slave is always selected and NSS input pin is ignored.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>DIS_NSS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>7-bit Address Detection/4-bit Address Detection
            This bit is for selection between 4-bit address detection or 7-bit address detection.
            This bit can only be written when the USART is disabled (UEÂ =Â 0)
            Note: In 7-bit and 9-bit data modes, the address detection is done on 6-bit and 8-bit address (ADD[5:0] and ADD[7:0]) respectively.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>4-bit address detection</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>7-bit address detection (in 8-bit data mode)</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>ADDM7</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>LIN break detection length
            This bit is for selection between 11 bit or 10 bit break detection.
            This bit can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If LIN mode is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>10-bit break detection</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>11-bit break detection</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>LBDL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>LIN break detection interrupt enable
            Break interrupt mask (break detection using break delimiter).
            Note: If LIN mode is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt is inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>An interrupt is generated whenever LBDF = 1 in the USART_ISR register  </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>LBDIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Last bit clock pulse
            This bit is used to select whether the clock pulse associated with the last data bit transmitted (MSB) has to be output on the SCLK pin in synchronous mode.
            The last bit is the 7th or 8th or 9th data bit transmitted depending on the 7 or 8 or 9 bit format selected by the M bit in the USART_CR1 register.
            This bit can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If synchronous mode is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>The clock pulse of the last data bit is not output to the SCLK pin</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>The clock pulse of the last data bit is output to the SCLK pin</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>LBCL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Clock phase
            This bit is used to select the phase of the clock output on the SCLK pin in synchronous mode. It works in conjunction with the CPOL bit to produce the desired clock/data relationship (see  and )
            This bit can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If synchronous mode is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>The first clock transition is the first data capture edge</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>The second clock transition is the first data capture edge</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CPHA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Clock polarity
            This bit enables the user to select the polarity of the clock output on the SCLK pin in synchronous mode. It works in conjunction with the CPHA bit to produce the desired clock/data relationship
            This bit can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If synchronous mode is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Steady low value on SCLK pin outside transmission window</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Steady high value on SCLK pin outside transmission window</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CPOL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Clock enable
            This bit enables the user to enable the SCLK pin.
            This bit can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If neither synchronous mode nor Smartcard mode is supported, this bit is reserved and must be kept at reset value. Refer to .
            In Smartcard mode, in order to provide correctly the SCLK clock to the smartcard, the steps below must be respected:
            UE = 0
            SCEN = 1
            GTPR configuration
            CLKEN= 1
            UE = 1</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>SCLK pin disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>SCLK pin enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CLKEN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>stop bits
            These bits are used for programming the stop bits.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>1 stop bit</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>0.5 stop bit.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>2 stop bits</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>1.5 stop bits</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>STOP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>LIN mode enable
            This bit is set and cleared by software.
            The LIN mode enables the capability to send LIN synchronous breaks (13 low bits) using the SBKRQ bit in the USART_CR1 register, and to detect LIN Sync breaks.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If the USART does not support LIN mode, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>LIN mode disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>LIN mode enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>LINEN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Swap TX/RX pins
            This bit is set and cleared by software.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>TX/RX pins are used as defined in standard pinout</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>The TX and RX pins functions are swapped. This enables to work in the case of a cross-wired connection to another UART. </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>SWAP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RX pin active level inversion
            This bit is set and cleared by software.
            This enables the use of an external inverter on the RX line.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>RX pin signal works using the standard logic levels (VDD =1/idle, Gnd = 0/mark)   </description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>RX pin signal values are inverted (VDD =0/mark, Gnd = 1/idle).   </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RXINV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>TX pin active level inversion
            This bit is set and cleared by software.
            This enables the use of an external inverter on the TX line.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>TX pin signal works using the standard logic levels (VDD =1/idle, Gnd = 0/mark)   </description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>TX pin signal values are inverted (VDD =0/mark, Gnd = 1/idle).   </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TXINV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Binary data inversion
            This bit is set and cleared by software.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Logical data from the data register are send/received in positive/direct logic. (1 = H, 0 = L)     </description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Logical data from the data register are send/received in negative/inverse logic. (1 = L, 0 = H).     The parity bit is also inverted.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>DATAINV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Most significant bit first
            This bit is set and cleared by software.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>data is transmitted/received with data bit 0 first, following the start bit. </description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>data is transmitted/received with the MSB (bit 7/8) first, following the start bit. </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>MSBFIRST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Auto baud rate enable
            This bit is set and cleared by software.
            Note: If the USART does not support the auto baud rate feature, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Auto baud rate detection is disabled. </description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Auto baud rate detection is enabled. </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>ABREN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Auto baud rate mode
            These bits are set and cleared by software.
            This bitfield can only be written when ABREN = 0 or the USART is disabled (UEÂ =Â 0).
            Note: If DATAINVÂ =Â 1 and/or MSBFIRSTÂ =Â 1 the patterns must be the same on the line, for example 0xAA for MSBFIRST)
            If the USART does not support the auto baud rate feature, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Measurement of the start bit is used to detect the baud rate. </description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Falling edge to falling edge measurement (the received frame must start with a single bit = 1 and Frame = Start10xxxxxx)</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>0x7F frame detection.</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>0x55 frame detection</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>ABRMOD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receiver timeout enable
            This bit is set and cleared by software.
            When this feature is enabled, the RTOF flag in the USART_ISR register is set if the RX line is idle (no reception) for the duration programmed in the RTOR (receiver timeout register).
            Note: If the USART does not support the Receiver timeout feature, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receiver timeout feature disabled. </description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receiver timeout feature enabled. </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RTOEN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>Address of the USART node
            ADD[7:4]:
            These bits give the address of the USART node or a character code to be recognized.
            They are used to wake up the MCU with 7-bit address mark detection in multiprocessor communication during Mute mode or low-power mode. The MSB of the character sent by the transmitter should be equal to 1. They can also be used for character detection during normal reception, Mute mode inactive (for example, end of block detection in ModBus protocol). In this case, the whole received character (8-bit) is compared to the ADD[7:0] value and CMF flag is set on match.
            These bits can only be written when reception is disabled (RE = 0) or the USART is disabled (UEÂ =Â 0).
            ADD[3:0]:
            These bits give the address of the USART node or a character code to be recognized.
            They are used for wakeup with address mark detection, in multiprocessor communication during Mute mode or low-power mode.
            These bits can only be written when reception is disabled (RE = 0) or the USART is disabled (UEÂ =Â 0).</description>
            <name>ADD</name>
          </field>
        </fields>
        <name>CR2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x8</addressOffset>
        <description>Control register 3</description>
        <displayName>CR3</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Error interrupt enable
            Error Interrupt Enable Bit is required to enable interrupt generation in case of a framing error, overrun error noise flag or SPI slave underrun error (FEÂ =Â 1 or OREÂ =Â 1 or NEÂ =Â 1 or UDR = 1 in the USART_ISR register).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>interrupt generated when FE = 1 or ORE = 1 or NE = 1 or UDR = 1 (in SPI slave mode) in       the USART_ISR register.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>EIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>IrDA mode enable
            This bit is set and cleared by software.
            This bit can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If IrDA mode is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>IrDA disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>IrDA enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>IREN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>IrDA low-power
            This bit is used for selecting between normal and low-power IrDA modes
            This bit can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If IrDA mode is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Normal mode</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Low-power mode</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>IRLP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Half-duplex selection
            Selection of Single-wire Half-duplex mode
            This bit can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Half duplex mode is not selected</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Half duplex mode is selected </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>HDSEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Smartcard NACK enable
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If the USART does not support Smartcard mode, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>NACK transmission in case of parity error is disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>NACK transmission during parity error is enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>NACK</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Smartcard mode enable
            This bit is used for enabling Smartcard mode.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If the USART does not support Smartcard mode, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Smartcard Mode disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Smartcard Mode enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>SCEN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>DMA enable receiver
            This bit is set/reset by software</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>DMA mode is enabled for reception</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>DMA mode is disabled for reception</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>DMAR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>DMA enable transmitter
            This bit is set/reset by software</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>DMA mode is enabled for transmission</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>DMA mode is disabled for transmission</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>DMAT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RTS enable
            This bit can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If the hardware flow control feature is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>RTS hardware flow control disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>RTS output enabled, data is only requested when there is space in the receive buffer. The transmission of data is expected to cease after the current character has been transmitted. The nRTS output is asserted (pulled to 0) when data can be received.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RTSE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>CTS enable
            This bit can only be written when the USART is disabled (UEÂ =Â 0)
            Note: If the hardware flow control feature is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>CTS hardware flow control disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CTS mode enabled, data is only transmitted when the nCTS input is asserted (tied to 0). If the nCTS input is deasserted while data is being transmitted, then the transmission is completed before stopping. If data is written into the data register while nCTS is asserted, the transmission is postponed until nCTS is asserted.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CTSE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>CTS interrupt enable
            Note: If the hardware flow control feature is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt is inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>An interrupt is generated whenever CTSIF = 1 in the USART_ISR register  </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CTSIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>One sample bit method enable
            This bit enables the user to select the sample method. When the one sample bit method is selected the noise detection flag (NE) is disabled.
            This bit can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Three sample bit method</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>One sample bit method</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>ONEBIT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Overrun Disable
            This bit is used to disable the receive overrun detection.
            the ORE flag is not set and the new received data overwrites the previous content of the USART_RDR register. When FIFO mode is enabled, the RXFIFO is bypassed and data is written directly in USART_RDR register. Even when FIFO management is enabled, the RXNE flag is to be used.
            This bit can only be written when the USART is disabled (UEÂ =Â 0).
            Note: This control bit enables checking the communication flow w/o reading the data</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Overrun Error Flag, ORE, is set when received data is not read before receiving new data. </description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Overrun functionality is disabled. If new data is received while the RXNE flag is still set</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>OVRDIS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>DMA Disable on Reception Error
            This bit can only be written when the USART is disabled (UE=0).
            Note: The reception errors are: parity error, framing error or noise error.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>DMA is not disabled in case of reception error. The corresponding error flag is set but RXNE is kept 0 preventing from overrun. As a consequence, the DMA request is not asserted, so the erroneous data is not transferred (no DMA request), but next correct received data is transferred (used for Smartcard mode).</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>DMA is disabled following a reception error. The corresponding error flag is set, as well as RXNE. The DMA request is masked until the error flag is cleared. This means that the software must first disable the DMA request (DMAR = 0) or clear RXNE/RXFNE is case FIFO mode is enabled) before clearing the error flag.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>DDRE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Driver enable mode
            This bit enables the user to activate the external transceiver control, through the DE signal.
            This bit can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If the Driver Enable feature is not supported, this bit is reserved and must be kept at reset value. .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>DE function is disabled. </description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>DE function is enabled. The DE signal is output on the RTS pin.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>DEM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Driver enable polarity selection
            This bit can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If the Driver Enable feature is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>DE signal is active high. </description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>DE signal is active low.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>DEP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Smartcard auto-retry count
            This bitfield specifies the number of retries for transmission and reception in Smartcard mode.
            In transmission mode, it specifies the number of automatic retransmission retries, before generating a transmission error (FE bit set).
            In reception mode, it specifies the number or erroneous reception trials, before generating a reception error (RXNE/RXFNE and PE bits set).
            This bitfield must be programmed only when the USART is disabled (UEÂ =Â 0).
            When the USART is enabled (UEÂ =Â 1), this bitfield may only be written to 0x0, in order to stop retransmission.
            Note: If Smartcard mode is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>retransmission disabled - No automatic retransmission in transmit mode. </description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>number of automatic retransmission attempts (before signaling error)</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>number of automatic retransmission attempts (before signaling error)</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>number of automatic retransmission attempts (before signaling error)</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>number of automatic retransmission attempts (before signaling error)</description>
                <name>B_0x4</name>
                <value>0x4</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>number of automatic retransmission attempts (before signaling error)</description>
                <name>B_0x5</name>
                <value>0x5</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>number of automatic retransmission attempts (before signaling error)</description>
                <name>B_0x6</name>
                <value>0x6</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>number of automatic retransmission attempts (before signaling error)</description>
                <name>B_0x7</name>
                <value>0x7</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>SCARCNT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Wakeup from low-power mode interrupt flag selection
            This bitfield specifies the event which activates the WUF (Wakeup from low-power mode flag).
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).
            If the USART does not support the wakeup from Stop feature, this bit is reserved and must be kept at reset value. Refer to pageÂ 835.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>WUF active on address match (as defined by ADD[7:0] and ADDM7)</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>WUF active on start bit detection</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>WUF active on RXNE/RXFNE. </description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>WUS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Wakeup from low-power mode interrupt enable
            This bit is set and cleared by software.
            Note: WUFIE must be set before entering in low-power mode.
            If the USART does not support the wakeup from Stop feature, this bit is reserved and must be kept at reset value. Refer to pageÂ 835.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated whenever WUF = 1 in the USART_ISR register  </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>WUFIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>TXFIFO threshold interrupt enable
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated when TXFIFO reaches the threshold programmed in TXFTCFG.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TXFTIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmission Complete before guard time, interrupt enable
            This bit is set and cleared by software.
            Note: If the USART does not support the Smartcard mode, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated whenever TCBGT=1 in the USART_ISR register</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TCBGTIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Receive FIFO threshold configuration
            Remaining combinations: Reserved</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receive FIFO reaches 1/8 of its depth</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receive FIFO reaches 1/4 of its depth</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receive FIFO reaches 1/2 of its depth</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receive FIFO reaches 3/4 of its depth</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receive FIFO reaches 7/8 of its depth</description>
                <name>B_0x4</name>
                <value>0x4</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receive FIFO becomes full</description>
                <name>B_0x5</name>
                <value>0x5</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RXFTCFG</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RXFIFO threshold interrupt enable
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated when Receive FIFO reaches the threshold programmed in RXFTCFG.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RXFTIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>TXFIFO threshold configuration
            Remaining combinations: Reserved</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>TXFIFO reaches 1/8 of its depth</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>TXFIFO reaches 1/4 of its depth</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>TXFIFO reaches 1/2 of its depth</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>TXFIFO reaches 3/4 of its depth</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>TXFIFO reaches 7/8 of its depth</description>
                <name>B_0x4</name>
                <value>0x4</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>TXFIFO becomes empty</description>
                <name>B_0x5</name>
                <value>0x5</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TXFTCFG</name>
          </field>
        </fields>
        <name>CR3</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0xC</addressOffset>
        <description>Baud rate register</description>
        <displayName>BRR</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>USART baud rate</description>
            <name>BRR</name>
          </field>
        </fields>
        <name>BRR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x10</addressOffset>
        <description>Guard time and prescaler
                  register</description>
        <displayName>GTPR</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>Prescaler value
            In IrDA low-power and normal IrDA mode:
            PSC[7:0] = IrDA Normal and Low-Power baud rate
            PSC[7:0] is used to program the prescaler for dividing the USART source clock to achieve the low-power frequency: the source clock is divided by the value given in the register (8 significant bits):
            In Smartcard mode:
            PSC[4:0]Â =Â Prescaler value
            PSC[4:0] is used to program the prescaler for dividing the USART source clock to provide the Smartcard clock. The value given in the register (5 significant bits) is multiplied by 2 to give the division factor of the source clock frequency:
            ...
            0010Â 0000: Divides the source clock by 32 (IrDA mode)
            ...
            1111Â 1111: Divides the source clock by 255 (IrDA mode)
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).
            Note: Bits [7:5] must be kept cleared if Smartcard mode is used.
            This bitfield is reserved and forced by hardware to '0â when the Smartcard and IrDA modes are not supported. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Reserved - do not program this value</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Divides the source clock by 1 (IrDA mode) / by 2 (Smarcard mode)</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Divides the source clock by 2 (IrDA mode) / by 4 (Smartcard mode)</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Divides the source clock by 3 (IrDA mode) / by 6 (Smartcard mode)</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Divides the source clock by 31 (IrDA mode) / by 62 (Smartcard mode)</description>
                <name>B_0x1F</name>
                <value>0x1F</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>PSC</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>Guard time value
            This bitfield is used to program the Guard time value in terms of number of baud clock periods.
            This is used in Smartcard mode. The Transmission Complete flag is set after this guard time value.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If Smartcard mode is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <name>GT</name>
          </field>
        </fields>
        <name>GTPR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x14</addressOffset>
        <description>Receiver timeout register</description>
        <displayName>RTOR</displayName>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x18</bitWidth>
            <description>Receiver timeout value</description>
            <name>RTO</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>Block Length</description>
            <name>BLEN</name>
          </field>
        </fields>
        <name>RTOR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>write-only</access>
        <addressOffset>0x18</addressOffset>
        <description>Request register</description>
        <displayName>RQR</displayName>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Auto baud rate request
            Writing 1 to this bit resets the ABRF flag in the USART_ISR and requests an automatic baud rate measurement on the next received data frame.
            Note: If the USART does not support the auto baud rate feature, this bit is reserved and must be kept at reset value. Refer to .</description>
            <name>ABRRQ</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Send break request
            Writing 1 to this bit sets the SBKF flag and request to send a BREAK on the line, as soon as the transmit machine is available.
            Note: When the application needs to send the break character following all previously inserted data, including the ones not yet transmitted, the software should wait for the TXE flag assertion before setting the SBKRQ bit.</description>
            <name>SBKRQ</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Mute mode request
            Writing 1 to this bit puts the USART in Mute mode and resets the RWU flag.</description>
            <name>MMRQ</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receive data flush request
            Writing 1 to this bit empties the entire receive FIFO i.e. clears the bit RXFNE.
            This enables to discard the received data without reading them, and avoid an overrun condition.</description>
            <name>RXFRQ</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmit data flush request
            When FIFO mode is disabled, writing '1â to this bit sets the TXE flag. This enables to discard the transmit data. This bit must be used only in Smartcard mode, when data have not been sent due to errors (NACK) and the FE flag is active in the USART_ISR register. If the USART does not support Smartcard mode, this bit is reserved and must be kept at reset value.
            When FIFO is enabled, TXFRQ bit is set to flush the whole FIFO. This sets the TXFE flag (Transmit FIFO empty, bit 23 in the USART_ISR register). Flushing the Transmit FIFO is supported in both UART and Smartcard modes.
            Note: In FIFO mode, the TXFNF flag is reset during the flush request until TxFIFO is empty in order to ensure that no data are written in the data register.</description>
            <name>TXFRQ</name>
          </field>
        </fields>
        <name>RQR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-only</access>
        <addressOffset>0x1C</addressOffset>
        <description>Interrupt &amp; status
                  register</description>
        <displayName>ISR_FIFO_ENABLED</displayName>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Parity error
            This bit is set by hardware when a parity error occurs in receiver mode. It is cleared by software, writing 1 to the PECF in the USART_ICR register.
            An interrupt is generated if PEIE = 1 in the USART_CR1 register.
            Note: This error is associated with the character in the USART_RDR.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No parity error</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Parity error</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>PE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Framing error
            This bit is set by hardware when a de-synchronization, excessive noise or a break character is detected. It is cleared by software, writing 1 to the FECF bit in the USART_ICR register.
            When transmitting data in Smartcard mode, this bit is set when the maximum number of transmit attempts is reached without success (the card NACKs the data frame).
            An interrupt is generated if EIEÂ =Â 1 in the USART_CR1 register.
            Note: This error is associated with the character in the USART_RDR.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No Framing error is detected</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Framing error or break character is detected</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>FE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Noise detection flag
            This bit is set by hardware when noise is detected on a received frame. It is cleared by software, writing 1 to the NECF bit in the USART_ICR register.
            Note: This bit does not generate an interrupt as it appears at the same time as the RXFNE bit which itself generates an interrupt. An interrupt is generated when the NE flag is set during multi buffer communication if the EIE bit is set.
            When the line is noise-free, the NE flag can be disabled by programming the ONEBIT bit to 1 to increase the USART tolerance to deviations (Refer to Tolerance of the USART receiver to clock deviation on pageÂ 861).
            This error is associated with the character in the USART_RDR.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No noise is detected</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Noise is detected</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>NE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Overrun error
            This bit is set by hardware when the data currently being received in the shift register is
            ready to be transferred into the USART_RDR register while RXFF = 1. It is cleared by a software, writing 1 to the ORECF, in the USART_ICR register.
            An interrupt is generated if RXFNEIEÂ =Â 1 or EIE = 1 in the USART_CR1 register.
            Note: When this bit is set, the USART_RDR register content is not lost but the shift register is overwritten. An interrupt is generated if the ORE flag is set during multi buffer communication if the EIE bit is set.
            This bit is permanently forced to 0 (no overrun detection) when the bit OVRDIS is set in the USART_CR3 register.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No overrun error</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Overrun error is detected</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>ORE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Idle line detected
            This bit is set by hardware when an Idle Line is detected. An interrupt is generated if IDLEIEÂ =Â 1 in the USART_CR1 register. It is cleared by software, writing 1 to the IDLECF in the USART_ICR register.
            Note: The IDLE bit is not set again until the RXFNE bit has been set (i.e. a new idle line occurs).
            If Mute mode is enabled (MMEÂ =Â 1), IDLE is set if the USART is not mute (RWUÂ =Â 0), whatever the Mute mode selected by the WAKE bit. If RWUÂ =Â 1, IDLE is not set.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No Idle line is detected</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Idle line is detected</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>IDLE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RXFIFO not empty
            RXFNE bit is set by hardware when the RXFIFO is not empty, meaning that data can be read from the USART_RDR register. Every read operation from the USART_RDR frees a location in the RXFIFO.
            RXFNE is cleared when the RXFIFO is empty. The RXFNE flag can also be cleared by writing 1 to the RXFRQ in the USART_RQR register.
            An interrupt is generated if RXFNEIEÂ =Â 1 in the USART_CR1 register.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Data is not received</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Received data is ready to be read.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RXFNE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmission complete
            This bit indicates that the last data written in the USART_TDR has been transmitted out of the shift register.
            It is set by hardware when the transmission of a frame containing data is complete and when TXFE is set.
            An interrupt is generated if TCIEÂ =Â 1 in the USART_CR1 register.
            TC bit is is cleared by software, by writing 1 to the TCCF in the USART_ICR register or by a write to the USART_TDR register.
            Note: If TE bit is reset and no transmission is on going, the TC bit is immediately set.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Transmission is not complete</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Transmission is complete</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TC</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>TXFIFO not full
            TXFNF is set by hardware when TXFIFO is not full meaning that data can be written in the USART_TDR. Every write operation to the USART_TDR places the data in the TXFIFO. This flag remains set until the TXFIFO is full. When the TXFIFO is full, this flag is cleared indicating that data can not be written into the USART_TDR.
            An interrupt is generated if the TXFNFIE bit =1 in the USART_CR1 register.
            Note: The TXFNF is kept reset during the flush request until TXFIFO is empty. After sending the flush request (by setting TXFRQ bit), the flag TXFNF should be checked prior to writing in TXFIFO (TXFNF and TXFE are set at the same time).
            This bit is used during single buffer transmission.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Transmit FIFO is full</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Transmit FIFO is not full</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TXFNF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>LIN break detection flag
            This bit is set by hardware when the LIN break is detected. It is cleared by software, by writing 1 to the LBDCF in the USART_ICR.
            An interrupt is generated if LBDIE = 1 in the USART_CR2 register.
            Note: If the USART does not support LIN mode, this bit is reserved and kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>LIN Break not detected</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>LIN break detected</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>LBDF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>CTS interrupt flag
            This bit is set by hardware when the nCTS input toggles, if the CTSE bit is set. It is cleared by software, by writing 1 to the CTSCF bit in the USART_ICR register.
            An interrupt is generated if CTSIEÂ =Â 1 in the USART_CR3 register.
            Note: If the hardware flow control feature is not supported, this bit is reserved and kept at reset value.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No change occurred on the nCTS status line</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>A change occurred on the nCTS status line</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CTSIF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>CTS flag
            This bit is set/reset by hardware. It is an inverted copy of the status of the nCTS input pin.
            Note: If the hardware flow control feature is not supported, this bit is reserved and kept at reset value.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>nCTS line set</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>nCTS line reset</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CTS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receiver timeout
            This bit is set by hardware when the timeout value, programmed in the RTOR register has lapsed, without any communication. It is cleared by software, writing 1 to the RTOCF bit in the USART_ICR register.
            An interrupt is generated if RTOIEÂ =Â 1 in the USART_CR2 register.
            In Smartcard mode, the timeout corresponds to the CWT or BWT timings.
            Note: If a time equal to the value programmed in RTOR register separates 2 characters, RTOF is not set. If this time exceeds this value + 2 sample times (2/16 or 2/8, depending on the oversampling method), RTOF flag is set.
            The counter counts even if RE = 0 but RTOF is set only when RE = 1. If the timeout has already elapsed when RE is set, then RTOF is set.
            If the USART does not support the Receiver timeout feature, this bit is reserved and kept at reset value.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Timeout value not reached</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Timeout value reached without any data reception</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RTOF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>End of block flag
            This bit is set by hardware when a complete block has been received (for example TÂ =Â 1 Smartcard mode). The detection is done when the number of received bytes (from the start of the block, including the prologue) is equal or greater than BLEN + 4.
            An interrupt is generated if the EOBIEÂ =Â 1 in the USART_CR2 register.
            It is cleared by software, writing 1 to the EOBCF in the USART_ICR register.
            Note: If Smartcard mode is not supported, this bit is reserved and kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>End of Block not reached</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>End of Block (number of characters) reached</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>EOBF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI slave underrun error flag
            In slave transmission mode, this flag is set when the first clock pulse for data transmission appears while the software has not yet loaded any value into USART_TDR. This flag is reset by setting UDRCF bit in the USART_ICR register.
            Note: If the USART does not support the SPI slave mode, this bit is reserved and kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No underrun error</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>underrun error</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>UDR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Auto baud rate error
            This bit is set by hardware if the baud rate measurement failed (baud rate out of range or character comparison failed)
            It is cleared by software, by writing 1 to the ABRRQ bit in the USART_CR3 register.
            Note: If the USART does not support the auto baud rate feature, this bit is reserved and kept at reset value.</description>
            <name>ABRE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Auto baud rate flag
            This bit is set by hardware when the automatic baud rate has been set (RXFNE is also set, generating an interrupt if RXFNEIE = 1) or when the auto baud rate operation was completed without success (ABREÂ =Â 1) (ABRE, RXFNE and FE are also set in this case)
            It is cleared by software, in order to request a new auto baud rate detection, by writing 1 to the ABRRQ in the USART_RQR register.
            Note: If the USART does not support the auto baud rate feature, this bit is reserved and kept at reset value.</description>
            <name>ABRF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Busy flag
            This bit is set and reset by hardware. It is active when a communication is ongoing on the RX line (successful start bit detected). It is reset at the end of the reception (successful or not).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART is idle (no reception)</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Reception on going</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>BUSY</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Character match flag
            This bit is set by hardware, when a the character defined by ADD[7:0] is received. It is cleared by software, writing 1 to the CMCF in the USART_ICR register.
            An interrupt is generated if CMIEÂ =Â 1in the USART_CR1 register.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No Character match detected</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Character Match detected</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CMF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Send break flag
            This bit indicates that a send break character was requested. It is set by software, by writing 1 to the SBKRQ bit in the USART_CR3 register. It is automatically reset by hardware during the stop bit of break transmission.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Break character transmitted</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Break character requested by setting SBKRQ bit in USART_RQR register</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>SBKF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receiver wakeup from Mute mode
            This bit indicates if the USART is in Mute mode. It is cleared/set by hardware when a wakeup/mute sequence is recognized. The Mute mode control sequence (address or IDLE) is selected by the WAKE bit in the USART_CR1 register.
            When wakeup on IDLE mode is selected, this bit can only be set by software, writing 1 to the MMRQ bit in the USART_RQR register.
            Note: If the USART does not support the wakeup from Stop feature, this bit is reserved and kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receiver in active mode</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receiver in Mute mode</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RWU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Wakeup from low-power mode flag
            This bit is set by hardware, when a wakeup event is detected. The event is defined by the WUS bitfield. It is cleared by software, writing a 1 to the WUCF in the USART_ICR register.
            An interrupt is generated if WUFIEÂ =Â 1 in the USART_CR3 register.
            Note: When UESM is cleared, WUF flag is also cleared.
            If the USART does not support the wakeup from Stop feature, this bit is reserved and kept at reset value. Refer to .</description>
            <name>WUF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmit enable acknowledge flag
            This bit is set/reset by hardware, when the Transmit Enable value is taken into account by the USART.
            It can be used when an idle frame request is generated by writing TEÂ =Â 0, followed by TEÂ =Â 1 in the USART_CR1 register, in order to respect the TEÂ =Â 0 minimum period.</description>
            <name>TEACK</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receive enable acknowledge flag
            This bit is set/reset by hardware, when the Receive Enable value is taken into account by the USART.
            It can be used to verify that the USART is ready for reception before entering low-power mode.
            Note: If the USART does not support the wakeup from Stop feature, this bit is reserved and kept at reset value. Refer to .</description>
            <name>REACK</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>TXFIFO empty
            This bit is set by hardware when TXFIFO is empty. When the TXFIFO contains at least one data, this flag is cleared. The TXFE flag can also be set by writing 1 to the bit TXFRQ (bit 4) in the USART_RQR register.
            An interrupt is generated if the TXFEIE bit Â =Â 1 (bit 30) in the USART_CR1 register.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>TXFIFO not empty.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>TXFIFO empty.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TXFE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RXFIFO full
            This bit is set by hardware when the number of received data corresponds to RXFIFOÂ sizeÂ +Â 1 (RXFIFO full + 1 data in the USART_RDR register.
            An interrupt is generated if the RXFFIE bit Â =Â 1 in the USART_CR1 register.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>RXFIFO not full.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>RXFIFO Full.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RXFF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmission complete before guard time flag
            This bit is set when the last data written in the USART_TDR has been transmitted correctly out of the shift register.
            It is set by hardware in Smartcard mode, if the transmission of a frame containing data is complete and if the smartcard did not send back any NACK. An interrupt is generated if TCBGTIEÂ =Â 1 in the USART_CR3 register.
            This bit is cleared by software, by writing 1 to the TCBGTCF in the USART_ICR register or by a write to the USART_TDR register.
            Note: If the USART does not support the Smartcard mode, this bit is reserved and kept at reset value. If the USART supports the Smartcard mode and the Smartcard mode is enabled, the TCBGT reset value is '1â. Refer to on pageÂ 835.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Transmission is not complete or transmission is complete unsuccessfully (i.e. a NACK is received from the card)</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Transmission is complete successfully (before Guard time completion and there is no NACK from the smart card).</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TCBGT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RXFIFO threshold flag
            This bit is set by hardware when the threshold programmed in RXFTCFG in USART_CR3 register is reached. This means that there are (RXFTCFG - 1) data in the Receive FIFO and one data in the USART_RDR register. An interrupt is generated if the RXFTIE bit Â =Â 1 (bit 27) in the USART_CR3 register.
            Note: When the RXFTCFG threshold is configured to '101â, RXFT flag is set if 16 data are available i.e. 15 data in the RXFIFO and 1 data in the USART_RDR. Consequently, the 17th received data does not cause an overrun error. The overrun error occurs after receiving the 18th data.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receive FIFO does not reach the programmed threshold.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receive FIFO reached the programmed threshold.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RXFT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>TXFIFO threshold flag
            This bit is set by hardware when the TXFIFO reaches the threshold programmed in TXFTCFG of USART_CR3 register i.e. the TXFIFO contains TXFTCFG empty locations. An interrupt is generated if the TXFTIE bit Â =Â 1 (bit 31) in the USART_CR3 register.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>TXFIFO does not reach the programmed threshold.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>TXFIFO reached the programmed threshold.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TXFT</name>
          </field>
        </fields>
        <name>ISR_FIFO_ENABLED</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x8000C0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-only</access>
        <addressOffset>0x1C</addressOffset>
        <description>Interrupt &amp; status
                  register</description>
        <displayName>ISR_FIFO_DISABLED</displayName>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Parity error
            This bit is set by hardware when a parity error occurs in receiver mode. It is cleared by software, writing 1 to the PECF in the USART_ICR register.
            An interrupt is generated if PEIE = 1 in the USART_CR1 register.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No parity error</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Parity error</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>PE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Framing error
            This bit is set by hardware when a de-synchronization, excessive noise or a break character is detected. It is cleared by software, writing 1 to the FECF bit in the USART_ICR register.
            When transmitting data in Smartcard mode, this bit is set when the maximum number of transmit attempts is reached without success (the card NACKs the data frame).
            An interrupt is generated if EIEÂ =Â 1 in the USART_CR1 register.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No Framing error is detected</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Framing error or break character is detected</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>FE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Noise detection flag
            This bit is set by hardware when noise is detected on a received frame. It is cleared by software, writing 1 to the NECF bit in the USART_ICR register.
            Note: This bit does not generate an interrupt as it appears at the same time as the RXNE bit which itself generates an interrupt. An interrupt is generated when the NE flag is set during multi buffer communication if the EIE bit is set.
            When the line is noise-free, the NE flag can be disabled by programming the ONEBIT bit to 1 to increase the USART tolerance to deviations (Refer to Tolerance of the USART receiver to clock deviation on pageÂ 861).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No noise is detected</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Noise is detected</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>NE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Overrun error
            This bit is set by hardware when the data currently being received in the shift register is
            ready to be transferred into the USART_RDR register while RXNEÂ =Â 1. It is cleared by a software, writing 1 to the ORECF, in the USART_ICR register.
            An interrupt is generated if RXNEIEÂ =Â 1 or EIE Â =Â  1 in the USART_CR1 register.
            Note: When this bit is set, the USART_RDR register content is not lost but the shift register is overwritten. An interrupt is generated if the ORE flag is set during multi buffer communication if the EIE bit is set.
            This bit is permanently forced to 0 (no overrun detection) when the bit OVRDIS is set in the USART_CR3 register.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No overrun error</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Overrun error is detected</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>ORE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Idle line detected
            This bit is set by hardware when an Idle Line is detected. An interrupt is generated if IDLEIEÂ =Â 1 in the USART_CR1 register. It is cleared by software, writing 1 to the IDLECF in the USART_ICR register.
            Note: The IDLE bit is not set again until the RXNE bit has been set (i.e. a new idle line occurs).
            If Mute mode is enabled (MMEÂ =Â 1), IDLE is set if the USART is not mute (RWUÂ =Â 0), whatever the Mute mode selected by the WAKE bit. If RWUÂ =Â 1, IDLE is not set.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No Idle line is detected</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Idle line is detected</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>IDLE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Read data register not empty
            RXNE bit is set by hardware when the content of the USART_RDR shift register has been transferred to the USART_RDR register. It is cleared by reading from the USART_RDR register. The RXNE flag can also be cleared by writing 1 to the RXFRQ in the USART_RQR register.
            An interrupt is generated if RXNEIEÂ =Â 1 in the USART_CR1 register.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Data is not received</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Received data is ready to be read.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RXNE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmission complete
            This bit indicates that the last data written in the USART_TDR has been transmitted out of the shift register.
            It is set by hardware when the transmission of a frame containing data is complete and when TXE is set.
            An interrupt is generated if TCIEÂ =Â 1 in the USART_CR1 register.
            TC bit is is cleared by software, by writing 1 to the TCCF in the USART_ICR register or by a write to the USART_TDR register.
            Note: If TE bit is reset and no transmission is on going, the TC bit is set immediately.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Transmission is not complete</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Transmission is complete</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TC</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmit data register empty
            TXE is set by hardware when the content of the USART_TDR register has been transferred into the shift register. It is cleared by writing to the USART_TDR register. The TXE flag can also be set by writing 1 to the TXFRQ in the USART_RQR register, in order to discard the data (only in Smartcard TÂ =Â 0 mode, in case of transmission failure).
            An interrupt is generated if the TXEIE bit Â =Â 1 in the USART_CR1 register.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Data register full</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Data register not full</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TXE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>LIN break detection flag
            This bit is set by hardware when the LIN break is detected. It is cleared by software, by writing 1 to the LBDCF in the USART_ICR.
            An interrupt is generated if LBDIE = 1 in the USART_CR2 register.
            Note: If the USART does not support LIN mode, this bit is reserved and kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>LIN Break not detected</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>LIN break detected</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>LBDF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>CTS interrupt flag
            This bit is set by hardware when the nCTS input toggles, if the CTSE bit is set. It is cleared by software, by writing 1 to the CTSCF bit in the USART_ICR register.
            An interrupt is generated if CTSIEÂ =Â 1 in the USART_CR3 register.
            Note: If the hardware flow control feature is not supported, this bit is reserved and kept at reset value.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No change occurred on the nCTS status line</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>A change occurred on the nCTS status line</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CTSIF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>CTS flag
            This bit is set/reset by hardware. It is an inverted copy of the status of the nCTS input pin.
            Note: If the hardware flow control feature is not supported, this bit is reserved and kept at reset value.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>nCTS line set</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>nCTS line reset</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CTS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receiver timeout
            This bit is set by hardware when the timeout value, programmed in the RTOR register has lapsed, without any communication. It is cleared by software, writing 1 to the RTOCF bit in the USART_ICR register.
            An interrupt is generated if RTOIEÂ =Â 1 in the USART_CR2 register.
            In Smartcard mode, the timeout corresponds to the CWT or BWT timings.
            Note: If a time equal to the value programmed in RTOR register separates 2 characters, RTOF is not set. If this time exceeds this value + 2 sample times (2/16 or 2/8, depending on the oversampling method), RTOF flag is set.
            The counter counts even if RE = 0 but RTOF is set only when RE = 1. If the timeout has already elapsed when RE is set, then RTOF is set.
            If the USART does not support the Receiver timeout feature, this bit is reserved and kept at reset value.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Timeout value not reached</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Timeout value reached without any data reception</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RTOF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>End of block flag
            This bit is set by hardware when a complete block has been received (for example TÂ =Â 1 Smartcard mode). The detection is done when the number of received bytes (from the start of the block, including the prologue) is equal or greater than BLEN + 4.
            An interrupt is generated if the EOBIEÂ =Â 1 in the USART_CR2 register.
            It is cleared by software, writing 1 to the EOBCF in the USART_ICR register.
            Note: If Smartcard mode is not supported, this bit is reserved and kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>End of Block not reached</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>End of Block (number of characters) reached</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>EOBF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI slave underrun error flag
            In slave transmission mode, this flag is set when the first clock pulse for data transmission appears while the software has not yet loaded any value into USART_TDR. This flag is reset by setting UDRCF bit in the USART_ICR register.
            Note: If the USART does not support the SPI slave mode, this bit is reserved and kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No underrun error</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>underrun error</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>UDR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Auto baud rate error
            This bit is set by hardware if the baud rate measurement failed (baud rate out of range or character comparison failed)
            It is cleared by software, by writing 1 to the ABRRQ bit in the USART_CR3 register.
            Note: If the USART does not support the auto baud rate feature, this bit is reserved and kept at reset value.</description>
            <name>ABRE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Auto baud rate flag
            This bit is set by hardware when the automatic baud rate has been set (RXNE is also set, generating an interrupt if RXNEIE = 1) or when the auto baud rate operation was completed without success (ABREÂ =Â 1) (ABRE, RXNE and FE are also set in this case)
            It is cleared by software, in order to request a new auto baud rate detection, by writing 1 to the ABRRQ in the USART_RQR register.
            Note: If the USART does not support the auto baud rate feature, this bit is reserved and kept at reset value.</description>
            <name>ABRF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Busy flag
            This bit is set and reset by hardware. It is active when a communication is ongoing on the RX line (successful start bit detected). It is reset at the end of the reception (successful or not).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART is idle (no reception)</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Reception on going</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>BUSY</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Character match flag
            This bit is set by hardware, when a the character defined by ADD[7:0] is received. It is cleared by software, writing 1 to the CMCF in the USART_ICR register.
            An interrupt is generated if CMIEÂ =Â 1in the USART_CR1 register.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No Character match detected</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Character Match detected</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CMF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Send break flag
            This bit indicates that a send break character was requested. It is set by software, by writing 1 to the SBKRQ bit in the USART_CR3 register. It is automatically reset by hardware during the stop bit of break transmission.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Break character transmitted</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Break character requested by setting SBKRQ bit in USART_RQR register</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>SBKF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receiver wakeup from Mute mode
            This bit indicates if the USART is in Mute mode. It is cleared/set by hardware when a wakeup/mute sequence is recognized. The Mute mode control sequence (address or IDLE) is selected by the WAKE bit in the USART_CR1 register.
            When wakeup on IDLE mode is selected, this bit can only be set by software, writing 1 to the MMRQ bit in the USART_RQR register.
            Note: If the USART does not support the wakeup from Stop feature, this bit is reserved and kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receiver in active mode</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receiver in Mute mode</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RWU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Wakeup from low-power mode flag
            This bit is set by hardware, when a wakeup event is detected. The event is defined by the WUS bitfield. It is cleared by software, writing a 1 to the WUCF in the USART_ICR register.
            An interrupt is generated if WUFIEÂ =Â 1 in the USART_CR3 register.
            Note: When UESM is cleared, WUF flag is also cleared.
            If the USART does not support the wakeup from Stop feature, this bit is reserved and kept at reset value. Refer to .</description>
            <name>WUF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmit enable acknowledge flag
            This bit is set/reset by hardware, when the Transmit Enable value is taken into account by the USART.
            It can be used when an idle frame request is generated by writing TEÂ =Â 0, followed by TEÂ =Â 1 in the USART_CR1 register, in order to respect the TEÂ =Â 0 minimum period.</description>
            <name>TEACK</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receive enable acknowledge flag
            This bit is set/reset by hardware, when the Receive Enable value is taken into account by the USART.
            It can be used to verify that the USART is ready for reception before entering low-power mode.
            Note: If the USART does not support the wakeup from Stop feature, this bit is reserved and kept at reset value. Refer to .</description>
            <name>REACK</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmission complete before guard time flag
            This bit is set when the last data written in the USART_TDR has been transmitted correctly out of the shift register.
            It is set by hardware in Smartcard mode, if the transmission of a frame containing data is complete and if the smartcard did not send back any NACK. An interrupt is generated if TCBGTIEÂ =Â 1 in the USART_CR3 register.
            This bit is cleared by software, by writing 1 to the TCBGTCF in the USART_ICR register or by a write to the USART_TDR register.
            Note: If the USART does not support the Smartcard mode, this bit is reserved and kept at reset value. If the USART supports the Smartcard mode and the Smartcard mode is enabled, the TCBGT reset value is '1â. Refer to on pageÂ 835.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Transmission is not complete or transmission is complete unsuccessfully (i.e. a NACK is received from the card)</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Transmission is complete successfully (before Guard time completion and there is no NACK from the smart card).</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TCBGT</name>
          </field>
        </fields>
        <name>ISR_FIFO_DISABLED</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xC0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>write-only</access>
        <addressOffset>0x20</addressOffset>
        <description>Interrupt flag clear register</description>
        <displayName>ICR</displayName>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Parity error clear flag
            Writing 1 to this bit clears the PE flag in the USART_ISR register.</description>
            <name>PECF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Framing error clear flag
            Writing 1 to this bit clears the FE flag in the USART_ISR register.</description>
            <name>FECF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Noise detected clear flag
            Writing 1 to this bit clears the NE flag in the USART_ISR register.</description>
            <name>NECF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Overrun error clear flag
            Writing 1 to this bit clears the ORE flag in the USART_ISR register.</description>
            <name>ORECF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Idle line detected clear flag
            Writing 1 to this bit clears the IDLE flag in the USART_ISR register.</description>
            <name>IDLECF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>TXFIFO empty clear flag
            Writing 1 to this bit clears the TXFE flag in the USART_ISR register.</description>
            <name>TXFECF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmission complete clear flag
            Writing 1 to this bit clears the TC flag in the USART_ISR register.</description>
            <name>TCCF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmission complete before Guard time clear flag
            Writing 1 to this bit clears the TCBGT flag in the USART_ISR register.</description>
            <name>TCBGTCF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>LIN break detection clear flag
            Writing 1 to this bit clears the LBDF flag in the USART_ISR register.
            Note: If LIN mode is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <name>LBDCF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>CTS clear flag
            Writing 1 to this bit clears the CTSIF flag in the USART_ISR register.
            Note: If the hardware flow control feature is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <name>CTSCF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receiver timeout clear flag
            Writing 1 to this bit clears the RTOF flag in the USART_ISR register.
            Note: If the USART does not support the Receiver timeout feature, this bit is reserved and must be kept at reset value. Refer to pageÂ 835.</description>
            <name>RTOCF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>End of block clear flag
            Writing 1 to this bit clears the EOBF flag in the USART_ISR register.
            Note: If the USART does not support Smartcard mode, this bit is reserved and must be kept at reset value. Refer to .</description>
            <name>EOBCF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI slave underrun clear flag
            Writing 1 to this bit clears the UDRF flag in the USART_ISR register.
            Note: If the USART does not support SPI slave mode, this bit is reserved and must be kept at reset value. Refer to</description>
            <name>UDRCF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Character match clear flag
            Writing 1 to this bit clears the CMF flag in the USART_ISR register.</description>
            <name>CMCF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Wakeup from low-power mode clear flag
            Writing 1 to this bit clears the WUF flag in the USART_ISR register.
            Note: If the USART does not support the wakeup from Stop feature, this bit is reserved and must be kept at reset value. Refer to pageÂ 835.</description>
            <name>WUCF</name>
          </field>
        </fields>
        <name>ICR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-only</access>
        <addressOffset>0x24</addressOffset>
        <description>Receive data register</description>
        <displayName>RDR</displayName>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>Receive data value</description>
            <name>RDR</name>
          </field>
        </fields>
        <name>RDR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x28</addressOffset>
        <description>Transmit data register</description>
        <displayName>TDR</displayName>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>Transmit data value</description>
            <name>TDR</name>
          </field>
        </fields>
        <name>TDR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x2C</addressOffset>
        <description>Prescaler register</description>
        <displayName>PRESC</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Clock prescaler
            The USART input clock can be divided by a prescaler factor:
            Remaining combinations: Reserved
            Note: When PRESCALER is programmed with a value different of the allowed ones, programmed prescaler value is 1011 i.e. input clock divided by 256.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>input clock not divided</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>input clock divided by 2</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>input clock divided by 4</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>input clock divided by 6</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>input clock divided by 8</description>
                <name>B_0x4</name>
                <value>0x4</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>input clock divided by 10</description>
                <name>B_0x5</name>
                <value>0x5</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>input clock divided by 12</description>
                <name>B_0x6</name>
                <value>0x6</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>input clock divided by 16</description>
                <name>B_0x7</name>
                <value>0x7</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>input clock divided by 32</description>
                <name>B_0x8</name>
                <value>0x8</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>input clock divided by 64</description>
                <name>B_0x9</name>
                <value>0x9</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>input clock divided by 128</description>
                <name>B_0xA</name>
                <value>0xA</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>input clock divided by 256</description>
                <name>B_0xB</name>
                <value>0xB</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>PRESCALER</name>
          </field>
        </fields>
        <name>PRESC</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <resetMask>0xFFFFFFFF</resetMask>
    <resetValue>0x0</resetValue>
    <size>0x20</size>
  </peripheral>
</peripherals>
<peripherals>
  <peripheral>
    <addressBlock>
      <offset>0x0</offset>
      <size>0x400</size>
      <usage>registers</usage>
    </addressBlock>
    <baseAddress>0x40004C00</baseAddress>
    <derivedFrom>USART1</derivedFrom>
    <description>Universal synchronous asynchronous receiver
          transmitter</description>
    <groupName>USART</groupName>
    <interrupts>
      <interrupt>
        <name>USART1</name>
        <value>0x1B</value>
      </interrupt>
    </interrupts>
    <name>USART4</name>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x0</addressOffset>
        <description>Control register 1</description>
        <displayName>CR1_FIFO_ENABLED</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>USART enable
            When this bit is cleared, the USART prescalers and outputs are stopped immediately, and all current operations are discarded. The USART configuration is kept, but all the USART_ISR status flags are reset. This bit is set and cleared by software.
            Note: To enter low-power mode without generating errors on the line, the TE bit must be previously reset and the software must wait for the TC bit in the USART_ISR to be set before resetting the UE bit.
            The DMA requests are also reset when UE = 0 so the DMA channel must be disabled before resetting the UE bit.
            In Smartcard mode, (SCEN = 1), the SCLK is always available when CLKEN = 1, regardless of the UE bit value.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART prescaler and outputs disabled, low-power mode</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>UE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>USART enable in low-power mode
            When this bit is cleared, the USART cannot wake up the MCU from low-power mode.
            When this bit is set, the USART can wake up the MCU from low-power mode.
            This bit is set and cleared by software.
            Note: It is recommended to set the UESM bit just before entering low-power mode and clear it when exit from low-power mode.
            If the USART does not support the wakeup from Stop feature, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART not able to wake up the MCU from low-power mode.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART able to wake up the MCU from low-power mode. </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>UESM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receiver enable
            This bit enables the receiver. It is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receiver is disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receiver is enabled and begins searching for a start bit</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmitter enable
            This bit enables the transmitter. It is set and cleared by software.
            Note: During transmission, a low pulse on the TE bit ('0â followed by '1â) sends a preamble (idle line) after the current word, except in Smartcard mode. In order to generate an idle character, the TE must not be immediately written to '1â. To ensure the required duration, the software can poll the TEACK bit in the USART_ISR register.
            In Smartcard mode, when TE is set, there is a 1 bit-time delay before the transmission starts.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Transmitter is disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Transmitter is enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>IDLE interrupt enable
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated whenever IDLE = 1 in the USART_ISR register  </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>IDLEIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RXFIFO not empty interrupt enable
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated whenever ORE = 1 or RXFNE = 1 in the USART_ISR register    </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RXFNEIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmission complete interrupt enable
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated whenever TC = 1 in the USART_ISR register  </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TCIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>TXFIFO not full interrupt enable
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated whenever TXFNF =1 in the USART_ISR register</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TXFNFIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>PE interrupt enable
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated whenever PE = 1 in the USART_ISR register  </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>PEIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Parity selection
            This bit selects the odd or even parity when the parity generation/detection is enabled (PCE bit set). It is set and cleared by software. The parity is selected after the current byte.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Even parity</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Odd parity</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>PS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Parity control enable
            This bit selects the hardware parity control (generation and detection). When the parity control is enabled, the computed parity is inserted at the MSB position (9th bit if MÂ =Â 1; 8th bit if MÂ =Â 0) and the parity is checked on the received data. This bit is set and cleared by software. Once it is set, PCE is active after the current byte (in reception and in transmission).
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Parity control disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Parity control enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>PCE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receiver wakeup method
            This bit determines the USART wakeup method from Mute mode. It is set or cleared by software.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Idle line</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Address mark</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>WAKE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Word length
            This bit is used in conjunction with bit 28 (M1) to determine the word length. It is set or cleared by software (refer to bit 28 (M1)description).
            This bit can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <name>M0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Mute mode enable
            This bit enables the USART Mute mode function. When set, the USART can switch between active and Mute mode, as defined by the WAKE bit. It is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receiver in active mode permanently</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receiver can switch between Mute mode and active mode. </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>MME</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Character match interrupt enable
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated when the CMF bit is set in the USART_ISR register.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CMIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Oversampling mode
            This bit can only be written when the USART is disabled (UEÂ =Â 0).
            Note: In LIN, IrDA and Smartcard modes, this bit must be kept cleared.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Oversampling by 16</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Oversampling by 8</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>OVER8</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Driver Enable deassertion time
            This 5-bit value defines the time between the end of the last stop bit, in a transmitted message, and the de-activation of the DE (Driver Enable) signal. It is expressed in sample time units (1/8 or 1/16 bit time, depending on the oversampling rate).
            If the USART_TDR register is written during the DEDT time, the new data is transmitted only when the DEDT and DEAT times have both elapsed.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If the Driver Enable feature is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <name>DEDT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Driver Enable assertion time
            This 5-bit value defines the time between the activation of the DE (Driver Enable) signal and the beginning of the start bit. It is expressed in sample time units (1/8 or 1/16 bit time, depending on the oversampling rate).
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If the Driver Enable feature is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <name>DEAT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receiver timeout interrupt enable
            This bit is set and cleared by software.
            Note: If the USART does not support the Receiver timeout feature, this bit is reserved and must be kept at reset value. .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated when the RTOF bit is set in the USART_ISR register.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RTOIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>End of Block interrupt enable
            This bit is set and cleared by software.
            Note: If the USART does not support Smartcard mode, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated when the EOBF flag is set in the USART_ISR register</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>EOBIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Word length
            This bit must be used in conjunction with bit 12 (M0) to determine the word length. It is set or cleared by software.
            M[1:0] = '00â: 1 start bit, 8 Data bits, n Stop bit
            M[1:0] = '01â: 1 start bit, 9 Data bits, n Stop bit
            M[1:0] = '10â: 1 start bit, 7 Data bits, n Stop bit
            This bit can only be written when the USART is disabled (UEÂ =Â 0).
            Note: In 7-bits data length mode, the Smartcard mode, LIN master mode and Auto baud rate (0x7F and 0x55 frames detection) are not supported.</description>
            <name>M1</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>FIFO mode enable
            This bit is set and cleared by software.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).
            Note: FIFO mode can be used on standard UART communication, in SPI master/slave mode and in Smartcard modes only. It must not be enabled in IrDA and LIN modes.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>FIFO mode is disabled.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>FIFO mode is enabled.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>FIFOEN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>TXFIFO empty interrupt enable
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated when TXFE = 1 in the USART_ISR register  </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TXFEIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RXFIFO Full interrupt enable
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated when RXFF = 1 in the USART_ISR register  </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RXFFIE</name>
          </field>
        </fields>
        <name>CR1_FIFO_ENABLED</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x0</addressOffset>
        <description>Control register 1</description>
        <displayName>CR1_FIFO_DISABLED</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>USART enable
            When this bit is cleared, the USART prescalers and outputs are stopped immediately, and all current operations are discarded. The USART configuration is kept, but all the USART_ISR status flags are reset. This bit is set and cleared by software.
            Note: To enter low-power mode without generating errors on the line, the TE bit must be previously reset and the software must wait for the TC bit in the USART_ISR to be set before resetting the UE bit.
            The DMA requests are also reset when UE = 0 so the DMA channel must be disabled before resetting the UE bit.
            In Smartcard mode, (SCEN = 1), the SCLK is always available when CLKEN = 1, regardless of the UE bit value.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART prescaler and outputs disabled, low-power mode</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>UE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>USART enable in low-power mode
            When this bit is cleared, the USART cannot wake up the MCU from low-power mode.
            When this bit is set, the USART can wake up the MCU from low-power mode.
            This bit is set and cleared by software.
            Note: It is recommended to set the UESM bit just before entering low-power mode and clear it when exit from low-power mode.
            If the USART does not support the wakeup from Stop feature, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART not able to wake up the MCU from low-power mode.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART able to wake up the MCU from low-power mode. </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>UESM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receiver enable
            This bit enables the receiver. It is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receiver is disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receiver is enabled and begins searching for a start bit</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmitter enable
            This bit enables the transmitter. It is set and cleared by software.
            Note: During transmission, a low pulse on the TE bit ('0â followed by '1â) sends a preamble (idle line) after the current word, except in Smartcard mode. In order to generate an idle character, the TE must not be immediately written to '1â. To ensure the required duration, the software can poll the TEACK bit in the USART_ISR register.
            In Smartcard mode, when TE is set, there is a 1 bit-time delay before the transmission starts.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Transmitter is disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Transmitter is enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>IDLE interrupt enable
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated whenever IDLE = 1 in the USART_ISR register  </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>IDLEIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receive data register not empty
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated whenever ORE = 1 or RXNE = 1 in the USART_ISR register    </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RXNEIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmission complete interrupt enable
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated whenever TC = 1 in the USART_ISR register  </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TCIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmit data register empty
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated whenever TXE =1 in the USART_ISR register</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TXEIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>PE interrupt enable
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated whenever PE = 1 in the USART_ISR register  </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>PEIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Parity selection
            This bit selects the odd or even parity when the parity generation/detection is enabled (PCE bit set). It is set and cleared by software. The parity is selected after the current byte.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Even parity</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Odd parity</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>PS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Parity control enable
            This bit selects the hardware parity control (generation and detection). When the parity control is enabled, the computed parity is inserted at the MSB position (9th bit if MÂ =Â 1; 8th bit if MÂ =Â 0) and the parity is checked on the received data. This bit is set and cleared by software. Once it is set, PCE is active after the current byte (in reception and in transmission).
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Parity control disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Parity control enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>PCE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receiver wakeup method
            This bit determines the USART wakeup method from Mute mode. It is set or cleared by software.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Idle line</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Address mark</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>WAKE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Word length
            This bit is used in conjunction with bit 28 (M1) to determine the word length. It is set or cleared by software (refer to bit 28 (M1)description).
            This bit can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <name>M0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Mute mode enable
            This bit enables the USART Mute mode function. When set, the USART can switch between active and Mute mode, as defined by the WAKE bit. It is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receiver in active mode permanently</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receiver can switch between Mute mode and active mode. </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>MME</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Character match interrupt enable
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated when the CMF bit is set in the USART_ISR register.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CMIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Oversampling mode
            This bit can only be written when the USART is disabled (UEÂ =Â 0).
            Note: In LIN, IrDA and Smartcard modes, this bit must be kept cleared.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Oversampling by 16</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Oversampling by 8</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>OVER8</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Driver Enable deassertion time
            This 5-bit value defines the time between the end of the last stop bit, in a transmitted message, and the de-activation of the DE (Driver Enable) signal. It is expressed in sample time units (1/8 or 1/16 bit time, depending on the oversampling rate).
            If the USART_TDR register is written during the DEDT time, the new data is transmitted only when the DEDT and DEAT times have both elapsed.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If the Driver Enable feature is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <name>DEDT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Driver Enable assertion time
            This 5-bit value defines the time between the activation of the DE (Driver Enable) signal and the beginning of the start bit. It is expressed in sample time units (1/8 or 1/16 bit time, depending on the oversampling rate).
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If the Driver Enable feature is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <name>DEAT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receiver timeout interrupt enable
            This bit is set and cleared by software.
            Note: If the USART does not support the Receiver timeout feature, this bit is reserved and must be kept at reset value. .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated when the RTOF bit is set in the USART_ISR register.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RTOIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>End of Block interrupt enable
            This bit is set and cleared by software.
            Note: If the USART does not support Smartcard mode, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated when the EOBF flag is set in the USART_ISR register</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>EOBIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Word length
            This bit must be used in conjunction with bit 12 (M0) to determine the word length. It is set or cleared by software.
            M[1:0] = '00â: 1 start bit, 8 Data bits, n Stop bit
            M[1:0] = '01â: 1 start bit, 9 Data bits, n Stop bit
            M[1:0] = '10â: 1 start bit, 7 Data bits, n Stop bit
            This bit can only be written when the USART is disabled (UEÂ =Â 0).
            Note: In 7-bits data length mode, the Smartcard mode, LIN master mode and Auto baud rate (0x7F and 0x55 frames detection) are not supported.</description>
            <name>M1</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>FIFO mode enable
            This bit is set and cleared by software.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).
            Note: FIFO mode can be used on standard UART communication, in SPI master/slave mode and in Smartcard modes only. It must not be enabled in IrDA and LIN modes.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>FIFO mode is disabled.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>FIFO mode is enabled.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>FIFOEN</name>
          </field>
        </fields>
        <name>CR1_FIFO_DISABLED</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x4</addressOffset>
        <description>Control register 2</description>
        <displayName>CR2</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Synchronous Slave mode enable
            When the SLVEN bit is set, the synchronous slave mode is enabled.
            Note: When SPI slave mode is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Slave mode disabled.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Slave mode enabled.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>SLVEN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When the DIS_NSS bit is set, the NSS pin input is ignored.
            Note: When SPI slave mode is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>SPI slave selection depends on NSS input pin.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>SPI slave is always selected and NSS input pin is ignored.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>DIS_NSS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>7-bit Address Detection/4-bit Address Detection
            This bit is for selection between 4-bit address detection or 7-bit address detection.
            This bit can only be written when the USART is disabled (UEÂ =Â 0)
            Note: In 7-bit and 9-bit data modes, the address detection is done on 6-bit and 8-bit address (ADD[5:0] and ADD[7:0]) respectively.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>4-bit address detection</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>7-bit address detection (in 8-bit data mode)</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>ADDM7</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>LIN break detection length
            This bit is for selection between 11 bit or 10 bit break detection.
            This bit can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If LIN mode is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>10-bit break detection</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>11-bit break detection</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>LBDL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>LIN break detection interrupt enable
            Break interrupt mask (break detection using break delimiter).
            Note: If LIN mode is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt is inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>An interrupt is generated whenever LBDF = 1 in the USART_ISR register  </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>LBDIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Last bit clock pulse
            This bit is used to select whether the clock pulse associated with the last data bit transmitted (MSB) has to be output on the SCLK pin in synchronous mode.
            The last bit is the 7th or 8th or 9th data bit transmitted depending on the 7 or 8 or 9 bit format selected by the M bit in the USART_CR1 register.
            This bit can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If synchronous mode is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>The clock pulse of the last data bit is not output to the SCLK pin</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>The clock pulse of the last data bit is output to the SCLK pin</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>LBCL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Clock phase
            This bit is used to select the phase of the clock output on the SCLK pin in synchronous mode. It works in conjunction with the CPOL bit to produce the desired clock/data relationship (see  and )
            This bit can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If synchronous mode is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>The first clock transition is the first data capture edge</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>The second clock transition is the first data capture edge</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CPHA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Clock polarity
            This bit enables the user to select the polarity of the clock output on the SCLK pin in synchronous mode. It works in conjunction with the CPHA bit to produce the desired clock/data relationship
            This bit can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If synchronous mode is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Steady low value on SCLK pin outside transmission window</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Steady high value on SCLK pin outside transmission window</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CPOL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Clock enable
            This bit enables the user to enable the SCLK pin.
            This bit can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If neither synchronous mode nor Smartcard mode is supported, this bit is reserved and must be kept at reset value. Refer to .
            In Smartcard mode, in order to provide correctly the SCLK clock to the smartcard, the steps below must be respected:
            UE = 0
            SCEN = 1
            GTPR configuration
            CLKEN= 1
            UE = 1</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>SCLK pin disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>SCLK pin enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CLKEN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>stop bits
            These bits are used for programming the stop bits.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>1 stop bit</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>0.5 stop bit.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>2 stop bits</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>1.5 stop bits</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>STOP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>LIN mode enable
            This bit is set and cleared by software.
            The LIN mode enables the capability to send LIN synchronous breaks (13 low bits) using the SBKRQ bit in the USART_CR1 register, and to detect LIN Sync breaks.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If the USART does not support LIN mode, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>LIN mode disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>LIN mode enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>LINEN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Swap TX/RX pins
            This bit is set and cleared by software.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>TX/RX pins are used as defined in standard pinout</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>The TX and RX pins functions are swapped. This enables to work in the case of a cross-wired connection to another UART. </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>SWAP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RX pin active level inversion
            This bit is set and cleared by software.
            This enables the use of an external inverter on the RX line.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>RX pin signal works using the standard logic levels (VDD =1/idle, Gnd = 0/mark)   </description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>RX pin signal values are inverted (VDD =0/mark, Gnd = 1/idle).   </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RXINV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>TX pin active level inversion
            This bit is set and cleared by software.
            This enables the use of an external inverter on the TX line.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>TX pin signal works using the standard logic levels (VDD =1/idle, Gnd = 0/mark)   </description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>TX pin signal values are inverted (VDD =0/mark, Gnd = 1/idle).   </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TXINV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Binary data inversion
            This bit is set and cleared by software.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Logical data from the data register are send/received in positive/direct logic. (1 = H, 0 = L)     </description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Logical data from the data register are send/received in negative/inverse logic. (1 = L, 0 = H).     The parity bit is also inverted.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>DATAINV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Most significant bit first
            This bit is set and cleared by software.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>data is transmitted/received with data bit 0 first, following the start bit. </description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>data is transmitted/received with the MSB (bit 7/8) first, following the start bit. </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>MSBFIRST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Auto baud rate enable
            This bit is set and cleared by software.
            Note: If the USART does not support the auto baud rate feature, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Auto baud rate detection is disabled. </description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Auto baud rate detection is enabled. </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>ABREN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Auto baud rate mode
            These bits are set and cleared by software.
            This bitfield can only be written when ABREN = 0 or the USART is disabled (UEÂ =Â 0).
            Note: If DATAINVÂ =Â 1 and/or MSBFIRSTÂ =Â 1 the patterns must be the same on the line, for example 0xAA for MSBFIRST)
            If the USART does not support the auto baud rate feature, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Measurement of the start bit is used to detect the baud rate. </description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Falling edge to falling edge measurement (the received frame must start with a single bit = 1 and Frame = Start10xxxxxx)</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>0x7F frame detection.</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>0x55 frame detection</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>ABRMOD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receiver timeout enable
            This bit is set and cleared by software.
            When this feature is enabled, the RTOF flag in the USART_ISR register is set if the RX line is idle (no reception) for the duration programmed in the RTOR (receiver timeout register).
            Note: If the USART does not support the Receiver timeout feature, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receiver timeout feature disabled. </description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receiver timeout feature enabled. </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RTOEN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>Address of the USART node
            ADD[7:4]:
            These bits give the address of the USART node or a character code to be recognized.
            They are used to wake up the MCU with 7-bit address mark detection in multiprocessor communication during Mute mode or low-power mode. The MSB of the character sent by the transmitter should be equal to 1. They can also be used for character detection during normal reception, Mute mode inactive (for example, end of block detection in ModBus protocol). In this case, the whole received character (8-bit) is compared to the ADD[7:0] value and CMF flag is set on match.
            These bits can only be written when reception is disabled (RE = 0) or the USART is disabled (UEÂ =Â 0).
            ADD[3:0]:
            These bits give the address of the USART node or a character code to be recognized.
            They are used for wakeup with address mark detection, in multiprocessor communication during Mute mode or low-power mode.
            These bits can only be written when reception is disabled (RE = 0) or the USART is disabled (UEÂ =Â 0).</description>
            <name>ADD</name>
          </field>
        </fields>
        <name>CR2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x8</addressOffset>
        <description>Control register 3</description>
        <displayName>CR3</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Error interrupt enable
            Error Interrupt Enable Bit is required to enable interrupt generation in case of a framing error, overrun error noise flag or SPI slave underrun error (FEÂ =Â 1 or OREÂ =Â 1 or NEÂ =Â 1 or UDR = 1 in the USART_ISR register).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>interrupt generated when FE = 1 or ORE = 1 or NE = 1 or UDR = 1 (in SPI slave mode) in       the USART_ISR register.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>EIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>IrDA mode enable
            This bit is set and cleared by software.
            This bit can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If IrDA mode is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>IrDA disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>IrDA enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>IREN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>IrDA low-power
            This bit is used for selecting between normal and low-power IrDA modes
            This bit can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If IrDA mode is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Normal mode</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Low-power mode</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>IRLP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Half-duplex selection
            Selection of Single-wire Half-duplex mode
            This bit can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Half duplex mode is not selected</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Half duplex mode is selected </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>HDSEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Smartcard NACK enable
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If the USART does not support Smartcard mode, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>NACK transmission in case of parity error is disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>NACK transmission during parity error is enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>NACK</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Smartcard mode enable
            This bit is used for enabling Smartcard mode.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If the USART does not support Smartcard mode, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Smartcard Mode disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Smartcard Mode enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>SCEN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>DMA enable receiver
            This bit is set/reset by software</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>DMA mode is enabled for reception</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>DMA mode is disabled for reception</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>DMAR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>DMA enable transmitter
            This bit is set/reset by software</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>DMA mode is enabled for transmission</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>DMA mode is disabled for transmission</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>DMAT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RTS enable
            This bit can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If the hardware flow control feature is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>RTS hardware flow control disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>RTS output enabled, data is only requested when there is space in the receive buffer. The transmission of data is expected to cease after the current character has been transmitted. The nRTS output is asserted (pulled to 0) when data can be received.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RTSE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>CTS enable
            This bit can only be written when the USART is disabled (UEÂ =Â 0)
            Note: If the hardware flow control feature is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>CTS hardware flow control disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CTS mode enabled, data is only transmitted when the nCTS input is asserted (tied to 0). If the nCTS input is deasserted while data is being transmitted, then the transmission is completed before stopping. If data is written into the data register while nCTS is asserted, the transmission is postponed until nCTS is asserted.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CTSE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>CTS interrupt enable
            Note: If the hardware flow control feature is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt is inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>An interrupt is generated whenever CTSIF = 1 in the USART_ISR register  </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CTSIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>One sample bit method enable
            This bit enables the user to select the sample method. When the one sample bit method is selected the noise detection flag (NE) is disabled.
            This bit can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Three sample bit method</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>One sample bit method</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>ONEBIT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Overrun Disable
            This bit is used to disable the receive overrun detection.
            the ORE flag is not set and the new received data overwrites the previous content of the USART_RDR register. When FIFO mode is enabled, the RXFIFO is bypassed and data is written directly in USART_RDR register. Even when FIFO management is enabled, the RXNE flag is to be used.
            This bit can only be written when the USART is disabled (UEÂ =Â 0).
            Note: This control bit enables checking the communication flow w/o reading the data</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Overrun Error Flag, ORE, is set when received data is not read before receiving new data. </description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Overrun functionality is disabled. If new data is received while the RXNE flag is still set</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>OVRDIS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>DMA Disable on Reception Error
            This bit can only be written when the USART is disabled (UE=0).
            Note: The reception errors are: parity error, framing error or noise error.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>DMA is not disabled in case of reception error. The corresponding error flag is set but RXNE is kept 0 preventing from overrun. As a consequence, the DMA request is not asserted, so the erroneous data is not transferred (no DMA request), but next correct received data is transferred (used for Smartcard mode).</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>DMA is disabled following a reception error. The corresponding error flag is set, as well as RXNE. The DMA request is masked until the error flag is cleared. This means that the software must first disable the DMA request (DMAR = 0) or clear RXNE/RXFNE is case FIFO mode is enabled) before clearing the error flag.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>DDRE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Driver enable mode
            This bit enables the user to activate the external transceiver control, through the DE signal.
            This bit can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If the Driver Enable feature is not supported, this bit is reserved and must be kept at reset value. .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>DE function is disabled. </description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>DE function is enabled. The DE signal is output on the RTS pin.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>DEM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Driver enable polarity selection
            This bit can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If the Driver Enable feature is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>DE signal is active high. </description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>DE signal is active low.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>DEP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Smartcard auto-retry count
            This bitfield specifies the number of retries for transmission and reception in Smartcard mode.
            In transmission mode, it specifies the number of automatic retransmission retries, before generating a transmission error (FE bit set).
            In reception mode, it specifies the number or erroneous reception trials, before generating a reception error (RXNE/RXFNE and PE bits set).
            This bitfield must be programmed only when the USART is disabled (UEÂ =Â 0).
            When the USART is enabled (UEÂ =Â 1), this bitfield may only be written to 0x0, in order to stop retransmission.
            Note: If Smartcard mode is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>retransmission disabled - No automatic retransmission in transmit mode. </description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>number of automatic retransmission attempts (before signaling error)</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>number of automatic retransmission attempts (before signaling error)</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>number of automatic retransmission attempts (before signaling error)</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>number of automatic retransmission attempts (before signaling error)</description>
                <name>B_0x4</name>
                <value>0x4</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>number of automatic retransmission attempts (before signaling error)</description>
                <name>B_0x5</name>
                <value>0x5</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>number of automatic retransmission attempts (before signaling error)</description>
                <name>B_0x6</name>
                <value>0x6</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>number of automatic retransmission attempts (before signaling error)</description>
                <name>B_0x7</name>
                <value>0x7</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>SCARCNT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Wakeup from low-power mode interrupt flag selection
            This bitfield specifies the event which activates the WUF (Wakeup from low-power mode flag).
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).
            If the USART does not support the wakeup from Stop feature, this bit is reserved and must be kept at reset value. Refer to pageÂ 835.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>WUF active on address match (as defined by ADD[7:0] and ADDM7)</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>WUF active on start bit detection</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>WUF active on RXNE/RXFNE. </description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>WUS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Wakeup from low-power mode interrupt enable
            This bit is set and cleared by software.
            Note: WUFIE must be set before entering in low-power mode.
            If the USART does not support the wakeup from Stop feature, this bit is reserved and must be kept at reset value. Refer to pageÂ 835.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated whenever WUF = 1 in the USART_ISR register  </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>WUFIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>TXFIFO threshold interrupt enable
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated when TXFIFO reaches the threshold programmed in TXFTCFG.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TXFTIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmission Complete before guard time, interrupt enable
            This bit is set and cleared by software.
            Note: If the USART does not support the Smartcard mode, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated whenever TCBGT=1 in the USART_ISR register</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TCBGTIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Receive FIFO threshold configuration
            Remaining combinations: Reserved</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receive FIFO reaches 1/8 of its depth</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receive FIFO reaches 1/4 of its depth</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receive FIFO reaches 1/2 of its depth</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receive FIFO reaches 3/4 of its depth</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receive FIFO reaches 7/8 of its depth</description>
                <name>B_0x4</name>
                <value>0x4</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receive FIFO becomes full</description>
                <name>B_0x5</name>
                <value>0x5</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RXFTCFG</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RXFIFO threshold interrupt enable
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated when Receive FIFO reaches the threshold programmed in RXFTCFG.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RXFTIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>TXFIFO threshold configuration
            Remaining combinations: Reserved</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>TXFIFO reaches 1/8 of its depth</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>TXFIFO reaches 1/4 of its depth</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>TXFIFO reaches 1/2 of its depth</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>TXFIFO reaches 3/4 of its depth</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>TXFIFO reaches 7/8 of its depth</description>
                <name>B_0x4</name>
                <value>0x4</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>TXFIFO becomes empty</description>
                <name>B_0x5</name>
                <value>0x5</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TXFTCFG</name>
          </field>
        </fields>
        <name>CR3</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0xC</addressOffset>
        <description>Baud rate register</description>
        <displayName>BRR</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>USART baud rate</description>
            <name>BRR</name>
          </field>
        </fields>
        <name>BRR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x10</addressOffset>
        <description>Guard time and prescaler
                  register</description>
        <displayName>GTPR</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>Prescaler value
            In IrDA low-power and normal IrDA mode:
            PSC[7:0] = IrDA Normal and Low-Power baud rate
            PSC[7:0] is used to program the prescaler for dividing the USART source clock to achieve the low-power frequency: the source clock is divided by the value given in the register (8 significant bits):
            In Smartcard mode:
            PSC[4:0]Â =Â Prescaler value
            PSC[4:0] is used to program the prescaler for dividing the USART source clock to provide the Smartcard clock. The value given in the register (5 significant bits) is multiplied by 2 to give the division factor of the source clock frequency:
            ...
            0010Â 0000: Divides the source clock by 32 (IrDA mode)
            ...
            1111Â 1111: Divides the source clock by 255 (IrDA mode)
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).
            Note: Bits [7:5] must be kept cleared if Smartcard mode is used.
            This bitfield is reserved and forced by hardware to '0â when the Smartcard and IrDA modes are not supported. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Reserved - do not program this value</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Divides the source clock by 1 (IrDA mode) / by 2 (Smarcard mode)</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Divides the source clock by 2 (IrDA mode) / by 4 (Smartcard mode)</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Divides the source clock by 3 (IrDA mode) / by 6 (Smartcard mode)</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Divides the source clock by 31 (IrDA mode) / by 62 (Smartcard mode)</description>
                <name>B_0x1F</name>
                <value>0x1F</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>PSC</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>Guard time value
            This bitfield is used to program the Guard time value in terms of number of baud clock periods.
            This is used in Smartcard mode. The Transmission Complete flag is set after this guard time value.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If Smartcard mode is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <name>GT</name>
          </field>
        </fields>
        <name>GTPR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x14</addressOffset>
        <description>Receiver timeout register</description>
        <displayName>RTOR</displayName>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x18</bitWidth>
            <description>Receiver timeout value</description>
            <name>RTO</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>Block Length</description>
            <name>BLEN</name>
          </field>
        </fields>
        <name>RTOR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>write-only</access>
        <addressOffset>0x18</addressOffset>
        <description>Request register</description>
        <displayName>RQR</displayName>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Auto baud rate request
            Writing 1 to this bit resets the ABRF flag in the USART_ISR and requests an automatic baud rate measurement on the next received data frame.
            Note: If the USART does not support the auto baud rate feature, this bit is reserved and must be kept at reset value. Refer to .</description>
            <name>ABRRQ</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Send break request
            Writing 1 to this bit sets the SBKF flag and request to send a BREAK on the line, as soon as the transmit machine is available.
            Note: When the application needs to send the break character following all previously inserted data, including the ones not yet transmitted, the software should wait for the TXE flag assertion before setting the SBKRQ bit.</description>
            <name>SBKRQ</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Mute mode request
            Writing 1 to this bit puts the USART in Mute mode and resets the RWU flag.</description>
            <name>MMRQ</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receive data flush request
            Writing 1 to this bit empties the entire receive FIFO i.e. clears the bit RXFNE.
            This enables to discard the received data without reading them, and avoid an overrun condition.</description>
            <name>RXFRQ</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmit data flush request
            When FIFO mode is disabled, writing '1â to this bit sets the TXE flag. This enables to discard the transmit data. This bit must be used only in Smartcard mode, when data have not been sent due to errors (NACK) and the FE flag is active in the USART_ISR register. If the USART does not support Smartcard mode, this bit is reserved and must be kept at reset value.
            When FIFO is enabled, TXFRQ bit is set to flush the whole FIFO. This sets the TXFE flag (Transmit FIFO empty, bit 23 in the USART_ISR register). Flushing the Transmit FIFO is supported in both UART and Smartcard modes.
            Note: In FIFO mode, the TXFNF flag is reset during the flush request until TxFIFO is empty in order to ensure that no data are written in the data register.</description>
            <name>TXFRQ</name>
          </field>
        </fields>
        <name>RQR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-only</access>
        <addressOffset>0x1C</addressOffset>
        <description>Interrupt &amp; status
                  register</description>
        <displayName>ISR_FIFO_ENABLED</displayName>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Parity error
            This bit is set by hardware when a parity error occurs in receiver mode. It is cleared by software, writing 1 to the PECF in the USART_ICR register.
            An interrupt is generated if PEIE = 1 in the USART_CR1 register.
            Note: This error is associated with the character in the USART_RDR.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No parity error</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Parity error</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>PE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Framing error
            This bit is set by hardware when a de-synchronization, excessive noise or a break character is detected. It is cleared by software, writing 1 to the FECF bit in the USART_ICR register.
            When transmitting data in Smartcard mode, this bit is set when the maximum number of transmit attempts is reached without success (the card NACKs the data frame).
            An interrupt is generated if EIEÂ =Â 1 in the USART_CR1 register.
            Note: This error is associated with the character in the USART_RDR.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No Framing error is detected</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Framing error or break character is detected</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>FE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Noise detection flag
            This bit is set by hardware when noise is detected on a received frame. It is cleared by software, writing 1 to the NECF bit in the USART_ICR register.
            Note: This bit does not generate an interrupt as it appears at the same time as the RXFNE bit which itself generates an interrupt. An interrupt is generated when the NE flag is set during multi buffer communication if the EIE bit is set.
            When the line is noise-free, the NE flag can be disabled by programming the ONEBIT bit to 1 to increase the USART tolerance to deviations (Refer to Tolerance of the USART receiver to clock deviation on pageÂ 861).
            This error is associated with the character in the USART_RDR.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No noise is detected</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Noise is detected</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>NE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Overrun error
            This bit is set by hardware when the data currently being received in the shift register is
            ready to be transferred into the USART_RDR register while RXFF = 1. It is cleared by a software, writing 1 to the ORECF, in the USART_ICR register.
            An interrupt is generated if RXFNEIEÂ =Â 1 or EIE = 1 in the USART_CR1 register.
            Note: When this bit is set, the USART_RDR register content is not lost but the shift register is overwritten. An interrupt is generated if the ORE flag is set during multi buffer communication if the EIE bit is set.
            This bit is permanently forced to 0 (no overrun detection) when the bit OVRDIS is set in the USART_CR3 register.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No overrun error</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Overrun error is detected</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>ORE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Idle line detected
            This bit is set by hardware when an Idle Line is detected. An interrupt is generated if IDLEIEÂ =Â 1 in the USART_CR1 register. It is cleared by software, writing 1 to the IDLECF in the USART_ICR register.
            Note: The IDLE bit is not set again until the RXFNE bit has been set (i.e. a new idle line occurs).
            If Mute mode is enabled (MMEÂ =Â 1), IDLE is set if the USART is not mute (RWUÂ =Â 0), whatever the Mute mode selected by the WAKE bit. If RWUÂ =Â 1, IDLE is not set.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No Idle line is detected</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Idle line is detected</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>IDLE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RXFIFO not empty
            RXFNE bit is set by hardware when the RXFIFO is not empty, meaning that data can be read from the USART_RDR register. Every read operation from the USART_RDR frees a location in the RXFIFO.
            RXFNE is cleared when the RXFIFO is empty. The RXFNE flag can also be cleared by writing 1 to the RXFRQ in the USART_RQR register.
            An interrupt is generated if RXFNEIEÂ =Â 1 in the USART_CR1 register.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Data is not received</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Received data is ready to be read.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RXFNE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmission complete
            This bit indicates that the last data written in the USART_TDR has been transmitted out of the shift register.
            It is set by hardware when the transmission of a frame containing data is complete and when TXFE is set.
            An interrupt is generated if TCIEÂ =Â 1 in the USART_CR1 register.
            TC bit is is cleared by software, by writing 1 to the TCCF in the USART_ICR register or by a write to the USART_TDR register.
            Note: If TE bit is reset and no transmission is on going, the TC bit is immediately set.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Transmission is not complete</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Transmission is complete</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TC</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>TXFIFO not full
            TXFNF is set by hardware when TXFIFO is not full meaning that data can be written in the USART_TDR. Every write operation to the USART_TDR places the data in the TXFIFO. This flag remains set until the TXFIFO is full. When the TXFIFO is full, this flag is cleared indicating that data can not be written into the USART_TDR.
            An interrupt is generated if the TXFNFIE bit =1 in the USART_CR1 register.
            Note: The TXFNF is kept reset during the flush request until TXFIFO is empty. After sending the flush request (by setting TXFRQ bit), the flag TXFNF should be checked prior to writing in TXFIFO (TXFNF and TXFE are set at the same time).
            This bit is used during single buffer transmission.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Transmit FIFO is full</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Transmit FIFO is not full</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TXFNF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>LIN break detection flag
            This bit is set by hardware when the LIN break is detected. It is cleared by software, by writing 1 to the LBDCF in the USART_ICR.
            An interrupt is generated if LBDIE = 1 in the USART_CR2 register.
            Note: If the USART does not support LIN mode, this bit is reserved and kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>LIN Break not detected</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>LIN break detected</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>LBDF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>CTS interrupt flag
            This bit is set by hardware when the nCTS input toggles, if the CTSE bit is set. It is cleared by software, by writing 1 to the CTSCF bit in the USART_ICR register.
            An interrupt is generated if CTSIEÂ =Â 1 in the USART_CR3 register.
            Note: If the hardware flow control feature is not supported, this bit is reserved and kept at reset value.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No change occurred on the nCTS status line</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>A change occurred on the nCTS status line</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CTSIF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>CTS flag
            This bit is set/reset by hardware. It is an inverted copy of the status of the nCTS input pin.
            Note: If the hardware flow control feature is not supported, this bit is reserved and kept at reset value.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>nCTS line set</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>nCTS line reset</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CTS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receiver timeout
            This bit is set by hardware when the timeout value, programmed in the RTOR register has lapsed, without any communication. It is cleared by software, writing 1 to the RTOCF bit in the USART_ICR register.
            An interrupt is generated if RTOIEÂ =Â 1 in the USART_CR2 register.
            In Smartcard mode, the timeout corresponds to the CWT or BWT timings.
            Note: If a time equal to the value programmed in RTOR register separates 2 characters, RTOF is not set. If this time exceeds this value + 2 sample times (2/16 or 2/8, depending on the oversampling method), RTOF flag is set.
            The counter counts even if RE = 0 but RTOF is set only when RE = 1. If the timeout has already elapsed when RE is set, then RTOF is set.
            If the USART does not support the Receiver timeout feature, this bit is reserved and kept at reset value.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Timeout value not reached</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Timeout value reached without any data reception</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RTOF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>End of block flag
            This bit is set by hardware when a complete block has been received (for example TÂ =Â 1 Smartcard mode). The detection is done when the number of received bytes (from the start of the block, including the prologue) is equal or greater than BLEN + 4.
            An interrupt is generated if the EOBIEÂ =Â 1 in the USART_CR2 register.
            It is cleared by software, writing 1 to the EOBCF in the USART_ICR register.
            Note: If Smartcard mode is not supported, this bit is reserved and kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>End of Block not reached</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>End of Block (number of characters) reached</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>EOBF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI slave underrun error flag
            In slave transmission mode, this flag is set when the first clock pulse for data transmission appears while the software has not yet loaded any value into USART_TDR. This flag is reset by setting UDRCF bit in the USART_ICR register.
            Note: If the USART does not support the SPI slave mode, this bit is reserved and kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No underrun error</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>underrun error</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>UDR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Auto baud rate error
            This bit is set by hardware if the baud rate measurement failed (baud rate out of range or character comparison failed)
            It is cleared by software, by writing 1 to the ABRRQ bit in the USART_CR3 register.
            Note: If the USART does not support the auto baud rate feature, this bit is reserved and kept at reset value.</description>
            <name>ABRE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Auto baud rate flag
            This bit is set by hardware when the automatic baud rate has been set (RXFNE is also set, generating an interrupt if RXFNEIE = 1) or when the auto baud rate operation was completed without success (ABREÂ =Â 1) (ABRE, RXFNE and FE are also set in this case)
            It is cleared by software, in order to request a new auto baud rate detection, by writing 1 to the ABRRQ in the USART_RQR register.
            Note: If the USART does not support the auto baud rate feature, this bit is reserved and kept at reset value.</description>
            <name>ABRF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Busy flag
            This bit is set and reset by hardware. It is active when a communication is ongoing on the RX line (successful start bit detected). It is reset at the end of the reception (successful or not).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART is idle (no reception)</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Reception on going</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>BUSY</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Character match flag
            This bit is set by hardware, when a the character defined by ADD[7:0] is received. It is cleared by software, writing 1 to the CMCF in the USART_ICR register.
            An interrupt is generated if CMIEÂ =Â 1in the USART_CR1 register.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No Character match detected</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Character Match detected</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CMF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Send break flag
            This bit indicates that a send break character was requested. It is set by software, by writing 1 to the SBKRQ bit in the USART_CR3 register. It is automatically reset by hardware during the stop bit of break transmission.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Break character transmitted</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Break character requested by setting SBKRQ bit in USART_RQR register</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>SBKF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receiver wakeup from Mute mode
            This bit indicates if the USART is in Mute mode. It is cleared/set by hardware when a wakeup/mute sequence is recognized. The Mute mode control sequence (address or IDLE) is selected by the WAKE bit in the USART_CR1 register.
            When wakeup on IDLE mode is selected, this bit can only be set by software, writing 1 to the MMRQ bit in the USART_RQR register.
            Note: If the USART does not support the wakeup from Stop feature, this bit is reserved and kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receiver in active mode</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receiver in Mute mode</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RWU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Wakeup from low-power mode flag
            This bit is set by hardware, when a wakeup event is detected. The event is defined by the WUS bitfield. It is cleared by software, writing a 1 to the WUCF in the USART_ICR register.
            An interrupt is generated if WUFIEÂ =Â 1 in the USART_CR3 register.
            Note: When UESM is cleared, WUF flag is also cleared.
            If the USART does not support the wakeup from Stop feature, this bit is reserved and kept at reset value. Refer to .</description>
            <name>WUF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmit enable acknowledge flag
            This bit is set/reset by hardware, when the Transmit Enable value is taken into account by the USART.
            It can be used when an idle frame request is generated by writing TEÂ =Â 0, followed by TEÂ =Â 1 in the USART_CR1 register, in order to respect the TEÂ =Â 0 minimum period.</description>
            <name>TEACK</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receive enable acknowledge flag
            This bit is set/reset by hardware, when the Receive Enable value is taken into account by the USART.
            It can be used to verify that the USART is ready for reception before entering low-power mode.
            Note: If the USART does not support the wakeup from Stop feature, this bit is reserved and kept at reset value. Refer to .</description>
            <name>REACK</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>TXFIFO empty
            This bit is set by hardware when TXFIFO is empty. When the TXFIFO contains at least one data, this flag is cleared. The TXFE flag can also be set by writing 1 to the bit TXFRQ (bit 4) in the USART_RQR register.
            An interrupt is generated if the TXFEIE bit Â =Â 1 (bit 30) in the USART_CR1 register.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>TXFIFO not empty.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>TXFIFO empty.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TXFE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RXFIFO full
            This bit is set by hardware when the number of received data corresponds to RXFIFOÂ sizeÂ +Â 1 (RXFIFO full + 1 data in the USART_RDR register.
            An interrupt is generated if the RXFFIE bit Â =Â 1 in the USART_CR1 register.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>RXFIFO not full.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>RXFIFO Full.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RXFF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmission complete before guard time flag
            This bit is set when the last data written in the USART_TDR has been transmitted correctly out of the shift register.
            It is set by hardware in Smartcard mode, if the transmission of a frame containing data is complete and if the smartcard did not send back any NACK. An interrupt is generated if TCBGTIEÂ =Â 1 in the USART_CR3 register.
            This bit is cleared by software, by writing 1 to the TCBGTCF in the USART_ICR register or by a write to the USART_TDR register.
            Note: If the USART does not support the Smartcard mode, this bit is reserved and kept at reset value. If the USART supports the Smartcard mode and the Smartcard mode is enabled, the TCBGT reset value is '1â. Refer to on pageÂ 835.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Transmission is not complete or transmission is complete unsuccessfully (i.e. a NACK is received from the card)</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Transmission is complete successfully (before Guard time completion and there is no NACK from the smart card).</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TCBGT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RXFIFO threshold flag
            This bit is set by hardware when the threshold programmed in RXFTCFG in USART_CR3 register is reached. This means that there are (RXFTCFG - 1) data in the Receive FIFO and one data in the USART_RDR register. An interrupt is generated if the RXFTIE bit Â =Â 1 (bit 27) in the USART_CR3 register.
            Note: When the RXFTCFG threshold is configured to '101â, RXFT flag is set if 16 data are available i.e. 15 data in the RXFIFO and 1 data in the USART_RDR. Consequently, the 17th received data does not cause an overrun error. The overrun error occurs after receiving the 18th data.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receive FIFO does not reach the programmed threshold.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receive FIFO reached the programmed threshold.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RXFT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>TXFIFO threshold flag
            This bit is set by hardware when the TXFIFO reaches the threshold programmed in TXFTCFG of USART_CR3 register i.e. the TXFIFO contains TXFTCFG empty locations. An interrupt is generated if the TXFTIE bit Â =Â 1 (bit 31) in the USART_CR3 register.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>TXFIFO does not reach the programmed threshold.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>TXFIFO reached the programmed threshold.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TXFT</name>
          </field>
        </fields>
        <name>ISR_FIFO_ENABLED</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x8000C0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-only</access>
        <addressOffset>0x1C</addressOffset>
        <description>Interrupt &amp; status
                  register</description>
        <displayName>ISR_FIFO_DISABLED</displayName>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Parity error
            This bit is set by hardware when a parity error occurs in receiver mode. It is cleared by software, writing 1 to the PECF in the USART_ICR register.
            An interrupt is generated if PEIE = 1 in the USART_CR1 register.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No parity error</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Parity error</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>PE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Framing error
            This bit is set by hardware when a de-synchronization, excessive noise or a break character is detected. It is cleared by software, writing 1 to the FECF bit in the USART_ICR register.
            When transmitting data in Smartcard mode, this bit is set when the maximum number of transmit attempts is reached without success (the card NACKs the data frame).
            An interrupt is generated if EIEÂ =Â 1 in the USART_CR1 register.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No Framing error is detected</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Framing error or break character is detected</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>FE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Noise detection flag
            This bit is set by hardware when noise is detected on a received frame. It is cleared by software, writing 1 to the NECF bit in the USART_ICR register.
            Note: This bit does not generate an interrupt as it appears at the same time as the RXNE bit which itself generates an interrupt. An interrupt is generated when the NE flag is set during multi buffer communication if the EIE bit is set.
            When the line is noise-free, the NE flag can be disabled by programming the ONEBIT bit to 1 to increase the USART tolerance to deviations (Refer to Tolerance of the USART receiver to clock deviation on pageÂ 861).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No noise is detected</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Noise is detected</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>NE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Overrun error
            This bit is set by hardware when the data currently being received in the shift register is
            ready to be transferred into the USART_RDR register while RXNEÂ =Â 1. It is cleared by a software, writing 1 to the ORECF, in the USART_ICR register.
            An interrupt is generated if RXNEIEÂ =Â 1 or EIE Â =Â  1 in the USART_CR1 register.
            Note: When this bit is set, the USART_RDR register content is not lost but the shift register is overwritten. An interrupt is generated if the ORE flag is set during multi buffer communication if the EIE bit is set.
            This bit is permanently forced to 0 (no overrun detection) when the bit OVRDIS is set in the USART_CR3 register.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No overrun error</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Overrun error is detected</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>ORE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Idle line detected
            This bit is set by hardware when an Idle Line is detected. An interrupt is generated if IDLEIEÂ =Â 1 in the USART_CR1 register. It is cleared by software, writing 1 to the IDLECF in the USART_ICR register.
            Note: The IDLE bit is not set again until the RXNE bit has been set (i.e. a new idle line occurs).
            If Mute mode is enabled (MMEÂ =Â 1), IDLE is set if the USART is not mute (RWUÂ =Â 0), whatever the Mute mode selected by the WAKE bit. If RWUÂ =Â 1, IDLE is not set.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No Idle line is detected</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Idle line is detected</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>IDLE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Read data register not empty
            RXNE bit is set by hardware when the content of the USART_RDR shift register has been transferred to the USART_RDR register. It is cleared by reading from the USART_RDR register. The RXNE flag can also be cleared by writing 1 to the RXFRQ in the USART_RQR register.
            An interrupt is generated if RXNEIEÂ =Â 1 in the USART_CR1 register.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Data is not received</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Received data is ready to be read.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RXNE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmission complete
            This bit indicates that the last data written in the USART_TDR has been transmitted out of the shift register.
            It is set by hardware when the transmission of a frame containing data is complete and when TXE is set.
            An interrupt is generated if TCIEÂ =Â 1 in the USART_CR1 register.
            TC bit is is cleared by software, by writing 1 to the TCCF in the USART_ICR register or by a write to the USART_TDR register.
            Note: If TE bit is reset and no transmission is on going, the TC bit is set immediately.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Transmission is not complete</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Transmission is complete</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TC</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmit data register empty
            TXE is set by hardware when the content of the USART_TDR register has been transferred into the shift register. It is cleared by writing to the USART_TDR register. The TXE flag can also be set by writing 1 to the TXFRQ in the USART_RQR register, in order to discard the data (only in Smartcard TÂ =Â 0 mode, in case of transmission failure).
            An interrupt is generated if the TXEIE bit Â =Â 1 in the USART_CR1 register.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Data register full</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Data register not full</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TXE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>LIN break detection flag
            This bit is set by hardware when the LIN break is detected. It is cleared by software, by writing 1 to the LBDCF in the USART_ICR.
            An interrupt is generated if LBDIE = 1 in the USART_CR2 register.
            Note: If the USART does not support LIN mode, this bit is reserved and kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>LIN Break not detected</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>LIN break detected</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>LBDF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>CTS interrupt flag
            This bit is set by hardware when the nCTS input toggles, if the CTSE bit is set. It is cleared by software, by writing 1 to the CTSCF bit in the USART_ICR register.
            An interrupt is generated if CTSIEÂ =Â 1 in the USART_CR3 register.
            Note: If the hardware flow control feature is not supported, this bit is reserved and kept at reset value.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No change occurred on the nCTS status line</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>A change occurred on the nCTS status line</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CTSIF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>CTS flag
            This bit is set/reset by hardware. It is an inverted copy of the status of the nCTS input pin.
            Note: If the hardware flow control feature is not supported, this bit is reserved and kept at reset value.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>nCTS line set</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>nCTS line reset</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CTS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receiver timeout
            This bit is set by hardware when the timeout value, programmed in the RTOR register has lapsed, without any communication. It is cleared by software, writing 1 to the RTOCF bit in the USART_ICR register.
            An interrupt is generated if RTOIEÂ =Â 1 in the USART_CR2 register.
            In Smartcard mode, the timeout corresponds to the CWT or BWT timings.
            Note: If a time equal to the value programmed in RTOR register separates 2 characters, RTOF is not set. If this time exceeds this value + 2 sample times (2/16 or 2/8, depending on the oversampling method), RTOF flag is set.
            The counter counts even if RE = 0 but RTOF is set only when RE = 1. If the timeout has already elapsed when RE is set, then RTOF is set.
            If the USART does not support the Receiver timeout feature, this bit is reserved and kept at reset value.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Timeout value not reached</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Timeout value reached without any data reception</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RTOF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>End of block flag
            This bit is set by hardware when a complete block has been received (for example TÂ =Â 1 Smartcard mode). The detection is done when the number of received bytes (from the start of the block, including the prologue) is equal or greater than BLEN + 4.
            An interrupt is generated if the EOBIEÂ =Â 1 in the USART_CR2 register.
            It is cleared by software, writing 1 to the EOBCF in the USART_ICR register.
            Note: If Smartcard mode is not supported, this bit is reserved and kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>End of Block not reached</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>End of Block (number of characters) reached</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>EOBF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI slave underrun error flag
            In slave transmission mode, this flag is set when the first clock pulse for data transmission appears while the software has not yet loaded any value into USART_TDR. This flag is reset by setting UDRCF bit in the USART_ICR register.
            Note: If the USART does not support the SPI slave mode, this bit is reserved and kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No underrun error</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>underrun error</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>UDR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Auto baud rate error
            This bit is set by hardware if the baud rate measurement failed (baud rate out of range or character comparison failed)
            It is cleared by software, by writing 1 to the ABRRQ bit in the USART_CR3 register.
            Note: If the USART does not support the auto baud rate feature, this bit is reserved and kept at reset value.</description>
            <name>ABRE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Auto baud rate flag
            This bit is set by hardware when the automatic baud rate has been set (RXNE is also set, generating an interrupt if RXNEIE = 1) or when the auto baud rate operation was completed without success (ABREÂ =Â 1) (ABRE, RXNE and FE are also set in this case)
            It is cleared by software, in order to request a new auto baud rate detection, by writing 1 to the ABRRQ in the USART_RQR register.
            Note: If the USART does not support the auto baud rate feature, this bit is reserved and kept at reset value.</description>
            <name>ABRF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Busy flag
            This bit is set and reset by hardware. It is active when a communication is ongoing on the RX line (successful start bit detected). It is reset at the end of the reception (successful or not).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART is idle (no reception)</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Reception on going</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>BUSY</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Character match flag
            This bit is set by hardware, when a the character defined by ADD[7:0] is received. It is cleared by software, writing 1 to the CMCF in the USART_ICR register.
            An interrupt is generated if CMIEÂ =Â 1in the USART_CR1 register.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No Character match detected</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Character Match detected</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CMF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Send break flag
            This bit indicates that a send break character was requested. It is set by software, by writing 1 to the SBKRQ bit in the USART_CR3 register. It is automatically reset by hardware during the stop bit of break transmission.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Break character transmitted</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Break character requested by setting SBKRQ bit in USART_RQR register</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>SBKF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receiver wakeup from Mute mode
            This bit indicates if the USART is in Mute mode. It is cleared/set by hardware when a wakeup/mute sequence is recognized. The Mute mode control sequence (address or IDLE) is selected by the WAKE bit in the USART_CR1 register.
            When wakeup on IDLE mode is selected, this bit can only be set by software, writing 1 to the MMRQ bit in the USART_RQR register.
            Note: If the USART does not support the wakeup from Stop feature, this bit is reserved and kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receiver in active mode</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receiver in Mute mode</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RWU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Wakeup from low-power mode flag
            This bit is set by hardware, when a wakeup event is detected. The event is defined by the WUS bitfield. It is cleared by software, writing a 1 to the WUCF in the USART_ICR register.
            An interrupt is generated if WUFIEÂ =Â 1 in the USART_CR3 register.
            Note: When UESM is cleared, WUF flag is also cleared.
            If the USART does not support the wakeup from Stop feature, this bit is reserved and kept at reset value. Refer to .</description>
            <name>WUF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmit enable acknowledge flag
            This bit is set/reset by hardware, when the Transmit Enable value is taken into account by the USART.
            It can be used when an idle frame request is generated by writing TEÂ =Â 0, followed by TEÂ =Â 1 in the USART_CR1 register, in order to respect the TEÂ =Â 0 minimum period.</description>
            <name>TEACK</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receive enable acknowledge flag
            This bit is set/reset by hardware, when the Receive Enable value is taken into account by the USART.
            It can be used to verify that the USART is ready for reception before entering low-power mode.
            Note: If the USART does not support the wakeup from Stop feature, this bit is reserved and kept at reset value. Refer to .</description>
            <name>REACK</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmission complete before guard time flag
            This bit is set when the last data written in the USART_TDR has been transmitted correctly out of the shift register.
            It is set by hardware in Smartcard mode, if the transmission of a frame containing data is complete and if the smartcard did not send back any NACK. An interrupt is generated if TCBGTIEÂ =Â 1 in the USART_CR3 register.
            This bit is cleared by software, by writing 1 to the TCBGTCF in the USART_ICR register or by a write to the USART_TDR register.
            Note: If the USART does not support the Smartcard mode, this bit is reserved and kept at reset value. If the USART supports the Smartcard mode and the Smartcard mode is enabled, the TCBGT reset value is '1â. Refer to on pageÂ 835.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Transmission is not complete or transmission is complete unsuccessfully (i.e. a NACK is received from the card)</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Transmission is complete successfully (before Guard time completion and there is no NACK from the smart card).</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TCBGT</name>
          </field>
        </fields>
        <name>ISR_FIFO_DISABLED</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xC0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>write-only</access>
        <addressOffset>0x20</addressOffset>
        <description>Interrupt flag clear register</description>
        <displayName>ICR</displayName>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Parity error clear flag
            Writing 1 to this bit clears the PE flag in the USART_ISR register.</description>
            <name>PECF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Framing error clear flag
            Writing 1 to this bit clears the FE flag in the USART_ISR register.</description>
            <name>FECF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Noise detected clear flag
            Writing 1 to this bit clears the NE flag in the USART_ISR register.</description>
            <name>NECF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Overrun error clear flag
            Writing 1 to this bit clears the ORE flag in the USART_ISR register.</description>
            <name>ORECF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Idle line detected clear flag
            Writing 1 to this bit clears the IDLE flag in the USART_ISR register.</description>
            <name>IDLECF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>TXFIFO empty clear flag
            Writing 1 to this bit clears the TXFE flag in the USART_ISR register.</description>
            <name>TXFECF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmission complete clear flag
            Writing 1 to this bit clears the TC flag in the USART_ISR register.</description>
            <name>TCCF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmission complete before Guard time clear flag
            Writing 1 to this bit clears the TCBGT flag in the USART_ISR register.</description>
            <name>TCBGTCF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>LIN break detection clear flag
            Writing 1 to this bit clears the LBDF flag in the USART_ISR register.
            Note: If LIN mode is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <name>LBDCF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>CTS clear flag
            Writing 1 to this bit clears the CTSIF flag in the USART_ISR register.
            Note: If the hardware flow control feature is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <name>CTSCF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receiver timeout clear flag
            Writing 1 to this bit clears the RTOF flag in the USART_ISR register.
            Note: If the USART does not support the Receiver timeout feature, this bit is reserved and must be kept at reset value. Refer to pageÂ 835.</description>
            <name>RTOCF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>End of block clear flag
            Writing 1 to this bit clears the EOBF flag in the USART_ISR register.
            Note: If the USART does not support Smartcard mode, this bit is reserved and must be kept at reset value. Refer to .</description>
            <name>EOBCF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI slave underrun clear flag
            Writing 1 to this bit clears the UDRF flag in the USART_ISR register.
            Note: If the USART does not support SPI slave mode, this bit is reserved and must be kept at reset value. Refer to</description>
            <name>UDRCF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Character match clear flag
            Writing 1 to this bit clears the CMF flag in the USART_ISR register.</description>
            <name>CMCF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Wakeup from low-power mode clear flag
            Writing 1 to this bit clears the WUF flag in the USART_ISR register.
            Note: If the USART does not support the wakeup from Stop feature, this bit is reserved and must be kept at reset value. Refer to pageÂ 835.</description>
            <name>WUCF</name>
          </field>
        </fields>
        <name>ICR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-only</access>
        <addressOffset>0x24</addressOffset>
        <description>Receive data register</description>
        <displayName>RDR</displayName>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>Receive data value</description>
            <name>RDR</name>
          </field>
        </fields>
        <name>RDR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x28</addressOffset>
        <description>Transmit data register</description>
        <displayName>TDR</displayName>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>Transmit data value</description>
            <name>TDR</name>
          </field>
        </fields>
        <name>TDR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x2C</addressOffset>
        <description>Prescaler register</description>
        <displayName>PRESC</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Clock prescaler
            The USART input clock can be divided by a prescaler factor:
            Remaining combinations: Reserved
            Note: When PRESCALER is programmed with a value different of the allowed ones, programmed prescaler value is 1011 i.e. input clock divided by 256.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>input clock not divided</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>input clock divided by 2</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>input clock divided by 4</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>input clock divided by 6</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>input clock divided by 8</description>
                <name>B_0x4</name>
                <value>0x4</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>input clock divided by 10</description>
                <name>B_0x5</name>
                <value>0x5</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>input clock divided by 12</description>
                <name>B_0x6</name>
                <value>0x6</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>input clock divided by 16</description>
                <name>B_0x7</name>
                <value>0x7</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>input clock divided by 32</description>
                <name>B_0x8</name>
                <value>0x8</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>input clock divided by 64</description>
                <name>B_0x9</name>
                <value>0x9</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>input clock divided by 128</description>
                <name>B_0xA</name>
                <value>0xA</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>input clock divided by 256</description>
                <name>B_0xB</name>
                <value>0xB</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>PRESCALER</name>
          </field>
        </fields>
        <name>PRESC</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <resetMask>0xFFFFFFFF</resetMask>
    <resetValue>0x0</resetValue>
    <size>0x20</size>
  </peripheral>
</peripherals>
<peripherals>
  <peripheral>
    <addressBlock>
      <offset>0x0</offset>
      <size>0x400</size>
      <usage>registers</usage>
    </addressBlock>
    <baseAddress>0x40005000</baseAddress>
    <derivedFrom>USART1</derivedFrom>
    <description>Universal synchronous asynchronous receiver
          transmitter</description>
    <groupName>USART</groupName>
    <interrupts>
      <interrupt>
        <name>USART1</name>
        <value>0x1B</value>
      </interrupt>
    </interrupts>
    <name>USART5</name>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x0</addressOffset>
        <description>Control register 1</description>
        <displayName>CR1_FIFO_ENABLED</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>USART enable
            When this bit is cleared, the USART prescalers and outputs are stopped immediately, and all current operations are discarded. The USART configuration is kept, but all the USART_ISR status flags are reset. This bit is set and cleared by software.
            Note: To enter low-power mode without generating errors on the line, the TE bit must be previously reset and the software must wait for the TC bit in the USART_ISR to be set before resetting the UE bit.
            The DMA requests are also reset when UE = 0 so the DMA channel must be disabled before resetting the UE bit.
            In Smartcard mode, (SCEN = 1), the SCLK is always available when CLKEN = 1, regardless of the UE bit value.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART prescaler and outputs disabled, low-power mode</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>UE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>USART enable in low-power mode
            When this bit is cleared, the USART cannot wake up the MCU from low-power mode.
            When this bit is set, the USART can wake up the MCU from low-power mode.
            This bit is set and cleared by software.
            Note: It is recommended to set the UESM bit just before entering low-power mode and clear it when exit from low-power mode.
            If the USART does not support the wakeup from Stop feature, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART not able to wake up the MCU from low-power mode.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART able to wake up the MCU from low-power mode. </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>UESM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receiver enable
            This bit enables the receiver. It is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receiver is disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receiver is enabled and begins searching for a start bit</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmitter enable
            This bit enables the transmitter. It is set and cleared by software.
            Note: During transmission, a low pulse on the TE bit ('0â followed by '1â) sends a preamble (idle line) after the current word, except in Smartcard mode. In order to generate an idle character, the TE must not be immediately written to '1â. To ensure the required duration, the software can poll the TEACK bit in the USART_ISR register.
            In Smartcard mode, when TE is set, there is a 1 bit-time delay before the transmission starts.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Transmitter is disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Transmitter is enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>IDLE interrupt enable
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated whenever IDLE = 1 in the USART_ISR register  </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>IDLEIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RXFIFO not empty interrupt enable
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated whenever ORE = 1 or RXFNE = 1 in the USART_ISR register    </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RXFNEIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmission complete interrupt enable
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated whenever TC = 1 in the USART_ISR register  </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TCIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>TXFIFO not full interrupt enable
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated whenever TXFNF =1 in the USART_ISR register</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TXFNFIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>PE interrupt enable
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated whenever PE = 1 in the USART_ISR register  </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>PEIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Parity selection
            This bit selects the odd or even parity when the parity generation/detection is enabled (PCE bit set). It is set and cleared by software. The parity is selected after the current byte.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Even parity</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Odd parity</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>PS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Parity control enable
            This bit selects the hardware parity control (generation and detection). When the parity control is enabled, the computed parity is inserted at the MSB position (9th bit if MÂ =Â 1; 8th bit if MÂ =Â 0) and the parity is checked on the received data. This bit is set and cleared by software. Once it is set, PCE is active after the current byte (in reception and in transmission).
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Parity control disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Parity control enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>PCE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receiver wakeup method
            This bit determines the USART wakeup method from Mute mode. It is set or cleared by software.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Idle line</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Address mark</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>WAKE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Word length
            This bit is used in conjunction with bit 28 (M1) to determine the word length. It is set or cleared by software (refer to bit 28 (M1)description).
            This bit can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <name>M0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Mute mode enable
            This bit enables the USART Mute mode function. When set, the USART can switch between active and Mute mode, as defined by the WAKE bit. It is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receiver in active mode permanently</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receiver can switch between Mute mode and active mode. </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>MME</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Character match interrupt enable
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated when the CMF bit is set in the USART_ISR register.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CMIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Oversampling mode
            This bit can only be written when the USART is disabled (UEÂ =Â 0).
            Note: In LIN, IrDA and Smartcard modes, this bit must be kept cleared.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Oversampling by 16</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Oversampling by 8</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>OVER8</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Driver Enable deassertion time
            This 5-bit value defines the time between the end of the last stop bit, in a transmitted message, and the de-activation of the DE (Driver Enable) signal. It is expressed in sample time units (1/8 or 1/16 bit time, depending on the oversampling rate).
            If the USART_TDR register is written during the DEDT time, the new data is transmitted only when the DEDT and DEAT times have both elapsed.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If the Driver Enable feature is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <name>DEDT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Driver Enable assertion time
            This 5-bit value defines the time between the activation of the DE (Driver Enable) signal and the beginning of the start bit. It is expressed in sample time units (1/8 or 1/16 bit time, depending on the oversampling rate).
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If the Driver Enable feature is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <name>DEAT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receiver timeout interrupt enable
            This bit is set and cleared by software.
            Note: If the USART does not support the Receiver timeout feature, this bit is reserved and must be kept at reset value. .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated when the RTOF bit is set in the USART_ISR register.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RTOIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>End of Block interrupt enable
            This bit is set and cleared by software.
            Note: If the USART does not support Smartcard mode, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated when the EOBF flag is set in the USART_ISR register</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>EOBIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Word length
            This bit must be used in conjunction with bit 12 (M0) to determine the word length. It is set or cleared by software.
            M[1:0] = '00â: 1 start bit, 8 Data bits, n Stop bit
            M[1:0] = '01â: 1 start bit, 9 Data bits, n Stop bit
            M[1:0] = '10â: 1 start bit, 7 Data bits, n Stop bit
            This bit can only be written when the USART is disabled (UEÂ =Â 0).
            Note: In 7-bits data length mode, the Smartcard mode, LIN master mode and Auto baud rate (0x7F and 0x55 frames detection) are not supported.</description>
            <name>M1</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>FIFO mode enable
            This bit is set and cleared by software.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).
            Note: FIFO mode can be used on standard UART communication, in SPI master/slave mode and in Smartcard modes only. It must not be enabled in IrDA and LIN modes.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>FIFO mode is disabled.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>FIFO mode is enabled.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>FIFOEN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>TXFIFO empty interrupt enable
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated when TXFE = 1 in the USART_ISR register  </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TXFEIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RXFIFO Full interrupt enable
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated when RXFF = 1 in the USART_ISR register  </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RXFFIE</name>
          </field>
        </fields>
        <name>CR1_FIFO_ENABLED</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x0</addressOffset>
        <description>Control register 1</description>
        <displayName>CR1_FIFO_DISABLED</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>USART enable
            When this bit is cleared, the USART prescalers and outputs are stopped immediately, and all current operations are discarded. The USART configuration is kept, but all the USART_ISR status flags are reset. This bit is set and cleared by software.
            Note: To enter low-power mode without generating errors on the line, the TE bit must be previously reset and the software must wait for the TC bit in the USART_ISR to be set before resetting the UE bit.
            The DMA requests are also reset when UE = 0 so the DMA channel must be disabled before resetting the UE bit.
            In Smartcard mode, (SCEN = 1), the SCLK is always available when CLKEN = 1, regardless of the UE bit value.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART prescaler and outputs disabled, low-power mode</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>UE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>USART enable in low-power mode
            When this bit is cleared, the USART cannot wake up the MCU from low-power mode.
            When this bit is set, the USART can wake up the MCU from low-power mode.
            This bit is set and cleared by software.
            Note: It is recommended to set the UESM bit just before entering low-power mode and clear it when exit from low-power mode.
            If the USART does not support the wakeup from Stop feature, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART not able to wake up the MCU from low-power mode.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART able to wake up the MCU from low-power mode. </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>UESM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receiver enable
            This bit enables the receiver. It is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receiver is disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receiver is enabled and begins searching for a start bit</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmitter enable
            This bit enables the transmitter. It is set and cleared by software.
            Note: During transmission, a low pulse on the TE bit ('0â followed by '1â) sends a preamble (idle line) after the current word, except in Smartcard mode. In order to generate an idle character, the TE must not be immediately written to '1â. To ensure the required duration, the software can poll the TEACK bit in the USART_ISR register.
            In Smartcard mode, when TE is set, there is a 1 bit-time delay before the transmission starts.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Transmitter is disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Transmitter is enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>IDLE interrupt enable
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated whenever IDLE = 1 in the USART_ISR register  </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>IDLEIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receive data register not empty
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated whenever ORE = 1 or RXNE = 1 in the USART_ISR register    </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RXNEIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmission complete interrupt enable
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated whenever TC = 1 in the USART_ISR register  </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TCIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmit data register empty
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated whenever TXE =1 in the USART_ISR register</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TXEIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>PE interrupt enable
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated whenever PE = 1 in the USART_ISR register  </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>PEIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Parity selection
            This bit selects the odd or even parity when the parity generation/detection is enabled (PCE bit set). It is set and cleared by software. The parity is selected after the current byte.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Even parity</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Odd parity</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>PS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Parity control enable
            This bit selects the hardware parity control (generation and detection). When the parity control is enabled, the computed parity is inserted at the MSB position (9th bit if MÂ =Â 1; 8th bit if MÂ =Â 0) and the parity is checked on the received data. This bit is set and cleared by software. Once it is set, PCE is active after the current byte (in reception and in transmission).
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Parity control disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Parity control enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>PCE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receiver wakeup method
            This bit determines the USART wakeup method from Mute mode. It is set or cleared by software.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Idle line</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Address mark</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>WAKE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Word length
            This bit is used in conjunction with bit 28 (M1) to determine the word length. It is set or cleared by software (refer to bit 28 (M1)description).
            This bit can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <name>M0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Mute mode enable
            This bit enables the USART Mute mode function. When set, the USART can switch between active and Mute mode, as defined by the WAKE bit. It is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receiver in active mode permanently</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receiver can switch between Mute mode and active mode. </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>MME</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Character match interrupt enable
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated when the CMF bit is set in the USART_ISR register.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CMIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Oversampling mode
            This bit can only be written when the USART is disabled (UEÂ =Â 0).
            Note: In LIN, IrDA and Smartcard modes, this bit must be kept cleared.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Oversampling by 16</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Oversampling by 8</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>OVER8</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Driver Enable deassertion time
            This 5-bit value defines the time between the end of the last stop bit, in a transmitted message, and the de-activation of the DE (Driver Enable) signal. It is expressed in sample time units (1/8 or 1/16 bit time, depending on the oversampling rate).
            If the USART_TDR register is written during the DEDT time, the new data is transmitted only when the DEDT and DEAT times have both elapsed.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If the Driver Enable feature is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <name>DEDT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Driver Enable assertion time
            This 5-bit value defines the time between the activation of the DE (Driver Enable) signal and the beginning of the start bit. It is expressed in sample time units (1/8 or 1/16 bit time, depending on the oversampling rate).
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If the Driver Enable feature is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <name>DEAT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receiver timeout interrupt enable
            This bit is set and cleared by software.
            Note: If the USART does not support the Receiver timeout feature, this bit is reserved and must be kept at reset value. .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated when the RTOF bit is set in the USART_ISR register.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RTOIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>End of Block interrupt enable
            This bit is set and cleared by software.
            Note: If the USART does not support Smartcard mode, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated when the EOBF flag is set in the USART_ISR register</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>EOBIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Word length
            This bit must be used in conjunction with bit 12 (M0) to determine the word length. It is set or cleared by software.
            M[1:0] = '00â: 1 start bit, 8 Data bits, n Stop bit
            M[1:0] = '01â: 1 start bit, 9 Data bits, n Stop bit
            M[1:0] = '10â: 1 start bit, 7 Data bits, n Stop bit
            This bit can only be written when the USART is disabled (UEÂ =Â 0).
            Note: In 7-bits data length mode, the Smartcard mode, LIN master mode and Auto baud rate (0x7F and 0x55 frames detection) are not supported.</description>
            <name>M1</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>FIFO mode enable
            This bit is set and cleared by software.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).
            Note: FIFO mode can be used on standard UART communication, in SPI master/slave mode and in Smartcard modes only. It must not be enabled in IrDA and LIN modes.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>FIFO mode is disabled.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>FIFO mode is enabled.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>FIFOEN</name>
          </field>
        </fields>
        <name>CR1_FIFO_DISABLED</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x4</addressOffset>
        <description>Control register 2</description>
        <displayName>CR2</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Synchronous Slave mode enable
            When the SLVEN bit is set, the synchronous slave mode is enabled.
            Note: When SPI slave mode is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Slave mode disabled.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Slave mode enabled.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>SLVEN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When the DIS_NSS bit is set, the NSS pin input is ignored.
            Note: When SPI slave mode is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>SPI slave selection depends on NSS input pin.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>SPI slave is always selected and NSS input pin is ignored.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>DIS_NSS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>7-bit Address Detection/4-bit Address Detection
            This bit is for selection between 4-bit address detection or 7-bit address detection.
            This bit can only be written when the USART is disabled (UEÂ =Â 0)
            Note: In 7-bit and 9-bit data modes, the address detection is done on 6-bit and 8-bit address (ADD[5:0] and ADD[7:0]) respectively.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>4-bit address detection</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>7-bit address detection (in 8-bit data mode)</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>ADDM7</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>LIN break detection length
            This bit is for selection between 11 bit or 10 bit break detection.
            This bit can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If LIN mode is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>10-bit break detection</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>11-bit break detection</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>LBDL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>LIN break detection interrupt enable
            Break interrupt mask (break detection using break delimiter).
            Note: If LIN mode is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt is inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>An interrupt is generated whenever LBDF = 1 in the USART_ISR register  </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>LBDIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Last bit clock pulse
            This bit is used to select whether the clock pulse associated with the last data bit transmitted (MSB) has to be output on the SCLK pin in synchronous mode.
            The last bit is the 7th or 8th or 9th data bit transmitted depending on the 7 or 8 or 9 bit format selected by the M bit in the USART_CR1 register.
            This bit can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If synchronous mode is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>The clock pulse of the last data bit is not output to the SCLK pin</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>The clock pulse of the last data bit is output to the SCLK pin</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>LBCL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Clock phase
            This bit is used to select the phase of the clock output on the SCLK pin in synchronous mode. It works in conjunction with the CPOL bit to produce the desired clock/data relationship (see  and )
            This bit can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If synchronous mode is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>The first clock transition is the first data capture edge</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>The second clock transition is the first data capture edge</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CPHA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Clock polarity
            This bit enables the user to select the polarity of the clock output on the SCLK pin in synchronous mode. It works in conjunction with the CPHA bit to produce the desired clock/data relationship
            This bit can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If synchronous mode is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Steady low value on SCLK pin outside transmission window</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Steady high value on SCLK pin outside transmission window</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CPOL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Clock enable
            This bit enables the user to enable the SCLK pin.
            This bit can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If neither synchronous mode nor Smartcard mode is supported, this bit is reserved and must be kept at reset value. Refer to .
            In Smartcard mode, in order to provide correctly the SCLK clock to the smartcard, the steps below must be respected:
            UE = 0
            SCEN = 1
            GTPR configuration
            CLKEN= 1
            UE = 1</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>SCLK pin disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>SCLK pin enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CLKEN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>stop bits
            These bits are used for programming the stop bits.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>1 stop bit</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>0.5 stop bit.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>2 stop bits</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>1.5 stop bits</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>STOP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>LIN mode enable
            This bit is set and cleared by software.
            The LIN mode enables the capability to send LIN synchronous breaks (13 low bits) using the SBKRQ bit in the USART_CR1 register, and to detect LIN Sync breaks.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If the USART does not support LIN mode, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>LIN mode disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>LIN mode enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>LINEN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Swap TX/RX pins
            This bit is set and cleared by software.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>TX/RX pins are used as defined in standard pinout</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>The TX and RX pins functions are swapped. This enables to work in the case of a cross-wired connection to another UART. </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>SWAP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RX pin active level inversion
            This bit is set and cleared by software.
            This enables the use of an external inverter on the RX line.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>RX pin signal works using the standard logic levels (VDD =1/idle, Gnd = 0/mark)   </description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>RX pin signal values are inverted (VDD =0/mark, Gnd = 1/idle).   </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RXINV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>TX pin active level inversion
            This bit is set and cleared by software.
            This enables the use of an external inverter on the TX line.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>TX pin signal works using the standard logic levels (VDD =1/idle, Gnd = 0/mark)   </description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>TX pin signal values are inverted (VDD =0/mark, Gnd = 1/idle).   </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TXINV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Binary data inversion
            This bit is set and cleared by software.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Logical data from the data register are send/received in positive/direct logic. (1 = H, 0 = L)     </description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Logical data from the data register are send/received in negative/inverse logic. (1 = L, 0 = H).     The parity bit is also inverted.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>DATAINV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Most significant bit first
            This bit is set and cleared by software.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>data is transmitted/received with data bit 0 first, following the start bit. </description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>data is transmitted/received with the MSB (bit 7/8) first, following the start bit. </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>MSBFIRST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Auto baud rate enable
            This bit is set and cleared by software.
            Note: If the USART does not support the auto baud rate feature, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Auto baud rate detection is disabled. </description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Auto baud rate detection is enabled. </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>ABREN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Auto baud rate mode
            These bits are set and cleared by software.
            This bitfield can only be written when ABREN = 0 or the USART is disabled (UEÂ =Â 0).
            Note: If DATAINVÂ =Â 1 and/or MSBFIRSTÂ =Â 1 the patterns must be the same on the line, for example 0xAA for MSBFIRST)
            If the USART does not support the auto baud rate feature, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Measurement of the start bit is used to detect the baud rate. </description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Falling edge to falling edge measurement (the received frame must start with a single bit = 1 and Frame = Start10xxxxxx)</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>0x7F frame detection.</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>0x55 frame detection</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>ABRMOD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receiver timeout enable
            This bit is set and cleared by software.
            When this feature is enabled, the RTOF flag in the USART_ISR register is set if the RX line is idle (no reception) for the duration programmed in the RTOR (receiver timeout register).
            Note: If the USART does not support the Receiver timeout feature, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receiver timeout feature disabled. </description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receiver timeout feature enabled. </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RTOEN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>Address of the USART node
            ADD[7:4]:
            These bits give the address of the USART node or a character code to be recognized.
            They are used to wake up the MCU with 7-bit address mark detection in multiprocessor communication during Mute mode or low-power mode. The MSB of the character sent by the transmitter should be equal to 1. They can also be used for character detection during normal reception, Mute mode inactive (for example, end of block detection in ModBus protocol). In this case, the whole received character (8-bit) is compared to the ADD[7:0] value and CMF flag is set on match.
            These bits can only be written when reception is disabled (RE = 0) or the USART is disabled (UEÂ =Â 0).
            ADD[3:0]:
            These bits give the address of the USART node or a character code to be recognized.
            They are used for wakeup with address mark detection, in multiprocessor communication during Mute mode or low-power mode.
            These bits can only be written when reception is disabled (RE = 0) or the USART is disabled (UEÂ =Â 0).</description>
            <name>ADD</name>
          </field>
        </fields>
        <name>CR2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x8</addressOffset>
        <description>Control register 3</description>
        <displayName>CR3</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Error interrupt enable
            Error Interrupt Enable Bit is required to enable interrupt generation in case of a framing error, overrun error noise flag or SPI slave underrun error (FEÂ =Â 1 or OREÂ =Â 1 or NEÂ =Â 1 or UDR = 1 in the USART_ISR register).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>interrupt generated when FE = 1 or ORE = 1 or NE = 1 or UDR = 1 (in SPI slave mode) in       the USART_ISR register.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>EIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>IrDA mode enable
            This bit is set and cleared by software.
            This bit can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If IrDA mode is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>IrDA disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>IrDA enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>IREN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>IrDA low-power
            This bit is used for selecting between normal and low-power IrDA modes
            This bit can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If IrDA mode is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Normal mode</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Low-power mode</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>IRLP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Half-duplex selection
            Selection of Single-wire Half-duplex mode
            This bit can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Half duplex mode is not selected</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Half duplex mode is selected </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>HDSEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Smartcard NACK enable
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If the USART does not support Smartcard mode, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>NACK transmission in case of parity error is disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>NACK transmission during parity error is enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>NACK</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Smartcard mode enable
            This bit is used for enabling Smartcard mode.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If the USART does not support Smartcard mode, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Smartcard Mode disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Smartcard Mode enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>SCEN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>DMA enable receiver
            This bit is set/reset by software</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>DMA mode is enabled for reception</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>DMA mode is disabled for reception</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>DMAR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>DMA enable transmitter
            This bit is set/reset by software</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>DMA mode is enabled for transmission</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>DMA mode is disabled for transmission</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>DMAT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RTS enable
            This bit can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If the hardware flow control feature is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>RTS hardware flow control disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>RTS output enabled, data is only requested when there is space in the receive buffer. The transmission of data is expected to cease after the current character has been transmitted. The nRTS output is asserted (pulled to 0) when data can be received.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RTSE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>CTS enable
            This bit can only be written when the USART is disabled (UEÂ =Â 0)
            Note: If the hardware flow control feature is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>CTS hardware flow control disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CTS mode enabled, data is only transmitted when the nCTS input is asserted (tied to 0). If the nCTS input is deasserted while data is being transmitted, then the transmission is completed before stopping. If data is written into the data register while nCTS is asserted, the transmission is postponed until nCTS is asserted.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CTSE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>CTS interrupt enable
            Note: If the hardware flow control feature is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt is inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>An interrupt is generated whenever CTSIF = 1 in the USART_ISR register  </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CTSIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>One sample bit method enable
            This bit enables the user to select the sample method. When the one sample bit method is selected the noise detection flag (NE) is disabled.
            This bit can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Three sample bit method</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>One sample bit method</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>ONEBIT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Overrun Disable
            This bit is used to disable the receive overrun detection.
            the ORE flag is not set and the new received data overwrites the previous content of the USART_RDR register. When FIFO mode is enabled, the RXFIFO is bypassed and data is written directly in USART_RDR register. Even when FIFO management is enabled, the RXNE flag is to be used.
            This bit can only be written when the USART is disabled (UEÂ =Â 0).
            Note: This control bit enables checking the communication flow w/o reading the data</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Overrun Error Flag, ORE, is set when received data is not read before receiving new data. </description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Overrun functionality is disabled. If new data is received while the RXNE flag is still set</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>OVRDIS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>DMA Disable on Reception Error
            This bit can only be written when the USART is disabled (UE=0).
            Note: The reception errors are: parity error, framing error or noise error.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>DMA is not disabled in case of reception error. The corresponding error flag is set but RXNE is kept 0 preventing from overrun. As a consequence, the DMA request is not asserted, so the erroneous data is not transferred (no DMA request), but next correct received data is transferred (used for Smartcard mode).</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>DMA is disabled following a reception error. The corresponding error flag is set, as well as RXNE. The DMA request is masked until the error flag is cleared. This means that the software must first disable the DMA request (DMAR = 0) or clear RXNE/RXFNE is case FIFO mode is enabled) before clearing the error flag.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>DDRE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Driver enable mode
            This bit enables the user to activate the external transceiver control, through the DE signal.
            This bit can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If the Driver Enable feature is not supported, this bit is reserved and must be kept at reset value. .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>DE function is disabled. </description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>DE function is enabled. The DE signal is output on the RTS pin.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>DEM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Driver enable polarity selection
            This bit can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If the Driver Enable feature is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>DE signal is active high. </description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>DE signal is active low.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>DEP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Smartcard auto-retry count
            This bitfield specifies the number of retries for transmission and reception in Smartcard mode.
            In transmission mode, it specifies the number of automatic retransmission retries, before generating a transmission error (FE bit set).
            In reception mode, it specifies the number or erroneous reception trials, before generating a reception error (RXNE/RXFNE and PE bits set).
            This bitfield must be programmed only when the USART is disabled (UEÂ =Â 0).
            When the USART is enabled (UEÂ =Â 1), this bitfield may only be written to 0x0, in order to stop retransmission.
            Note: If Smartcard mode is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>retransmission disabled - No automatic retransmission in transmit mode. </description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>number of automatic retransmission attempts (before signaling error)</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>number of automatic retransmission attempts (before signaling error)</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>number of automatic retransmission attempts (before signaling error)</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>number of automatic retransmission attempts (before signaling error)</description>
                <name>B_0x4</name>
                <value>0x4</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>number of automatic retransmission attempts (before signaling error)</description>
                <name>B_0x5</name>
                <value>0x5</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>number of automatic retransmission attempts (before signaling error)</description>
                <name>B_0x6</name>
                <value>0x6</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>number of automatic retransmission attempts (before signaling error)</description>
                <name>B_0x7</name>
                <value>0x7</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>SCARCNT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Wakeup from low-power mode interrupt flag selection
            This bitfield specifies the event which activates the WUF (Wakeup from low-power mode flag).
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).
            If the USART does not support the wakeup from Stop feature, this bit is reserved and must be kept at reset value. Refer to pageÂ 835.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>WUF active on address match (as defined by ADD[7:0] and ADDM7)</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>WUF active on start bit detection</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>WUF active on RXNE/RXFNE. </description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>WUS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Wakeup from low-power mode interrupt enable
            This bit is set and cleared by software.
            Note: WUFIE must be set before entering in low-power mode.
            If the USART does not support the wakeup from Stop feature, this bit is reserved and must be kept at reset value. Refer to pageÂ 835.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated whenever WUF = 1 in the USART_ISR register  </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>WUFIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>TXFIFO threshold interrupt enable
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated when TXFIFO reaches the threshold programmed in TXFTCFG.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TXFTIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmission Complete before guard time, interrupt enable
            This bit is set and cleared by software.
            Note: If the USART does not support the Smartcard mode, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated whenever TCBGT=1 in the USART_ISR register</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TCBGTIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Receive FIFO threshold configuration
            Remaining combinations: Reserved</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receive FIFO reaches 1/8 of its depth</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receive FIFO reaches 1/4 of its depth</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receive FIFO reaches 1/2 of its depth</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receive FIFO reaches 3/4 of its depth</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receive FIFO reaches 7/8 of its depth</description>
                <name>B_0x4</name>
                <value>0x4</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receive FIFO becomes full</description>
                <name>B_0x5</name>
                <value>0x5</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RXFTCFG</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RXFIFO threshold interrupt enable
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated when Receive FIFO reaches the threshold programmed in RXFTCFG.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RXFTIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>TXFIFO threshold configuration
            Remaining combinations: Reserved</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>TXFIFO reaches 1/8 of its depth</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>TXFIFO reaches 1/4 of its depth</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>TXFIFO reaches 1/2 of its depth</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>TXFIFO reaches 3/4 of its depth</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>TXFIFO reaches 7/8 of its depth</description>
                <name>B_0x4</name>
                <value>0x4</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>TXFIFO becomes empty</description>
                <name>B_0x5</name>
                <value>0x5</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TXFTCFG</name>
          </field>
        </fields>
        <name>CR3</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0xC</addressOffset>
        <description>Baud rate register</description>
        <displayName>BRR</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>USART baud rate</description>
            <name>BRR</name>
          </field>
        </fields>
        <name>BRR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x10</addressOffset>
        <description>Guard time and prescaler
                  register</description>
        <displayName>GTPR</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>Prescaler value
            In IrDA low-power and normal IrDA mode:
            PSC[7:0] = IrDA Normal and Low-Power baud rate
            PSC[7:0] is used to program the prescaler for dividing the USART source clock to achieve the low-power frequency: the source clock is divided by the value given in the register (8 significant bits):
            In Smartcard mode:
            PSC[4:0]Â =Â Prescaler value
            PSC[4:0] is used to program the prescaler for dividing the USART source clock to provide the Smartcard clock. The value given in the register (5 significant bits) is multiplied by 2 to give the division factor of the source clock frequency:
            ...
            0010Â 0000: Divides the source clock by 32 (IrDA mode)
            ...
            1111Â 1111: Divides the source clock by 255 (IrDA mode)
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).
            Note: Bits [7:5] must be kept cleared if Smartcard mode is used.
            This bitfield is reserved and forced by hardware to '0â when the Smartcard and IrDA modes are not supported. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Reserved - do not program this value</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Divides the source clock by 1 (IrDA mode) / by 2 (Smarcard mode)</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Divides the source clock by 2 (IrDA mode) / by 4 (Smartcard mode)</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Divides the source clock by 3 (IrDA mode) / by 6 (Smartcard mode)</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Divides the source clock by 31 (IrDA mode) / by 62 (Smartcard mode)</description>
                <name>B_0x1F</name>
                <value>0x1F</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>PSC</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>Guard time value
            This bitfield is used to program the Guard time value in terms of number of baud clock periods.
            This is used in Smartcard mode. The Transmission Complete flag is set after this guard time value.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If Smartcard mode is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <name>GT</name>
          </field>
        </fields>
        <name>GTPR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x14</addressOffset>
        <description>Receiver timeout register</description>
        <displayName>RTOR</displayName>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x18</bitWidth>
            <description>Receiver timeout value</description>
            <name>RTO</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>Block Length</description>
            <name>BLEN</name>
          </field>
        </fields>
        <name>RTOR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>write-only</access>
        <addressOffset>0x18</addressOffset>
        <description>Request register</description>
        <displayName>RQR</displayName>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Auto baud rate request
            Writing 1 to this bit resets the ABRF flag in the USART_ISR and requests an automatic baud rate measurement on the next received data frame.
            Note: If the USART does not support the auto baud rate feature, this bit is reserved and must be kept at reset value. Refer to .</description>
            <name>ABRRQ</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Send break request
            Writing 1 to this bit sets the SBKF flag and request to send a BREAK on the line, as soon as the transmit machine is available.
            Note: When the application needs to send the break character following all previously inserted data, including the ones not yet transmitted, the software should wait for the TXE flag assertion before setting the SBKRQ bit.</description>
            <name>SBKRQ</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Mute mode request
            Writing 1 to this bit puts the USART in Mute mode and resets the RWU flag.</description>
            <name>MMRQ</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receive data flush request
            Writing 1 to this bit empties the entire receive FIFO i.e. clears the bit RXFNE.
            This enables to discard the received data without reading them, and avoid an overrun condition.</description>
            <name>RXFRQ</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmit data flush request
            When FIFO mode is disabled, writing '1â to this bit sets the TXE flag. This enables to discard the transmit data. This bit must be used only in Smartcard mode, when data have not been sent due to errors (NACK) and the FE flag is active in the USART_ISR register. If the USART does not support Smartcard mode, this bit is reserved and must be kept at reset value.
            When FIFO is enabled, TXFRQ bit is set to flush the whole FIFO. This sets the TXFE flag (Transmit FIFO empty, bit 23 in the USART_ISR register). Flushing the Transmit FIFO is supported in both UART and Smartcard modes.
            Note: In FIFO mode, the TXFNF flag is reset during the flush request until TxFIFO is empty in order to ensure that no data are written in the data register.</description>
            <name>TXFRQ</name>
          </field>
        </fields>
        <name>RQR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-only</access>
        <addressOffset>0x1C</addressOffset>
        <description>Interrupt &amp; status
                  register</description>
        <displayName>ISR_FIFO_ENABLED</displayName>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Parity error
            This bit is set by hardware when a parity error occurs in receiver mode. It is cleared by software, writing 1 to the PECF in the USART_ICR register.
            An interrupt is generated if PEIE = 1 in the USART_CR1 register.
            Note: This error is associated with the character in the USART_RDR.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No parity error</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Parity error</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>PE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Framing error
            This bit is set by hardware when a de-synchronization, excessive noise or a break character is detected. It is cleared by software, writing 1 to the FECF bit in the USART_ICR register.
            When transmitting data in Smartcard mode, this bit is set when the maximum number of transmit attempts is reached without success (the card NACKs the data frame).
            An interrupt is generated if EIEÂ =Â 1 in the USART_CR1 register.
            Note: This error is associated with the character in the USART_RDR.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No Framing error is detected</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Framing error or break character is detected</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>FE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Noise detection flag
            This bit is set by hardware when noise is detected on a received frame. It is cleared by software, writing 1 to the NECF bit in the USART_ICR register.
            Note: This bit does not generate an interrupt as it appears at the same time as the RXFNE bit which itself generates an interrupt. An interrupt is generated when the NE flag is set during multi buffer communication if the EIE bit is set.
            When the line is noise-free, the NE flag can be disabled by programming the ONEBIT bit to 1 to increase the USART tolerance to deviations (Refer to Tolerance of the USART receiver to clock deviation on pageÂ 861).
            This error is associated with the character in the USART_RDR.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No noise is detected</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Noise is detected</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>NE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Overrun error
            This bit is set by hardware when the data currently being received in the shift register is
            ready to be transferred into the USART_RDR register while RXFF = 1. It is cleared by a software, writing 1 to the ORECF, in the USART_ICR register.
            An interrupt is generated if RXFNEIEÂ =Â 1 or EIE = 1 in the USART_CR1 register.
            Note: When this bit is set, the USART_RDR register content is not lost but the shift register is overwritten. An interrupt is generated if the ORE flag is set during multi buffer communication if the EIE bit is set.
            This bit is permanently forced to 0 (no overrun detection) when the bit OVRDIS is set in the USART_CR3 register.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No overrun error</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Overrun error is detected</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>ORE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Idle line detected
            This bit is set by hardware when an Idle Line is detected. An interrupt is generated if IDLEIEÂ =Â 1 in the USART_CR1 register. It is cleared by software, writing 1 to the IDLECF in the USART_ICR register.
            Note: The IDLE bit is not set again until the RXFNE bit has been set (i.e. a new idle line occurs).
            If Mute mode is enabled (MMEÂ =Â 1), IDLE is set if the USART is not mute (RWUÂ =Â 0), whatever the Mute mode selected by the WAKE bit. If RWUÂ =Â 1, IDLE is not set.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No Idle line is detected</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Idle line is detected</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>IDLE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RXFIFO not empty
            RXFNE bit is set by hardware when the RXFIFO is not empty, meaning that data can be read from the USART_RDR register. Every read operation from the USART_RDR frees a location in the RXFIFO.
            RXFNE is cleared when the RXFIFO is empty. The RXFNE flag can also be cleared by writing 1 to the RXFRQ in the USART_RQR register.
            An interrupt is generated if RXFNEIEÂ =Â 1 in the USART_CR1 register.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Data is not received</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Received data is ready to be read.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RXFNE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmission complete
            This bit indicates that the last data written in the USART_TDR has been transmitted out of the shift register.
            It is set by hardware when the transmission of a frame containing data is complete and when TXFE is set.
            An interrupt is generated if TCIEÂ =Â 1 in the USART_CR1 register.
            TC bit is is cleared by software, by writing 1 to the TCCF in the USART_ICR register or by a write to the USART_TDR register.
            Note: If TE bit is reset and no transmission is on going, the TC bit is immediately set.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Transmission is not complete</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Transmission is complete</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TC</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>TXFIFO not full
            TXFNF is set by hardware when TXFIFO is not full meaning that data can be written in the USART_TDR. Every write operation to the USART_TDR places the data in the TXFIFO. This flag remains set until the TXFIFO is full. When the TXFIFO is full, this flag is cleared indicating that data can not be written into the USART_TDR.
            An interrupt is generated if the TXFNFIE bit =1 in the USART_CR1 register.
            Note: The TXFNF is kept reset during the flush request until TXFIFO is empty. After sending the flush request (by setting TXFRQ bit), the flag TXFNF should be checked prior to writing in TXFIFO (TXFNF and TXFE are set at the same time).
            This bit is used during single buffer transmission.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Transmit FIFO is full</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Transmit FIFO is not full</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TXFNF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>LIN break detection flag
            This bit is set by hardware when the LIN break is detected. It is cleared by software, by writing 1 to the LBDCF in the USART_ICR.
            An interrupt is generated if LBDIE = 1 in the USART_CR2 register.
            Note: If the USART does not support LIN mode, this bit is reserved and kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>LIN Break not detected</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>LIN break detected</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>LBDF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>CTS interrupt flag
            This bit is set by hardware when the nCTS input toggles, if the CTSE bit is set. It is cleared by software, by writing 1 to the CTSCF bit in the USART_ICR register.
            An interrupt is generated if CTSIEÂ =Â 1 in the USART_CR3 register.
            Note: If the hardware flow control feature is not supported, this bit is reserved and kept at reset value.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No change occurred on the nCTS status line</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>A change occurred on the nCTS status line</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CTSIF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>CTS flag
            This bit is set/reset by hardware. It is an inverted copy of the status of the nCTS input pin.
            Note: If the hardware flow control feature is not supported, this bit is reserved and kept at reset value.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>nCTS line set</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>nCTS line reset</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CTS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receiver timeout
            This bit is set by hardware when the timeout value, programmed in the RTOR register has lapsed, without any communication. It is cleared by software, writing 1 to the RTOCF bit in the USART_ICR register.
            An interrupt is generated if RTOIEÂ =Â 1 in the USART_CR2 register.
            In Smartcard mode, the timeout corresponds to the CWT or BWT timings.
            Note: If a time equal to the value programmed in RTOR register separates 2 characters, RTOF is not set. If this time exceeds this value + 2 sample times (2/16 or 2/8, depending on the oversampling method), RTOF flag is set.
            The counter counts even if RE = 0 but RTOF is set only when RE = 1. If the timeout has already elapsed when RE is set, then RTOF is set.
            If the USART does not support the Receiver timeout feature, this bit is reserved and kept at reset value.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Timeout value not reached</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Timeout value reached without any data reception</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RTOF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>End of block flag
            This bit is set by hardware when a complete block has been received (for example TÂ =Â 1 Smartcard mode). The detection is done when the number of received bytes (from the start of the block, including the prologue) is equal or greater than BLEN + 4.
            An interrupt is generated if the EOBIEÂ =Â 1 in the USART_CR2 register.
            It is cleared by software, writing 1 to the EOBCF in the USART_ICR register.
            Note: If Smartcard mode is not supported, this bit is reserved and kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>End of Block not reached</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>End of Block (number of characters) reached</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>EOBF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI slave underrun error flag
            In slave transmission mode, this flag is set when the first clock pulse for data transmission appears while the software has not yet loaded any value into USART_TDR. This flag is reset by setting UDRCF bit in the USART_ICR register.
            Note: If the USART does not support the SPI slave mode, this bit is reserved and kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No underrun error</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>underrun error</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>UDR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Auto baud rate error
            This bit is set by hardware if the baud rate measurement failed (baud rate out of range or character comparison failed)
            It is cleared by software, by writing 1 to the ABRRQ bit in the USART_CR3 register.
            Note: If the USART does not support the auto baud rate feature, this bit is reserved and kept at reset value.</description>
            <name>ABRE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Auto baud rate flag
            This bit is set by hardware when the automatic baud rate has been set (RXFNE is also set, generating an interrupt if RXFNEIE = 1) or when the auto baud rate operation was completed without success (ABREÂ =Â 1) (ABRE, RXFNE and FE are also set in this case)
            It is cleared by software, in order to request a new auto baud rate detection, by writing 1 to the ABRRQ in the USART_RQR register.
            Note: If the USART does not support the auto baud rate feature, this bit is reserved and kept at reset value.</description>
            <name>ABRF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Busy flag
            This bit is set and reset by hardware. It is active when a communication is ongoing on the RX line (successful start bit detected). It is reset at the end of the reception (successful or not).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART is idle (no reception)</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Reception on going</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>BUSY</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Character match flag
            This bit is set by hardware, when a the character defined by ADD[7:0] is received. It is cleared by software, writing 1 to the CMCF in the USART_ICR register.
            An interrupt is generated if CMIEÂ =Â 1in the USART_CR1 register.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No Character match detected</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Character Match detected</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CMF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Send break flag
            This bit indicates that a send break character was requested. It is set by software, by writing 1 to the SBKRQ bit in the USART_CR3 register. It is automatically reset by hardware during the stop bit of break transmission.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Break character transmitted</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Break character requested by setting SBKRQ bit in USART_RQR register</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>SBKF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receiver wakeup from Mute mode
            This bit indicates if the USART is in Mute mode. It is cleared/set by hardware when a wakeup/mute sequence is recognized. The Mute mode control sequence (address or IDLE) is selected by the WAKE bit in the USART_CR1 register.
            When wakeup on IDLE mode is selected, this bit can only be set by software, writing 1 to the MMRQ bit in the USART_RQR register.
            Note: If the USART does not support the wakeup from Stop feature, this bit is reserved and kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receiver in active mode</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receiver in Mute mode</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RWU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Wakeup from low-power mode flag
            This bit is set by hardware, when a wakeup event is detected. The event is defined by the WUS bitfield. It is cleared by software, writing a 1 to the WUCF in the USART_ICR register.
            An interrupt is generated if WUFIEÂ =Â 1 in the USART_CR3 register.
            Note: When UESM is cleared, WUF flag is also cleared.
            If the USART does not support the wakeup from Stop feature, this bit is reserved and kept at reset value. Refer to .</description>
            <name>WUF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmit enable acknowledge flag
            This bit is set/reset by hardware, when the Transmit Enable value is taken into account by the USART.
            It can be used when an idle frame request is generated by writing TEÂ =Â 0, followed by TEÂ =Â 1 in the USART_CR1 register, in order to respect the TEÂ =Â 0 minimum period.</description>
            <name>TEACK</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receive enable acknowledge flag
            This bit is set/reset by hardware, when the Receive Enable value is taken into account by the USART.
            It can be used to verify that the USART is ready for reception before entering low-power mode.
            Note: If the USART does not support the wakeup from Stop feature, this bit is reserved and kept at reset value. Refer to .</description>
            <name>REACK</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>TXFIFO empty
            This bit is set by hardware when TXFIFO is empty. When the TXFIFO contains at least one data, this flag is cleared. The TXFE flag can also be set by writing 1 to the bit TXFRQ (bit 4) in the USART_RQR register.
            An interrupt is generated if the TXFEIE bit Â =Â 1 (bit 30) in the USART_CR1 register.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>TXFIFO not empty.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>TXFIFO empty.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TXFE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RXFIFO full
            This bit is set by hardware when the number of received data corresponds to RXFIFOÂ sizeÂ +Â 1 (RXFIFO full + 1 data in the USART_RDR register.
            An interrupt is generated if the RXFFIE bit Â =Â 1 in the USART_CR1 register.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>RXFIFO not full.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>RXFIFO Full.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RXFF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmission complete before guard time flag
            This bit is set when the last data written in the USART_TDR has been transmitted correctly out of the shift register.
            It is set by hardware in Smartcard mode, if the transmission of a frame containing data is complete and if the smartcard did not send back any NACK. An interrupt is generated if TCBGTIEÂ =Â 1 in the USART_CR3 register.
            This bit is cleared by software, by writing 1 to the TCBGTCF in the USART_ICR register or by a write to the USART_TDR register.
            Note: If the USART does not support the Smartcard mode, this bit is reserved and kept at reset value. If the USART supports the Smartcard mode and the Smartcard mode is enabled, the TCBGT reset value is '1â. Refer to on pageÂ 835.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Transmission is not complete or transmission is complete unsuccessfully (i.e. a NACK is received from the card)</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Transmission is complete successfully (before Guard time completion and there is no NACK from the smart card).</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TCBGT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RXFIFO threshold flag
            This bit is set by hardware when the threshold programmed in RXFTCFG in USART_CR3 register is reached. This means that there are (RXFTCFG - 1) data in the Receive FIFO and one data in the USART_RDR register. An interrupt is generated if the RXFTIE bit Â =Â 1 (bit 27) in the USART_CR3 register.
            Note: When the RXFTCFG threshold is configured to '101â, RXFT flag is set if 16 data are available i.e. 15 data in the RXFIFO and 1 data in the USART_RDR. Consequently, the 17th received data does not cause an overrun error. The overrun error occurs after receiving the 18th data.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receive FIFO does not reach the programmed threshold.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receive FIFO reached the programmed threshold.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RXFT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>TXFIFO threshold flag
            This bit is set by hardware when the TXFIFO reaches the threshold programmed in TXFTCFG of USART_CR3 register i.e. the TXFIFO contains TXFTCFG empty locations. An interrupt is generated if the TXFTIE bit Â =Â 1 (bit 31) in the USART_CR3 register.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>TXFIFO does not reach the programmed threshold.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>TXFIFO reached the programmed threshold.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TXFT</name>
          </field>
        </fields>
        <name>ISR_FIFO_ENABLED</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x8000C0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-only</access>
        <addressOffset>0x1C</addressOffset>
        <description>Interrupt &amp; status
                  register</description>
        <displayName>ISR_FIFO_DISABLED</displayName>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Parity error
            This bit is set by hardware when a parity error occurs in receiver mode. It is cleared by software, writing 1 to the PECF in the USART_ICR register.
            An interrupt is generated if PEIE = 1 in the USART_CR1 register.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No parity error</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Parity error</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>PE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Framing error
            This bit is set by hardware when a de-synchronization, excessive noise or a break character is detected. It is cleared by software, writing 1 to the FECF bit in the USART_ICR register.
            When transmitting data in Smartcard mode, this bit is set when the maximum number of transmit attempts is reached without success (the card NACKs the data frame).
            An interrupt is generated if EIEÂ =Â 1 in the USART_CR1 register.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No Framing error is detected</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Framing error or break character is detected</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>FE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Noise detection flag
            This bit is set by hardware when noise is detected on a received frame. It is cleared by software, writing 1 to the NECF bit in the USART_ICR register.
            Note: This bit does not generate an interrupt as it appears at the same time as the RXNE bit which itself generates an interrupt. An interrupt is generated when the NE flag is set during multi buffer communication if the EIE bit is set.
            When the line is noise-free, the NE flag can be disabled by programming the ONEBIT bit to 1 to increase the USART tolerance to deviations (Refer to Tolerance of the USART receiver to clock deviation on pageÂ 861).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No noise is detected</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Noise is detected</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>NE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Overrun error
            This bit is set by hardware when the data currently being received in the shift register is
            ready to be transferred into the USART_RDR register while RXNEÂ =Â 1. It is cleared by a software, writing 1 to the ORECF, in the USART_ICR register.
            An interrupt is generated if RXNEIEÂ =Â 1 or EIE Â =Â  1 in the USART_CR1 register.
            Note: When this bit is set, the USART_RDR register content is not lost but the shift register is overwritten. An interrupt is generated if the ORE flag is set during multi buffer communication if the EIE bit is set.
            This bit is permanently forced to 0 (no overrun detection) when the bit OVRDIS is set in the USART_CR3 register.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No overrun error</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Overrun error is detected</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>ORE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Idle line detected
            This bit is set by hardware when an Idle Line is detected. An interrupt is generated if IDLEIEÂ =Â 1 in the USART_CR1 register. It is cleared by software, writing 1 to the IDLECF in the USART_ICR register.
            Note: The IDLE bit is not set again until the RXNE bit has been set (i.e. a new idle line occurs).
            If Mute mode is enabled (MMEÂ =Â 1), IDLE is set if the USART is not mute (RWUÂ =Â 0), whatever the Mute mode selected by the WAKE bit. If RWUÂ =Â 1, IDLE is not set.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No Idle line is detected</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Idle line is detected</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>IDLE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Read data register not empty
            RXNE bit is set by hardware when the content of the USART_RDR shift register has been transferred to the USART_RDR register. It is cleared by reading from the USART_RDR register. The RXNE flag can also be cleared by writing 1 to the RXFRQ in the USART_RQR register.
            An interrupt is generated if RXNEIEÂ =Â 1 in the USART_CR1 register.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Data is not received</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Received data is ready to be read.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RXNE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmission complete
            This bit indicates that the last data written in the USART_TDR has been transmitted out of the shift register.
            It is set by hardware when the transmission of a frame containing data is complete and when TXE is set.
            An interrupt is generated if TCIEÂ =Â 1 in the USART_CR1 register.
            TC bit is is cleared by software, by writing 1 to the TCCF in the USART_ICR register or by a write to the USART_TDR register.
            Note: If TE bit is reset and no transmission is on going, the TC bit is set immediately.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Transmission is not complete</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Transmission is complete</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TC</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmit data register empty
            TXE is set by hardware when the content of the USART_TDR register has been transferred into the shift register. It is cleared by writing to the USART_TDR register. The TXE flag can also be set by writing 1 to the TXFRQ in the USART_RQR register, in order to discard the data (only in Smartcard TÂ =Â 0 mode, in case of transmission failure).
            An interrupt is generated if the TXEIE bit Â =Â 1 in the USART_CR1 register.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Data register full</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Data register not full</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TXE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>LIN break detection flag
            This bit is set by hardware when the LIN break is detected. It is cleared by software, by writing 1 to the LBDCF in the USART_ICR.
            An interrupt is generated if LBDIE = 1 in the USART_CR2 register.
            Note: If the USART does not support LIN mode, this bit is reserved and kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>LIN Break not detected</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>LIN break detected</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>LBDF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>CTS interrupt flag
            This bit is set by hardware when the nCTS input toggles, if the CTSE bit is set. It is cleared by software, by writing 1 to the CTSCF bit in the USART_ICR register.
            An interrupt is generated if CTSIEÂ =Â 1 in the USART_CR3 register.
            Note: If the hardware flow control feature is not supported, this bit is reserved and kept at reset value.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No change occurred on the nCTS status line</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>A change occurred on the nCTS status line</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CTSIF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>CTS flag
            This bit is set/reset by hardware. It is an inverted copy of the status of the nCTS input pin.
            Note: If the hardware flow control feature is not supported, this bit is reserved and kept at reset value.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>nCTS line set</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>nCTS line reset</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CTS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receiver timeout
            This bit is set by hardware when the timeout value, programmed in the RTOR register has lapsed, without any communication. It is cleared by software, writing 1 to the RTOCF bit in the USART_ICR register.
            An interrupt is generated if RTOIEÂ =Â 1 in the USART_CR2 register.
            In Smartcard mode, the timeout corresponds to the CWT or BWT timings.
            Note: If a time equal to the value programmed in RTOR register separates 2 characters, RTOF is not set. If this time exceeds this value + 2 sample times (2/16 or 2/8, depending on the oversampling method), RTOF flag is set.
            The counter counts even if RE = 0 but RTOF is set only when RE = 1. If the timeout has already elapsed when RE is set, then RTOF is set.
            If the USART does not support the Receiver timeout feature, this bit is reserved and kept at reset value.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Timeout value not reached</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Timeout value reached without any data reception</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RTOF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>End of block flag
            This bit is set by hardware when a complete block has been received (for example TÂ =Â 1 Smartcard mode). The detection is done when the number of received bytes (from the start of the block, including the prologue) is equal or greater than BLEN + 4.
            An interrupt is generated if the EOBIEÂ =Â 1 in the USART_CR2 register.
            It is cleared by software, writing 1 to the EOBCF in the USART_ICR register.
            Note: If Smartcard mode is not supported, this bit is reserved and kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>End of Block not reached</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>End of Block (number of characters) reached</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>EOBF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI slave underrun error flag
            In slave transmission mode, this flag is set when the first clock pulse for data transmission appears while the software has not yet loaded any value into USART_TDR. This flag is reset by setting UDRCF bit in the USART_ICR register.
            Note: If the USART does not support the SPI slave mode, this bit is reserved and kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No underrun error</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>underrun error</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>UDR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Auto baud rate error
            This bit is set by hardware if the baud rate measurement failed (baud rate out of range or character comparison failed)
            It is cleared by software, by writing 1 to the ABRRQ bit in the USART_CR3 register.
            Note: If the USART does not support the auto baud rate feature, this bit is reserved and kept at reset value.</description>
            <name>ABRE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Auto baud rate flag
            This bit is set by hardware when the automatic baud rate has been set (RXNE is also set, generating an interrupt if RXNEIE = 1) or when the auto baud rate operation was completed without success (ABREÂ =Â 1) (ABRE, RXNE and FE are also set in this case)
            It is cleared by software, in order to request a new auto baud rate detection, by writing 1 to the ABRRQ in the USART_RQR register.
            Note: If the USART does not support the auto baud rate feature, this bit is reserved and kept at reset value.</description>
            <name>ABRF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Busy flag
            This bit is set and reset by hardware. It is active when a communication is ongoing on the RX line (successful start bit detected). It is reset at the end of the reception (successful or not).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART is idle (no reception)</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Reception on going</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>BUSY</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Character match flag
            This bit is set by hardware, when a the character defined by ADD[7:0] is received. It is cleared by software, writing 1 to the CMCF in the USART_ICR register.
            An interrupt is generated if CMIEÂ =Â 1in the USART_CR1 register.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No Character match detected</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Character Match detected</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CMF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Send break flag
            This bit indicates that a send break character was requested. It is set by software, by writing 1 to the SBKRQ bit in the USART_CR3 register. It is automatically reset by hardware during the stop bit of break transmission.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Break character transmitted</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Break character requested by setting SBKRQ bit in USART_RQR register</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>SBKF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receiver wakeup from Mute mode
            This bit indicates if the USART is in Mute mode. It is cleared/set by hardware when a wakeup/mute sequence is recognized. The Mute mode control sequence (address or IDLE) is selected by the WAKE bit in the USART_CR1 register.
            When wakeup on IDLE mode is selected, this bit can only be set by software, writing 1 to the MMRQ bit in the USART_RQR register.
            Note: If the USART does not support the wakeup from Stop feature, this bit is reserved and kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receiver in active mode</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receiver in Mute mode</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RWU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Wakeup from low-power mode flag
            This bit is set by hardware, when a wakeup event is detected. The event is defined by the WUS bitfield. It is cleared by software, writing a 1 to the WUCF in the USART_ICR register.
            An interrupt is generated if WUFIEÂ =Â 1 in the USART_CR3 register.
            Note: When UESM is cleared, WUF flag is also cleared.
            If the USART does not support the wakeup from Stop feature, this bit is reserved and kept at reset value. Refer to .</description>
            <name>WUF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmit enable acknowledge flag
            This bit is set/reset by hardware, when the Transmit Enable value is taken into account by the USART.
            It can be used when an idle frame request is generated by writing TEÂ =Â 0, followed by TEÂ =Â 1 in the USART_CR1 register, in order to respect the TEÂ =Â 0 minimum period.</description>
            <name>TEACK</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receive enable acknowledge flag
            This bit is set/reset by hardware, when the Receive Enable value is taken into account by the USART.
            It can be used to verify that the USART is ready for reception before entering low-power mode.
            Note: If the USART does not support the wakeup from Stop feature, this bit is reserved and kept at reset value. Refer to .</description>
            <name>REACK</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmission complete before guard time flag
            This bit is set when the last data written in the USART_TDR has been transmitted correctly out of the shift register.
            It is set by hardware in Smartcard mode, if the transmission of a frame containing data is complete and if the smartcard did not send back any NACK. An interrupt is generated if TCBGTIEÂ =Â 1 in the USART_CR3 register.
            This bit is cleared by software, by writing 1 to the TCBGTCF in the USART_ICR register or by a write to the USART_TDR register.
            Note: If the USART does not support the Smartcard mode, this bit is reserved and kept at reset value. If the USART supports the Smartcard mode and the Smartcard mode is enabled, the TCBGT reset value is '1â. Refer to on pageÂ 835.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Transmission is not complete or transmission is complete unsuccessfully (i.e. a NACK is received from the card)</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Transmission is complete successfully (before Guard time completion and there is no NACK from the smart card).</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TCBGT</name>
          </field>
        </fields>
        <name>ISR_FIFO_DISABLED</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xC0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>write-only</access>
        <addressOffset>0x20</addressOffset>
        <description>Interrupt flag clear register</description>
        <displayName>ICR</displayName>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Parity error clear flag
            Writing 1 to this bit clears the PE flag in the USART_ISR register.</description>
            <name>PECF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Framing error clear flag
            Writing 1 to this bit clears the FE flag in the USART_ISR register.</description>
            <name>FECF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Noise detected clear flag
            Writing 1 to this bit clears the NE flag in the USART_ISR register.</description>
            <name>NECF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Overrun error clear flag
            Writing 1 to this bit clears the ORE flag in the USART_ISR register.</description>
            <name>ORECF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Idle line detected clear flag
            Writing 1 to this bit clears the IDLE flag in the USART_ISR register.</description>
            <name>IDLECF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>TXFIFO empty clear flag
            Writing 1 to this bit clears the TXFE flag in the USART_ISR register.</description>
            <name>TXFECF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmission complete clear flag
            Writing 1 to this bit clears the TC flag in the USART_ISR register.</description>
            <name>TCCF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmission complete before Guard time clear flag
            Writing 1 to this bit clears the TCBGT flag in the USART_ISR register.</description>
            <name>TCBGTCF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>LIN break detection clear flag
            Writing 1 to this bit clears the LBDF flag in the USART_ISR register.
            Note: If LIN mode is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <name>LBDCF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>CTS clear flag
            Writing 1 to this bit clears the CTSIF flag in the USART_ISR register.
            Note: If the hardware flow control feature is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <name>CTSCF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receiver timeout clear flag
            Writing 1 to this bit clears the RTOF flag in the USART_ISR register.
            Note: If the USART does not support the Receiver timeout feature, this bit is reserved and must be kept at reset value. Refer to pageÂ 835.</description>
            <name>RTOCF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>End of block clear flag
            Writing 1 to this bit clears the EOBF flag in the USART_ISR register.
            Note: If the USART does not support Smartcard mode, this bit is reserved and must be kept at reset value. Refer to .</description>
            <name>EOBCF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI slave underrun clear flag
            Writing 1 to this bit clears the UDRF flag in the USART_ISR register.
            Note: If the USART does not support SPI slave mode, this bit is reserved and must be kept at reset value. Refer to</description>
            <name>UDRCF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Character match clear flag
            Writing 1 to this bit clears the CMF flag in the USART_ISR register.</description>
            <name>CMCF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Wakeup from low-power mode clear flag
            Writing 1 to this bit clears the WUF flag in the USART_ISR register.
            Note: If the USART does not support the wakeup from Stop feature, this bit is reserved and must be kept at reset value. Refer to pageÂ 835.</description>
            <name>WUCF</name>
          </field>
        </fields>
        <name>ICR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-only</access>
        <addressOffset>0x24</addressOffset>
        <description>Receive data register</description>
        <displayName>RDR</displayName>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>Receive data value</description>
            <name>RDR</name>
          </field>
        </fields>
        <name>RDR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x28</addressOffset>
        <description>Transmit data register</description>
        <displayName>TDR</displayName>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>Transmit data value</description>
            <name>TDR</name>
          </field>
        </fields>
        <name>TDR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x2C</addressOffset>
        <description>Prescaler register</description>
        <displayName>PRESC</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Clock prescaler
            The USART input clock can be divided by a prescaler factor:
            Remaining combinations: Reserved
            Note: When PRESCALER is programmed with a value different of the allowed ones, programmed prescaler value is 1011 i.e. input clock divided by 256.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>input clock not divided</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>input clock divided by 2</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>input clock divided by 4</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>input clock divided by 6</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>input clock divided by 8</description>
                <name>B_0x4</name>
                <value>0x4</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>input clock divided by 10</description>
                <name>B_0x5</name>
                <value>0x5</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>input clock divided by 12</description>
                <name>B_0x6</name>
                <value>0x6</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>input clock divided by 16</description>
                <name>B_0x7</name>
                <value>0x7</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>input clock divided by 32</description>
                <name>B_0x8</name>
                <value>0x8</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>input clock divided by 64</description>
                <name>B_0x9</name>
                <value>0x9</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>input clock divided by 128</description>
                <name>B_0xA</name>
                <value>0xA</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>input clock divided by 256</description>
                <name>B_0xB</name>
                <value>0xB</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>PRESCALER</name>
          </field>
        </fields>
        <name>PRESC</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <resetMask>0xFFFFFFFF</resetMask>
    <resetValue>0x0</resetValue>
    <size>0x20</size>
  </peripheral>
</peripherals>
<peripherals>
  <peripheral>
    <addressBlock>
      <offset>0x0</offset>
      <size>0x400</size>
      <usage>registers</usage>
    </addressBlock>
    <baseAddress>0x40013C00</baseAddress>
    <derivedFrom>USART1</derivedFrom>
    <description>Universal synchronous asynchronous receiver
          transmitter</description>
    <groupName>USART</groupName>
    <interrupts>
      <interrupt>
        <name>USART1</name>
        <value>0x1B</value>
      </interrupt>
    </interrupts>
    <name>USART6</name>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x0</addressOffset>
        <description>Control register 1</description>
        <displayName>CR1_FIFO_ENABLED</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>USART enable
            When this bit is cleared, the USART prescalers and outputs are stopped immediately, and all current operations are discarded. The USART configuration is kept, but all the USART_ISR status flags are reset. This bit is set and cleared by software.
            Note: To enter low-power mode without generating errors on the line, the TE bit must be previously reset and the software must wait for the TC bit in the USART_ISR to be set before resetting the UE bit.
            The DMA requests are also reset when UE = 0 so the DMA channel must be disabled before resetting the UE bit.
            In Smartcard mode, (SCEN = 1), the SCLK is always available when CLKEN = 1, regardless of the UE bit value.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART prescaler and outputs disabled, low-power mode</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>UE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>USART enable in low-power mode
            When this bit is cleared, the USART cannot wake up the MCU from low-power mode.
            When this bit is set, the USART can wake up the MCU from low-power mode.
            This bit is set and cleared by software.
            Note: It is recommended to set the UESM bit just before entering low-power mode and clear it when exit from low-power mode.
            If the USART does not support the wakeup from Stop feature, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART not able to wake up the MCU from low-power mode.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART able to wake up the MCU from low-power mode. </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>UESM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receiver enable
            This bit enables the receiver. It is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receiver is disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receiver is enabled and begins searching for a start bit</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmitter enable
            This bit enables the transmitter. It is set and cleared by software.
            Note: During transmission, a low pulse on the TE bit ('0â followed by '1â) sends a preamble (idle line) after the current word, except in Smartcard mode. In order to generate an idle character, the TE must not be immediately written to '1â. To ensure the required duration, the software can poll the TEACK bit in the USART_ISR register.
            In Smartcard mode, when TE is set, there is a 1 bit-time delay before the transmission starts.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Transmitter is disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Transmitter is enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>IDLE interrupt enable
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated whenever IDLE = 1 in the USART_ISR register  </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>IDLEIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RXFIFO not empty interrupt enable
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated whenever ORE = 1 or RXFNE = 1 in the USART_ISR register    </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RXFNEIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmission complete interrupt enable
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated whenever TC = 1 in the USART_ISR register  </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TCIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>TXFIFO not full interrupt enable
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated whenever TXFNF =1 in the USART_ISR register</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TXFNFIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>PE interrupt enable
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated whenever PE = 1 in the USART_ISR register  </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>PEIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Parity selection
            This bit selects the odd or even parity when the parity generation/detection is enabled (PCE bit set). It is set and cleared by software. The parity is selected after the current byte.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Even parity</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Odd parity</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>PS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Parity control enable
            This bit selects the hardware parity control (generation and detection). When the parity control is enabled, the computed parity is inserted at the MSB position (9th bit if MÂ =Â 1; 8th bit if MÂ =Â 0) and the parity is checked on the received data. This bit is set and cleared by software. Once it is set, PCE is active after the current byte (in reception and in transmission).
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Parity control disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Parity control enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>PCE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receiver wakeup method
            This bit determines the USART wakeup method from Mute mode. It is set or cleared by software.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Idle line</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Address mark</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>WAKE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Word length
            This bit is used in conjunction with bit 28 (M1) to determine the word length. It is set or cleared by software (refer to bit 28 (M1)description).
            This bit can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <name>M0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Mute mode enable
            This bit enables the USART Mute mode function. When set, the USART can switch between active and Mute mode, as defined by the WAKE bit. It is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receiver in active mode permanently</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receiver can switch between Mute mode and active mode. </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>MME</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Character match interrupt enable
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated when the CMF bit is set in the USART_ISR register.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CMIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Oversampling mode
            This bit can only be written when the USART is disabled (UEÂ =Â 0).
            Note: In LIN, IrDA and Smartcard modes, this bit must be kept cleared.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Oversampling by 16</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Oversampling by 8</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>OVER8</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Driver Enable deassertion time
            This 5-bit value defines the time between the end of the last stop bit, in a transmitted message, and the de-activation of the DE (Driver Enable) signal. It is expressed in sample time units (1/8 or 1/16 bit time, depending on the oversampling rate).
            If the USART_TDR register is written during the DEDT time, the new data is transmitted only when the DEDT and DEAT times have both elapsed.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If the Driver Enable feature is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <name>DEDT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Driver Enable assertion time
            This 5-bit value defines the time between the activation of the DE (Driver Enable) signal and the beginning of the start bit. It is expressed in sample time units (1/8 or 1/16 bit time, depending on the oversampling rate).
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If the Driver Enable feature is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <name>DEAT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receiver timeout interrupt enable
            This bit is set and cleared by software.
            Note: If the USART does not support the Receiver timeout feature, this bit is reserved and must be kept at reset value. .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated when the RTOF bit is set in the USART_ISR register.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RTOIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>End of Block interrupt enable
            This bit is set and cleared by software.
            Note: If the USART does not support Smartcard mode, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated when the EOBF flag is set in the USART_ISR register</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>EOBIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Word length
            This bit must be used in conjunction with bit 12 (M0) to determine the word length. It is set or cleared by software.
            M[1:0] = '00â: 1 start bit, 8 Data bits, n Stop bit
            M[1:0] = '01â: 1 start bit, 9 Data bits, n Stop bit
            M[1:0] = '10â: 1 start bit, 7 Data bits, n Stop bit
            This bit can only be written when the USART is disabled (UEÂ =Â 0).
            Note: In 7-bits data length mode, the Smartcard mode, LIN master mode and Auto baud rate (0x7F and 0x55 frames detection) are not supported.</description>
            <name>M1</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>FIFO mode enable
            This bit is set and cleared by software.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).
            Note: FIFO mode can be used on standard UART communication, in SPI master/slave mode and in Smartcard modes only. It must not be enabled in IrDA and LIN modes.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>FIFO mode is disabled.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>FIFO mode is enabled.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>FIFOEN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1E</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>TXFIFO empty interrupt enable
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated when TXFE = 1 in the USART_ISR register  </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TXFEIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1F</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RXFIFO Full interrupt enable
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated when RXFF = 1 in the USART_ISR register  </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RXFFIE</name>
          </field>
        </fields>
        <name>CR1_FIFO_ENABLED</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x0</addressOffset>
        <description>Control register 1</description>
        <displayName>CR1_FIFO_DISABLED</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>USART enable
            When this bit is cleared, the USART prescalers and outputs are stopped immediately, and all current operations are discarded. The USART configuration is kept, but all the USART_ISR status flags are reset. This bit is set and cleared by software.
            Note: To enter low-power mode without generating errors on the line, the TE bit must be previously reset and the software must wait for the TC bit in the USART_ISR to be set before resetting the UE bit.
            The DMA requests are also reset when UE = 0 so the DMA channel must be disabled before resetting the UE bit.
            In Smartcard mode, (SCEN = 1), the SCLK is always available when CLKEN = 1, regardless of the UE bit value.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART prescaler and outputs disabled, low-power mode</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>UE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>USART enable in low-power mode
            When this bit is cleared, the USART cannot wake up the MCU from low-power mode.
            When this bit is set, the USART can wake up the MCU from low-power mode.
            This bit is set and cleared by software.
            Note: It is recommended to set the UESM bit just before entering low-power mode and clear it when exit from low-power mode.
            If the USART does not support the wakeup from Stop feature, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART not able to wake up the MCU from low-power mode.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART able to wake up the MCU from low-power mode. </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>UESM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receiver enable
            This bit enables the receiver. It is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receiver is disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receiver is enabled and begins searching for a start bit</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmitter enable
            This bit enables the transmitter. It is set and cleared by software.
            Note: During transmission, a low pulse on the TE bit ('0â followed by '1â) sends a preamble (idle line) after the current word, except in Smartcard mode. In order to generate an idle character, the TE must not be immediately written to '1â. To ensure the required duration, the software can poll the TEACK bit in the USART_ISR register.
            In Smartcard mode, when TE is set, there is a 1 bit-time delay before the transmission starts.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Transmitter is disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Transmitter is enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>IDLE interrupt enable
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated whenever IDLE = 1 in the USART_ISR register  </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>IDLEIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receive data register not empty
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated whenever ORE = 1 or RXNE = 1 in the USART_ISR register    </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RXNEIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmission complete interrupt enable
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated whenever TC = 1 in the USART_ISR register  </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TCIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmit data register empty
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated whenever TXE =1 in the USART_ISR register</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TXEIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>PE interrupt enable
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated whenever PE = 1 in the USART_ISR register  </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>PEIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Parity selection
            This bit selects the odd or even parity when the parity generation/detection is enabled (PCE bit set). It is set and cleared by software. The parity is selected after the current byte.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Even parity</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Odd parity</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>PS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Parity control enable
            This bit selects the hardware parity control (generation and detection). When the parity control is enabled, the computed parity is inserted at the MSB position (9th bit if MÂ =Â 1; 8th bit if MÂ =Â 0) and the parity is checked on the received data. This bit is set and cleared by software. Once it is set, PCE is active after the current byte (in reception and in transmission).
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Parity control disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Parity control enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>PCE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receiver wakeup method
            This bit determines the USART wakeup method from Mute mode. It is set or cleared by software.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Idle line</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Address mark</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>WAKE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Word length
            This bit is used in conjunction with bit 28 (M1) to determine the word length. It is set or cleared by software (refer to bit 28 (M1)description).
            This bit can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <name>M0</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Mute mode enable
            This bit enables the USART Mute mode function. When set, the USART can switch between active and Mute mode, as defined by the WAKE bit. It is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receiver in active mode permanently</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receiver can switch between Mute mode and active mode. </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>MME</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Character match interrupt enable
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated when the CMF bit is set in the USART_ISR register.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CMIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Oversampling mode
            This bit can only be written when the USART is disabled (UEÂ =Â 0).
            Note: In LIN, IrDA and Smartcard modes, this bit must be kept cleared.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Oversampling by 16</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Oversampling by 8</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>OVER8</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Driver Enable deassertion time
            This 5-bit value defines the time between the end of the last stop bit, in a transmitted message, and the de-activation of the DE (Driver Enable) signal. It is expressed in sample time units (1/8 or 1/16 bit time, depending on the oversampling rate).
            If the USART_TDR register is written during the DEDT time, the new data is transmitted only when the DEDT and DEAT times have both elapsed.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If the Driver Enable feature is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <name>DEDT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x5</bitWidth>
            <description>Driver Enable assertion time
            This 5-bit value defines the time between the activation of the DE (Driver Enable) signal and the beginning of the start bit. It is expressed in sample time units (1/8 or 1/16 bit time, depending on the oversampling rate).
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If the Driver Enable feature is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <name>DEAT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receiver timeout interrupt enable
            This bit is set and cleared by software.
            Note: If the USART does not support the Receiver timeout feature, this bit is reserved and must be kept at reset value. .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated when the RTOF bit is set in the USART_ISR register.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RTOIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>End of Block interrupt enable
            This bit is set and cleared by software.
            Note: If the USART does not support Smartcard mode, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated when the EOBF flag is set in the USART_ISR register</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>EOBIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Word length
            This bit must be used in conjunction with bit 12 (M0) to determine the word length. It is set or cleared by software.
            M[1:0] = '00â: 1 start bit, 8 Data bits, n Stop bit
            M[1:0] = '01â: 1 start bit, 9 Data bits, n Stop bit
            M[1:0] = '10â: 1 start bit, 7 Data bits, n Stop bit
            This bit can only be written when the USART is disabled (UEÂ =Â 0).
            Note: In 7-bits data length mode, the Smartcard mode, LIN master mode and Auto baud rate (0x7F and 0x55 frames detection) are not supported.</description>
            <name>M1</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>FIFO mode enable
            This bit is set and cleared by software.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).
            Note: FIFO mode can be used on standard UART communication, in SPI master/slave mode and in Smartcard modes only. It must not be enabled in IrDA and LIN modes.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>FIFO mode is disabled.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>FIFO mode is enabled.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>FIFOEN</name>
          </field>
        </fields>
        <name>CR1_FIFO_DISABLED</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x4</addressOffset>
        <description>Control register 2</description>
        <displayName>CR2</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Synchronous Slave mode enable
            When the SLVEN bit is set, the synchronous slave mode is enabled.
            Note: When SPI slave mode is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Slave mode disabled.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Slave mode enabled.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>SLVEN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>When the DIS_NSS bit is set, the NSS pin input is ignored.
            Note: When SPI slave mode is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>SPI slave selection depends on NSS input pin.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>SPI slave is always selected and NSS input pin is ignored.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>DIS_NSS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>7-bit Address Detection/4-bit Address Detection
            This bit is for selection between 4-bit address detection or 7-bit address detection.
            This bit can only be written when the USART is disabled (UEÂ =Â 0)
            Note: In 7-bit and 9-bit data modes, the address detection is done on 6-bit and 8-bit address (ADD[5:0] and ADD[7:0]) respectively.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>4-bit address detection</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>7-bit address detection (in 8-bit data mode)</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>ADDM7</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>LIN break detection length
            This bit is for selection between 11 bit or 10 bit break detection.
            This bit can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If LIN mode is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>10-bit break detection</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>11-bit break detection</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>LBDL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>LIN break detection interrupt enable
            Break interrupt mask (break detection using break delimiter).
            Note: If LIN mode is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt is inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>An interrupt is generated whenever LBDF = 1 in the USART_ISR register  </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>LBDIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Last bit clock pulse
            This bit is used to select whether the clock pulse associated with the last data bit transmitted (MSB) has to be output on the SCLK pin in synchronous mode.
            The last bit is the 7th or 8th or 9th data bit transmitted depending on the 7 or 8 or 9 bit format selected by the M bit in the USART_CR1 register.
            This bit can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If synchronous mode is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>The clock pulse of the last data bit is not output to the SCLK pin</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>The clock pulse of the last data bit is output to the SCLK pin</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>LBCL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Clock phase
            This bit is used to select the phase of the clock output on the SCLK pin in synchronous mode. It works in conjunction with the CPOL bit to produce the desired clock/data relationship (see  and )
            This bit can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If synchronous mode is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>The first clock transition is the first data capture edge</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>The second clock transition is the first data capture edge</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CPHA</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Clock polarity
            This bit enables the user to select the polarity of the clock output on the SCLK pin in synchronous mode. It works in conjunction with the CPHA bit to produce the desired clock/data relationship
            This bit can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If synchronous mode is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Steady low value on SCLK pin outside transmission window</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Steady high value on SCLK pin outside transmission window</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CPOL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Clock enable
            This bit enables the user to enable the SCLK pin.
            This bit can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If neither synchronous mode nor Smartcard mode is supported, this bit is reserved and must be kept at reset value. Refer to .
            In Smartcard mode, in order to provide correctly the SCLK clock to the smartcard, the steps below must be respected:
            UE = 0
            SCEN = 1
            GTPR configuration
            CLKEN= 1
            UE = 1</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>SCLK pin disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>SCLK pin enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CLKEN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>stop bits
            These bits are used for programming the stop bits.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>1 stop bit</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>0.5 stop bit.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>2 stop bits</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>1.5 stop bits</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>STOP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>LIN mode enable
            This bit is set and cleared by software.
            The LIN mode enables the capability to send LIN synchronous breaks (13 low bits) using the SBKRQ bit in the USART_CR1 register, and to detect LIN Sync breaks.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If the USART does not support LIN mode, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>LIN mode disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>LIN mode enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>LINEN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Swap TX/RX pins
            This bit is set and cleared by software.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>TX/RX pins are used as defined in standard pinout</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>The TX and RX pins functions are swapped. This enables to work in the case of a cross-wired connection to another UART. </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>SWAP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RX pin active level inversion
            This bit is set and cleared by software.
            This enables the use of an external inverter on the RX line.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>RX pin signal works using the standard logic levels (VDD =1/idle, Gnd = 0/mark)   </description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>RX pin signal values are inverted (VDD =0/mark, Gnd = 1/idle).   </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RXINV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>TX pin active level inversion
            This bit is set and cleared by software.
            This enables the use of an external inverter on the TX line.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>TX pin signal works using the standard logic levels (VDD =1/idle, Gnd = 0/mark)   </description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>TX pin signal values are inverted (VDD =0/mark, Gnd = 1/idle).   </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TXINV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Binary data inversion
            This bit is set and cleared by software.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Logical data from the data register are send/received in positive/direct logic. (1 = H, 0 = L)     </description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Logical data from the data register are send/received in negative/inverse logic. (1 = L, 0 = H).     The parity bit is also inverted.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>DATAINV</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Most significant bit first
            This bit is set and cleared by software.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>data is transmitted/received with data bit 0 first, following the start bit. </description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>data is transmitted/received with the MSB (bit 7/8) first, following the start bit. </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>MSBFIRST</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Auto baud rate enable
            This bit is set and cleared by software.
            Note: If the USART does not support the auto baud rate feature, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Auto baud rate detection is disabled. </description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Auto baud rate detection is enabled. </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>ABREN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Auto baud rate mode
            These bits are set and cleared by software.
            This bitfield can only be written when ABREN = 0 or the USART is disabled (UEÂ =Â 0).
            Note: If DATAINVÂ =Â 1 and/or MSBFIRSTÂ =Â 1 the patterns must be the same on the line, for example 0xAA for MSBFIRST)
            If the USART does not support the auto baud rate feature, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Measurement of the start bit is used to detect the baud rate. </description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Falling edge to falling edge measurement (the received frame must start with a single bit = 1 and Frame = Start10xxxxxx)</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>0x7F frame detection.</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>0x55 frame detection</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>ABRMOD</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receiver timeout enable
            This bit is set and cleared by software.
            When this feature is enabled, the RTOF flag in the USART_ISR register is set if the RX line is idle (no reception) for the duration programmed in the RTOR (receiver timeout register).
            Note: If the USART does not support the Receiver timeout feature, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receiver timeout feature disabled. </description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receiver timeout feature enabled. </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RTOEN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>Address of the USART node
            ADD[7:4]:
            These bits give the address of the USART node or a character code to be recognized.
            They are used to wake up the MCU with 7-bit address mark detection in multiprocessor communication during Mute mode or low-power mode. The MSB of the character sent by the transmitter should be equal to 1. They can also be used for character detection during normal reception, Mute mode inactive (for example, end of block detection in ModBus protocol). In this case, the whole received character (8-bit) is compared to the ADD[7:0] value and CMF flag is set on match.
            These bits can only be written when reception is disabled (RE = 0) or the USART is disabled (UEÂ =Â 0).
            ADD[3:0]:
            These bits give the address of the USART node or a character code to be recognized.
            They are used for wakeup with address mark detection, in multiprocessor communication during Mute mode or low-power mode.
            These bits can only be written when reception is disabled (RE = 0) or the USART is disabled (UEÂ =Â 0).</description>
            <name>ADD</name>
          </field>
        </fields>
        <name>CR2</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x8</addressOffset>
        <description>Control register 3</description>
        <displayName>CR3</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Error interrupt enable
            Error Interrupt Enable Bit is required to enable interrupt generation in case of a framing error, overrun error noise flag or SPI slave underrun error (FEÂ =Â 1 or OREÂ =Â 1 or NEÂ =Â 1 or UDR = 1 in the USART_ISR register).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>interrupt generated when FE = 1 or ORE = 1 or NE = 1 or UDR = 1 (in SPI slave mode) in       the USART_ISR register.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>EIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>IrDA mode enable
            This bit is set and cleared by software.
            This bit can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If IrDA mode is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>IrDA disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>IrDA enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>IREN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>IrDA low-power
            This bit is used for selecting between normal and low-power IrDA modes
            This bit can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If IrDA mode is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Normal mode</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Low-power mode</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>IRLP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Half-duplex selection
            Selection of Single-wire Half-duplex mode
            This bit can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Half duplex mode is not selected</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Half duplex mode is selected </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>HDSEL</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Smartcard NACK enable
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If the USART does not support Smartcard mode, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>NACK transmission in case of parity error is disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>NACK transmission during parity error is enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>NACK</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Smartcard mode enable
            This bit is used for enabling Smartcard mode.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If the USART does not support Smartcard mode, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Smartcard Mode disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Smartcard Mode enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>SCEN</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>DMA enable receiver
            This bit is set/reset by software</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>DMA mode is enabled for reception</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>DMA mode is disabled for reception</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>DMAR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>DMA enable transmitter
            This bit is set/reset by software</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>DMA mode is enabled for transmission</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>DMA mode is disabled for transmission</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>DMAT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RTS enable
            This bit can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If the hardware flow control feature is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>RTS hardware flow control disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>RTS output enabled, data is only requested when there is space in the receive buffer. The transmission of data is expected to cease after the current character has been transmitted. The nRTS output is asserted (pulled to 0) when data can be received.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RTSE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>CTS enable
            This bit can only be written when the USART is disabled (UEÂ =Â 0)
            Note: If the hardware flow control feature is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>CTS hardware flow control disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CTS mode enabled, data is only transmitted when the nCTS input is asserted (tied to 0). If the nCTS input is deasserted while data is being transmitted, then the transmission is completed before stopping. If data is written into the data register while nCTS is asserted, the transmission is postponed until nCTS is asserted.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CTSE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>CTS interrupt enable
            Note: If the hardware flow control feature is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt is inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>An interrupt is generated whenever CTSIF = 1 in the USART_ISR register  </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CTSIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>One sample bit method enable
            This bit enables the user to select the sample method. When the one sample bit method is selected the noise detection flag (NE) is disabled.
            This bit can only be written when the USART is disabled (UEÂ =Â 0).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Three sample bit method</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>One sample bit method</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>ONEBIT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Overrun Disable
            This bit is used to disable the receive overrun detection.
            the ORE flag is not set and the new received data overwrites the previous content of the USART_RDR register. When FIFO mode is enabled, the RXFIFO is bypassed and data is written directly in USART_RDR register. Even when FIFO management is enabled, the RXNE flag is to be used.
            This bit can only be written when the USART is disabled (UEÂ =Â 0).
            Note: This control bit enables checking the communication flow w/o reading the data</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Overrun Error Flag, ORE, is set when received data is not read before receiving new data. </description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Overrun functionality is disabled. If new data is received while the RXNE flag is still set</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>OVRDIS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>DMA Disable on Reception Error
            This bit can only be written when the USART is disabled (UE=0).
            Note: The reception errors are: parity error, framing error or noise error.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>DMA is not disabled in case of reception error. The corresponding error flag is set but RXNE is kept 0 preventing from overrun. As a consequence, the DMA request is not asserted, so the erroneous data is not transferred (no DMA request), but next correct received data is transferred (used for Smartcard mode).</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>DMA is disabled following a reception error. The corresponding error flag is set, as well as RXNE. The DMA request is masked until the error flag is cleared. This means that the software must first disable the DMA request (DMAR = 0) or clear RXNE/RXFNE is case FIFO mode is enabled) before clearing the error flag.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>DDRE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Driver enable mode
            This bit enables the user to activate the external transceiver control, through the DE signal.
            This bit can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If the Driver Enable feature is not supported, this bit is reserved and must be kept at reset value. .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>DE function is disabled. </description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>DE function is enabled. The DE signal is output on the RTS pin.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>DEM</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Driver enable polarity selection
            This bit can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If the Driver Enable feature is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>DE signal is active high. </description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>DE signal is active low.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>DEP</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Smartcard auto-retry count
            This bitfield specifies the number of retries for transmission and reception in Smartcard mode.
            In transmission mode, it specifies the number of automatic retransmission retries, before generating a transmission error (FE bit set).
            In reception mode, it specifies the number or erroneous reception trials, before generating a reception error (RXNE/RXFNE and PE bits set).
            This bitfield must be programmed only when the USART is disabled (UEÂ =Â 0).
            When the USART is enabled (UEÂ =Â 1), this bitfield may only be written to 0x0, in order to stop retransmission.
            Note: If Smartcard mode is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>retransmission disabled - No automatic retransmission in transmit mode. </description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>number of automatic retransmission attempts (before signaling error)</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>number of automatic retransmission attempts (before signaling error)</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>number of automatic retransmission attempts (before signaling error)</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>number of automatic retransmission attempts (before signaling error)</description>
                <name>B_0x4</name>
                <value>0x4</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>number of automatic retransmission attempts (before signaling error)</description>
                <name>B_0x5</name>
                <value>0x5</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>number of automatic retransmission attempts (before signaling error)</description>
                <name>B_0x6</name>
                <value>0x6</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>number of automatic retransmission attempts (before signaling error)</description>
                <name>B_0x7</name>
                <value>0x7</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>SCARCNT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x2</bitWidth>
            <description>Wakeup from low-power mode interrupt flag selection
            This bitfield specifies the event which activates the WUF (Wakeup from low-power mode flag).
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).
            If the USART does not support the wakeup from Stop feature, this bit is reserved and must be kept at reset value. Refer to pageÂ 835.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>WUF active on address match (as defined by ADD[7:0] and ADDM7)</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>WUF active on start bit detection</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>WUF active on RXNE/RXFNE. </description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>WUS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Wakeup from low-power mode interrupt enable
            This bit is set and cleared by software.
            Note: WUFIE must be set before entering in low-power mode.
            If the USART does not support the wakeup from Stop feature, this bit is reserved and must be kept at reset value. Refer to pageÂ 835.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated whenever WUF = 1 in the USART_ISR register  </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>WUFIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>TXFIFO threshold interrupt enable
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated when TXFIFO reaches the threshold programmed in TXFTCFG.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TXFTIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmission Complete before guard time, interrupt enable
            This bit is set and cleared by software.
            Note: If the USART does not support the Smartcard mode, this bit is reserved and must be kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated whenever TCBGT=1 in the USART_ISR register</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TCBGTIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Receive FIFO threshold configuration
            Remaining combinations: Reserved</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receive FIFO reaches 1/8 of its depth</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receive FIFO reaches 1/4 of its depth</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receive FIFO reaches 1/2 of its depth</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receive FIFO reaches 3/4 of its depth</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receive FIFO reaches 7/8 of its depth</description>
                <name>B_0x4</name>
                <value>0x4</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receive FIFO becomes full</description>
                <name>B_0x5</name>
                <value>0x5</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RXFTCFG</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1C</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RXFIFO threshold interrupt enable
            This bit is set and cleared by software.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Interrupt inhibited</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART interrupt generated when Receive FIFO reaches the threshold programmed in RXFTCFG.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RXFTIE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1D</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>TXFIFO threshold configuration
            Remaining combinations: Reserved</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>TXFIFO reaches 1/8 of its depth</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>TXFIFO reaches 1/4 of its depth</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>TXFIFO reaches 1/2 of its depth</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>TXFIFO reaches 3/4 of its depth</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>TXFIFO reaches 7/8 of its depth</description>
                <name>B_0x4</name>
                <value>0x4</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>TXFIFO becomes empty</description>
                <name>B_0x5</name>
                <value>0x5</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TXFTCFG</name>
          </field>
        </fields>
        <name>CR3</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0xC</addressOffset>
        <description>Baud rate register</description>
        <displayName>BRR</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x10</bitWidth>
            <description>USART baud rate</description>
            <name>BRR</name>
          </field>
        </fields>
        <name>BRR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x10</addressOffset>
        <description>Guard time and prescaler
                  register</description>
        <displayName>GTPR</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>Prescaler value
            In IrDA low-power and normal IrDA mode:
            PSC[7:0] = IrDA Normal and Low-Power baud rate
            PSC[7:0] is used to program the prescaler for dividing the USART source clock to achieve the low-power frequency: the source clock is divided by the value given in the register (8 significant bits):
            In Smartcard mode:
            PSC[4:0]Â =Â Prescaler value
            PSC[4:0] is used to program the prescaler for dividing the USART source clock to provide the Smartcard clock. The value given in the register (5 significant bits) is multiplied by 2 to give the division factor of the source clock frequency:
            ...
            0010Â 0000: Divides the source clock by 32 (IrDA mode)
            ...
            1111Â 1111: Divides the source clock by 255 (IrDA mode)
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).
            Note: Bits [7:5] must be kept cleared if Smartcard mode is used.
            This bitfield is reserved and forced by hardware to '0â when the Smartcard and IrDA modes are not supported. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Reserved - do not program this value</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Divides the source clock by 1 (IrDA mode) / by 2 (Smarcard mode)</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Divides the source clock by 2 (IrDA mode) / by 4 (Smartcard mode)</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Divides the source clock by 3 (IrDA mode) / by 6 (Smartcard mode)</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Divides the source clock by 31 (IrDA mode) / by 62 (Smartcard mode)</description>
                <name>B_0x1F</name>
                <value>0x1F</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>PSC</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>Guard time value
            This bitfield is used to program the Guard time value in terms of number of baud clock periods.
            This is used in Smartcard mode. The Transmission Complete flag is set after this guard time value.
            This bitfield can only be written when the USART is disabled (UEÂ =Â 0).
            Note: If Smartcard mode is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <name>GT</name>
          </field>
        </fields>
        <name>GTPR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x14</addressOffset>
        <description>Receiver timeout register</description>
        <displayName>RTOR</displayName>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x18</bitWidth>
            <description>Receiver timeout value</description>
            <name>RTO</name>
          </field>
        </fields>
        <fields>
          <field>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x8</bitWidth>
            <description>Block Length</description>
            <name>BLEN</name>
          </field>
        </fields>
        <name>RTOR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>write-only</access>
        <addressOffset>0x18</addressOffset>
        <description>Request register</description>
        <displayName>RQR</displayName>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Auto baud rate request
            Writing 1 to this bit resets the ABRF flag in the USART_ISR and requests an automatic baud rate measurement on the next received data frame.
            Note: If the USART does not support the auto baud rate feature, this bit is reserved and must be kept at reset value. Refer to .</description>
            <name>ABRRQ</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Send break request
            Writing 1 to this bit sets the SBKF flag and request to send a BREAK on the line, as soon as the transmit machine is available.
            Note: When the application needs to send the break character following all previously inserted data, including the ones not yet transmitted, the software should wait for the TXE flag assertion before setting the SBKRQ bit.</description>
            <name>SBKRQ</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Mute mode request
            Writing 1 to this bit puts the USART in Mute mode and resets the RWU flag.</description>
            <name>MMRQ</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receive data flush request
            Writing 1 to this bit empties the entire receive FIFO i.e. clears the bit RXFNE.
            This enables to discard the received data without reading them, and avoid an overrun condition.</description>
            <name>RXFRQ</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmit data flush request
            When FIFO mode is disabled, writing '1â to this bit sets the TXE flag. This enables to discard the transmit data. This bit must be used only in Smartcard mode, when data have not been sent due to errors (NACK) and the FE flag is active in the USART_ISR register. If the USART does not support Smartcard mode, this bit is reserved and must be kept at reset value.
            When FIFO is enabled, TXFRQ bit is set to flush the whole FIFO. This sets the TXFE flag (Transmit FIFO empty, bit 23 in the USART_ISR register). Flushing the Transmit FIFO is supported in both UART and Smartcard modes.
            Note: In FIFO mode, the TXFNF flag is reset during the flush request until TxFIFO is empty in order to ensure that no data are written in the data register.</description>
            <name>TXFRQ</name>
          </field>
        </fields>
        <name>RQR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-only</access>
        <addressOffset>0x1C</addressOffset>
        <description>Interrupt &amp; status
                  register</description>
        <displayName>ISR_FIFO_ENABLED</displayName>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Parity error
            This bit is set by hardware when a parity error occurs in receiver mode. It is cleared by software, writing 1 to the PECF in the USART_ICR register.
            An interrupt is generated if PEIE = 1 in the USART_CR1 register.
            Note: This error is associated with the character in the USART_RDR.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No parity error</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Parity error</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>PE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Framing error
            This bit is set by hardware when a de-synchronization, excessive noise or a break character is detected. It is cleared by software, writing 1 to the FECF bit in the USART_ICR register.
            When transmitting data in Smartcard mode, this bit is set when the maximum number of transmit attempts is reached without success (the card NACKs the data frame).
            An interrupt is generated if EIEÂ =Â 1 in the USART_CR1 register.
            Note: This error is associated with the character in the USART_RDR.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No Framing error is detected</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Framing error or break character is detected</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>FE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Noise detection flag
            This bit is set by hardware when noise is detected on a received frame. It is cleared by software, writing 1 to the NECF bit in the USART_ICR register.
            Note: This bit does not generate an interrupt as it appears at the same time as the RXFNE bit which itself generates an interrupt. An interrupt is generated when the NE flag is set during multi buffer communication if the EIE bit is set.
            When the line is noise-free, the NE flag can be disabled by programming the ONEBIT bit to 1 to increase the USART tolerance to deviations (Refer to Tolerance of the USART receiver to clock deviation on pageÂ 861).
            This error is associated with the character in the USART_RDR.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No noise is detected</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Noise is detected</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>NE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Overrun error
            This bit is set by hardware when the data currently being received in the shift register is
            ready to be transferred into the USART_RDR register while RXFF = 1. It is cleared by a software, writing 1 to the ORECF, in the USART_ICR register.
            An interrupt is generated if RXFNEIEÂ =Â 1 or EIE = 1 in the USART_CR1 register.
            Note: When this bit is set, the USART_RDR register content is not lost but the shift register is overwritten. An interrupt is generated if the ORE flag is set during multi buffer communication if the EIE bit is set.
            This bit is permanently forced to 0 (no overrun detection) when the bit OVRDIS is set in the USART_CR3 register.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No overrun error</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Overrun error is detected</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>ORE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Idle line detected
            This bit is set by hardware when an Idle Line is detected. An interrupt is generated if IDLEIEÂ =Â 1 in the USART_CR1 register. It is cleared by software, writing 1 to the IDLECF in the USART_ICR register.
            Note: The IDLE bit is not set again until the RXFNE bit has been set (i.e. a new idle line occurs).
            If Mute mode is enabled (MMEÂ =Â 1), IDLE is set if the USART is not mute (RWUÂ =Â 0), whatever the Mute mode selected by the WAKE bit. If RWUÂ =Â 1, IDLE is not set.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No Idle line is detected</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Idle line is detected</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>IDLE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RXFIFO not empty
            RXFNE bit is set by hardware when the RXFIFO is not empty, meaning that data can be read from the USART_RDR register. Every read operation from the USART_RDR frees a location in the RXFIFO.
            RXFNE is cleared when the RXFIFO is empty. The RXFNE flag can also be cleared by writing 1 to the RXFRQ in the USART_RQR register.
            An interrupt is generated if RXFNEIEÂ =Â 1 in the USART_CR1 register.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Data is not received</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Received data is ready to be read.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RXFNE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmission complete
            This bit indicates that the last data written in the USART_TDR has been transmitted out of the shift register.
            It is set by hardware when the transmission of a frame containing data is complete and when TXFE is set.
            An interrupt is generated if TCIEÂ =Â 1 in the USART_CR1 register.
            TC bit is is cleared by software, by writing 1 to the TCCF in the USART_ICR register or by a write to the USART_TDR register.
            Note: If TE bit is reset and no transmission is on going, the TC bit is immediately set.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Transmission is not complete</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Transmission is complete</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TC</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>TXFIFO not full
            TXFNF is set by hardware when TXFIFO is not full meaning that data can be written in the USART_TDR. Every write operation to the USART_TDR places the data in the TXFIFO. This flag remains set until the TXFIFO is full. When the TXFIFO is full, this flag is cleared indicating that data can not be written into the USART_TDR.
            An interrupt is generated if the TXFNFIE bit =1 in the USART_CR1 register.
            Note: The TXFNF is kept reset during the flush request until TXFIFO is empty. After sending the flush request (by setting TXFRQ bit), the flag TXFNF should be checked prior to writing in TXFIFO (TXFNF and TXFE are set at the same time).
            This bit is used during single buffer transmission.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Transmit FIFO is full</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Transmit FIFO is not full</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TXFNF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>LIN break detection flag
            This bit is set by hardware when the LIN break is detected. It is cleared by software, by writing 1 to the LBDCF in the USART_ICR.
            An interrupt is generated if LBDIE = 1 in the USART_CR2 register.
            Note: If the USART does not support LIN mode, this bit is reserved and kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>LIN Break not detected</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>LIN break detected</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>LBDF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>CTS interrupt flag
            This bit is set by hardware when the nCTS input toggles, if the CTSE bit is set. It is cleared by software, by writing 1 to the CTSCF bit in the USART_ICR register.
            An interrupt is generated if CTSIEÂ =Â 1 in the USART_CR3 register.
            Note: If the hardware flow control feature is not supported, this bit is reserved and kept at reset value.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No change occurred on the nCTS status line</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>A change occurred on the nCTS status line</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CTSIF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>CTS flag
            This bit is set/reset by hardware. It is an inverted copy of the status of the nCTS input pin.
            Note: If the hardware flow control feature is not supported, this bit is reserved and kept at reset value.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>nCTS line set</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>nCTS line reset</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CTS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receiver timeout
            This bit is set by hardware when the timeout value, programmed in the RTOR register has lapsed, without any communication. It is cleared by software, writing 1 to the RTOCF bit in the USART_ICR register.
            An interrupt is generated if RTOIEÂ =Â 1 in the USART_CR2 register.
            In Smartcard mode, the timeout corresponds to the CWT or BWT timings.
            Note: If a time equal to the value programmed in RTOR register separates 2 characters, RTOF is not set. If this time exceeds this value + 2 sample times (2/16 or 2/8, depending on the oversampling method), RTOF flag is set.
            The counter counts even if RE = 0 but RTOF is set only when RE = 1. If the timeout has already elapsed when RE is set, then RTOF is set.
            If the USART does not support the Receiver timeout feature, this bit is reserved and kept at reset value.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Timeout value not reached</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Timeout value reached without any data reception</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RTOF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>End of block flag
            This bit is set by hardware when a complete block has been received (for example TÂ =Â 1 Smartcard mode). The detection is done when the number of received bytes (from the start of the block, including the prologue) is equal or greater than BLEN + 4.
            An interrupt is generated if the EOBIEÂ =Â 1 in the USART_CR2 register.
            It is cleared by software, writing 1 to the EOBCF in the USART_ICR register.
            Note: If Smartcard mode is not supported, this bit is reserved and kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>End of Block not reached</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>End of Block (number of characters) reached</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>EOBF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI slave underrun error flag
            In slave transmission mode, this flag is set when the first clock pulse for data transmission appears while the software has not yet loaded any value into USART_TDR. This flag is reset by setting UDRCF bit in the USART_ICR register.
            Note: If the USART does not support the SPI slave mode, this bit is reserved and kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No underrun error</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>underrun error</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>UDR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Auto baud rate error
            This bit is set by hardware if the baud rate measurement failed (baud rate out of range or character comparison failed)
            It is cleared by software, by writing 1 to the ABRRQ bit in the USART_CR3 register.
            Note: If the USART does not support the auto baud rate feature, this bit is reserved and kept at reset value.</description>
            <name>ABRE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Auto baud rate flag
            This bit is set by hardware when the automatic baud rate has been set (RXFNE is also set, generating an interrupt if RXFNEIE = 1) or when the auto baud rate operation was completed without success (ABREÂ =Â 1) (ABRE, RXFNE and FE are also set in this case)
            It is cleared by software, in order to request a new auto baud rate detection, by writing 1 to the ABRRQ in the USART_RQR register.
            Note: If the USART does not support the auto baud rate feature, this bit is reserved and kept at reset value.</description>
            <name>ABRF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Busy flag
            This bit is set and reset by hardware. It is active when a communication is ongoing on the RX line (successful start bit detected). It is reset at the end of the reception (successful or not).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART is idle (no reception)</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Reception on going</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>BUSY</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Character match flag
            This bit is set by hardware, when a the character defined by ADD[7:0] is received. It is cleared by software, writing 1 to the CMCF in the USART_ICR register.
            An interrupt is generated if CMIEÂ =Â 1in the USART_CR1 register.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No Character match detected</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Character Match detected</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CMF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Send break flag
            This bit indicates that a send break character was requested. It is set by software, by writing 1 to the SBKRQ bit in the USART_CR3 register. It is automatically reset by hardware during the stop bit of break transmission.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Break character transmitted</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Break character requested by setting SBKRQ bit in USART_RQR register</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>SBKF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receiver wakeup from Mute mode
            This bit indicates if the USART is in Mute mode. It is cleared/set by hardware when a wakeup/mute sequence is recognized. The Mute mode control sequence (address or IDLE) is selected by the WAKE bit in the USART_CR1 register.
            When wakeup on IDLE mode is selected, this bit can only be set by software, writing 1 to the MMRQ bit in the USART_RQR register.
            Note: If the USART does not support the wakeup from Stop feature, this bit is reserved and kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receiver in active mode</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receiver in Mute mode</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RWU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Wakeup from low-power mode flag
            This bit is set by hardware, when a wakeup event is detected. The event is defined by the WUS bitfield. It is cleared by software, writing a 1 to the WUCF in the USART_ICR register.
            An interrupt is generated if WUFIEÂ =Â 1 in the USART_CR3 register.
            Note: When UESM is cleared, WUF flag is also cleared.
            If the USART does not support the wakeup from Stop feature, this bit is reserved and kept at reset value. Refer to .</description>
            <name>WUF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmit enable acknowledge flag
            This bit is set/reset by hardware, when the Transmit Enable value is taken into account by the USART.
            It can be used when an idle frame request is generated by writing TEÂ =Â 0, followed by TEÂ =Â 1 in the USART_CR1 register, in order to respect the TEÂ =Â 0 minimum period.</description>
            <name>TEACK</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receive enable acknowledge flag
            This bit is set/reset by hardware, when the Receive Enable value is taken into account by the USART.
            It can be used to verify that the USART is ready for reception before entering low-power mode.
            Note: If the USART does not support the wakeup from Stop feature, this bit is reserved and kept at reset value. Refer to .</description>
            <name>REACK</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x17</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>TXFIFO empty
            This bit is set by hardware when TXFIFO is empty. When the TXFIFO contains at least one data, this flag is cleared. The TXFE flag can also be set by writing 1 to the bit TXFRQ (bit 4) in the USART_RQR register.
            An interrupt is generated if the TXFEIE bit Â =Â 1 (bit 30) in the USART_CR1 register.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>TXFIFO not empty.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>TXFIFO empty.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TXFE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x18</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RXFIFO full
            This bit is set by hardware when the number of received data corresponds to RXFIFOÂ sizeÂ +Â 1 (RXFIFO full + 1 data in the USART_RDR register.
            An interrupt is generated if the RXFFIE bit Â =Â 1 in the USART_CR1 register.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>RXFIFO not full.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>RXFIFO Full.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RXFF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmission complete before guard time flag
            This bit is set when the last data written in the USART_TDR has been transmitted correctly out of the shift register.
            It is set by hardware in Smartcard mode, if the transmission of a frame containing data is complete and if the smartcard did not send back any NACK. An interrupt is generated if TCBGTIEÂ =Â 1 in the USART_CR3 register.
            This bit is cleared by software, by writing 1 to the TCBGTCF in the USART_ICR register or by a write to the USART_TDR register.
            Note: If the USART does not support the Smartcard mode, this bit is reserved and kept at reset value. If the USART supports the Smartcard mode and the Smartcard mode is enabled, the TCBGT reset value is '1â. Refer to on pageÂ 835.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Transmission is not complete or transmission is complete unsuccessfully (i.e. a NACK is received from the card)</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Transmission is complete successfully (before Guard time completion and there is no NACK from the smart card).</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TCBGT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1A</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>RXFIFO threshold flag
            This bit is set by hardware when the threshold programmed in RXFTCFG in USART_CR3 register is reached. This means that there are (RXFTCFG - 1) data in the Receive FIFO and one data in the USART_RDR register. An interrupt is generated if the RXFTIE bit Â =Â 1 (bit 27) in the USART_CR3 register.
            Note: When the RXFTCFG threshold is configured to '101â, RXFT flag is set if 16 data are available i.e. 15 data in the RXFIFO and 1 data in the USART_RDR. Consequently, the 17th received data does not cause an overrun error. The overrun error occurs after receiving the 18th data.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receive FIFO does not reach the programmed threshold.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receive FIFO reached the programmed threshold.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RXFT</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1B</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>TXFIFO threshold flag
            This bit is set by hardware when the TXFIFO reaches the threshold programmed in TXFTCFG of USART_CR3 register i.e. the TXFIFO contains TXFTCFG empty locations. An interrupt is generated if the TXFTIE bit Â =Â 1 (bit 31) in the USART_CR3 register.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>TXFIFO does not reach the programmed threshold.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>TXFIFO reached the programmed threshold.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TXFT</name>
          </field>
        </fields>
        <name>ISR_FIFO_ENABLED</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x8000C0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-only</access>
        <addressOffset>0x1C</addressOffset>
        <description>Interrupt &amp; status
                  register</description>
        <displayName>ISR_FIFO_DISABLED</displayName>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Parity error
            This bit is set by hardware when a parity error occurs in receiver mode. It is cleared by software, writing 1 to the PECF in the USART_ICR register.
            An interrupt is generated if PEIE = 1 in the USART_CR1 register.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No parity error</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Parity error</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>PE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Framing error
            This bit is set by hardware when a de-synchronization, excessive noise or a break character is detected. It is cleared by software, writing 1 to the FECF bit in the USART_ICR register.
            When transmitting data in Smartcard mode, this bit is set when the maximum number of transmit attempts is reached without success (the card NACKs the data frame).
            An interrupt is generated if EIEÂ =Â 1 in the USART_CR1 register.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No Framing error is detected</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Framing error or break character is detected</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>FE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Noise detection flag
            This bit is set by hardware when noise is detected on a received frame. It is cleared by software, writing 1 to the NECF bit in the USART_ICR register.
            Note: This bit does not generate an interrupt as it appears at the same time as the RXNE bit which itself generates an interrupt. An interrupt is generated when the NE flag is set during multi buffer communication if the EIE bit is set.
            When the line is noise-free, the NE flag can be disabled by programming the ONEBIT bit to 1 to increase the USART tolerance to deviations (Refer to Tolerance of the USART receiver to clock deviation on pageÂ 861).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No noise is detected</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Noise is detected</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>NE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Overrun error
            This bit is set by hardware when the data currently being received in the shift register is
            ready to be transferred into the USART_RDR register while RXNEÂ =Â 1. It is cleared by a software, writing 1 to the ORECF, in the USART_ICR register.
            An interrupt is generated if RXNEIEÂ =Â 1 or EIE Â =Â  1 in the USART_CR1 register.
            Note: When this bit is set, the USART_RDR register content is not lost but the shift register is overwritten. An interrupt is generated if the ORE flag is set during multi buffer communication if the EIE bit is set.
            This bit is permanently forced to 0 (no overrun detection) when the bit OVRDIS is set in the USART_CR3 register.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No overrun error</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Overrun error is detected</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>ORE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Idle line detected
            This bit is set by hardware when an Idle Line is detected. An interrupt is generated if IDLEIEÂ =Â 1 in the USART_CR1 register. It is cleared by software, writing 1 to the IDLECF in the USART_ICR register.
            Note: The IDLE bit is not set again until the RXNE bit has been set (i.e. a new idle line occurs).
            If Mute mode is enabled (MMEÂ =Â 1), IDLE is set if the USART is not mute (RWUÂ =Â 0), whatever the Mute mode selected by the WAKE bit. If RWUÂ =Â 1, IDLE is not set.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No Idle line is detected</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Idle line is detected</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>IDLE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Read data register not empty
            RXNE bit is set by hardware when the content of the USART_RDR shift register has been transferred to the USART_RDR register. It is cleared by reading from the USART_RDR register. The RXNE flag can also be cleared by writing 1 to the RXFRQ in the USART_RQR register.
            An interrupt is generated if RXNEIEÂ =Â 1 in the USART_CR1 register.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Data is not received</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Received data is ready to be read.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RXNE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmission complete
            This bit indicates that the last data written in the USART_TDR has been transmitted out of the shift register.
            It is set by hardware when the transmission of a frame containing data is complete and when TXE is set.
            An interrupt is generated if TCIEÂ =Â 1 in the USART_CR1 register.
            TC bit is is cleared by software, by writing 1 to the TCCF in the USART_ICR register or by a write to the USART_TDR register.
            Note: If TE bit is reset and no transmission is on going, the TC bit is set immediately.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Transmission is not complete</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Transmission is complete</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TC</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmit data register empty
            TXE is set by hardware when the content of the USART_TDR register has been transferred into the shift register. It is cleared by writing to the USART_TDR register. The TXE flag can also be set by writing 1 to the TXFRQ in the USART_RQR register, in order to discard the data (only in Smartcard TÂ =Â 0 mode, in case of transmission failure).
            An interrupt is generated if the TXEIE bit Â =Â 1 in the USART_CR1 register.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Data register full</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Data register not full</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TXE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>LIN break detection flag
            This bit is set by hardware when the LIN break is detected. It is cleared by software, by writing 1 to the LBDCF in the USART_ICR.
            An interrupt is generated if LBDIE = 1 in the USART_CR2 register.
            Note: If the USART does not support LIN mode, this bit is reserved and kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>LIN Break not detected</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>LIN break detected</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>LBDF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>CTS interrupt flag
            This bit is set by hardware when the nCTS input toggles, if the CTSE bit is set. It is cleared by software, by writing 1 to the CTSCF bit in the USART_ICR register.
            An interrupt is generated if CTSIEÂ =Â 1 in the USART_CR3 register.
            Note: If the hardware flow control feature is not supported, this bit is reserved and kept at reset value.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No change occurred on the nCTS status line</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>A change occurred on the nCTS status line</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CTSIF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xA</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>CTS flag
            This bit is set/reset by hardware. It is an inverted copy of the status of the nCTS input pin.
            Note: If the hardware flow control feature is not supported, this bit is reserved and kept at reset value.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>nCTS line set</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>nCTS line reset</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CTS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receiver timeout
            This bit is set by hardware when the timeout value, programmed in the RTOR register has lapsed, without any communication. It is cleared by software, writing 1 to the RTOCF bit in the USART_ICR register.
            An interrupt is generated if RTOIEÂ =Â 1 in the USART_CR2 register.
            In Smartcard mode, the timeout corresponds to the CWT or BWT timings.
            Note: If a time equal to the value programmed in RTOR register separates 2 characters, RTOF is not set. If this time exceeds this value + 2 sample times (2/16 or 2/8, depending on the oversampling method), RTOF flag is set.
            The counter counts even if RE = 0 but RTOF is set only when RE = 1. If the timeout has already elapsed when RE is set, then RTOF is set.
            If the USART does not support the Receiver timeout feature, this bit is reserved and kept at reset value.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Timeout value not reached</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Timeout value reached without any data reception</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RTOF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>End of block flag
            This bit is set by hardware when a complete block has been received (for example TÂ =Â 1 Smartcard mode). The detection is done when the number of received bytes (from the start of the block, including the prologue) is equal or greater than BLEN + 4.
            An interrupt is generated if the EOBIEÂ =Â 1 in the USART_CR2 register.
            It is cleared by software, writing 1 to the EOBCF in the USART_ICR register.
            Note: If Smartcard mode is not supported, this bit is reserved and kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>End of Block not reached</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>End of Block (number of characters) reached</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>EOBF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI slave underrun error flag
            In slave transmission mode, this flag is set when the first clock pulse for data transmission appears while the software has not yet loaded any value into USART_TDR. This flag is reset by setting UDRCF bit in the USART_ICR register.
            Note: If the USART does not support the SPI slave mode, this bit is reserved and kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No underrun error</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>underrun error</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>UDR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xE</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Auto baud rate error
            This bit is set by hardware if the baud rate measurement failed (baud rate out of range or character comparison failed)
            It is cleared by software, by writing 1 to the ABRRQ bit in the USART_CR3 register.
            Note: If the USART does not support the auto baud rate feature, this bit is reserved and kept at reset value.</description>
            <name>ABRE</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0xF</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Auto baud rate flag
            This bit is set by hardware when the automatic baud rate has been set (RXNE is also set, generating an interrupt if RXNEIE = 1) or when the auto baud rate operation was completed without success (ABREÂ =Â 1) (ABRE, RXNE and FE are also set in this case)
            It is cleared by software, in order to request a new auto baud rate detection, by writing 1 to the ABRRQ in the USART_RQR register.
            Note: If the USART does not support the auto baud rate feature, this bit is reserved and kept at reset value.</description>
            <name>ABRF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x10</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Busy flag
            This bit is set and reset by hardware. It is active when a communication is ongoing on the RX line (successful start bit detected). It is reset at the end of the reception (successful or not).</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>USART is idle (no reception)</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Reception on going</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>BUSY</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Character match flag
            This bit is set by hardware, when a the character defined by ADD[7:0] is received. It is cleared by software, writing 1 to the CMCF in the USART_ICR register.
            An interrupt is generated if CMIEÂ =Â 1in the USART_CR1 register.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>No Character match detected</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Character Match detected</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>CMF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x12</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Send break flag
            This bit indicates that a send break character was requested. It is set by software, by writing 1 to the SBKRQ bit in the USART_CR3 register. It is automatically reset by hardware during the stop bit of break transmission.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Break character transmitted</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Break character requested by setting SBKRQ bit in USART_RQR register</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>SBKF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x13</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receiver wakeup from Mute mode
            This bit indicates if the USART is in Mute mode. It is cleared/set by hardware when a wakeup/mute sequence is recognized. The Mute mode control sequence (address or IDLE) is selected by the WAKE bit in the USART_CR1 register.
            When wakeup on IDLE mode is selected, this bit can only be set by software, writing 1 to the MMRQ bit in the USART_RQR register.
            Note: If the USART does not support the wakeup from Stop feature, this bit is reserved and kept at reset value. Refer to .</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receiver in active mode</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Receiver in Mute mode</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>RWU</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Wakeup from low-power mode flag
            This bit is set by hardware, when a wakeup event is detected. The event is defined by the WUS bitfield. It is cleared by software, writing a 1 to the WUCF in the USART_ICR register.
            An interrupt is generated if WUFIEÂ =Â 1 in the USART_CR3 register.
            Note: When UESM is cleared, WUF flag is also cleared.
            If the USART does not support the wakeup from Stop feature, this bit is reserved and kept at reset value. Refer to .</description>
            <name>WUF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x15</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmit enable acknowledge flag
            This bit is set/reset by hardware, when the Transmit Enable value is taken into account by the USART.
            It can be used when an idle frame request is generated by writing TEÂ =Â 0, followed by TEÂ =Â 1 in the USART_CR1 register, in order to respect the TEÂ =Â 0 minimum period.</description>
            <name>TEACK</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x16</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receive enable acknowledge flag
            This bit is set/reset by hardware, when the Receive Enable value is taken into account by the USART.
            It can be used to verify that the USART is ready for reception before entering low-power mode.
            Note: If the USART does not support the wakeup from Stop feature, this bit is reserved and kept at reset value. Refer to .</description>
            <name>REACK</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x19</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmission complete before guard time flag
            This bit is set when the last data written in the USART_TDR has been transmitted correctly out of the shift register.
            It is set by hardware in Smartcard mode, if the transmission of a frame containing data is complete and if the smartcard did not send back any NACK. An interrupt is generated if TCBGTIEÂ =Â 1 in the USART_CR3 register.
            This bit is cleared by software, by writing 1 to the TCBGTCF in the USART_ICR register or by a write to the USART_TDR register.
            Note: If the USART does not support the Smartcard mode, this bit is reserved and kept at reset value. If the USART supports the Smartcard mode and the Smartcard mode is enabled, the TCBGT reset value is '1â. Refer to on pageÂ 835.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Transmission is not complete or transmission is complete unsuccessfully (i.e. a NACK is received from the card)</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Transmission is complete successfully (before Guard time completion and there is no NACK from the smart card).</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>TCBGT</name>
          </field>
        </fields>
        <name>ISR_FIFO_DISABLED</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0xC0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>write-only</access>
        <addressOffset>0x20</addressOffset>
        <description>Interrupt flag clear register</description>
        <displayName>ICR</displayName>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Parity error clear flag
            Writing 1 to this bit clears the PE flag in the USART_ISR register.</description>
            <name>PECF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Framing error clear flag
            Writing 1 to this bit clears the FE flag in the USART_ISR register.</description>
            <name>FECF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Noise detected clear flag
            Writing 1 to this bit clears the NE flag in the USART_ISR register.</description>
            <name>NECF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Overrun error clear flag
            Writing 1 to this bit clears the ORE flag in the USART_ISR register.</description>
            <name>ORECF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x4</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Idle line detected clear flag
            Writing 1 to this bit clears the IDLE flag in the USART_ISR register.</description>
            <name>IDLECF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x5</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>TXFIFO empty clear flag
            Writing 1 to this bit clears the TXFE flag in the USART_ISR register.</description>
            <name>TXFECF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x6</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmission complete clear flag
            Writing 1 to this bit clears the TC flag in the USART_ISR register.</description>
            <name>TCCF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Transmission complete before Guard time clear flag
            Writing 1 to this bit clears the TCBGT flag in the USART_ISR register.</description>
            <name>TCBGTCF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x8</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>LIN break detection clear flag
            Writing 1 to this bit clears the LBDF flag in the USART_ISR register.
            Note: If LIN mode is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <name>LBDCF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>CTS clear flag
            Writing 1 to this bit clears the CTSIF flag in the USART_ISR register.
            Note: If the hardware flow control feature is not supported, this bit is reserved and must be kept at reset value. Refer to .</description>
            <name>CTSCF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Receiver timeout clear flag
            Writing 1 to this bit clears the RTOF flag in the USART_ISR register.
            Note: If the USART does not support the Receiver timeout feature, this bit is reserved and must be kept at reset value. Refer to pageÂ 835.</description>
            <name>RTOCF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0xC</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>End of block clear flag
            Writing 1 to this bit clears the EOBF flag in the USART_ISR register.
            Note: If the USART does not support Smartcard mode, this bit is reserved and must be kept at reset value. Refer to .</description>
            <name>EOBCF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0xD</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>SPI slave underrun clear flag
            Writing 1 to this bit clears the UDRF flag in the USART_ISR register.
            Note: If the USART does not support SPI slave mode, this bit is reserved and must be kept at reset value. Refer to</description>
            <name>UDRCF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x11</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Character match clear flag
            Writing 1 to this bit clears the CMF flag in the USART_ISR register.</description>
            <name>CMCF</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>write-only</access>
            <bitOffset>0x14</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Wakeup from low-power mode clear flag
            Writing 1 to this bit clears the WUF flag in the USART_ISR register.
            Note: If the USART does not support the wakeup from Stop feature, this bit is reserved and must be kept at reset value. Refer to pageÂ 835.</description>
            <name>WUCF</name>
          </field>
        </fields>
        <name>ICR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-only</access>
        <addressOffset>0x24</addressOffset>
        <description>Receive data register</description>
        <displayName>RDR</displayName>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>Receive data value</description>
            <name>RDR</name>
          </field>
        </fields>
        <name>RDR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x28</addressOffset>
        <description>Transmit data register</description>
        <displayName>TDR</displayName>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x9</bitWidth>
            <description>Transmit data value</description>
            <name>TDR</name>
          </field>
        </fields>
        <name>TDR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x2C</addressOffset>
        <description>Prescaler register</description>
        <displayName>PRESC</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x4</bitWidth>
            <description>Clock prescaler
            The USART input clock can be divided by a prescaler factor:
            Remaining combinations: Reserved
            Note: When PRESCALER is programmed with a value different of the allowed ones, programmed prescaler value is 1011 i.e. input clock divided by 256.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>input clock not divided</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>input clock divided by 2</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>input clock divided by 4</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>input clock divided by 6</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>input clock divided by 8</description>
                <name>B_0x4</name>
                <value>0x4</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>input clock divided by 10</description>
                <name>B_0x5</name>
                <value>0x5</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>input clock divided by 12</description>
                <name>B_0x6</name>
                <value>0x6</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>input clock divided by 16</description>
                <name>B_0x7</name>
                <value>0x7</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>input clock divided by 32</description>
                <name>B_0x8</name>
                <value>0x8</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>input clock divided by 64</description>
                <name>B_0x9</name>
                <value>0x9</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>input clock divided by 128</description>
                <name>B_0xA</name>
                <value>0xA</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>input clock divided by 256</description>
                <name>B_0xB</name>
                <value>0xB</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>PRESCALER</name>
          </field>
        </fields>
        <name>PRESC</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <resetMask>0xFFFFFFFF</resetMask>
    <resetValue>0x0</resetValue>
    <size>0x20</size>
  </peripheral>
</peripherals>
<peripherals>
  <peripheral>
    <addressBlock>
      <offset>0x0</offset>
      <size>0x400</size>
      <usage>registers</usage>
    </addressBlock>
    <baseAddress>0x40010030</baseAddress>
    <description>System configuration controller</description>
    <groupName>VREFBUF</groupName>
    <interrupts></interrupts>
    <name>VREFBUF</name>
    <registers>
      <register>
        <addressOffset>0x0</addressOffset>
        <description>VREFBUF control and status
                  register</description>
        <displayName>VREFBUF_CSR</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Voltage reference buffer mode enable
            This bit is used to enable the voltage reference buffer mode.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Internal voltage reference mode disable (external voltage reference mode).</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Internal voltage reference mode (reference buffer enable or hold mode) enable.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>ENVR</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x1</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>High impedance mode
            This bit controls the analog switch to connect or not the VREF+ pin.
            Refer to  for the mode descriptions depending on ENVR bit configuration.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>VREF+ pin is internally connected to the voltage reference buffer output.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>VREF+ pin is high impedance.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>HIZ</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x2</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Voltage reference scale
            This bit selects the value generated by the voltage reference buffer.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Voltage reference set to VREF_OUT1 (around 2.048 V). </description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Voltage reference set to VREF_OUT2 (around 2.5 V). </description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>VRS</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-only</access>
            <bitOffset>0x3</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Voltage reference buffer ready</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>the voltage reference buffer output is not ready.</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>the voltage reference buffer output reached the requested level.</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>VRR</name>
          </field>
        </fields>
        <name>VREFBUF_CSR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x2</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x4</addressOffset>
        <description>VREFBUF calibration control
                  register</description>
        <displayName>VREFBUF_CCR</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x6</bitWidth>
            <description>Trimming code
            These bits are automatically initialized after reset with the trimming value stored in the Flash memory during the production test. Writing into these bits allows the tuning of the internal reference buffer voltage.</description>
            <name>TRIM</name>
          </field>
        </fields>
        <name>VREFBUF_CCR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <resetMask>0xFFFFFFFF</resetMask>
    <resetValue>0x0</resetValue>
    <size>0x20</size>
  </peripheral>
</peripherals>
<peripherals>
  <peripheral>
    <addressBlock>
      <offset>0x0</offset>
      <size>0x400</size>
      <usage>registers</usage>
    </addressBlock>
    <baseAddress>0x40002C00</baseAddress>
    <description>System window watchdog</description>
    <groupName>WWDG</groupName>
    <interrupts>
      <interrupt>
        <name>WWDG</name>
        <value>0x0</value>
      </interrupt>
    </interrupts>
    <name>WWDG</name>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x0</addressOffset>
        <description>Control register</description>
        <displayName>WWDG_CR</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x7</bitWidth>
            <description>7-bit counter (MSB to LSB)
            These bits contain the value of the watchdog counter, decremented every
            (4096 x 2WDGTB[1:0]) PCLK cycles. A reset is produced when it is decremented from 0x40 to 0x3F (T6 becomes cleared).</description>
            <name>T</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x7</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Activation bit
            This bit is set by software and only cleared by hardware after a reset. When WDGAÂ =Â 1, the watchdog can generate a reset.</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>Watchdog disabled</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>Watchdog enabled</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>WDGA</name>
          </field>
        </fields>
        <name>WWDG_CR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x7F</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x4</addressOffset>
        <description>Configuration register</description>
        <displayName>WWDG_CFR</displayName>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x7</bitWidth>
            <description>7-bit window value
            These bits contain the window value to be compared with the down-counter.</description>
            <name>W</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0x9</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Early wakeup interrupt
            When set, an interrupt occurs whenever the counter reaches the value 0x40. This interrupt is only cleared by hardware after a reset.</description>
            <name>EWI</name>
          </field>
        </fields>
        <fields>
          <field>
            <access>read-write</access>
            <bitOffset>0xB</bitOffset>
            <bitWidth>0x3</bitWidth>
            <description>Timer base
            The timebase of the prescaler can be modified as follows:</description>
            <enumeratedValues>
              <enumeratedValue>
                <description>CK Counter Clock (PCLK div 4096) div 1</description>
                <name>B_0x0</name>
                <value>0x0</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CK Counter Clock (PCLK div 4096) div 2</description>
                <name>B_0x1</name>
                <value>0x1</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CK Counter Clock (PCLK div 4096) div 4</description>
                <name>B_0x2</name>
                <value>0x2</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CK Counter Clock (PCLK div 4096) div 8</description>
                <name>B_0x3</name>
                <value>0x3</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CK Counter Clock (PCLK div 4096) div 16</description>
                <name>B_0x4</name>
                <value>0x4</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CK Counter Clock (PCLK div 4096) div 32</description>
                <name>B_0x5</name>
                <value>0x5</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CK Counter Clock (PCLK div 4096) div 64</description>
                <name>B_0x6</name>
                <value>0x6</value>
              </enumeratedValue>
            </enumeratedValues>
            <enumeratedValues>
              <enumeratedValue>
                <description>CK Counter Clock (PCLK div 4096) div 128</description>
                <name>B_0x7</name>
                <value>0x7</value>
              </enumeratedValue>
            </enumeratedValues>
            <name>WDGTB</name>
          </field>
        </fields>
        <name>WWDG_CFR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x7F</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <registers>
      <register>
        <access>read-write</access>
        <addressOffset>0x8</addressOffset>
        <description>Status register</description>
        <displayName>WWDG_SR</displayName>
        <fields>
          <field>
            <bitOffset>0x0</bitOffset>
            <bitWidth>0x1</bitWidth>
            <description>Early wakeup interrupt
                          flag</description>
            <name>EWIF</name>
          </field>
        </fields>
        <name>WWDG_SR</name>
        <resetMask>0xFFFFFFFF</resetMask>
        <resetValue>0x0</resetValue>
        <size>0x20</size>
      </register>
    </registers>
    <resetMask>0xFFFFFFFF</resetMask>
    <resetValue>0x0</resetValue>
    <size>0x20</size>
  </peripheral>
</peripherals>
<resetMask>0xFFFFFFFF</resetMask>
<resetValue>0x0</resetValue>
<size>0x20</size>
<version>1.1</version>
<width>0x20</width></device>